
wipro.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000752  00800200  00002982  00002a16  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002982  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001e7  00800952  00800952  00003168  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003168  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000031c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000560  00000000  00000000  00003204  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000063f9  00000000  00000000  00003764  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000018dc  00000000  00000000  00009b5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000035c2  00000000  00000000  0000b439  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000012d8  00000000  00000000  0000e9fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000db3  00000000  00000000  0000fcd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003f94  00000000  00000000  00010a87  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004d0  00000000  00000000  00014a1b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
       6:	00 00       	nop
       8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
       a:	00 00       	nop
       c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
       e:	00 00       	nop
      10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
      12:	00 00       	nop
      14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
      16:	00 00       	nop
      18:	0c 94 e3 09 	jmp	0x13c6	; 0x13c6 <__vector_6>
      1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
      1e:	00 00       	nop
      20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
      22:	00 00       	nop
      24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
      26:	00 00       	nop
      28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
      2e:	00 00       	nop
      30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
      32:	00 00       	nop
      34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
      36:	00 00       	nop
      38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
      3e:	00 00       	nop
      40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
      42:	00 00       	nop
      44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
      46:	00 00       	nop
      48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
      4e:	00 00       	nop
      50:	0c 94 a8 09 	jmp	0x1350	; 0x1350 <__vector_20>
      54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
      56:	00 00       	nop
      58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
      5e:	00 00       	nop
      60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
      62:	00 00       	nop
      64:	fa c6       	rjmp	.+3572   	; 0xe5a <__vector_25>
      66:	00 00       	nop
      68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
      6e:	00 00       	nop
      70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
      72:	00 00       	nop
      74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
      76:	00 00       	nop
      78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
      7e:	00 00       	nop
      80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
      82:	00 00       	nop
      84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
      86:	00 00       	nop
      88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
      8e:	00 00       	nop
      90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
      92:	00 00       	nop
      94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
      96:	00 00       	nop
      98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
      be:	00 00       	nop
      c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
      da:	00 00       	nop
      dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
      de:	00 00       	nop
      e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
      f0:	19 e0       	ldi	r17, 0x09	; 9
      f2:	a0 e0       	ldi	r26, 0x00	; 0
      f4:	b2 e0       	ldi	r27, 0x02	; 2
      f6:	e2 e8       	ldi	r30, 0x82	; 130
      f8:	f9 e2       	ldi	r31, 0x29	; 41
      fa:	00 e0       	ldi	r16, 0x00	; 0
      fc:	0b bf       	out	0x3b, r16	; 59
      fe:	02 c0       	rjmp	.+4      	; 0x104 <__do_copy_data+0x14>
     100:	07 90       	elpm	r0, Z+
     102:	0d 92       	st	X+, r0
     104:	a2 35       	cpi	r26, 0x52	; 82
     106:	b1 07       	cpc	r27, r17
     108:	d9 f7       	brne	.-10     	; 0x100 <__do_copy_data+0x10>

0000010a <__do_clear_bss>:
     10a:	2b e0       	ldi	r18, 0x0B	; 11
     10c:	a2 e5       	ldi	r26, 0x52	; 82
     10e:	b9 e0       	ldi	r27, 0x09	; 9
     110:	01 c0       	rjmp	.+2      	; 0x114 <.do_clear_bss_start>

00000112 <.do_clear_bss_loop>:
     112:	1d 92       	st	X+, r1

00000114 <.do_clear_bss_start>:
     114:	a9 33       	cpi	r26, 0x39	; 57
     116:	b2 07       	cpc	r27, r18
     118:	e1 f7       	brne	.-8      	; 0x112 <.do_clear_bss_loop>
     11a:	0e 94 4f 11 	call	0x229e	; 0x229e <main>
     11e:	0c 94 bf 14 	jmp	0x297e	; 0x297e <_exit>

00000122 <__bad_interrupt>:
     122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <SPI_EthernetWrite>:
}

uint16_t ReceiveSize(void)
{
	return ((SPI_EthernetRead(S0_RX_RSR) & 0x00FF) << 8 ) + SPI_EthernetRead(S0_RX_RSR + 1);
}
     124:	74 98       	cbi	0x0e, 4	; 14
     126:	20 ef       	ldi	r18, 0xF0	; 240
     128:	2e bd       	out	0x2e, r18	; 46
     12a:	0d b4       	in	r0, 0x2d	; 45
     12c:	07 fe       	sbrs	r0, 7
     12e:	fd cf       	rjmp	.-6      	; 0x12a <SPI_EthernetWrite+0x6>
     130:	9e bd       	out	0x2e, r25	; 46
     132:	0d b4       	in	r0, 0x2d	; 45
     134:	07 fe       	sbrs	r0, 7
     136:	fd cf       	rjmp	.-6      	; 0x132 <SPI_EthernetWrite+0xe>
     138:	8e bd       	out	0x2e, r24	; 46
     13a:	0d b4       	in	r0, 0x2d	; 45
     13c:	07 fe       	sbrs	r0, 7
     13e:	fd cf       	rjmp	.-6      	; 0x13a <SPI_EthernetWrite+0x16>
     140:	6e bd       	out	0x2e, r22	; 46
     142:	0d b4       	in	r0, 0x2d	; 45
     144:	07 fe       	sbrs	r0, 7
     146:	fd cf       	rjmp	.-6      	; 0x142 <SPI_EthernetWrite+0x1e>
     148:	74 9a       	sbi	0x0e, 4	; 14
     14a:	08 95       	ret

0000014c <SPI_EthernetRead>:
     14c:	74 98       	cbi	0x0e, 4	; 14
     14e:	2f e0       	ldi	r18, 0x0F	; 15
     150:	2e bd       	out	0x2e, r18	; 46
     152:	0d b4       	in	r0, 0x2d	; 45
     154:	07 fe       	sbrs	r0, 7
     156:	fd cf       	rjmp	.-6      	; 0x152 <SPI_EthernetRead+0x6>
     158:	9e bd       	out	0x2e, r25	; 46
     15a:	0d b4       	in	r0, 0x2d	; 45
     15c:	07 fe       	sbrs	r0, 7
     15e:	fd cf       	rjmp	.-6      	; 0x15a <SPI_EthernetRead+0xe>
     160:	8e bd       	out	0x2e, r24	; 46
     162:	0d b4       	in	r0, 0x2d	; 45
     164:	07 fe       	sbrs	r0, 7
     166:	fd cf       	rjmp	.-6      	; 0x162 <SPI_EthernetRead+0x16>
     168:	1e bc       	out	0x2e, r1	; 46
     16a:	0d b4       	in	r0, 0x2d	; 45
     16c:	07 fe       	sbrs	r0, 7
     16e:	fd cf       	rjmp	.-6      	; 0x16a <SPI_EthernetRead+0x1e>
     170:	74 9a       	sbi	0x0e, 4	; 14
     172:	8e b5       	in	r24, 0x2e	; 46
     174:	08 95       	ret

00000176 <NetworkSetup>:
     176:	bf 92       	push	r11
     178:	cf 92       	push	r12
     17a:	df 92       	push	r13
     17c:	ef 92       	push	r14
     17e:	ff 92       	push	r15
     180:	0f 93       	push	r16
     182:	1f 93       	push	r17
     184:	cf 93       	push	r28
     186:	df 93       	push	r29
     188:	ec 01       	movw	r28, r24
     18a:	8b 01       	movw	r16, r22
     18c:	7a 01       	movw	r14, r20
     18e:	69 01       	movw	r12, r18
     190:	6c 9a       	sbi	0x0d, 4	; 13
     192:	87 e0       	ldi	r24, 0x07	; 7
     194:	84 b9       	out	0x04, r24	; 4
     196:	74 9a       	sbi	0x0e, 4	; 14
     198:	80 e5       	ldi	r24, 0x50	; 80
     19a:	8c bd       	out	0x2c, r24	; 44
     19c:	85 e3       	ldi	r24, 0x35	; 53
     19e:	92 e0       	ldi	r25, 0x02	; 2
     1a0:	0e 94 2d 12 	call	0x245a	; 0x245a <puts>
     1a4:	87 e4       	ldi	r24, 0x47	; 71
     1a6:	92 e0       	ldi	r25, 0x02	; 2
     1a8:	0e 94 2d 12 	call	0x245a	; 0x245a <puts>
     1ac:	60 e8       	ldi	r22, 0x80	; 128
     1ae:	80 e0       	ldi	r24, 0x00	; 0
     1b0:	90 e0       	ldi	r25, 0x00	; 0
     1b2:	b8 df       	rcall	.-144    	; 0x124 <SPI_EthernetWrite>
     1b4:	8f ec       	ldi	r24, 0xCF	; 207
     1b6:	97 e0       	ldi	r25, 0x07	; 7
     1b8:	01 97       	sbiw	r24, 0x01	; 1
     1ba:	f1 f7       	brne	.-4      	; 0x1b8 <NetworkSetup+0x42>
     1bc:	00 c0       	rjmp	.+0      	; 0x1be <NetworkSetup+0x48>
     1be:	00 00       	nop
     1c0:	80 e0       	ldi	r24, 0x00	; 0
     1c2:	90 e0       	ldi	r25, 0x00	; 0
     1c4:	c3 df       	rcall	.-122    	; 0x14c <SPI_EthernetRead>
     1c6:	1f 92       	push	r1
     1c8:	8f 93       	push	r24
     1ca:	80 e6       	ldi	r24, 0x60	; 96
     1cc:	92 e0       	ldi	r25, 0x02	; 2
     1ce:	9f 93       	push	r25
     1d0:	8f 93       	push	r24
     1d2:	0e 94 15 12 	call	0x242a	; 0x242a <printf>
     1d6:	f6 01       	movw	r30, r12
     1d8:	83 81       	ldd	r24, Z+3	; 0x03
     1da:	1f 92       	push	r1
     1dc:	8f 93       	push	r24
     1de:	82 81       	ldd	r24, Z+2	; 0x02
     1e0:	1f 92       	push	r1
     1e2:	8f 93       	push	r24
     1e4:	81 81       	ldd	r24, Z+1	; 0x01
     1e6:	1f 92       	push	r1
     1e8:	8f 93       	push	r24
     1ea:	80 81       	ld	r24, Z
     1ec:	1f 92       	push	r1
     1ee:	8f 93       	push	r24
     1f0:	81 e7       	ldi	r24, 0x71	; 113
     1f2:	92 e0       	ldi	r25, 0x02	; 2
     1f4:	9f 93       	push	r25
     1f6:	8f 93       	push	r24
     1f8:	0e 94 15 12 	call	0x242a	; 0x242a <printf>
     1fc:	f6 01       	movw	r30, r12
     1fe:	60 81       	ld	r22, Z
     200:	81 e0       	ldi	r24, 0x01	; 1
     202:	90 e0       	ldi	r25, 0x00	; 0
     204:	8f df       	rcall	.-226    	; 0x124 <SPI_EthernetWrite>
     206:	f6 01       	movw	r30, r12
     208:	61 81       	ldd	r22, Z+1	; 0x01
     20a:	82 e0       	ldi	r24, 0x02	; 2
     20c:	90 e0       	ldi	r25, 0x00	; 0
     20e:	8a df       	rcall	.-236    	; 0x124 <SPI_EthernetWrite>
     210:	f6 01       	movw	r30, r12
     212:	62 81       	ldd	r22, Z+2	; 0x02
     214:	83 e0       	ldi	r24, 0x03	; 3
     216:	90 e0       	ldi	r25, 0x00	; 0
     218:	85 df       	rcall	.-246    	; 0x124 <SPI_EthernetWrite>
     21a:	f6 01       	movw	r30, r12
     21c:	63 81       	ldd	r22, Z+3	; 0x03
     21e:	84 e0       	ldi	r24, 0x04	; 4
     220:	90 e0       	ldi	r25, 0x00	; 0
     222:	80 df       	rcall	.-256    	; 0x124 <SPI_EthernetWrite>
     224:	8f ec       	ldi	r24, 0xCF	; 207
     226:	97 e0       	ldi	r25, 0x07	; 7
     228:	01 97       	sbiw	r24, 0x01	; 1
     22a:	f1 f7       	brne	.-4      	; 0x228 <NetworkSetup+0xb2>
     22c:	00 c0       	rjmp	.+0      	; 0x22e <NetworkSetup+0xb8>
     22e:	00 00       	nop
     230:	84 e0       	ldi	r24, 0x04	; 4
     232:	90 e0       	ldi	r25, 0x00	; 0
     234:	8b df       	rcall	.-234    	; 0x14c <SPI_EthernetRead>
     236:	b8 2e       	mov	r11, r24
     238:	83 e0       	ldi	r24, 0x03	; 3
     23a:	90 e0       	ldi	r25, 0x00	; 0
     23c:	87 df       	rcall	.-242    	; 0x14c <SPI_EthernetRead>
     23e:	c8 2e       	mov	r12, r24
     240:	82 e0       	ldi	r24, 0x02	; 2
     242:	90 e0       	ldi	r25, 0x00	; 0
     244:	83 df       	rcall	.-250    	; 0x14c <SPI_EthernetRead>
     246:	d8 2e       	mov	r13, r24
     248:	81 e0       	ldi	r24, 0x01	; 1
     24a:	90 e0       	ldi	r25, 0x00	; 0
     24c:	7f df       	rcall	.-258    	; 0x14c <SPI_EthernetRead>
     24e:	1f 92       	push	r1
     250:	bf 92       	push	r11
     252:	1f 92       	push	r1
     254:	cf 92       	push	r12
     256:	1f 92       	push	r1
     258:	df 92       	push	r13
     25a:	1f 92       	push	r1
     25c:	8f 93       	push	r24
     25e:	86 e9       	ldi	r24, 0x96	; 150
     260:	92 e0       	ldi	r25, 0x02	; 2
     262:	9f 93       	push	r25
     264:	8f 93       	push	r24
     266:	0e 94 15 12 	call	0x242a	; 0x242a <printf>
     26a:	8d 81       	ldd	r24, Y+5	; 0x05
     26c:	1f 92       	push	r1
     26e:	8f 93       	push	r24
     270:	8c 81       	ldd	r24, Y+4	; 0x04
     272:	1f 92       	push	r1
     274:	8f 93       	push	r24
     276:	8b 81       	ldd	r24, Y+3	; 0x03
     278:	1f 92       	push	r1
     27a:	8f 93       	push	r24
     27c:	8a 81       	ldd	r24, Y+2	; 0x02
     27e:	1f 92       	push	r1
     280:	8f 93       	push	r24
     282:	89 81       	ldd	r24, Y+1	; 0x01
     284:	1f 92       	push	r1
     286:	8f 93       	push	r24
     288:	88 81       	ld	r24, Y
     28a:	1f 92       	push	r1
     28c:	8f 93       	push	r24
     28e:	81 eb       	ldi	r24, 0xB1	; 177
     290:	92 e0       	ldi	r25, 0x02	; 2
     292:	9f 93       	push	r25
     294:	8f 93       	push	r24
     296:	0e 94 15 12 	call	0x242a	; 0x242a <printf>
     29a:	ed b7       	in	r30, 0x3d	; 61
     29c:	fe b7       	in	r31, 0x3e	; 62
     29e:	b6 96       	adiw	r30, 0x26	; 38
     2a0:	0f b6       	in	r0, 0x3f	; 63
     2a2:	f8 94       	cli
     2a4:	fe bf       	out	0x3e, r31	; 62
     2a6:	0f be       	out	0x3f, r0	; 63
     2a8:	ed bf       	out	0x3d, r30	; 61
     2aa:	68 81       	ld	r22, Y
     2ac:	89 e0       	ldi	r24, 0x09	; 9
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	39 df       	rcall	.-398    	; 0x124 <SPI_EthernetWrite>
     2b2:	69 81       	ldd	r22, Y+1	; 0x01
     2b4:	8a e0       	ldi	r24, 0x0A	; 10
     2b6:	90 e0       	ldi	r25, 0x00	; 0
     2b8:	35 df       	rcall	.-406    	; 0x124 <SPI_EthernetWrite>
     2ba:	6a 81       	ldd	r22, Y+2	; 0x02
     2bc:	8b e0       	ldi	r24, 0x0B	; 11
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	31 df       	rcall	.-414    	; 0x124 <SPI_EthernetWrite>
     2c2:	6b 81       	ldd	r22, Y+3	; 0x03
     2c4:	8c e0       	ldi	r24, 0x0C	; 12
     2c6:	90 e0       	ldi	r25, 0x00	; 0
     2c8:	2d df       	rcall	.-422    	; 0x124 <SPI_EthernetWrite>
     2ca:	6c 81       	ldd	r22, Y+4	; 0x04
     2cc:	8d e0       	ldi	r24, 0x0D	; 13
     2ce:	90 e0       	ldi	r25, 0x00	; 0
     2d0:	29 df       	rcall	.-430    	; 0x124 <SPI_EthernetWrite>
     2d2:	6d 81       	ldd	r22, Y+5	; 0x05
     2d4:	8e e0       	ldi	r24, 0x0E	; 14
     2d6:	90 e0       	ldi	r25, 0x00	; 0
     2d8:	25 df       	rcall	.-438    	; 0x124 <SPI_EthernetWrite>
     2da:	8f ec       	ldi	r24, 0xCF	; 207
     2dc:	97 e0       	ldi	r25, 0x07	; 7
     2de:	01 97       	sbiw	r24, 0x01	; 1
     2e0:	f1 f7       	brne	.-4      	; 0x2de <NetworkSetup+0x168>
     2e2:	00 c0       	rjmp	.+0      	; 0x2e4 <NetworkSetup+0x16e>
     2e4:	00 00       	nop
     2e6:	8e e0       	ldi	r24, 0x0E	; 14
     2e8:	90 e0       	ldi	r25, 0x00	; 0
     2ea:	30 df       	rcall	.-416    	; 0x14c <SPI_EthernetRead>
     2ec:	b8 2e       	mov	r11, r24
     2ee:	8d e0       	ldi	r24, 0x0D	; 13
     2f0:	90 e0       	ldi	r25, 0x00	; 0
     2f2:	2c df       	rcall	.-424    	; 0x14c <SPI_EthernetRead>
     2f4:	c8 2e       	mov	r12, r24
     2f6:	8c e0       	ldi	r24, 0x0C	; 12
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	28 df       	rcall	.-432    	; 0x14c <SPI_EthernetRead>
     2fc:	d8 2e       	mov	r13, r24
     2fe:	8b e0       	ldi	r24, 0x0B	; 11
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	24 df       	rcall	.-440    	; 0x14c <SPI_EthernetRead>
     304:	d8 2f       	mov	r29, r24
     306:	8a e0       	ldi	r24, 0x0A	; 10
     308:	90 e0       	ldi	r25, 0x00	; 0
     30a:	20 df       	rcall	.-448    	; 0x14c <SPI_EthernetRead>
     30c:	c8 2f       	mov	r28, r24
     30e:	89 e0       	ldi	r24, 0x09	; 9
     310:	90 e0       	ldi	r25, 0x00	; 0
     312:	1c df       	rcall	.-456    	; 0x14c <SPI_EthernetRead>
     314:	1f 92       	push	r1
     316:	bf 92       	push	r11
     318:	1f 92       	push	r1
     31a:	cf 92       	push	r12
     31c:	1f 92       	push	r1
     31e:	df 92       	push	r13
     320:	1f 92       	push	r1
     322:	df 93       	push	r29
     324:	1f 92       	push	r1
     326:	cf 93       	push	r28
     328:	1f 92       	push	r1
     32a:	8f 93       	push	r24
     32c:	87 ee       	ldi	r24, 0xE7	; 231
     32e:	92 e0       	ldi	r25, 0x02	; 2
     330:	9f 93       	push	r25
     332:	8f 93       	push	r24
     334:	0e 94 15 12 	call	0x242a	; 0x242a <printf>
     338:	f7 01       	movw	r30, r14
     33a:	83 81       	ldd	r24, Z+3	; 0x03
     33c:	1f 92       	push	r1
     33e:	8f 93       	push	r24
     340:	82 81       	ldd	r24, Z+2	; 0x02
     342:	1f 92       	push	r1
     344:	8f 93       	push	r24
     346:	81 81       	ldd	r24, Z+1	; 0x01
     348:	1f 92       	push	r1
     34a:	8f 93       	push	r24
     34c:	80 81       	ld	r24, Z
     34e:	1f 92       	push	r1
     350:	8f 93       	push	r24
     352:	84 e1       	ldi	r24, 0x14	; 20
     354:	93 e0       	ldi	r25, 0x03	; 3
     356:	9f 93       	push	r25
     358:	8f 93       	push	r24
     35a:	0e 94 15 12 	call	0x242a	; 0x242a <printf>
     35e:	f7 01       	movw	r30, r14
     360:	60 81       	ld	r22, Z
     362:	85 e0       	ldi	r24, 0x05	; 5
     364:	90 e0       	ldi	r25, 0x00	; 0
     366:	de de       	rcall	.-580    	; 0x124 <SPI_EthernetWrite>
     368:	f7 01       	movw	r30, r14
     36a:	61 81       	ldd	r22, Z+1	; 0x01
     36c:	86 e0       	ldi	r24, 0x06	; 6
     36e:	90 e0       	ldi	r25, 0x00	; 0
     370:	d9 de       	rcall	.-590    	; 0x124 <SPI_EthernetWrite>
     372:	f7 01       	movw	r30, r14
     374:	62 81       	ldd	r22, Z+2	; 0x02
     376:	87 e0       	ldi	r24, 0x07	; 7
     378:	90 e0       	ldi	r25, 0x00	; 0
     37a:	d4 de       	rcall	.-600    	; 0x124 <SPI_EthernetWrite>
     37c:	f7 01       	movw	r30, r14
     37e:	63 81       	ldd	r22, Z+3	; 0x03
     380:	88 e0       	ldi	r24, 0x08	; 8
     382:	90 e0       	ldi	r25, 0x00	; 0
     384:	cf de       	rcall	.-610    	; 0x124 <SPI_EthernetWrite>
     386:	8f ec       	ldi	r24, 0xCF	; 207
     388:	97 e0       	ldi	r25, 0x07	; 7
     38a:	01 97       	sbiw	r24, 0x01	; 1
     38c:	f1 f7       	brne	.-4      	; 0x38a <NetworkSetup+0x214>
     38e:	00 c0       	rjmp	.+0      	; 0x390 <NetworkSetup+0x21a>
     390:	00 00       	nop
     392:	88 e0       	ldi	r24, 0x08	; 8
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	da de       	rcall	.-588    	; 0x14c <SPI_EthernetRead>
     398:	f8 2e       	mov	r15, r24
     39a:	87 e0       	ldi	r24, 0x07	; 7
     39c:	90 e0       	ldi	r25, 0x00	; 0
     39e:	d6 de       	rcall	.-596    	; 0x14c <SPI_EthernetRead>
     3a0:	d8 2f       	mov	r29, r24
     3a2:	86 e0       	ldi	r24, 0x06	; 6
     3a4:	90 e0       	ldi	r25, 0x00	; 0
     3a6:	d2 de       	rcall	.-604    	; 0x14c <SPI_EthernetRead>
     3a8:	c8 2f       	mov	r28, r24
     3aa:	85 e0       	ldi	r24, 0x05	; 5
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	ce de       	rcall	.-612    	; 0x14c <SPI_EthernetRead>
     3b0:	1f 92       	push	r1
     3b2:	ff 92       	push	r15
     3b4:	1f 92       	push	r1
     3b6:	df 93       	push	r29
     3b8:	1f 92       	push	r1
     3ba:	cf 93       	push	r28
     3bc:	1f 92       	push	r1
     3be:	8f 93       	push	r24
     3c0:	8a e3       	ldi	r24, 0x3A	; 58
     3c2:	93 e0       	ldi	r25, 0x03	; 3
     3c4:	9f 93       	push	r25
     3c6:	8f 93       	push	r24
     3c8:	0e 94 15 12 	call	0x242a	; 0x242a <printf>
     3cc:	ed b7       	in	r30, 0x3d	; 61
     3ce:	fe b7       	in	r31, 0x3e	; 62
     3d0:	b2 96       	adiw	r30, 0x22	; 34
     3d2:	0f b6       	in	r0, 0x3f	; 63
     3d4:	f8 94       	cli
     3d6:	fe bf       	out	0x3e, r31	; 62
     3d8:	0f be       	out	0x3f, r0	; 63
     3da:	ed bf       	out	0x3d, r30	; 61
     3dc:	f8 01       	movw	r30, r16
     3de:	83 81       	ldd	r24, Z+3	; 0x03
     3e0:	1f 92       	push	r1
     3e2:	8f 93       	push	r24
     3e4:	82 81       	ldd	r24, Z+2	; 0x02
     3e6:	1f 92       	push	r1
     3e8:	8f 93       	push	r24
     3ea:	81 81       	ldd	r24, Z+1	; 0x01
     3ec:	1f 92       	push	r1
     3ee:	8f 93       	push	r24
     3f0:	80 81       	ld	r24, Z
     3f2:	1f 92       	push	r1
     3f4:	8f 93       	push	r24
     3f6:	86 e5       	ldi	r24, 0x56	; 86
     3f8:	93 e0       	ldi	r25, 0x03	; 3
     3fa:	9f 93       	push	r25
     3fc:	8f 93       	push	r24
     3fe:	0e 94 15 12 	call	0x242a	; 0x242a <printf>
     402:	f8 01       	movw	r30, r16
     404:	60 81       	ld	r22, Z
     406:	8f e0       	ldi	r24, 0x0F	; 15
     408:	90 e0       	ldi	r25, 0x00	; 0
     40a:	8c de       	rcall	.-744    	; 0x124 <SPI_EthernetWrite>
     40c:	f8 01       	movw	r30, r16
     40e:	61 81       	ldd	r22, Z+1	; 0x01
     410:	80 e1       	ldi	r24, 0x10	; 16
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	87 de       	rcall	.-754    	; 0x124 <SPI_EthernetWrite>
     416:	f8 01       	movw	r30, r16
     418:	62 81       	ldd	r22, Z+2	; 0x02
     41a:	81 e1       	ldi	r24, 0x11	; 17
     41c:	90 e0       	ldi	r25, 0x00	; 0
     41e:	82 de       	rcall	.-764    	; 0x124 <SPI_EthernetWrite>
     420:	f8 01       	movw	r30, r16
     422:	63 81       	ldd	r22, Z+3	; 0x03
     424:	82 e1       	ldi	r24, 0x12	; 18
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	7d de       	rcall	.-774    	; 0x124 <SPI_EthernetWrite>
     42a:	8f ec       	ldi	r24, 0xCF	; 207
     42c:	97 e0       	ldi	r25, 0x07	; 7
     42e:	01 97       	sbiw	r24, 0x01	; 1
     430:	f1 f7       	brne	.-4      	; 0x42e <NetworkSetup+0x2b8>
     432:	00 c0       	rjmp	.+0      	; 0x434 <NetworkSetup+0x2be>
     434:	00 00       	nop
     436:	82 e1       	ldi	r24, 0x12	; 18
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	88 de       	rcall	.-752    	; 0x14c <SPI_EthernetRead>
     43c:	18 2f       	mov	r17, r24
     43e:	81 e1       	ldi	r24, 0x11	; 17
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	84 de       	rcall	.-760    	; 0x14c <SPI_EthernetRead>
     444:	d8 2f       	mov	r29, r24
     446:	80 e1       	ldi	r24, 0x10	; 16
     448:	90 e0       	ldi	r25, 0x00	; 0
     44a:	80 de       	rcall	.-768    	; 0x14c <SPI_EthernetRead>
     44c:	c8 2f       	mov	r28, r24
     44e:	8f e0       	ldi	r24, 0x0F	; 15
     450:	90 e0       	ldi	r25, 0x00	; 0
     452:	7c de       	rcall	.-776    	; 0x14c <SPI_EthernetRead>
     454:	1f 92       	push	r1
     456:	1f 93       	push	r17
     458:	1f 92       	push	r1
     45a:	df 93       	push	r29
     45c:	1f 92       	push	r1
     45e:	cf 93       	push	r28
     460:	1f 92       	push	r1
     462:	8f 93       	push	r24
     464:	86 e7       	ldi	r24, 0x76	; 118
     466:	93 e0       	ldi	r25, 0x03	; 3
     468:	9f 93       	push	r25
     46a:	8f 93       	push	r24
     46c:	0e 94 15 12 	call	0x242a	; 0x242a <printf>
     470:	82 e9       	ldi	r24, 0x92	; 146
     472:	93 e0       	ldi	r25, 0x03	; 3
     474:	0e 94 2d 12 	call	0x245a	; 0x245a <puts>
     478:	ed b7       	in	r30, 0x3d	; 61
     47a:	fe b7       	in	r31, 0x3e	; 62
     47c:	74 96       	adiw	r30, 0x14	; 20
     47e:	0f b6       	in	r0, 0x3f	; 63
     480:	f8 94       	cli
     482:	fe bf       	out	0x3e, r31	; 62
     484:	0f be       	out	0x3f, r0	; 63
     486:	ed bf       	out	0x3d, r30	; 61
     488:	df 91       	pop	r29
     48a:	cf 91       	pop	r28
     48c:	1f 91       	pop	r17
     48e:	0f 91       	pop	r16
     490:	ff 90       	pop	r15
     492:	ef 90       	pop	r14
     494:	df 90       	pop	r13
     496:	cf 90       	pop	r12
     498:	bf 90       	pop	r11
     49a:	08 95       	ret

0000049c <Server_Connect>:
     49c:	cf 92       	push	r12
     49e:	df 92       	push	r13
     4a0:	ef 92       	push	r14
     4a2:	ff 92       	push	r15
     4a4:	0f 93       	push	r16
     4a6:	1f 93       	push	r17
     4a8:	cf 93       	push	r28
     4aa:	df 93       	push	r29
     4ac:	18 2f       	mov	r17, r24
     4ae:	7b 01       	movw	r14, r22
     4b0:	6a 01       	movw	r12, r20
     4b2:	e9 01       	movw	r28, r18
     4b4:	60 e1       	ldi	r22, 0x10	; 16
     4b6:	81 e0       	ldi	r24, 0x01	; 1
     4b8:	94 e0       	ldi	r25, 0x04	; 4
     4ba:	34 de       	rcall	.-920    	; 0x124 <SPI_EthernetWrite>
     4bc:	61 2f       	mov	r22, r17
     4be:	80 e0       	ldi	r24, 0x00	; 0
     4c0:	94 e0       	ldi	r25, 0x04	; 4
     4c2:	30 de       	rcall	.-928    	; 0x124 <SPI_EthernetWrite>
     4c4:	68 81       	ld	r22, Y
     4c6:	84 e0       	ldi	r24, 0x04	; 4
     4c8:	94 e0       	ldi	r25, 0x04	; 4
     4ca:	2c de       	rcall	.-936    	; 0x124 <SPI_EthernetWrite>
     4cc:	69 81       	ldd	r22, Y+1	; 0x01
     4ce:	85 e0       	ldi	r24, 0x05	; 5
     4d0:	94 e0       	ldi	r25, 0x04	; 4
     4d2:	28 de       	rcall	.-944    	; 0x124 <SPI_EthernetWrite>
     4d4:	61 e0       	ldi	r22, 0x01	; 1
     4d6:	81 e0       	ldi	r24, 0x01	; 1
     4d8:	94 e0       	ldi	r25, 0x04	; 4
     4da:	24 de       	rcall	.-952    	; 0x124 <SPI_EthernetWrite>
     4dc:	83 e0       	ldi	r24, 0x03	; 3
     4de:	94 e0       	ldi	r25, 0x04	; 4
     4e0:	35 de       	rcall	.-918    	; 0x14c <SPI_EthernetRead>
     4e2:	83 31       	cpi	r24, 0x13	; 19
     4e4:	39 f7       	brne	.-50     	; 0x4b4 <Server_Connect+0x18>
     4e6:	f7 01       	movw	r30, r14
     4e8:	60 81       	ld	r22, Z
     4ea:	8c e0       	ldi	r24, 0x0C	; 12
     4ec:	94 e0       	ldi	r25, 0x04	; 4
     4ee:	1a de       	rcall	.-972    	; 0x124 <SPI_EthernetWrite>
     4f0:	f7 01       	movw	r30, r14
     4f2:	61 81       	ldd	r22, Z+1	; 0x01
     4f4:	8d e0       	ldi	r24, 0x0D	; 13
     4f6:	94 e0       	ldi	r25, 0x04	; 4
     4f8:	15 de       	rcall	.-982    	; 0x124 <SPI_EthernetWrite>
     4fa:	f7 01       	movw	r30, r14
     4fc:	62 81       	ldd	r22, Z+2	; 0x02
     4fe:	8e e0       	ldi	r24, 0x0E	; 14
     500:	94 e0       	ldi	r25, 0x04	; 4
     502:	10 de       	rcall	.-992    	; 0x124 <SPI_EthernetWrite>
     504:	f7 01       	movw	r30, r14
     506:	63 81       	ldd	r22, Z+3	; 0x03
     508:	8f e0       	ldi	r24, 0x0F	; 15
     50a:	94 e0       	ldi	r25, 0x04	; 4
     50c:	0b de       	rcall	.-1002   	; 0x124 <SPI_EthernetWrite>
     50e:	f6 01       	movw	r30, r12
     510:	60 81       	ld	r22, Z
     512:	80 e1       	ldi	r24, 0x10	; 16
     514:	94 e0       	ldi	r25, 0x04	; 4
     516:	06 de       	rcall	.-1012   	; 0x124 <SPI_EthernetWrite>
     518:	f6 01       	movw	r30, r12
     51a:	61 81       	ldd	r22, Z+1	; 0x01
     51c:	81 e1       	ldi	r24, 0x11	; 17
     51e:	94 e0       	ldi	r25, 0x04	; 4
     520:	01 de       	rcall	.-1022   	; 0x124 <SPI_EthernetWrite>
     522:	64 e0       	ldi	r22, 0x04	; 4
     524:	81 e0       	ldi	r24, 0x01	; 1
     526:	94 e0       	ldi	r25, 0x04	; 4
     528:	fd dd       	rcall	.-1030   	; 0x124 <SPI_EthernetWrite>
     52a:	c0 e0       	ldi	r28, 0x00	; 0
     52c:	d0 e0       	ldi	r29, 0x00	; 0
     52e:	00 e1       	ldi	r16, 0x10	; 16
     530:	17 e2       	ldi	r17, 0x27	; 39
     532:	35 c0       	rjmp	.+106    	; 0x59e <Server_Connect+0x102>
     534:	87 e5       	ldi	r24, 0x57	; 87
     536:	92 e0       	ldi	r25, 0x02	; 2
     538:	01 97       	sbiw	r24, 0x01	; 1
     53a:	f1 f7       	brne	.-4      	; 0x538 <Server_Connect+0x9c>
     53c:	00 c0       	rjmp	.+0      	; 0x53e <Server_Connect+0xa2>
     53e:	00 00       	nop
     540:	21 96       	adiw	r28, 0x01	; 1
     542:	9e 01       	movw	r18, r28
     544:	32 95       	swap	r19
     546:	22 95       	swap	r18
     548:	2f 70       	andi	r18, 0x0F	; 15
     54a:	23 27       	eor	r18, r19
     54c:	3f 70       	andi	r19, 0x0F	; 15
     54e:	23 27       	eor	r18, r19
     550:	a7 e4       	ldi	r26, 0x47	; 71
     552:	b3 e0       	ldi	r27, 0x03	; 3
     554:	0e 94 bc 11 	call	0x2378	; 0x2378 <__umulhisi3>
     558:	96 95       	lsr	r25
     55a:	87 95       	ror	r24
     55c:	96 95       	lsr	r25
     55e:	87 95       	ror	r24
     560:	96 95       	lsr	r25
     562:	87 95       	ror	r24
     564:	80 9f       	mul	r24, r16
     566:	90 01       	movw	r18, r0
     568:	81 9f       	mul	r24, r17
     56a:	30 0d       	add	r19, r0
     56c:	90 9f       	mul	r25, r16
     56e:	30 0d       	add	r19, r0
     570:	11 24       	eor	r1, r1
     572:	c2 17       	cp	r28, r18
     574:	d3 07       	cpc	r29, r19
     576:	99 f4       	brne	.+38     	; 0x59e <Server_Connect+0x102>
     578:	81 eb       	ldi	r24, 0xB1	; 177
     57a:	93 e0       	ldi	r25, 0x03	; 3
     57c:	0e 94 2d 12 	call	0x245a	; 0x245a <puts>
     580:	c1 35       	cpi	r28, 0x51	; 81
     582:	93 ec       	ldi	r25, 0xC3	; 195
     584:	d9 07       	cpc	r29, r25
     586:	58 f0       	brcs	.+22     	; 0x59e <Server_Connect+0x102>
     588:	83 ed       	ldi	r24, 0xD3	; 211
     58a:	93 e0       	ldi	r25, 0x03	; 3
     58c:	0e 94 2d 12 	call	0x245a	; 0x245a <puts>
     590:	60 e1       	ldi	r22, 0x10	; 16
     592:	81 e0       	ldi	r24, 0x01	; 1
     594:	94 e0       	ldi	r25, 0x04	; 4
     596:	c6 dd       	rcall	.-1140   	; 0x124 <SPI_EthernetWrite>
     598:	80 e0       	ldi	r24, 0x00	; 0
     59a:	90 e0       	ldi	r25, 0x00	; 0
     59c:	17 c0       	rjmp	.+46     	; 0x5cc <Server_Connect+0x130>
     59e:	83 e0       	ldi	r24, 0x03	; 3
     5a0:	94 e0       	ldi	r25, 0x04	; 4
     5a2:	d4 dd       	rcall	.-1112   	; 0x14c <SPI_EthernetRead>
     5a4:	87 31       	cpi	r24, 0x17	; 23
     5a6:	31 f6       	brne	.-116    	; 0x534 <Server_Connect+0x98>
     5a8:	83 e0       	ldi	r24, 0x03	; 3
     5aa:	94 e0       	ldi	r25, 0x04	; 4
     5ac:	cf dd       	rcall	.-1122   	; 0x14c <SPI_EthernetRead>
     5ae:	87 31       	cpi	r24, 0x17	; 23
     5b0:	39 f4       	brne	.+14     	; 0x5c0 <Server_Connect+0x124>
     5b2:	8b ee       	ldi	r24, 0xEB	; 235
     5b4:	93 e0       	ldi	r25, 0x03	; 3
     5b6:	0e 94 2d 12 	call	0x245a	; 0x245a <puts>
     5ba:	81 e0       	ldi	r24, 0x01	; 1
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	06 c0       	rjmp	.+12     	; 0x5cc <Server_Connect+0x130>
     5c0:	82 e0       	ldi	r24, 0x02	; 2
     5c2:	94 e0       	ldi	r25, 0x04	; 4
     5c4:	0e 94 2d 12 	call	0x245a	; 0x245a <puts>
     5c8:	80 e0       	ldi	r24, 0x00	; 0
     5ca:	90 e0       	ldi	r25, 0x00	; 0
     5cc:	df 91       	pop	r29
     5ce:	cf 91       	pop	r28
     5d0:	1f 91       	pop	r17
     5d2:	0f 91       	pop	r16
     5d4:	ff 90       	pop	r15
     5d6:	ef 90       	pop	r14
     5d8:	df 90       	pop	r13
     5da:	cf 90       	pop	r12
     5dc:	08 95       	ret

000005de <MemoryInit>:
     5de:	63 e0       	ldi	r22, 0x03	; 3
     5e0:	8a e1       	ldi	r24, 0x1A	; 26
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	9f dd       	rcall	.-1218   	; 0x124 <SPI_EthernetWrite>
     5e6:	63 e0       	ldi	r22, 0x03	; 3
     5e8:	8b e1       	ldi	r24, 0x1B	; 27
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	9b dd       	rcall	.-1226   	; 0x124 <SPI_EthernetWrite>
     5ee:	8f ef       	ldi	r24, 0xFF	; 255
     5f0:	9f e1       	ldi	r25, 0x1F	; 31
     5f2:	90 93 56 09 	sts	0x0956, r25
     5f6:	80 93 55 09 	sts	0x0955, r24
     5fa:	20 e0       	ldi	r18, 0x00	; 0
     5fc:	30 e4       	ldi	r19, 0x40	; 64
     5fe:	30 93 58 09 	sts	0x0958, r19
     602:	20 93 57 09 	sts	0x0957, r18
     606:	90 93 5c 09 	sts	0x095C, r25
     60a:	80 93 5b 09 	sts	0x095B, r24
     60e:	80 e0       	ldi	r24, 0x00	; 0
     610:	90 e6       	ldi	r25, 0x60	; 96
     612:	90 93 5a 09 	sts	0x095A, r25
     616:	80 93 59 09 	sts	0x0959, r24
     61a:	08 95       	ret

0000061c <SocketCommand>:

void SocketCommand(uint8_t command) 
{
	SPI_EthernetWrite(S0_CR, command);
     61c:	68 2f       	mov	r22, r24
     61e:	81 e0       	ldi	r24, 0x01	; 1
     620:	94 e0       	ldi	r25, 0x04	; 4
     622:	80 cd       	rjmp	.-1280   	; 0x124 <SPI_EthernetWrite>
     624:	08 95       	ret

00000626 <SendData>:
	S0_RX_MASK = 0x1FFF;
	S0_RX_BASE = 0x6000;
}

int SendData(const uint8_t *buffer,uint16_t bufferLength, int externRAM)
{
     626:	4f 92       	push	r4
     628:	5f 92       	push	r5
     62a:	6f 92       	push	r6
     62c:	7f 92       	push	r7
     62e:	8f 92       	push	r8
     630:	9f 92       	push	r9
     632:	af 92       	push	r10
     634:	bf 92       	push	r11
     636:	cf 92       	push	r12
     638:	df 92       	push	r13
     63a:	ef 92       	push	r14
     63c:	ff 92       	push	r15
     63e:	0f 93       	push	r16
     640:	1f 93       	push	r17
     642:	cf 93       	push	r28
     644:	df 93       	push	r29
     646:	6c 01       	movw	r12, r24
     648:	5b 01       	movw	r10, r22
     64a:	3a 01       	movw	r6, r20
		
	uint16_t ptr,offaddr,realaddr,txsize,timeout,i,data;
	printf("SR: 0x%02x\n", SPI_EthernetRead(S0_SR));
     64c:	83 e0       	ldi	r24, 0x03	; 3
     64e:	94 e0       	ldi	r25, 0x04	; 4
     650:	7d dd       	rcall	.-1286   	; 0x14c <SPI_EthernetRead>
     652:	1f 92       	push	r1
     654:	8f 93       	push	r24
     656:	81 e2       	ldi	r24, 0x21	; 33
     658:	94 e0       	ldi	r25, 0x04	; 4
     65a:	9f 93       	push	r25
     65c:	8f 93       	push	r24
     65e:	0e 94 15 12 	call	0x242a	; 0x242a <printf>
	if(SPI_EthernetRead(S0_SR) != SOCK_ESTABLISHED){
     662:	83 e0       	ldi	r24, 0x03	; 3
     664:	94 e0       	ldi	r25, 0x04	; 4
     666:	72 dd       	rcall	.-1308   	; 0x14c <SPI_EthernetRead>
     668:	0f 90       	pop	r0
     66a:	0f 90       	pop	r0
     66c:	0f 90       	pop	r0
     66e:	0f 90       	pop	r0
     670:	87 31       	cpi	r24, 0x17	; 23
     672:	51 f0       	breq	.+20     	; 0x688 <SendData+0x62>
		while(!Server_Connect(TCP_MODE, gl_server_ip_addr, gl_server_port, gl_source_port));
     674:	20 e0       	ldi	r18, 0x00	; 0
     676:	32 e0       	ldi	r19, 0x02	; 2
     678:	42 e0       	ldi	r20, 0x02	; 2
     67a:	52 e0       	ldi	r21, 0x02	; 2
     67c:	64 e0       	ldi	r22, 0x04	; 4
     67e:	72 e0       	ldi	r23, 0x02	; 2
     680:	81 e0       	ldi	r24, 0x01	; 1
     682:	0c df       	rcall	.-488    	; 0x49c <Server_Connect>
     684:	89 2b       	or	r24, r25
     686:	b1 f3       	breq	.-20     	; 0x674 <SendData+0x4e>
	}
	//#if _DEBUG_MODE
	//printf("Send Size: %d\n",bufferLength);
	//#endif
	// Make sure the TX Free Size Register is available
	txsize = SPI_EthernetRead(S0_TX_FSR);
     688:	80 e2       	ldi	r24, 0x20	; 32
     68a:	94 e0       	ldi	r25, 0x04	; 4
     68c:	5f dd       	rcall	.-1346   	; 0x14c <SPI_EthernetRead>
     68e:	c8 2f       	mov	r28, r24
     690:	d0 e0       	ldi	r29, 0x00	; 0
	txsize = (((txsize & 0x00FF) << 8 ) + SPI_EthernetRead(S0_TX_FSR + 1));
     692:	dc 2f       	mov	r29, r28
     694:	cc 27       	eor	r28, r28
     696:	81 e2       	ldi	r24, 0x21	; 33
     698:	94 e0       	ldi	r25, 0x04	; 4
     69a:	58 dd       	rcall	.-1360   	; 0x14c <SPI_EthernetRead>
     69c:	c8 0f       	add	r28, r24
     69e:	d1 1d       	adc	r29, r1
	//#if _DEBUG_MODE
	//printf("TX Free Size: %d\n",txsize);
	//#endif
	timeout = 0;
	//Writing our buffer to the transmit buffer
	while (txsize < bufferLength) {
     6a0:	ca 15       	cp	r28, r10
     6a2:	db 05       	cpc	r29, r11
     6a4:	08 f4       	brcc	.+2      	; 0x6a8 <SendData+0x82>
     6a6:	8b c0       	rjmp	.+278    	; 0x7be <SendData+0x198>
     6a8:	2c c0       	rjmp	.+88     	; 0x702 <SendData+0xdc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6aa:	8f ec       	ldi	r24, 0xCF	; 207
     6ac:	97 e0       	ldi	r25, 0x07	; 7
     6ae:	01 97       	sbiw	r24, 0x01	; 1
     6b0:	f1 f7       	brne	.-4      	; 0x6ae <SendData+0x88>
     6b2:	00 c0       	rjmp	.+0      	; 0x6b4 <SendData+0x8e>
     6b4:	00 00       	nop
		_delay_ms(1);
		txsize = SPI_EthernetRead(S0_TX_FSR);
     6b6:	80 e2       	ldi	r24, 0x20	; 32
     6b8:	94 e0       	ldi	r25, 0x04	; 4
     6ba:	48 dd       	rcall	.-1392   	; 0x14c <SPI_EthernetRead>
     6bc:	c8 2f       	mov	r28, r24
     6be:	d0 e0       	ldi	r29, 0x00	; 0
		txsize = (((txsize & 0x00FF) << 8 ) + SPI_EthernetRead(S0_TX_FSR + 1));
     6c0:	dc 2f       	mov	r29, r28
     6c2:	cc 27       	eor	r28, r28
     6c4:	81 e2       	ldi	r24, 0x21	; 33
     6c6:	94 e0       	ldi	r25, 0x04	; 4
     6c8:	41 dd       	rcall	.-1406   	; 0x14c <SPI_EthernetRead>
     6ca:	c8 0f       	add	r28, r24
     6cc:	d1 1d       	adc	r29, r1
		printf("TX Size: %d", txsize);
     6ce:	df 93       	push	r29
     6d0:	cf 93       	push	r28
     6d2:	ff 92       	push	r15
     6d4:	ef 92       	push	r14
     6d6:	0e 94 15 12 	call	0x242a	; 0x242a <printf>
     6da:	01 50       	subi	r16, 0x01	; 1
     6dc:	11 09       	sbc	r17, r1
		// Timeout for approx 1000 ms
		if (timeout++ > 1000) {
     6de:	0f 90       	pop	r0
     6e0:	0f 90       	pop	r0
     6e2:	0f 90       	pop	r0
     6e4:	0f 90       	pop	r0
     6e6:	51 f4       	brne	.+20     	; 0x6fc <SendData+0xd6>
			//#if _DEBUG_MODE
			//printf("TX Free Size Error!\n");
			//#endif
			// Disconnect the connection
			SocketCommand(DISCON);
     6e8:	88 e0       	ldi	r24, 0x08	; 8
     6ea:	98 df       	rcall	.-208    	; 0x61c <SocketCommand>
			while(SPI_EthernetRead(S0_CR));
     6ec:	81 e0       	ldi	r24, 0x01	; 1
     6ee:	94 e0       	ldi	r25, 0x04	; 4
     6f0:	2d dd       	rcall	.-1446   	; 0x14c <SPI_EthernetRead>
     6f2:	81 11       	cpse	r24, r1
     6f4:	fb cf       	rjmp	.-10     	; 0x6ec <SendData+0xc6>
			return 0;
     6f6:	80 e0       	ldi	r24, 0x00	; 0
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	88 c0       	rjmp	.+272    	; 0x80c <SendData+0x1e6>
	//#if _DEBUG_MODE
	//printf("TX Free Size: %d\n",txsize);
	//#endif
	timeout = 0;
	//Writing our buffer to the transmit buffer
	while (txsize < bufferLength) {
     6fc:	ca 15       	cp	r28, r10
     6fe:	db 05       	cpc	r29, r11
     700:	a0 f2       	brcs	.-88     	; 0x6aa <SendData+0x84>
			return 0;
		}
	}

	// Read the Tx Write Pointer
	ptr = SPI_EthernetRead(S0_TX_WR);
     702:	84 e2       	ldi	r24, 0x24	; 36
     704:	94 e0       	ldi	r25, 0x04	; 4
     706:	22 dd       	rcall	.-1468   	; 0x14c <SPI_EthernetRead>
     708:	48 2e       	mov	r4, r24
	offaddr = (((ptr & 0x00FF) << 8 ) + SPI_EthernetRead(S0_TX_WR + 1));
     70a:	85 e2       	ldi	r24, 0x25	; 37
     70c:	94 e0       	ldi	r25, 0x04	; 4
     70e:	1e dd       	rcall	.-1476   	; 0x14c <SPI_EthernetRead>
			return 0;
		}
	}

	// Read the Tx Write Pointer
	ptr = SPI_EthernetRead(S0_TX_WR);
     710:	51 2c       	mov	r5, r1
	offaddr = (((ptr & 0x00FF) << 8 ) + SPI_EthernetRead(S0_TX_WR + 1));
     712:	54 2c       	mov	r5, r4
     714:	44 24       	eor	r4, r4
     716:	48 0e       	add	r4, r24
     718:	51 1c       	adc	r5, r1
	unsigned int startaddr = (((SPI_EthernetRead(S0_TX_RR) << 8) + SPI_EthernetRead(S0_TX_RR + 1)));
     71a:	82 e2       	ldi	r24, 0x22	; 34
     71c:	94 e0       	ldi	r25, 0x04	; 4
     71e:	16 dd       	rcall	.-1492   	; 0x14c <SPI_EthernetRead>
     720:	83 e2       	ldi	r24, 0x23	; 35
     722:	94 e0       	ldi	r25, 0x04	; 4
     724:	13 dd       	rcall	.-1498   	; 0x14c <SPI_EthernetRead>
	//printf("Real WR: %d\n", realWR);
	//printf("Real RR: %d\n", realRR); 
	//#endif 
	i = 0; 
	data = 0; 
	printf("Sending...\n\n");
     726:	89 e3       	ldi	r24, 0x39	; 57
     728:	94 e0       	ldi	r25, 0x04	; 4
     72a:	0e 94 2d 12 	call	0x245a	; 0x245a <puts>
	while(i < bufferLength) {
     72e:	a1 14       	cp	r10, r1
     730:	b1 04       	cpc	r11, r1
     732:	61 f1       	breq	.+88     	; 0x78c <SendData+0x166>
     734:	76 01       	movw	r14, r12
     736:	ea 0c       	add	r14, r10
     738:	fb 1c       	adc	r15, r11
     73a:	82 01       	movw	r16, r4
     73c:	c0 e0       	ldi	r28, 0x00	; 0
     73e:	d4 e0       	ldi	r29, 0x04	; 4

		// Calculate the real W5100 physical Tx Buffer Address
		realaddr = S0_TX_BASE + (offaddr & S0_TX_MASK);
     740:	80 90 55 09 	lds	r8, 0x0955
     744:	90 90 56 09 	lds	r9, 0x0956
     748:	80 22       	and	r8, r16
     74a:	91 22       	and	r9, r17
     74c:	80 91 57 09 	lds	r24, 0x0957
     750:	90 91 58 09 	lds	r25, 0x0958
     754:	88 0e       	add	r8, r24
     756:	99 1e       	adc	r9, r25
		//printf("TX Real Address: %d\n", realaddr);
		// Copy the application data to the W5100 Tx Buffer
		if(externRAM)
     758:	61 14       	cp	r6, r1
     75a:	71 04       	cpc	r7, r1
     75c:	41 f0       	breq	.+16     	; 0x76e <SendData+0x148>
		{
			//Grab the byte from external RAM and write it to the Wiznet TX Buffer 
			data = RAMReadByte(WIFI_QSTRING_ADDRESS + i);
     75e:	be 01       	movw	r22, r28
     760:	80 e0       	ldi	r24, 0x00	; 0
     762:	90 e0       	ldi	r25, 0x00	; 0
     764:	ae d0       	rcall	.+348    	; 0x8c2 <RAMReadByte>
			//_delay_us(10);
			//printf("%c", data);
			SPI_EthernetWrite(realaddr, data);
     766:	68 2f       	mov	r22, r24
     768:	c4 01       	movw	r24, r8
     76a:	dc dc       	rcall	.-1608   	; 0x124 <SPI_EthernetWrite>
     76c:	04 c0       	rjmp	.+8      	; 0x776 <SendData+0x150>
			//_delay_us(10);
		}
		else
		{
			//printf("%c", *buffer);
			SPI_EthernetWrite(realaddr,*buffer);	
     76e:	f6 01       	movw	r30, r12
     770:	60 81       	ld	r22, Z
     772:	c4 01       	movw	r24, r8
     774:	d7 dc       	rcall	.-1618   	; 0x124 <SPI_EthernetWrite>
		}
		offaddr++;
     776:	0f 5f       	subi	r16, 0xFF	; 255
     778:	1f 4f       	sbci	r17, 0xFF	; 255
		buffer++;
     77a:	ff ef       	ldi	r31, 0xFF	; 255
     77c:	cf 1a       	sub	r12, r31
     77e:	df 0a       	sbc	r13, r31
     780:	21 96       	adiw	r28, 0x01	; 1
	//printf("Real RR: %d\n", realRR); 
	//#endif 
	i = 0; 
	data = 0; 
	printf("Sending...\n\n");
	while(i < bufferLength) {
     782:	ce 14       	cp	r12, r14
     784:	df 04       	cpc	r13, r15
     786:	e1 f6       	brne	.-72     	; 0x740 <SendData+0x11a>
     788:	4a 0c       	add	r4, r10
     78a:	5b 1c       	adc	r5, r11
		}
		offaddr++;
		buffer++;
		i++; 
	}
		SPI_EthernetWrite(realaddr + 1, 0x00);
     78c:	60 e0       	ldi	r22, 0x00	; 0
     78e:	c4 01       	movw	r24, r8
     790:	01 96       	adiw	r24, 0x01	; 1
     792:	c8 dc       	rcall	.-1648   	; 0x124 <SPI_EthernetWrite>

	// Increase the S0_TX_WR value, so it points to the next transmit
	//printf("Offset After: %d\n", offaddr);
	ptr = SPI_EthernetRead(S0_TX_WR);
     794:	84 e2       	ldi	r24, 0x24	; 36
     796:	94 e0       	ldi	r25, 0x04	; 4
     798:	d9 dc       	rcall	.-1614   	; 0x14c <SPI_EthernetRead>
	//realWR = S0_TX_BASE + (offaddr & S0_TX_MASK);
	//printf("Real WR: %d\n", realWR);
	//printf("%d\n", (offaddr & 0xFF00) >> 8);
	//printf("%d\n", (offaddr & 0x00FF));
	//SPI_Write(S0_TX_WR,(offaddr & 0xFF00) >> 8 );
	SPI_EthernetWrite(S0_TX_WR, 0xFF);
     79a:	6f ef       	ldi	r22, 0xFF	; 255
     79c:	84 e2       	ldi	r24, 0x24	; 36
     79e:	94 e0       	ldi	r25, 0x04	; 4
     7a0:	c1 dc       	rcall	.-1662   	; 0x124 <SPI_EthernetWrite>
	SPI_EthernetWrite(S0_TX_WR + 1,(offaddr & 0x00FF));
     7a2:	64 2d       	mov	r22, r4
     7a4:	85 e2       	ldi	r24, 0x25	; 37
     7a6:	94 e0       	ldi	r25, 0x04	; 4
     7a8:	bd dc       	rcall	.-1670   	; 0x124 <SPI_EthernetWrite>
	//realRR = S0_TX_BASE + (startaddr & S0_TX_MASK);
	//printf("Real WR: %d\n", realWR);
	//printf("Real RR: %d\n", realRR);
	
	// Now Send the SEND command
	SocketCommand(SEND);
     7aa:	80 e2       	ldi	r24, 0x20	; 32
     7ac:	37 df       	rcall	.-402    	; 0x61c <SocketCommand>
	//printf("WR Low: %d\n", SPI_Read(S0_TX_WR));
	//printf("WR High: %d\n", SPI_Read(S0_TX_WR + 1));
	// Wait for Sending Process
	while(SPI_EthernetRead(S0_CR));
     7ae:	81 e0       	ldi	r24, 0x01	; 1
     7b0:	94 e0       	ldi	r25, 0x04	; 4
     7b2:	cc dc       	rcall	.-1640   	; 0x14c <SPI_EthernetRead>
     7b4:	81 11       	cpse	r24, r1
     7b6:	fb cf       	rjmp	.-10     	; 0x7ae <SendData+0x188>
	//while(!(SPI_EthernetRead(S0_IR) & (1<<SIR_SEND_OK))); 
	return 1;
     7b8:	81 e0       	ldi	r24, 0x01	; 1
     7ba:	90 e0       	ldi	r25, 0x00	; 0
     7bc:	27 c0       	rjmp	.+78     	; 0x80c <SendData+0x1e6>
     7be:	8f ec       	ldi	r24, 0xCF	; 207
     7c0:	97 e0       	ldi	r25, 0x07	; 7
     7c2:	01 97       	sbiw	r24, 0x01	; 1
     7c4:	f1 f7       	brne	.-4      	; 0x7c2 <SendData+0x19c>
     7c6:	00 c0       	rjmp	.+0      	; 0x7c8 <SendData+0x1a2>
     7c8:	00 00       	nop
	//#endif
	timeout = 0;
	//Writing our buffer to the transmit buffer
	while (txsize < bufferLength) {
		_delay_ms(1);
		txsize = SPI_EthernetRead(S0_TX_FSR);
     7ca:	80 e2       	ldi	r24, 0x20	; 32
     7cc:	94 e0       	ldi	r25, 0x04	; 4
     7ce:	be dc       	rcall	.-1668   	; 0x14c <SPI_EthernetRead>
     7d0:	c8 2f       	mov	r28, r24
     7d2:	d0 e0       	ldi	r29, 0x00	; 0
		txsize = (((txsize & 0x00FF) << 8 ) + SPI_EthernetRead(S0_TX_FSR + 1));
     7d4:	dc 2f       	mov	r29, r28
     7d6:	cc 27       	eor	r28, r28
     7d8:	81 e2       	ldi	r24, 0x21	; 33
     7da:	94 e0       	ldi	r25, 0x04	; 4
     7dc:	b7 dc       	rcall	.-1682   	; 0x14c <SPI_EthernetRead>
     7de:	c8 0f       	add	r28, r24
     7e0:	d1 1d       	adc	r29, r1
		printf("TX Size: %d", txsize);
     7e2:	df 93       	push	r29
     7e4:	cf 93       	push	r28
     7e6:	8d e2       	ldi	r24, 0x2D	; 45
     7e8:	94 e0       	ldi	r25, 0x04	; 4
     7ea:	9f 93       	push	r25
     7ec:	8f 93       	push	r24
     7ee:	0e 94 15 12 	call	0x242a	; 0x242a <printf>
     7f2:	0f 90       	pop	r0
     7f4:	0f 90       	pop	r0
     7f6:	0f 90       	pop	r0
     7f8:	0f 90       	pop	r0
     7fa:	09 ee       	ldi	r16, 0xE9	; 233
     7fc:	13 e0       	ldi	r17, 0x03	; 3
     7fe:	0f 2e       	mov	r0, r31
     800:	fd e2       	ldi	r31, 0x2D	; 45
     802:	ef 2e       	mov	r14, r31
     804:	f4 e0       	ldi	r31, 0x04	; 4
     806:	ff 2e       	mov	r15, r31
     808:	f0 2d       	mov	r31, r0
     80a:	78 cf       	rjmp	.-272    	; 0x6fc <SendData+0xd6>
	//printf("WR High: %d\n", SPI_Read(S0_TX_WR + 1));
	// Wait for Sending Process
	while(SPI_EthernetRead(S0_CR));
	//while(!(SPI_EthernetRead(S0_IR) & (1<<SIR_SEND_OK))); 
	return 1;
}
     80c:	df 91       	pop	r29
     80e:	cf 91       	pop	r28
     810:	1f 91       	pop	r17
     812:	0f 91       	pop	r16
     814:	ff 90       	pop	r15
     816:	ef 90       	pop	r14
     818:	df 90       	pop	r13
     81a:	cf 90       	pop	r12
     81c:	bf 90       	pop	r11
     81e:	af 90       	pop	r10
     820:	9f 90       	pop	r9
     822:	8f 90       	pop	r8
     824:	7f 90       	pop	r7
     826:	6f 90       	pop	r6
     828:	5f 90       	pop	r5
     82a:	4f 90       	pop	r4
     82c:	08 95       	ret

0000082e <SPI_WriteAddress>:
	{
		printf("0x%02X ", SPI_ReadData());
	}
	RAM_PORT |= (1<<RAM_CS); 
	printf("\nSize: %d\n", i); 
}
     82e:	92 e0       	ldi	r25, 0x02	; 2
     830:	9e bd       	out	0x2e, r25	; 46
     832:	0d b4       	in	r0, 0x2d	; 45
     834:	07 fe       	sbrs	r0, 7
     836:	fd cf       	rjmp	.-6      	; 0x832 <SPI_WriteAddress+0x4>
     838:	8e bd       	out	0x2e, r24	; 46
     83a:	0d b4       	in	r0, 0x2d	; 45
     83c:	07 fe       	sbrs	r0, 7
     83e:	fd cf       	rjmp	.-6      	; 0x83a <SPI_WriteAddress+0xc>
     840:	7e bd       	out	0x2e, r23	; 46
     842:	0d b4       	in	r0, 0x2d	; 45
     844:	07 fe       	sbrs	r0, 7
     846:	fd cf       	rjmp	.-6      	; 0x842 <SPI_WriteAddress+0x14>
     848:	6e bd       	out	0x2e, r22	; 46
     84a:	0d b4       	in	r0, 0x2d	; 45
     84c:	07 fe       	sbrs	r0, 7
     84e:	fd cf       	rjmp	.-6      	; 0x84a <SPI_WriteAddress+0x1c>
     850:	08 95       	ret

00000852 <SPI_WriteData>:
     852:	8e bd       	out	0x2e, r24	; 46
     854:	0d b4       	in	r0, 0x2d	; 45
     856:	07 fe       	sbrs	r0, 7
     858:	fd cf       	rjmp	.-6      	; 0x854 <SPI_WriteData+0x2>
     85a:	08 95       	ret

0000085c <SPI_ReadAddress>:
     85c:	93 e0       	ldi	r25, 0x03	; 3
     85e:	9e bd       	out	0x2e, r25	; 46
     860:	0d b4       	in	r0, 0x2d	; 45
     862:	07 fe       	sbrs	r0, 7
     864:	fd cf       	rjmp	.-6      	; 0x860 <SPI_ReadAddress+0x4>
     866:	8e bd       	out	0x2e, r24	; 46
     868:	0d b4       	in	r0, 0x2d	; 45
     86a:	07 fe       	sbrs	r0, 7
     86c:	fd cf       	rjmp	.-6      	; 0x868 <SPI_ReadAddress+0xc>
     86e:	7e bd       	out	0x2e, r23	; 46
     870:	0d b4       	in	r0, 0x2d	; 45
     872:	07 fe       	sbrs	r0, 7
     874:	fd cf       	rjmp	.-6      	; 0x870 <SPI_ReadAddress+0x14>
     876:	6e bd       	out	0x2e, r22	; 46
     878:	0d b4       	in	r0, 0x2d	; 45
     87a:	07 fe       	sbrs	r0, 7
     87c:	fd cf       	rjmp	.-6      	; 0x878 <SPI_ReadAddress+0x1c>
     87e:	08 95       	ret

00000880 <SPI_ReadData>:
     880:	1e bc       	out	0x2e, r1	; 46
     882:	0d b4       	in	r0, 0x2d	; 45
     884:	07 fe       	sbrs	r0, 7
     886:	fd cf       	rjmp	.-6      	; 0x882 <SPI_ReadData+0x2>
     888:	8e b5       	in	r24, 0x2e	; 46
     88a:	08 95       	ret

0000088c <RAMWriteByte>:

void RAMWriteByte(char data, uint32_t address)
{
     88c:	cf 93       	push	r28
     88e:	c8 2f       	mov	r28, r24
	RAM_PORT &= ~(1<<RAM_CS);
     890:	a3 98       	cbi	0x14, 3	; 20
	SPI_WriteAddress(address);
     892:	cb 01       	movw	r24, r22
     894:	ba 01       	movw	r22, r20
     896:	cb df       	rcall	.-106    	; 0x82e <SPI_WriteAddress>
	SPI_WriteData(data);
     898:	8c 2f       	mov	r24, r28
     89a:	db df       	rcall	.-74     	; 0x852 <SPI_WriteData>
	RAM_PORT |= (1<<RAM_CS);
     89c:	a3 9a       	sbi	0x14, 3	; 20
}
     89e:	cf 91       	pop	r28
     8a0:	08 95       	ret

000008a2 <SPI_Init>:


void SPI_Init()
{
	// Set MOSI ,SCK, and SS as output, others as input
	SPI_DDR |= (1<<MOSI)|(1<<SCK)|(1<<SS)|(1<<HOLD);
     8a2:	84 b1       	in	r24, 0x04	; 4
     8a4:	87 68       	ori	r24, 0x87	; 135
     8a6:	84 b9       	out	0x04, r24	; 4
	//Set MISO as Input
	//SPI_DDR &= ~(1<<MISO);
	
	SPI_PORT |= (1<<HOLD);
     8a8:	2f 9a       	sbi	0x05, 7	; 5
	// CS pin is not active
	RAM_DDR |= (1<<RAM_CS);
     8aa:	9b 9a       	sbi	0x13, 3	; 19
	RAM_PORT |= (1<<RAM_CS);
     8ac:	a3 9a       	sbi	0x14, 3	; 20
	// Enable SPI, Master Mode 0, set the clock rate fck/8
	SPCR = (1<<SPE)|(1<<MSTR);
     8ae:	80 e5       	ldi	r24, 0x50	; 80
     8b0:	8c bd       	out	0x2c, r24	; 44
	SPSR = (1<<SPI2X); 
     8b2:	81 e0       	ldi	r24, 0x01	; 1
     8b4:	8d bd       	out	0x2d, r24	; 45
	RAMWriteByte(0x32, 0000);
     8b6:	40 e0       	ldi	r20, 0x00	; 0
     8b8:	50 e0       	ldi	r21, 0x00	; 0
     8ba:	ba 01       	movw	r22, r20
     8bc:	82 e3       	ldi	r24, 0x32	; 50
     8be:	e6 cf       	rjmp	.-52     	; 0x88c <RAMWriteByte>
     8c0:	08 95       	ret

000008c2 <RAMReadByte>:
	RAM_PORT |= (1<<RAM_CS);
}

char RAMReadByte(uint32_t address)
{
	RAM_PORT &= ~(1<<RAM_CS);
     8c2:	a3 98       	cbi	0x14, 3	; 20
	SPI_ReadAddress(address);
     8c4:	cb df       	rcall	.-106    	; 0x85c <SPI_ReadAddress>
	char data = SPI_ReadData();
     8c6:	dc df       	rcall	.-72     	; 0x880 <SPI_ReadData>
	RAM_PORT |= (1<<RAM_CS);
     8c8:	a3 9a       	sbi	0x14, 3	; 20
	return data; 
}
     8ca:	08 95       	ret

000008cc <SPI_Switching_Circuitry_Init>:
		for(int j=0; j<SOCKET_SIZE/8; j++)
		{
			ShiftRegData[i][j] = 0x00; 
		}
	}
}
     8cc:	e4 e0       	ldi	r30, 0x04	; 4
     8ce:	f1 e0       	ldi	r31, 0x01	; 1
     8d0:	80 81       	ld	r24, Z
     8d2:	88 63       	ori	r24, 0x38	; 56
     8d4:	80 83       	st	Z, r24
     8d6:	e5 e0       	ldi	r30, 0x05	; 5
     8d8:	f1 e0       	ldi	r31, 0x01	; 1
     8da:	80 81       	ld	r24, Z
     8dc:	80 62       	ori	r24, 0x20	; 32
     8de:	80 83       	st	Z, r24
     8e0:	80 81       	ld	r24, Z
     8e2:	87 7e       	andi	r24, 0xE7	; 231
     8e4:	80 83       	st	Z, r24
     8e6:	08 95       	ret

000008e8 <SPI_Switching_Circuitry_Write>:
     8e8:	8e bd       	out	0x2e, r24	; 46
     8ea:	0d b4       	in	r0, 0x2d	; 45
     8ec:	07 fe       	sbrs	r0, 7
     8ee:	fd cf       	rjmp	.-6      	; 0x8ea <SPI_Switching_Circuitry_Write+0x2>
     8f0:	08 95       	ret

000008f2 <SetShiftRegData>:


void SetShiftRegData(uint8_t pinType, char data[SOCKET_SIZE/8])
{
     8f2:	db 01       	movw	r26, r22
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	fc 01       	movw	r30, r24
     8f8:	ee 0f       	add	r30, r30
     8fa:	ff 1f       	adc	r31, r31
     8fc:	ee 0f       	add	r30, r30
     8fe:	ff 1f       	adc	r31, r31
     900:	8e 0f       	add	r24, r30
     902:	9f 1f       	adc	r25, r31
     904:	fc 01       	movw	r30, r24
     906:	e3 5a       	subi	r30, 0xA3	; 163
     908:	f6 4f       	sbci	r31, 0xF6	; 246
     90a:	9b 01       	movw	r18, r22
     90c:	2b 5f       	subi	r18, 0xFB	; 251
     90e:	3f 4f       	sbci	r19, 0xFF	; 255
	//MSB gets shifted out first 
	for(int i=0; i<SOCKET_SIZE/8; i++)
	{
		ShiftRegData[pinType][i] = *(data + i); 
     910:	8d 91       	ld	r24, X+
     912:	81 93       	st	Z+, r24


void SetShiftRegData(uint8_t pinType, char data[SOCKET_SIZE/8])
{
	//MSB gets shifted out first 
	for(int i=0; i<SOCKET_SIZE/8; i++)
     914:	a2 17       	cp	r26, r18
     916:	b3 07       	cpc	r27, r19
     918:	d9 f7       	brne	.-10     	; 0x910 <SetShiftRegData+0x1e>
	{
		ShiftRegData[pinType][i] = *(data + i); 
	}
}
     91a:	08 95       	ret

0000091c <WriteShiftRegData>:

void WriteShiftRegData()
{
     91c:	af 92       	push	r10
     91e:	bf 92       	push	r11
     920:	cf 92       	push	r12
     922:	df 92       	push	r13
     924:	ef 92       	push	r14
     926:	ff 92       	push	r15
     928:	0f 93       	push	r16
     92a:	1f 93       	push	r17
     92c:	cf 93       	push	r28
     92e:	df 93       	push	r29
     930:	0f 2e       	mov	r0, r31
     932:	f2 e6       	ldi	r31, 0x62	; 98
     934:	ef 2e       	mov	r14, r31
     936:	f9 e0       	ldi	r31, 0x09	; 9
     938:	ff 2e       	mov	r15, r31
     93a:	f0 2d       	mov	r31, r0
     93c:	0f 2e       	mov	r0, r31
     93e:	fb e7       	ldi	r31, 0x7B	; 123
     940:	af 2e       	mov	r10, r31
     942:	f9 e0       	ldi	r31, 0x09	; 9
     944:	bf 2e       	mov	r11, r31
     946:	f0 2d       	mov	r31, r0
     948:	c1 2c       	mov	r12, r1
     94a:	d1 2c       	mov	r13, r1
     94c:	0e c0       	rjmp	.+28     	; 0x96a <WriteShiftRegData+0x4e>
	
	for(int i=1; i<(PIN_TYPES); i++)
	{
		for(int j=0; j<SOCKET_SIZE/8; j++)
		{
			SPI_Switching_Circuitry_Write(ShiftRegData[i][j]); 
     94e:	f8 01       	movw	r30, r16
     950:	81 91       	ld	r24, Z+
     952:	8f 01       	movw	r16, r30
     954:	c9 df       	rcall	.-110    	; 0x8e8 <SPI_Switching_Circuitry_Write>
	//}
	//SR_CNTRL_PORT |= (1<<MAXCS);
	
	for(int i=1; i<(PIN_TYPES); i++)
	{
		for(int j=0; j<SOCKET_SIZE/8; j++)
     956:	21 96       	adiw	r28, 0x01	; 1
     958:	c5 30       	cpi	r28, 0x05	; 5
     95a:	d1 05       	cpc	r29, r1
     95c:	c1 f7       	brne	.-16     	; 0x94e <WriteShiftRegData+0x32>
     95e:	f5 e0       	ldi	r31, 0x05	; 5
     960:	ef 0e       	add	r14, r31
     962:	f1 1c       	adc	r15, r1
	//{
		//SPI_Switching_Circuitry_Write(ShiftRegData[i][j]);
	//}
	//SR_CNTRL_PORT |= (1<<MAXCS);
	
	for(int i=1; i<(PIN_TYPES); i++)
     964:	ea 14       	cp	r14, r10
     966:	fb 04       	cpc	r15, r11
     968:	21 f0       	breq	.+8      	; 0x972 <WriteShiftRegData+0x56>
		ShiftRegData[pinType][i] = *(data + i); 
	}
}

void WriteShiftRegData()
{
     96a:	87 01       	movw	r16, r14
     96c:	cc 2d       	mov	r28, r12
     96e:	dd 2d       	mov	r29, r13
     970:	ee cf       	rjmp	.-36     	; 0x94e <WriteShiftRegData+0x32>
		{
			SPI_Switching_Circuitry_Write(ShiftRegData[i][j]); 
		}
	}
	
	SR_CNTRL_PORT |= (1<<SRCS);
     972:	e5 e0       	ldi	r30, 0x05	; 5
     974:	f1 e0       	ldi	r31, 0x01	; 1
     976:	80 81       	ld	r24, Z
     978:	80 61       	ori	r24, 0x10	; 16
     97a:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     97c:	85 e3       	ldi	r24, 0x35	; 53
     97e:	8a 95       	dec	r24
     980:	f1 f7       	brne	.-4      	; 0x97e <WriteShiftRegData+0x62>
     982:	00 00       	nop
	_delay_us(20);
	SR_CNTRL_PORT &= ~(1<<SRCS);
     984:	80 81       	ld	r24, Z
     986:	8f 7e       	andi	r24, 0xEF	; 239
     988:	80 83       	st	Z, r24
}
     98a:	df 91       	pop	r29
     98c:	cf 91       	pop	r28
     98e:	1f 91       	pop	r17
     990:	0f 91       	pop	r16
     992:	ff 90       	pop	r15
     994:	ef 90       	pop	r14
     996:	df 90       	pop	r13
     998:	cf 90       	pop	r12
     99a:	bf 90       	pop	r11
     99c:	af 90       	pop	r10
     99e:	08 95       	ret

000009a0 <setAtTiny2313>:

void setAtTiny2313()
{
     9a0:	cf 93       	push	r28
     9a2:	df 93       	push	r29
     9a4:	00 d0       	rcall	.+0      	; 0x9a6 <setAtTiny2313+0x6>
     9a6:	00 d0       	rcall	.+0      	; 0x9a8 <setAtTiny2313+0x8>
     9a8:	1f 92       	push	r1
     9aa:	cd b7       	in	r28, 0x3d	; 61
     9ac:	de b7       	in	r29, 0x3e	; 62
	//char shiftTempBuff[5] = {0x00, 0x1F, 0xF7, 0xD0, 0xFF};
	char shiftTempBuff[5] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
     9ae:	85 e0       	ldi	r24, 0x05	; 5
     9b0:	e0 e3       	ldi	r30, 0x30	; 48
     9b2:	f2 e0       	ldi	r31, 0x02	; 2
     9b4:	de 01       	movw	r26, r28
     9b6:	11 96       	adiw	r26, 0x01	; 1
     9b8:	01 90       	ld	r0, Z+
     9ba:	0d 92       	st	X+, r0
     9bc:	8a 95       	dec	r24
     9be:	e1 f7       	brne	.-8      	; 0x9b8 <setAtTiny2313+0x18>
	SetShiftRegData(PULL_DOWN, shiftTempBuff);
     9c0:	be 01       	movw	r22, r28
     9c2:	6f 5f       	subi	r22, 0xFF	; 255
     9c4:	7f 4f       	sbci	r23, 0xFF	; 255
     9c6:	81 e0       	ldi	r24, 0x01	; 1
     9c8:	94 df       	rcall	.-216    	; 0x8f2 <SetShiftRegData>
	//Modify Values and shift again
	shiftTempBuff[0] = 0x00;
     9ca:	19 82       	std	Y+1, r1	; 0x01
	shiftTempBuff[1] = 0x00;
     9cc:	1a 82       	std	Y+2, r1	; 0x02
	shiftTempBuff[2] = 0x08; //setting GND to ZIF19
     9ce:	88 e0       	ldi	r24, 0x08	; 8
     9d0:	8b 83       	std	Y+3, r24	; 0x03
	shiftTempBuff[3] = 0x00;
     9d2:	1c 82       	std	Y+4, r1	; 0x04
	shiftTempBuff[4] = 0x00;
     9d4:	1d 82       	std	Y+5, r1	; 0x05
	SetShiftRegData(GROUND, shiftTempBuff);
     9d6:	be 01       	movw	r22, r28
     9d8:	6f 5f       	subi	r22, 0xFF	; 255
     9da:	7f 4f       	sbci	r23, 0xFF	; 255
     9dc:	82 e0       	ldi	r24, 0x02	; 2
     9de:	89 df       	rcall	.-238    	; 0x8f2 <SetShiftRegData>
	shiftTempBuff[0] = 0x00;
     9e0:	19 82       	std	Y+1, r1	; 0x01
	shiftTempBuff[1] = 0x00;
     9e2:	1a 82       	std	Y+2, r1	; 0x02
	shiftTempBuff[2] = 0x00;
     9e4:	1b 82       	std	Y+3, r1	; 0x03
	shiftTempBuff[3] = 0x00;
     9e6:	1c 82       	std	Y+4, r1	; 0x04
	shiftTempBuff[4] = 0x00;
     9e8:	1d 82       	std	Y+5, r1	; 0x05
	SetShiftRegData(PULL_UP, shiftTempBuff);
     9ea:	be 01       	movw	r22, r28
     9ec:	6f 5f       	subi	r22, 0xFF	; 255
     9ee:	7f 4f       	sbci	r23, 0xFF	; 255
     9f0:	83 e0       	ldi	r24, 0x03	; 3
     9f2:	7f df       	rcall	.-258    	; 0x8f2 <SetShiftRegData>
	shiftTempBuff[0] = 0x00;
     9f4:	19 82       	std	Y+1, r1	; 0x01
	shiftTempBuff[1] = 0x20; //Setting VCC to ZIF29
     9f6:	80 e2       	ldi	r24, 0x20	; 32
     9f8:	8a 83       	std	Y+2, r24	; 0x02
	shiftTempBuff[2] = 0x00;
     9fa:	1b 82       	std	Y+3, r1	; 0x03
	shiftTempBuff[3] = 0x00;
     9fc:	1c 82       	std	Y+4, r1	; 0x04
	shiftTempBuff[4] = 0x00;
     9fe:	1d 82       	std	Y+5, r1	; 0x05
	SetShiftRegData(VCC, shiftTempBuff);
     a00:	be 01       	movw	r22, r28
     a02:	6f 5f       	subi	r22, 0xFF	; 255
     a04:	7f 4f       	sbci	r23, 0xFF	; 255
     a06:	84 e0       	ldi	r24, 0x04	; 4
     a08:	74 df       	rcall	.-280    	; 0x8f2 <SetShiftRegData>
	shiftTempBuff[0] = 0x00;
     a0a:	19 82       	std	Y+1, r1	; 0x01
	shiftTempBuff[1] = 0x00;
     a0c:	1a 82       	std	Y+2, r1	; 0x02
	shiftTempBuff[2] = 0x00;
     a0e:	1b 82       	std	Y+3, r1	; 0x03
	shiftTempBuff[3] = 0x04; //Setting VPP to ZIF10
     a10:	84 e0       	ldi	r24, 0x04	; 4
     a12:	8c 83       	std	Y+4, r24	; 0x04
	shiftTempBuff[4] = 0x00;
     a14:	1d 82       	std	Y+5, r1	; 0x05
	SetShiftRegData(VPP, shiftTempBuff);
     a16:	be 01       	movw	r22, r28
     a18:	6f 5f       	subi	r22, 0xFF	; 255
     a1a:	7f 4f       	sbci	r23, 0xFF	; 255
     a1c:	85 e0       	ldi	r24, 0x05	; 5
     a1e:	69 df       	rcall	.-302    	; 0x8f2 <SetShiftRegData>
	//shiftTempBuff[2] = 0xF7;
	//shiftTempBuff[3] = 0xD0; //Setting up Logic
	//shiftTempBuff[4] = 0x00;
	//SetShiftRegData(LOGIC, shiftTempBuff);
	
	WriteShiftRegData();
     a20:	7d df       	rcall	.-262    	; 0x91c <WriteShiftRegData>
}
     a22:	0f 90       	pop	r0
     a24:	0f 90       	pop	r0
     a26:	0f 90       	pop	r0
     a28:	0f 90       	pop	r0
     a2a:	0f 90       	pop	r0
     a2c:	df 91       	pop	r29
     a2e:	cf 91       	pop	r28
     a30:	08 95       	ret

00000a32 <setAtMega324PA>:

void setAtMega324PA()
{
     a32:	cf 93       	push	r28
     a34:	df 93       	push	r29
     a36:	00 d0       	rcall	.+0      	; 0xa38 <setAtMega324PA+0x6>
     a38:	00 d0       	rcall	.+0      	; 0xa3a <setAtMega324PA+0x8>
     a3a:	1f 92       	push	r1
     a3c:	cd b7       	in	r28, 0x3d	; 61
     a3e:	de b7       	in	r29, 0x3e	; 62
	char shiftTempBuff[5] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
     a40:	85 e0       	ldi	r24, 0x05	; 5
     a42:	e0 e3       	ldi	r30, 0x30	; 48
     a44:	f2 e0       	ldi	r31, 0x02	; 2
     a46:	de 01       	movw	r26, r28
     a48:	11 96       	adiw	r26, 0x01	; 1
     a4a:	01 90       	ld	r0, Z+
     a4c:	0d 92       	st	X+, r0
     a4e:	8a 95       	dec	r24
     a50:	e1 f7       	brne	.-8      	; 0xa4a <setAtMega324PA+0x18>
	SetShiftRegData(PULL_DOWN, shiftTempBuff);
     a52:	be 01       	movw	r22, r28
     a54:	6f 5f       	subi	r22, 0xFF	; 255
     a56:	7f 4f       	sbci	r23, 0xFF	; 255
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	4b df       	rcall	.-362    	; 0x8f2 <SetShiftRegData>
	//Modify Values and shift again
	shiftTempBuff[0] = 0x00;
     a5c:	19 82       	std	Y+1, r1	; 0x01
	shiftTempBuff[1] = 0x40;
     a5e:	80 e4       	ldi	r24, 0x40	; 64
     a60:	8a 83       	std	Y+2, r24	; 0x02
	shiftTempBuff[2] = 0x00; //setting GND to ZIF19
     a62:	1b 82       	std	Y+3, r1	; 0x03
	shiftTempBuff[3] = 0x04;
     a64:	84 e0       	ldi	r24, 0x04	; 4
     a66:	8c 83       	std	Y+4, r24	; 0x04
	shiftTempBuff[4] = 0x00;
     a68:	1d 82       	std	Y+5, r1	; 0x05
	SetShiftRegData(GROUND, shiftTempBuff);
     a6a:	be 01       	movw	r22, r28
     a6c:	6f 5f       	subi	r22, 0xFF	; 255
     a6e:	7f 4f       	sbci	r23, 0xFF	; 255
     a70:	82 e0       	ldi	r24, 0x02	; 2
     a72:	3f df       	rcall	.-386    	; 0x8f2 <SetShiftRegData>
	shiftTempBuff[0] = 0x00;
     a74:	19 82       	std	Y+1, r1	; 0x01
	shiftTempBuff[1] = 0x00;
     a76:	1a 82       	std	Y+2, r1	; 0x02
	shiftTempBuff[2] = 0x00;
     a78:	1b 82       	std	Y+3, r1	; 0x03
	shiftTempBuff[3] = 0x00;
     a7a:	1c 82       	std	Y+4, r1	; 0x04
	shiftTempBuff[4] = 0x00;
     a7c:	1d 82       	std	Y+5, r1	; 0x05
	SetShiftRegData(PULL_UP, shiftTempBuff);
     a7e:	be 01       	movw	r22, r28
     a80:	6f 5f       	subi	r22, 0xFF	; 255
     a82:	7f 4f       	sbci	r23, 0xFF	; 255
     a84:	83 e0       	ldi	r24, 0x03	; 3
     a86:	35 df       	rcall	.-406    	; 0x8f2 <SetShiftRegData>
	shiftTempBuff[0] = 0x00;
     a88:	19 82       	std	Y+1, r1	; 0x01
	shiftTempBuff[1] = 0x20; //Setting VCC to ZIF29
     a8a:	80 e2       	ldi	r24, 0x20	; 32
     a8c:	8a 83       	std	Y+2, r24	; 0x02
	shiftTempBuff[2] = 0x00;
     a8e:	1b 82       	std	Y+3, r1	; 0x03
	shiftTempBuff[3] = 0x02;
     a90:	82 e0       	ldi	r24, 0x02	; 2
     a92:	8c 83       	std	Y+4, r24	; 0x04
	shiftTempBuff[4] = 0x00;
     a94:	1d 82       	std	Y+5, r1	; 0x05
	SetShiftRegData(VCC, shiftTempBuff);
     a96:	be 01       	movw	r22, r28
     a98:	6f 5f       	subi	r22, 0xFF	; 255
     a9a:	7f 4f       	sbci	r23, 0xFF	; 255
     a9c:	84 e0       	ldi	r24, 0x04	; 4
     a9e:	29 df       	rcall	.-430    	; 0x8f2 <SetShiftRegData>
	shiftTempBuff[0] = 0x00;
     aa0:	19 82       	std	Y+1, r1	; 0x01
	shiftTempBuff[1] = 0x00;
     aa2:	1a 82       	std	Y+2, r1	; 0x02
	shiftTempBuff[2] = 0x00;
     aa4:	1b 82       	std	Y+3, r1	; 0x03
	shiftTempBuff[3] = 0x01; //Setting VPP to ZIF10
     aa6:	81 e0       	ldi	r24, 0x01	; 1
     aa8:	8c 83       	std	Y+4, r24	; 0x04
	shiftTempBuff[4] = 0x00;
     aaa:	1d 82       	std	Y+5, r1	; 0x05
	SetShiftRegData(VPP, shiftTempBuff);
     aac:	be 01       	movw	r22, r28
     aae:	6f 5f       	subi	r22, 0xFF	; 255
     ab0:	7f 4f       	sbci	r23, 0xFF	; 255
     ab2:	85 e0       	ldi	r24, 0x05	; 5
     ab4:	1e df       	rcall	.-452    	; 0x8f2 <SetShiftRegData>
	
	WriteShiftRegData();
     ab6:	32 df       	rcall	.-412    	; 0x91c <WriteShiftRegData>
}
     ab8:	0f 90       	pop	r0
     aba:	0f 90       	pop	r0
     abc:	0f 90       	pop	r0
     abe:	0f 90       	pop	r0
     ac0:	0f 90       	pop	r0
     ac2:	df 91       	pop	r29
     ac4:	cf 91       	pop	r28
     ac6:	08 95       	ret

00000ac8 <voltageControlInit>:
}

void VLogicClear()
{
	VEN_PORT &= ~(1<<VLENABLE);
	VCNTRL_PORT &= ~((1<<VL_3_3V) | (1<<VL_5V));
     ac8:	8f ef       	ldi	r24, 0xFF	; 255
     aca:	80 bb       	out	0x10, r24	; 16
     acc:	11 ba       	out	0x11, r1	; 17
     ace:	84 b1       	in	r24, 0x04	; 4
     ad0:	80 67       	ori	r24, 0x70	; 112
     ad2:	84 b9       	out	0x04, r24	; 4
     ad4:	85 b1       	in	r24, 0x05	; 5
     ad6:	8f 78       	andi	r24, 0x8F	; 143
     ad8:	85 b9       	out	0x05, r24	; 5
     ada:	08 95       	ret

00000adc <enableVppRegulator>:
     adc:	2c 9a       	sbi	0x05, 4	; 5
     ade:	08 95       	ret

00000ae0 <disableVppRegulator>:
     ae0:	2c 98       	cbi	0x05, 4	; 5
     ae2:	08 95       	ret

00000ae4 <enableVccRegulator>:
     ae4:	2d 9a       	sbi	0x05, 5	; 5
     ae6:	08 95       	ret

00000ae8 <disableVccRegulator>:
     ae8:	2d 98       	cbi	0x05, 5	; 5
     aea:	08 95       	ret

00000aec <setVcc>:
     aec:	91 b3       	in	r25, 0x11	; 17
     aee:	21 e0       	ldi	r18, 0x01	; 1
     af0:	30 e0       	ldi	r19, 0x00	; 0
     af2:	02 c0       	rjmp	.+4      	; 0xaf8 <setVcc+0xc>
     af4:	22 0f       	add	r18, r18
     af6:	33 1f       	adc	r19, r19
     af8:	8a 95       	dec	r24
     afa:	e2 f7       	brpl	.-8      	; 0xaf4 <setVcc+0x8>
     afc:	29 2b       	or	r18, r25
     afe:	21 bb       	out	0x11, r18	; 17
     b00:	81 e0       	ldi	r24, 0x01	; 1
     b02:	08 95       	ret

00000b04 <setVpp>:
     b04:	91 b3       	in	r25, 0x11	; 17
     b06:	21 e0       	ldi	r18, 0x01	; 1
     b08:	30 e0       	ldi	r19, 0x00	; 0
     b0a:	02 c0       	rjmp	.+4      	; 0xb10 <setVpp+0xc>
     b0c:	22 0f       	add	r18, r18
     b0e:	33 1f       	adc	r19, r19
     b10:	8a 95       	dec	r24
     b12:	e2 f7       	brpl	.-8      	; 0xb0c <setVpp+0x8>
     b14:	29 2b       	or	r18, r25
     b16:	21 bb       	out	0x11, r18	; 17
     b18:	81 e0       	ldi	r24, 0x01	; 1
     b1a:	08 95       	ret

00000b1c <enableVLogic>:
}

void enableVLogic()
{
	VEN_PORT |= (1<<VLENABLE);
     b1c:	2e 9a       	sbi	0x05, 6	; 5
     b1e:	08 95       	ret

00000b20 <disableVLogic>:
}

void disableVLogic()
{
	VEN_PORT &= ~(1<<VLENABLE);
     b20:	2e 98       	cbi	0x05, 6	; 5
     b22:	08 95       	ret

00000b24 <setVLogic>:
	//prevents accidental triggering of the wrong regulator
	//if(voltageLevel != (VL_3_3V || VL_5V))
	//	return 0;
	//else
	//{
		VCNTRL_PORT |= (1<<voltageLevel);
     b24:	91 b3       	in	r25, 0x11	; 17
     b26:	21 e0       	ldi	r18, 0x01	; 1
     b28:	30 e0       	ldi	r19, 0x00	; 0
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <setVLogic+0xc>
     b2c:	22 0f       	add	r18, r18
     b2e:	33 1f       	adc	r19, r19
     b30:	8a 95       	dec	r24
     b32:	e2 f7       	brpl	.-8      	; 0xb2c <setVLogic+0x8>
     b34:	29 2b       	or	r18, r25
     b36:	21 bb       	out	0x11, r18	; 17
		return 1;
	//}
}
     b38:	81 e0       	ldi	r24, 0x01	; 1
     b3a:	08 95       	ret

00000b3c <setReceiveCounter>:
	//0 denotes a successful command 
	if(header[errorCode] != '0')
		return 1; 
	else 
		return 0; 
}
     b3c:	90 93 8b 09 	sts	0x098B, r25
     b40:	80 93 8a 09 	sts	0x098A, r24
     b44:	08 95       	ret

00000b46 <uart_init>:
     b46:	10 92 c5 00 	sts	0x00C5, r1
     b4a:	83 e3       	ldi	r24, 0x33	; 51
     b4c:	80 93 c4 00 	sts	0x00C4, r24
     b50:	e1 ec       	ldi	r30, 0xC1	; 193
     b52:	f0 e0       	ldi	r31, 0x00	; 0
     b54:	88 e1       	ldi	r24, 0x18	; 24
     b56:	80 83       	st	Z, r24
     b58:	86 e0       	ldi	r24, 0x06	; 6
     b5a:	80 93 c2 00 	sts	0x00C2, r24
     b5e:	80 81       	ld	r24, Z
     b60:	80 68       	ori	r24, 0x80	; 128
     b62:	80 83       	st	Z, r24
     b64:	08 95       	ret

00000b66 <uart_send>:
     b66:	0f 93       	push	r16
     b68:	1f 93       	push	r17
     b6a:	cf 93       	push	r28
     b6c:	df 93       	push	r29
     b6e:	ec 01       	movw	r28, r24
     b70:	10 92 96 09 	sts	0x0996, r1
     b74:	89 e0       	ldi	r24, 0x09	; 9
     b76:	ed e7       	ldi	r30, 0x7D	; 125
     b78:	f9 e0       	ldi	r31, 0x09	; 9
     b7a:	df 01       	movw	r26, r30
     b7c:	1d 92       	st	X+, r1
     b7e:	8a 95       	dec	r24
     b80:	e9 f7       	brne	.-6      	; 0xb7c <uart_send+0x16>
     b82:	61 15       	cp	r22, r1
     b84:	71 05       	cpc	r23, r1
     b86:	b1 f0       	breq	.+44     	; 0xbb4 <uart_send+0x4e>
     b88:	20 e0       	ldi	r18, 0x00	; 0
     b8a:	30 e0       	ldi	r19, 0x00	; 0
     b8c:	40 e0       	ldi	r20, 0x00	; 0
     b8e:	e0 ec       	ldi	r30, 0xC0	; 192
     b90:	f0 e0       	ldi	r31, 0x00	; 0
     b92:	06 ec       	ldi	r16, 0xC6	; 198
     b94:	10 e0       	ldi	r17, 0x00	; 0
     b96:	90 81       	ld	r25, Z
     b98:	95 ff       	sbrs	r25, 5
     b9a:	fd cf       	rjmp	.-6      	; 0xb96 <uart_send+0x30>
     b9c:	2c 0f       	add	r18, r28
     b9e:	3d 1f       	adc	r19, r29
     ba0:	d9 01       	movw	r26, r18
     ba2:	9c 91       	ld	r25, X
     ba4:	d8 01       	movw	r26, r16
     ba6:	9c 93       	st	X, r25
     ba8:	4f 5f       	subi	r20, 0xFF	; 255
     baa:	24 2f       	mov	r18, r20
     bac:	30 e0       	ldi	r19, 0x00	; 0
     bae:	26 17       	cp	r18, r22
     bb0:	37 07       	cpc	r19, r23
     bb2:	88 f3       	brcs	.-30     	; 0xb96 <uart_send+0x30>
     bb4:	86 e7       	ldi	r24, 0x76	; 118
     bb6:	94 e0       	ldi	r25, 0x04	; 4
     bb8:	0e 94 2d 12 	call	0x245a	; 0x245a <puts>
     bbc:	80 e0       	ldi	r24, 0x00	; 0
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	df 91       	pop	r29
     bc2:	cf 91       	pop	r28
     bc4:	1f 91       	pop	r17
     bc6:	0f 91       	pop	r16
     bc8:	08 95       	ret

00000bca <uart_receiveChar>:
     bca:	e0 ec       	ldi	r30, 0xC0	; 192
     bcc:	f0 e0       	ldi	r31, 0x00	; 0
     bce:	80 81       	ld	r24, Z
     bd0:	88 23       	and	r24, r24
     bd2:	ec f7       	brge	.-6      	; 0xbce <uart_receiveChar+0x4>
     bd4:	80 91 c6 00 	lds	r24, 0x00C6
     bd8:	08 95       	ret

00000bda <enableReceiveINT>:
     bda:	e1 ec       	ldi	r30, 0xC1	; 193
     bdc:	f0 e0       	ldi	r31, 0x00	; 0
     bde:	80 81       	ld	r24, Z
     be0:	80 68       	ori	r24, 0x80	; 128
     be2:	80 83       	st	Z, r24
     be4:	78 94       	sei
     be6:	81 e0       	ldi	r24, 0x01	; 1
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	08 95       	ret

00000bec <disableReceiveINT>:
     bec:	e1 ec       	ldi	r30, 0xC1	; 193
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	80 81       	ld	r24, Z
     bf2:	8f 77       	andi	r24, 0x7F	; 127
     bf4:	80 83       	st	Z, r24
     bf6:	81 e0       	ldi	r24, 0x01	; 1
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	08 95       	ret

00000bfc <receiveStatus>:
     bfc:	80 91 96 09 	lds	r24, 0x0996
     c00:	81 11       	cpse	r24, r1
     c02:	08 c0       	rjmp	.+16     	; 0xc14 <receiveStatus+0x18>
     c04:	81 e2       	ldi	r24, 0x21	; 33
     c06:	8a 95       	dec	r24
     c08:	f1 f7       	brne	.-4      	; 0xc06 <receiveStatus+0xa>
     c0a:	00 00       	nop
     c0c:	80 91 96 09 	lds	r24, 0x0996
     c10:	88 23       	and	r24, r24
     c12:	c1 f3       	breq	.-16     	; 0xc04 <receiveStatus+0x8>
     c14:	81 e0       	ldi	r24, 0x01	; 1
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	08 95       	ret

00000c1a <buildTransmissionLength>:
     c1a:	0f 93       	push	r16
     c1c:	1f 93       	push	r17
     c1e:	cf 93       	push	r28
     c20:	df 93       	push	r29
     c22:	80 91 88 09 	lds	r24, 0x0988
     c26:	90 91 89 09 	lds	r25, 0x0989
     c2a:	89 2b       	or	r24, r25
     c2c:	f1 f0       	breq	.+60     	; 0xc6a <buildTransmissionLength+0x50>
     c2e:	c0 e0       	ldi	r28, 0x00	; 0
     c30:	d0 e0       	ldi	r29, 0x00	; 0
     c32:	0c e7       	ldi	r16, 0x7C	; 124
     c34:	14 e0       	ldi	r17, 0x04	; 4
     c36:	fe 01       	movw	r30, r28
     c38:	e3 58       	subi	r30, 0x83	; 131
     c3a:	f6 4f       	sbci	r31, 0xF6	; 246
     c3c:	80 81       	ld	r24, Z
     c3e:	ff 93       	push	r31
     c40:	ef 93       	push	r30
     c42:	1f 92       	push	r1
     c44:	8f 93       	push	r24
     c46:	1f 93       	push	r17
     c48:	0f 93       	push	r16
     c4a:	0e 94 15 12 	call	0x242a	; 0x242a <printf>
     c4e:	21 96       	adiw	r28, 0x01	; 1
     c50:	0f 90       	pop	r0
     c52:	0f 90       	pop	r0
     c54:	0f 90       	pop	r0
     c56:	0f 90       	pop	r0
     c58:	0f 90       	pop	r0
     c5a:	0f 90       	pop	r0
     c5c:	c9 30       	cpi	r28, 0x09	; 9
     c5e:	d1 05       	cpc	r29, r1
     c60:	51 f7       	brne	.-44     	; 0xc36 <buildTransmissionLength+0x1c>
     c62:	8a e0       	ldi	r24, 0x0A	; 10
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	0e 94 28 12 	call	0x2450	; 0x2450 <putchar>
     c6a:	10 92 8f 09 	sts	0x098F, r1
     c6e:	10 92 8e 09 	sts	0x098E, r1
     c72:	ed e7       	ldi	r30, 0x7D	; 125
     c74:	f9 e0       	ldi	r31, 0x09	; 9
     c76:	26 81       	ldd	r18, Z+6	; 0x06
     c78:	80 91 8e 09 	lds	r24, 0x098E
     c7c:	90 91 8f 09 	lds	r25, 0x098F
     c80:	2f 70       	andi	r18, 0x0F	; 15
     c82:	82 0f       	add	r24, r18
     c84:	91 1d       	adc	r25, r1
     c86:	90 93 8f 09 	sts	0x098F, r25
     c8a:	80 93 8e 09 	sts	0x098E, r24
     c8e:	95 81       	ldd	r25, Z+5	; 0x05
     c90:	20 91 8e 09 	lds	r18, 0x098E
     c94:	30 91 8f 09 	lds	r19, 0x098F
     c98:	9f 70       	andi	r25, 0x0F	; 15
     c9a:	89 2f       	mov	r24, r25
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	ac 01       	movw	r20, r24
     ca0:	44 0f       	add	r20, r20
     ca2:	55 1f       	adc	r21, r21
     ca4:	88 0f       	add	r24, r24
     ca6:	99 1f       	adc	r25, r25
     ca8:	88 0f       	add	r24, r24
     caa:	99 1f       	adc	r25, r25
     cac:	88 0f       	add	r24, r24
     cae:	99 1f       	adc	r25, r25
     cb0:	84 0f       	add	r24, r20
     cb2:	95 1f       	adc	r25, r21
     cb4:	82 0f       	add	r24, r18
     cb6:	93 1f       	adc	r25, r19
     cb8:	90 93 8f 09 	sts	0x098F, r25
     cbc:	80 93 8e 09 	sts	0x098E, r24
     cc0:	24 81       	ldd	r18, Z+4	; 0x04
     cc2:	80 91 8e 09 	lds	r24, 0x098E
     cc6:	90 91 8f 09 	lds	r25, 0x098F
     cca:	2f 70       	andi	r18, 0x0F	; 15
     ccc:	34 e6       	ldi	r19, 0x64	; 100
     cce:	23 9f       	mul	r18, r19
     cd0:	80 0d       	add	r24, r0
     cd2:	91 1d       	adc	r25, r1
     cd4:	11 24       	eor	r1, r1
     cd6:	90 93 8f 09 	sts	0x098F, r25
     cda:	80 93 8e 09 	sts	0x098E, r24
     cde:	23 81       	ldd	r18, Z+3	; 0x03
     ce0:	80 91 8e 09 	lds	r24, 0x098E
     ce4:	90 91 8f 09 	lds	r25, 0x098F
     ce8:	2f 70       	andi	r18, 0x0F	; 15
     cea:	68 ee       	ldi	r22, 0xE8	; 232
     cec:	73 e0       	ldi	r23, 0x03	; 3
     cee:	26 9f       	mul	r18, r22
     cf0:	a0 01       	movw	r20, r0
     cf2:	27 9f       	mul	r18, r23
     cf4:	50 0d       	add	r21, r0
     cf6:	11 24       	eor	r1, r1
     cf8:	84 0f       	add	r24, r20
     cfa:	95 1f       	adc	r25, r21
     cfc:	90 93 8f 09 	sts	0x098F, r25
     d00:	80 93 8e 09 	sts	0x098E, r24
     d04:	22 81       	ldd	r18, Z+2	; 0x02
     d06:	80 91 8e 09 	lds	r24, 0x098E
     d0a:	90 91 8f 09 	lds	r25, 0x098F
     d0e:	2f 70       	andi	r18, 0x0F	; 15
     d10:	60 e1       	ldi	r22, 0x10	; 16
     d12:	77 e2       	ldi	r23, 0x27	; 39
     d14:	26 9f       	mul	r18, r22
     d16:	a0 01       	movw	r20, r0
     d18:	27 9f       	mul	r18, r23
     d1a:	50 0d       	add	r21, r0
     d1c:	11 24       	eor	r1, r1
     d1e:	84 0f       	add	r24, r20
     d20:	95 1f       	adc	r25, r21
     d22:	90 93 8f 09 	sts	0x098F, r25
     d26:	80 93 8e 09 	sts	0x098E, r24
     d2a:	80 91 8e 09 	lds	r24, 0x098E
     d2e:	90 91 8f 09 	lds	r25, 0x098F
     d32:	df 91       	pop	r29
     d34:	cf 91       	pop	r28
     d36:	1f 91       	pop	r17
     d38:	0f 91       	pop	r16
     d3a:	08 95       	ret

00000d3c <getTransmissionLength>:
     d3c:	80 91 8e 09 	lds	r24, 0x098E
     d40:	90 91 8f 09 	lds	r25, 0x098F
     d44:	08 95       	ret

00000d46 <getMessageHeader>:
     d46:	8d e7       	ldi	r24, 0x7D	; 125
     d48:	99 e0       	ldi	r25, 0x09	; 9
     d4a:	08 95       	ret

00000d4c <updateRAMAddress>:

void updateRAMAddress(uint32_t address)
{
	RAMAddress = address; 
     d4c:	60 93 90 09 	sts	0x0990, r22
     d50:	70 93 91 09 	sts	0x0991, r23
     d54:	80 93 92 09 	sts	0x0992, r24
     d58:	90 93 93 09 	sts	0x0993, r25
     d5c:	08 95       	ret

00000d5e <sendCommand>:
}

unsigned int sendCommand(int8_t prefix, char* command, char* value)
{
     d5e:	0f 93       	push	r16
     d60:	1f 93       	push	r17
     d62:	cf 93       	push	r28
     d64:	df 93       	push	r29
	//char* fullCommand = (char *)malloc(MaxSendSize);
	switch(prefix)
     d66:	81 30       	cpi	r24, 0x01	; 1
     d68:	31 f0       	breq	.+12     	; 0xd76 <sendCommand+0x18>
     d6a:	82 30       	cpi	r24, 0x02	; 2
     d6c:	71 f0       	breq	.+28     	; 0xd8a <sendCommand+0x2c>
     d6e:	8f 3f       	cpi	r24, 0xFF	; 255
     d70:	09 f0       	breq	.+2      	; 0xd74 <sendCommand+0x16>
     d72:	6c c0       	rjmp	.+216    	; 0xe4c <sendCommand+0xee>
     d74:	17 c0       	rjmp	.+46     	; 0xda4 <sendCommand+0x46>
	{
		case NOPREFIX: 
			break; 
		case GET:
			strcpy(fullCommand, "get "); 
     d76:	85 e0       	ldi	r24, 0x05	; 5
     d78:	e3 e7       	ldi	r30, 0x73	; 115
     d7a:	f5 e0       	ldi	r31, 0x05	; 5
     d7c:	a7 e9       	ldi	r26, 0x97	; 151
     d7e:	b9 e0       	ldi	r27, 0x09	; 9
     d80:	01 90       	ld	r0, Z+
     d82:	0d 92       	st	X+, r0
     d84:	8a 95       	dec	r24
     d86:	e1 f7       	brne	.-8      	; 0xd80 <sendCommand+0x22>
			//strcat(fullCommand, "get ");
			break; 
     d88:	0d c0       	rjmp	.+26     	; 0xda4 <sendCommand+0x46>
		case SET: 
			strcat(fullCommand, "set ");
     d8a:	a7 e9       	ldi	r26, 0x97	; 151
     d8c:	b9 e0       	ldi	r27, 0x09	; 9
     d8e:	0d 90       	ld	r0, X+
     d90:	00 20       	and	r0, r0
     d92:	e9 f7       	brne	.-6      	; 0xd8e <sendCommand+0x30>
     d94:	11 97       	sbiw	r26, 0x01	; 1
     d96:	85 e0       	ldi	r24, 0x05	; 5
     d98:	e8 e9       	ldi	r30, 0x98	; 152
     d9a:	f4 e0       	ldi	r31, 0x04	; 4
     d9c:	01 90       	ld	r0, Z+
     d9e:	0d 92       	st	X+, r0
     da0:	8a 95       	dec	r24
     da2:	e1 f7       	brne	.-8      	; 0xd9c <sendCommand+0x3e>
     da4:	ea 01       	movw	r28, r20
			return 0; 
			break; 
	}
	//printf("Command: %s Length: %d, Address: %p\n", fullCommand, strlen(fullCommand), fullCommand);
	//printf("Command: %s Length: %d, Address: %p\n", command, strlen(command),  command);
	strcat(fullCommand, command);
     da6:	87 e9       	ldi	r24, 0x97	; 151
     da8:	99 e0       	ldi	r25, 0x09	; 9
     daa:	0e 94 cb 11 	call	0x2396	; 0x2396 <strcat>
	//printf("Full Command: %s", fullCommand);	
	if(value != NOVAL)
     dae:	86 e0       	ldi	r24, 0x06	; 6
     db0:	c0 3c       	cpi	r28, 0xC0	; 192
     db2:	d8 07       	cpc	r29, r24
     db4:	79 f0       	breq	.+30     	; 0xdd4 <sendCommand+0x76>
	{
		strcat(fullCommand, " ");
     db6:	e7 e9       	ldi	r30, 0x97	; 151
     db8:	f9 e0       	ldi	r31, 0x09	; 9
     dba:	01 90       	ld	r0, Z+
     dbc:	00 20       	and	r0, r0
     dbe:	e9 f7       	brne	.-6      	; 0xdba <sendCommand+0x5c>
     dc0:	31 97       	sbiw	r30, 0x01	; 1
     dc2:	80 e2       	ldi	r24, 0x20	; 32
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	91 83       	std	Z+1, r25	; 0x01
     dc8:	80 83       	st	Z, r24
		strcat(fullCommand, value);
     dca:	be 01       	movw	r22, r28
     dcc:	87 e9       	ldi	r24, 0x97	; 151
     dce:	99 e0       	ldi	r25, 0x09	; 9
     dd0:	0e 94 cb 11 	call	0x2396	; 0x2396 <strcat>
	}
	
	//printf("fullCommand: %s\n", fullCommand);
	strcat(fullCommand, ENDCOMMAND);
     dd4:	c7 e9       	ldi	r28, 0x97	; 151
     dd6:	d9 e0       	ldi	r29, 0x09	; 9
     dd8:	fe 01       	movw	r30, r28
     dda:	01 90       	ld	r0, Z+
     ddc:	00 20       	and	r0, r0
     dde:	e9 f7       	brne	.-6      	; 0xdda <sendCommand+0x7c>
     de0:	31 97       	sbiw	r30, 0x01	; 1
     de2:	8d e0       	ldi	r24, 0x0D	; 13
     de4:	9a e0       	ldi	r25, 0x0A	; 10
     de6:	a0 e0       	ldi	r26, 0x00	; 0
     de8:	80 83       	st	Z, r24
     dea:	91 83       	std	Z+1, r25	; 0x01
     dec:	a2 83       	std	Z+2, r26	; 0x02
	uint16_t length = strlen(fullCommand);
     dee:	fe 01       	movw	r30, r28
     df0:	01 90       	ld	r0, Z+
     df2:	00 20       	and	r0, r0
     df4:	e9 f7       	brne	.-6      	; 0xdf0 <sendCommand+0x92>
     df6:	31 97       	sbiw	r30, 0x01	; 1
     df8:	8f 01       	movw	r16, r30
     dfa:	07 59       	subi	r16, 0x97	; 151
     dfc:	19 40       	sbci	r17, 0x09	; 9
	printf("Command: %s Length: %d, Address: %p\n", fullCommand, length, fullCommand);
     dfe:	df 93       	push	r29
     e00:	cf 93       	push	r28
     e02:	1f 93       	push	r17
     e04:	0f 93       	push	r16
     e06:	df 93       	push	r29
     e08:	cf 93       	push	r28
     e0a:	8d e9       	ldi	r24, 0x9D	; 157
     e0c:	94 e0       	ldi	r25, 0x04	; 4
     e0e:	9f 93       	push	r25
     e10:	8f 93       	push	r24
     e12:	0e 94 15 12 	call	0x242a	; 0x242a <printf>
	uart_send(fullCommand, length);
     e16:	b8 01       	movw	r22, r16
     e18:	ce 01       	movw	r24, r28
     e1a:	a5 de       	rcall	.-694    	; 0xb66 <uart_send>
	memset(fullCommand, 0x00, 100);
     e1c:	84 e6       	ldi	r24, 0x64	; 100
     e1e:	fe 01       	movw	r30, r28
     e20:	11 92       	st	Z+, r1
     e22:	8a 95       	dec	r24
     e24:	e9 f7       	brne	.-6      	; 0xe20 <sendCommand+0xc2>
	//PORTD |= (1<<RTS);
	printf("Freed!\n");
     e26:	82 ec       	ldi	r24, 0xC2	; 194
     e28:	94 e0       	ldi	r25, 0x04	; 4
     e2a:	0e 94 2d 12 	call	0x245a	; 0x245a <puts>
	printf("Returning!\n");
     e2e:	89 ec       	ldi	r24, 0xC9	; 201
     e30:	94 e0       	ldi	r25, 0x04	; 4
     e32:	0e 94 2d 12 	call	0x245a	; 0x245a <puts>
	return 1; 
     e36:	8d b7       	in	r24, 0x3d	; 61
     e38:	9e b7       	in	r25, 0x3e	; 62
     e3a:	08 96       	adiw	r24, 0x08	; 8
     e3c:	0f b6       	in	r0, 0x3f	; 63
     e3e:	f8 94       	cli
     e40:	9e bf       	out	0x3e, r25	; 62
     e42:	0f be       	out	0x3f, r0	; 63
     e44:	8d bf       	out	0x3d, r24	; 61
     e46:	81 e0       	ldi	r24, 0x01	; 1
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	02 c0       	rjmp	.+4      	; 0xe50 <sendCommand+0xf2>
			break; 
		case SET: 
			strcat(fullCommand, "set ");
			break; 
		default:
			return 0; 
     e4c:	80 e0       	ldi	r24, 0x00	; 0
     e4e:	90 e0       	ldi	r25, 0x00	; 0
	memset(fullCommand, 0x00, 100);
	//PORTD |= (1<<RTS);
	printf("Freed!\n");
	printf("Returning!\n");
	return 1; 
}
     e50:	df 91       	pop	r29
     e52:	cf 91       	pop	r28
     e54:	1f 91       	pop	r17
     e56:	0f 91       	pop	r16
     e58:	08 95       	ret

00000e5a <__vector_25>:
	//PORTD |= (1<<CTS);
	//sei();
//}

ISR(USART0_RX_vect)
{
     e5a:	1f 92       	push	r1
     e5c:	0f 92       	push	r0
     e5e:	0f b6       	in	r0, 0x3f	; 63
     e60:	0f 92       	push	r0
     e62:	11 24       	eor	r1, r1
     e64:	0b b6       	in	r0, 0x3b	; 59
     e66:	0f 92       	push	r0
     e68:	2f 93       	push	r18
     e6a:	3f 93       	push	r19
     e6c:	4f 93       	push	r20
     e6e:	5f 93       	push	r21
     e70:	6f 93       	push	r22
     e72:	7f 93       	push	r23
     e74:	8f 93       	push	r24
     e76:	9f 93       	push	r25
     e78:	af 93       	push	r26
     e7a:	bf 93       	push	r27
     e7c:	cf 93       	push	r28
     e7e:	df 93       	push	r29
     e80:	ef 93       	push	r30
     e82:	ff 93       	push	r31
	cli();
     e84:	f8 94       	cli
	//if(testPrint)
		//printf("Interrupt!\n");
	if(!bufferStart)
     e86:	80 91 94 09 	lds	r24, 0x0994
     e8a:	90 91 95 09 	lds	r25, 0x0995
     e8e:	89 2b       	or	r24, r25
     e90:	e1 f4       	brne	.+56     	; 0xeca <__vector_25+0x70>
	{
		buff = uart_receiveChar();
     e92:	9b de       	rcall	.-714    	; 0xbca <uart_receiveChar>
     e94:	80 93 86 09 	sts	0x0986, r24
		//Header always begins with letter 'R'
		if(buff == headerStartVal)
     e98:	80 91 86 09 	lds	r24, 0x0986
     e9c:	82 35       	cpi	r24, 0x52	; 82
     e9e:	09 f0       	breq	.+2      	; 0xea2 <__vector_25+0x48>
     ea0:	97 c0       	rjmp	.+302    	; 0xfd0 <__vector_25+0x176>
		{
			//PORTD &= ~(1<<RTS);
			//if(testPrint)
				//printf("Beginning Found @ %d\n", i); 
				
			i = 0;
     ea2:	10 92 8b 09 	sts	0x098B, r1
     ea6:	10 92 8a 09 	sts	0x098A, r1
			headerBuffer[i] = buff; 
     eaa:	e0 91 8a 09 	lds	r30, 0x098A
     eae:	f0 91 8b 09 	lds	r31, 0x098B
     eb2:	80 91 86 09 	lds	r24, 0x0986
     eb6:	e3 58       	subi	r30, 0x83	; 131
     eb8:	f6 4f       	sbci	r31, 0xF6	; 246
     eba:	80 83       	st	Z, r24
			
				//if(testPrint)
					//printf("Header: %c @ address %p", headerBuffer[i], headerBuffer); 
					
			bufferStart = 1;
     ebc:	81 e0       	ldi	r24, 0x01	; 1
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	90 93 95 09 	sts	0x0995, r25
     ec4:	80 93 94 09 	sts	0x0994, r24
     ec8:	83 c0       	rjmp	.+262    	; 0xfd0 <__vector_25+0x176>
	
	else
	{
		//printf("Beginning of buffer.\n");
		//Grab Receive Header
		if(i < endHeader)
     eca:	80 91 8a 09 	lds	r24, 0x098A
     ece:	90 91 8b 09 	lds	r25, 0x098B
     ed2:	09 97       	sbiw	r24, 0x09	; 9
     ed4:	48 f4       	brcc	.+18     	; 0xee8 <__vector_25+0x8e>
		{
			//PORTD &= ~(1<<RTS);
			headerBuffer[i] = uart_receiveChar();
     ed6:	c0 91 8a 09 	lds	r28, 0x098A
     eda:	d0 91 8b 09 	lds	r29, 0x098B
     ede:	75 de       	rcall	.-790    	; 0xbca <uart_receiveChar>
     ee0:	c3 58       	subi	r28, 0x83	; 131
     ee2:	d6 4f       	sbci	r29, 0xF6	; 246
     ee4:	88 83       	st	Y, r24
     ee6:	74 c0       	rjmp	.+232    	; 0xfd0 <__vector_25+0x176>
				//printf("Header: %c @ address %p\n", headerBuffer[i], headerBuffer + i);
			//i++; 
			//RAMWriteByte(uart_receiveChar(), i);
			//PORTD |= (1<<RTS); 
		}
		else if(i == endHeader)
     ee8:	80 91 8a 09 	lds	r24, 0x098A
     eec:	90 91 8b 09 	lds	r25, 0x098B
     ef0:	09 97       	sbiw	r24, 0x09	; 9
     ef2:	29 f5       	brne	.+74     	; 0xf3e <__vector_25+0xe4>
		{
			transLength = buildTransmissionLength();
     ef4:	92 de       	rcall	.-732    	; 0xc1a <buildTransmissionLength>
     ef6:	90 93 8f 09 	sts	0x098F, r25
     efa:	80 93 8e 09 	sts	0x098E, r24
			//i++; 
			if(testPrint)
     efe:	80 91 88 09 	lds	r24, 0x0988
     f02:	90 91 89 09 	lds	r25, 0x0989
     f06:	89 2b       	or	r24, r25
     f08:	09 f4       	brne	.+2      	; 0xf0c <__vector_25+0xb2>
     f0a:	62 c0       	rjmp	.+196    	; 0xfd0 <__vector_25+0x176>
				printf("Transmission Length: %d, i: %d\n", transLength, i);
     f0c:	20 91 8a 09 	lds	r18, 0x098A
     f10:	30 91 8b 09 	lds	r19, 0x098B
     f14:	80 91 8e 09 	lds	r24, 0x098E
     f18:	90 91 8f 09 	lds	r25, 0x098F
     f1c:	3f 93       	push	r19
     f1e:	2f 93       	push	r18
     f20:	9f 93       	push	r25
     f22:	8f 93       	push	r24
     f24:	84 ed       	ldi	r24, 0xD4	; 212
     f26:	94 e0       	ldi	r25, 0x04	; 4
     f28:	9f 93       	push	r25
     f2a:	8f 93       	push	r24
     f2c:	0e 94 15 12 	call	0x242a	; 0x242a <printf>
     f30:	0f 90       	pop	r0
     f32:	0f 90       	pop	r0
     f34:	0f 90       	pop	r0
     f36:	0f 90       	pop	r0
     f38:	0f 90       	pop	r0
     f3a:	0f 90       	pop	r0
     f3c:	49 c0       	rjmp	.+146    	; 0xfd0 <__vector_25+0x176>
		}
		else
		{
			if(i < transLength + endHeader)
     f3e:	80 91 8e 09 	lds	r24, 0x098E
     f42:	90 91 8f 09 	lds	r25, 0x098F
     f46:	20 91 8a 09 	lds	r18, 0x098A
     f4a:	30 91 8b 09 	lds	r19, 0x098B
     f4e:	09 96       	adiw	r24, 0x09	; 9
     f50:	28 17       	cp	r18, r24
     f52:	39 07       	cpc	r19, r25
     f54:	d8 f4       	brcc	.+54     	; 0xf8c <__vector_25+0x132>
			{
				
				buff = uart_receiveChar();
     f56:	39 de       	rcall	.-910    	; 0xbca <uart_receiveChar>
     f58:	80 93 86 09 	sts	0x0986, r24
				RAMWriteByte(buff, RAMAddress + i - endHeader -1);	
     f5c:	20 91 8a 09 	lds	r18, 0x098A
     f60:	30 91 8b 09 	lds	r19, 0x098B
     f64:	40 91 90 09 	lds	r20, 0x0990
     f68:	50 91 91 09 	lds	r21, 0x0991
     f6c:	60 91 92 09 	lds	r22, 0x0992
     f70:	70 91 93 09 	lds	r23, 0x0993
     f74:	80 91 86 09 	lds	r24, 0x0986
     f78:	4a 50       	subi	r20, 0x0A	; 10
     f7a:	51 09       	sbc	r21, r1
     f7c:	61 09       	sbc	r22, r1
     f7e:	71 09       	sbc	r23, r1
     f80:	42 0f       	add	r20, r18
     f82:	53 1f       	adc	r21, r19
     f84:	61 1d       	adc	r22, r1
     f86:	71 1d       	adc	r23, r1
     f88:	81 dc       	rcall	.-1790   	; 0x88c <RAMWriteByte>
     f8a:	22 c0       	rjmp	.+68     	; 0xfd0 <__vector_25+0x176>
			else
			{
				//printf("End of String!\n");
				//RAMWriteByte(0x00, RAMAddress + i - endHeader -1);
				//cli();
				i = 0;
     f8c:	10 92 8b 09 	sts	0x098B, r1
     f90:	10 92 8a 09 	sts	0x098A, r1
				bufferStart = 0;
     f94:	10 92 95 09 	sts	0x0995, r1
     f98:	10 92 94 09 	sts	0x0994, r1
				compressFlag = 0; 
     f9c:	10 92 8d 09 	sts	0x098D, r1
				secondNibble = 0; 
     fa0:	10 92 8c 09 	sts	0x098C, r1
				compressBuff = 0x00; 
     fa4:	10 92 87 09 	sts	0x0987, r1
				//done receiving
				receiveWifiFlag = 1;
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	80 93 96 09 	sts	0x0996, r24
				printf("Transmission Length: %d\n", buildTransmissionLength());
     fae:	35 de       	rcall	.-918    	; 0xc1a <buildTransmissionLength>
     fb0:	9f 93       	push	r25
     fb2:	8f 93       	push	r24
     fb4:	84 ef       	ldi	r24, 0xF4	; 244
     fb6:	94 e0       	ldi	r25, 0x04	; 4
     fb8:	9f 93       	push	r25
     fba:	8f 93       	push	r24
     fbc:	0e 94 15 12 	call	0x242a	; 0x242a <printf>
				printf("Done Receiving!\n");
     fc0:	8d e0       	ldi	r24, 0x0D	; 13
     fc2:	95 e0       	ldi	r25, 0x05	; 5
     fc4:	0e 94 2d 12 	call	0x245a	; 0x245a <puts>
     fc8:	0f 90       	pop	r0
     fca:	0f 90       	pop	r0
     fcc:	0f 90       	pop	r0
     fce:	0f 90       	pop	r0
		}
		//printf("%d\n", i); 
		//i++; 
	}
	//if(bufferStart && !receiveWifiFlag)
	i++; 
     fd0:	80 91 8a 09 	lds	r24, 0x098A
     fd4:	90 91 8b 09 	lds	r25, 0x098B
     fd8:	01 96       	adiw	r24, 0x01	; 1
     fda:	90 93 8b 09 	sts	0x098B, r25
     fde:	80 93 8a 09 	sts	0x098A, r24
		
	//PORTD |= (1<<CTS); 
	sei(); 
     fe2:	78 94       	sei
}
     fe4:	ff 91       	pop	r31
     fe6:	ef 91       	pop	r30
     fe8:	df 91       	pop	r29
     fea:	cf 91       	pop	r28
     fec:	bf 91       	pop	r27
     fee:	af 91       	pop	r26
     ff0:	9f 91       	pop	r25
     ff2:	8f 91       	pop	r24
     ff4:	7f 91       	pop	r23
     ff6:	6f 91       	pop	r22
     ff8:	5f 91       	pop	r21
     ffa:	4f 91       	pop	r20
     ffc:	3f 91       	pop	r19
     ffe:	2f 91       	pop	r18
    1000:	0f 90       	pop	r0
    1002:	0b be       	out	0x3b, r0	; 59
    1004:	0f 90       	pop	r0
    1006:	0f be       	out	0x3f, r0	; 63
    1008:	0f 90       	pop	r0
    100a:	1f 90       	pop	r1
    100c:	18 95       	reti

0000100e <flagInit>:
	RAMPrint(WIFI_QSTRING_ADDRESS, qLength);
	//RAMRead(WIFI_QSTRING_ADDRESS, qLength, buffer);
	SendData(WIFI_QSTRING_ADDRESS, qLength, 1);
	memset(filepath, 0x00, 100);
	printf("Sent!");
}
    100e:	e3 e6       	ldi	r30, 0x63	; 99
    1010:	fa e0       	ldi	r31, 0x0A	; 10
    1012:	10 82       	st	Z, r1
    1014:	11 82       	std	Z+1, r1	; 0x01
    1016:	12 82       	std	Z+2, r1	; 0x02
    1018:	13 82       	std	Z+3, r1	; 0x03
    101a:	14 82       	std	Z+4, r1	; 0x04
    101c:	15 82       	std	Z+5, r1	; 0x05
    101e:	65 99       	sbic	0x0c, 5	; 12
    1020:	08 c0       	rjmp	.+16     	; 0x1032 <flagInit+0x24>
    1022:	8d e1       	ldi	r24, 0x1D	; 29
    1024:	95 e0       	ldi	r25, 0x05	; 5
    1026:	0e 94 2d 12 	call	0x245a	; 0x245a <puts>
    102a:	06 d2       	rcall	.+1036   	; 0x1438 <ethernetInit>
    102c:	81 e0       	ldi	r24, 0x01	; 1
    102e:	80 93 63 0a 	sts	0x0A63, r24
    1032:	08 95       	ret

00001034 <pollingInit>:
    1034:	e1 e8       	ldi	r30, 0x81	; 129
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	80 81       	ld	r24, Z
    103a:	84 60       	ori	r24, 0x04	; 4
    103c:	80 83       	st	Z, r24
    103e:	10 92 84 00 	sts	0x0084, r1
    1042:	10 92 85 00 	sts	0x0085, r1
    1046:	81 e0       	ldi	r24, 0x01	; 1
    1048:	80 93 6f 00 	sts	0x006F, r24
    104c:	08 95       	ret

0000104e <ethernetPlugInit>:
    104e:	80 e2       	ldi	r24, 0x20	; 32
    1050:	8d bb       	out	0x1d, r24	; 29
    1052:	84 e0       	ldi	r24, 0x04	; 4
    1054:	80 93 6a 00 	sts	0x006A, r24
    1058:	08 95       	ret

0000105a <connectionInit>:
    105a:	0e 94 86 11 	call	0x230c	; 0x230c <uart2_init>
    105e:	73 dd       	rcall	.-1306   	; 0xb46 <uart_init>
    1060:	20 dc       	rcall	.-1984   	; 0x8a2 <SPI_Init>
    1062:	d5 df       	rcall	.-86     	; 0x100e <flagInit>
    1064:	f4 df       	rcall	.-24     	; 0x104e <ethernetPlugInit>
    1066:	84 e6       	ldi	r24, 0x64	; 100
    1068:	eb ef       	ldi	r30, 0xFB	; 251
    106a:	f9 e0       	ldi	r31, 0x09	; 9
    106c:	df 01       	movw	r26, r30
    106e:	1d 92       	st	X+, r1
    1070:	8a 95       	dec	r24
    1072:	e9 f7       	brne	.-6      	; 0x106e <connectionInit+0x14>
    1074:	81 e0       	ldi	r24, 0x01	; 1
    1076:	80 93 64 0a 	sts	0x0A64, r24
    107a:	08 95       	ret

0000107c <clearFlags>:
    107c:	cf 93       	push	r28
    107e:	df 93       	push	r29
    1080:	80 91 63 0a 	lds	r24, 0x0A63
    1084:	88 23       	and	r24, r24
    1086:	b1 f1       	breq	.+108    	; 0x10f4 <clearFlags+0x78>
    1088:	cb ef       	ldi	r28, 0xFB	; 251
    108a:	d9 e0       	ldi	r29, 0x09	; 9
    108c:	84 e6       	ldi	r24, 0x64	; 100
    108e:	de 01       	movw	r26, r28
    1090:	1d 92       	st	X+, r1
    1092:	8a 95       	dec	r24
    1094:	e9 f7       	brne	.-6      	; 0x1090 <clearFlags+0x14>
    1096:	85 e0       	ldi	r24, 0x05	; 5
    1098:	ef e2       	ldi	r30, 0x2F	; 47
    109a:	f5 e0       	ldi	r31, 0x05	; 5
    109c:	de 01       	movw	r26, r28
    109e:	01 90       	ld	r0, Z+
    10a0:	0d 92       	st	X+, r0
    10a2:	8a 95       	dec	r24
    10a4:	e1 f7       	brne	.-8      	; 0x109e <clearFlags+0x22>
    10a6:	de 01       	movw	r26, r28
    10a8:	0d 90       	ld	r0, X+
    10aa:	00 20       	and	r0, r0
    10ac:	e9 f7       	brne	.-6      	; 0x10a8 <clearFlags+0x2c>
    10ae:	11 97       	sbiw	r26, 0x01	; 1
    10b0:	85 e1       	ldi	r24, 0x15	; 21
    10b2:	e4 e3       	ldi	r30, 0x34	; 52
    10b4:	f5 e0       	ldi	r31, 0x05	; 5
    10b6:	01 90       	ld	r0, Z+
    10b8:	0d 92       	st	X+, r0
    10ba:	8a 95       	dec	r24
    10bc:	e1 f7       	brne	.-8      	; 0x10b6 <clearFlags+0x3a>
    10be:	de 01       	movw	r26, r28
    10c0:	0d 90       	ld	r0, X+
    10c2:	00 20       	and	r0, r0
    10c4:	e9 f7       	brne	.-6      	; 0x10c0 <clearFlags+0x44>
    10c6:	11 97       	sbiw	r26, 0x01	; 1
    10c8:	82 e1       	ldi	r24, 0x12	; 18
    10ca:	e9 e4       	ldi	r30, 0x49	; 73
    10cc:	f5 e0       	ldi	r31, 0x05	; 5
    10ce:	01 90       	ld	r0, Z+
    10d0:	0d 92       	st	X+, r0
    10d2:	8a 95       	dec	r24
    10d4:	e1 f7       	brne	.-8      	; 0x10ce <clearFlags+0x52>
    10d6:	de 01       	movw	r26, r28
    10d8:	0d 90       	ld	r0, X+
    10da:	00 20       	and	r0, r0
    10dc:	e9 f7       	brne	.-6      	; 0x10d8 <clearFlags+0x5c>
    10de:	11 97       	sbiw	r26, 0x01	; 1
    10e0:	83 e1       	ldi	r24, 0x13	; 19
    10e2:	eb e5       	ldi	r30, 0x5B	; 91
    10e4:	f5 e0       	ldi	r31, 0x05	; 5
    10e6:	01 90       	ld	r0, Z+
    10e8:	0d 92       	st	X+, r0
    10ea:	8a 95       	dec	r24
    10ec:	e1 f7       	brne	.-8      	; 0x10e6 <clearFlags+0x6a>
    10ee:	ce 01       	movw	r24, r28
    10f0:	b9 d1       	rcall	.+882    	; 0x1464 <updateFileEthernet>
    10f2:	34 c0       	rjmp	.+104    	; 0x115c <clearFlags+0xe0>
    10f4:	80 91 64 0a 	lds	r24, 0x0A64
    10f8:	88 23       	and	r24, r24
    10fa:	81 f1       	breq	.+96     	; 0x115c <clearFlags+0xe0>
    10fc:	cb ef       	ldi	r28, 0xFB	; 251
    10fe:	d9 e0       	ldi	r29, 0x09	; 9
    1100:	8a e0       	ldi	r24, 0x0A	; 10
    1102:	ee e6       	ldi	r30, 0x6E	; 110
    1104:	f5 e0       	ldi	r31, 0x05	; 5
    1106:	de 01       	movw	r26, r28
    1108:	01 90       	ld	r0, Z+
    110a:	0d 92       	st	X+, r0
    110c:	8a 95       	dec	r24
    110e:	e1 f7       	brne	.-8      	; 0x1108 <clearFlags+0x8c>
    1110:	de 01       	movw	r26, r28
    1112:	0d 90       	ld	r0, X+
    1114:	00 20       	and	r0, r0
    1116:	e9 f7       	brne	.-6      	; 0x1112 <clearFlags+0x96>
    1118:	11 97       	sbiw	r26, 0x01	; 1
    111a:	85 e1       	ldi	r24, 0x15	; 21
    111c:	e4 e3       	ldi	r30, 0x34	; 52
    111e:	f5 e0       	ldi	r31, 0x05	; 5
    1120:	01 90       	ld	r0, Z+
    1122:	0d 92       	st	X+, r0
    1124:	8a 95       	dec	r24
    1126:	e1 f7       	brne	.-8      	; 0x1120 <clearFlags+0xa4>
    1128:	de 01       	movw	r26, r28
    112a:	0d 90       	ld	r0, X+
    112c:	00 20       	and	r0, r0
    112e:	e9 f7       	brne	.-6      	; 0x112a <clearFlags+0xae>
    1130:	11 97       	sbiw	r26, 0x01	; 1
    1132:	82 e1       	ldi	r24, 0x12	; 18
    1134:	e9 e4       	ldi	r30, 0x49	; 73
    1136:	f5 e0       	ldi	r31, 0x05	; 5
    1138:	01 90       	ld	r0, Z+
    113a:	0d 92       	st	X+, r0
    113c:	8a 95       	dec	r24
    113e:	e1 f7       	brne	.-8      	; 0x1138 <clearFlags+0xbc>
    1140:	de 01       	movw	r26, r28
    1142:	0d 90       	ld	r0, X+
    1144:	00 20       	and	r0, r0
    1146:	e9 f7       	brne	.-6      	; 0x1142 <clearFlags+0xc6>
    1148:	11 97       	sbiw	r26, 0x01	; 1
    114a:	83 e1       	ldi	r24, 0x13	; 19
    114c:	eb e5       	ldi	r30, 0x5B	; 91
    114e:	f5 e0       	ldi	r31, 0x05	; 5
    1150:	01 90       	ld	r0, Z+
    1152:	0d 92       	st	X+, r0
    1154:	8a 95       	dec	r24
    1156:	e1 f7       	brne	.-8      	; 0x1150 <clearFlags+0xd4>
    1158:	ce 01       	movw	r24, r28
    115a:	bb d2       	rcall	.+1398   	; 0x16d2 <updateFileWifi>
    115c:	84 e6       	ldi	r24, 0x64	; 100
    115e:	eb ef       	ldi	r30, 0xFB	; 251
    1160:	f9 e0       	ldi	r31, 0x09	; 9
    1162:	df 01       	movw	r26, r30
    1164:	1d 92       	st	X+, r1
    1166:	8a 95       	dec	r24
    1168:	e9 f7       	brne	.-6      	; 0x1164 <clearFlags+0xe8>
    116a:	81 e0       	ldi	r24, 0x01	; 1
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	df 91       	pop	r29
    1170:	cf 91       	pop	r28
    1172:	08 95       	ret

00001174 <getHexFile>:

int getHexFile()
{
    1174:	0f 93       	push	r16
    1176:	1f 93       	push	r17
    1178:	cf 93       	push	r28
    117a:	df 93       	push	r29
	//Flags[WIFI] = 1;
	if(Flags[WIFI])
    117c:	80 91 64 0a 	lds	r24, 0x0A64
    1180:	88 23       	and	r24, r24
    1182:	09 f4       	brne	.+2      	; 0x1186 <getHexFile+0x12>
    1184:	5b c0       	rjmp	.+182    	; 0x123c <getHexFile+0xc8>
	{
		uint16_t transLength; 
		strcpy(filepath, URL);
    1186:	cb ef       	ldi	r28, 0xFB	; 251
    1188:	d9 e0       	ldi	r29, 0x09	; 9
    118a:	85 e1       	ldi	r24, 0x15	; 21
    118c:	e4 e3       	ldi	r30, 0x34	; 52
    118e:	f5 e0       	ldi	r31, 0x05	; 5
    1190:	de 01       	movw	r26, r28
    1192:	01 90       	ld	r0, Z+
    1194:	0d 92       	st	X+, r0
    1196:	8a 95       	dec	r24
    1198:	e1 f7       	brne	.-8      	; 0x1192 <getHexFile+0x1e>
		strcat(filepath, HEX_FILE);
    119a:	de 01       	movw	r26, r28
    119c:	0d 90       	ld	r0, X+
    119e:	00 20       	and	r0, r0
    11a0:	e9 f7       	brne	.-6      	; 0x119c <getHexFile+0x28>
    11a2:	11 97       	sbiw	r26, 0x01	; 1
    11a4:	84 e2       	ldi	r24, 0x24	; 36
    11a6:	e0 eb       	ldi	r30, 0xB0	; 176
    11a8:	f5 e0       	ldi	r31, 0x05	; 5
    11aa:	01 90       	ld	r0, Z+
    11ac:	0d 92       	st	X+, r0
    11ae:	8a 95       	dec	r24
    11b0:	e1 f7       	brne	.-8      	; 0x11aa <getHexFile+0x36>
		//setTestPrint(1);
		//printf("Compress Flag Set!");
		//setCompressFlag(1);
		transLength = getFileWifi(filepath, 1, HEX_FILE_ADDRESS, 1);
    11b2:	01 e0       	ldi	r16, 0x01	; 1
    11b4:	10 e0       	ldi	r17, 0x00	; 0
    11b6:	20 e0       	ldi	r18, 0x00	; 0
    11b8:	30 e0       	ldi	r19, 0x00	; 0
    11ba:	a9 01       	movw	r20, r18
    11bc:	61 e0       	ldi	r22, 0x01	; 1
    11be:	70 e0       	ldi	r23, 0x00	; 0
    11c0:	ce 01       	movw	r24, r28
    11c2:	02 d2       	rcall	.+1028   	; 0x15c8 <getFileWifi>
    11c4:	08 2f       	mov	r16, r24
    11c6:	19 2f       	mov	r17, r25
		printf("WTF HELLO4!!!\n");
    11c8:	84 ed       	ldi	r24, 0xD4	; 212
    11ca:	95 e0       	ldi	r25, 0x05	; 5
    11cc:	0e 94 2d 12 	call	0x245a	; 0x245a <puts>
		printf("Uncompressed Trans Length: %d\n", transLength); 
    11d0:	1f 93       	push	r17
    11d2:	0f 93       	push	r16
    11d4:	82 ee       	ldi	r24, 0xE2	; 226
    11d6:	95 e0       	ldi	r25, 0x05	; 5
    11d8:	9f 93       	push	r25
    11da:	8f 93       	push	r24
    11dc:	0e 94 15 12 	call	0x242a	; 0x242a <printf>
		//RAMPrint(HEX_FILE_ADDRESS, 100);
		compressFile(transLength); 
    11e0:	80 2f       	mov	r24, r16
    11e2:	91 2f       	mov	r25, r17
    11e4:	af d3       	rcall	.+1886   	; 0x1944 <compressFile>
		memset(filepath, 0x00, 100);
    11e6:	84 e6       	ldi	r24, 0x64	; 100
    11e8:	fe 01       	movw	r30, r28
    11ea:	11 92       	st	Z+, r1
    11ec:	8a 95       	dec	r24
    11ee:	e9 f7       	brne	.-6      	; 0x11ea <getHexFile+0x76>
		strcpy(filepath, URL);
    11f0:	85 e1       	ldi	r24, 0x15	; 21
    11f2:	e4 e3       	ldi	r30, 0x34	; 52
    11f4:	f5 e0       	ldi	r31, 0x05	; 5
    11f6:	de 01       	movw	r26, r28
    11f8:	01 90       	ld	r0, Z+
    11fa:	0d 92       	st	X+, r0
    11fc:	8a 95       	dec	r24
    11fe:	e1 f7       	brne	.-8      	; 0x11f8 <getHexFile+0x84>
		strcat(filepath, DEVICE_FILE);
    1200:	de 01       	movw	r26, r28
    1202:	0d 90       	ld	r0, X+
    1204:	00 20       	and	r0, r0
    1206:	e9 f7       	brne	.-6      	; 0x1202 <getHexFile+0x8e>
    1208:	11 97       	sbiw	r26, 0x01	; 1
    120a:	87 e2       	ldi	r24, 0x27	; 39
    120c:	e1 e0       	ldi	r30, 0x01	; 1
    120e:	f6 e0       	ldi	r31, 0x06	; 6
    1210:	01 90       	ld	r0, Z+
    1212:	0d 92       	st	X+, r0
    1214:	8a 95       	dec	r24
    1216:	e1 f7       	brne	.-8      	; 0x1210 <getHexFile+0x9c>
		getFileWifi(filepath, 1, STATUS_FLAG_ADDRESS + DEVICE_ID, 1); 
    1218:	01 e0       	ldi	r16, 0x01	; 1
    121a:	10 e0       	ldi	r17, 0x00	; 0
    121c:	25 e0       	ldi	r18, 0x05	; 5
    121e:	30 e3       	ldi	r19, 0x30	; 48
    1220:	40 e0       	ldi	r20, 0x00	; 0
    1222:	50 e0       	ldi	r21, 0x00	; 0
    1224:	61 e0       	ldi	r22, 0x01	; 1
    1226:	70 e0       	ldi	r23, 0x00	; 0
    1228:	ce 01       	movw	r24, r28
    122a:	ce d1       	rcall	.+924    	; 0x15c8 <getFileWifi>
		//writeHexFileTest(); 
		printf("Compressed!\n"); 
    122c:	88 e2       	ldi	r24, 0x28	; 40
    122e:	96 e0       	ldi	r25, 0x06	; 6
    1230:	0e 94 2d 12 	call	0x245a	; 0x245a <puts>
    1234:	0f 90       	pop	r0
    1236:	0f 90       	pop	r0
    1238:	0f 90       	pop	r0
    123a:	0f 90       	pop	r0
		//Program(ATtiny2313); 
		//printf("Hex File Downloaded!\n");
	}
	
	return 1; 
}
    123c:	81 e0       	ldi	r24, 0x01	; 1
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	df 91       	pop	r29
    1242:	cf 91       	pop	r28
    1244:	1f 91       	pop	r17
    1246:	0f 91       	pop	r16
    1248:	08 95       	ret

0000124a <getFlagStatus>:

int getFlagStatus()
{
    124a:	0f 93       	push	r16
    124c:	1f 93       	push	r17
    124e:	cf 93       	push	r28
    1250:	df 93       	push	r29
	TIMSK1 &= ~(1 << TOIE1);
    1252:	ef e6       	ldi	r30, 0x6F	; 111
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	80 81       	ld	r24, Z
    1258:	8e 7f       	andi	r24, 0xFE	; 254
    125a:	80 83       	st	Z, r24
		Flags[PROGRAM] = (RAMReadByte(STATUS_FLAG_ADDRESS) & 0x0F);
		Flags[NETWORK_SCAN] = (RAMReadByte(STATUS_FLAG_ADDRESS + 1) & 0x0F);
		Flags[NETWORK_CONNECT] = (RAMReadByte(STATUS_FLAG_ADDRESS + 2) & 0x0F); 
		//printf("Flag Status: %s\n", flags);  
	}
	else if(Flags[WIFI]){
    125c:	80 91 64 0a 	lds	r24, 0x0A64
    1260:	88 23       	and	r24, r24
    1262:	c1 f1       	breq	.+112    	; 0x12d4 <getFlagStatus+0x8a>
		strcpy(filepath, URL);
    1264:	85 e1       	ldi	r24, 0x15	; 21
    1266:	e4 e3       	ldi	r30, 0x34	; 52
    1268:	f5 e0       	ldi	r31, 0x05	; 5
    126a:	ab ef       	ldi	r26, 0xFB	; 251
    126c:	b9 e0       	ldi	r27, 0x09	; 9
    126e:	01 90       	ld	r0, Z+
    1270:	0d 92       	st	X+, r0
    1272:	8a 95       	dec	r24
    1274:	e1 f7       	brne	.-8      	; 0x126e <getFlagStatus+0x24>
		strcat(filepath, FLAG_FILE); 
    1276:	ab ef       	ldi	r26, 0xFB	; 251
    1278:	b9 e0       	ldi	r27, 0x09	; 9
    127a:	0d 90       	ld	r0, X+
    127c:	00 20       	and	r0, r0
    127e:	e9 f7       	brne	.-6      	; 0x127a <getFlagStatus+0x30>
    1280:	11 97       	sbiw	r26, 0x01	; 1
    1282:	85 e2       	ldi	r24, 0x25	; 37
    1284:	e4 e3       	ldi	r30, 0x34	; 52
    1286:	f6 e0       	ldi	r31, 0x06	; 6
    1288:	01 90       	ld	r0, Z+
    128a:	0d 92       	st	X+, r0
    128c:	8a 95       	dec	r24
    128e:	e1 f7       	brne	.-8      	; 0x1288 <getFlagStatus+0x3e>
		//setTestPrint(1);
		getFileWifi(filepath, 1, STATUS_FLAG_ADDRESS, 0);
    1290:	00 e0       	ldi	r16, 0x00	; 0
    1292:	10 e0       	ldi	r17, 0x00	; 0
    1294:	20 e0       	ldi	r18, 0x00	; 0
    1296:	30 e3       	ldi	r19, 0x30	; 48
    1298:	40 e0       	ldi	r20, 0x00	; 0
    129a:	50 e0       	ldi	r21, 0x00	; 0
    129c:	61 e0       	ldi	r22, 0x01	; 1
    129e:	70 e0       	ldi	r23, 0x00	; 0
    12a0:	8b ef       	ldi	r24, 0xFB	; 251
    12a2:	99 e0       	ldi	r25, 0x09	; 9
    12a4:	91 d1       	rcall	.+802    	; 0x15c8 <getFileWifi>
		//printf("Ram Print: ");
		//RAMPrint(STATUS_FLAG_ADDRESS, 3);
		//printf("\n");
		Flags[PROGRAM] = (RAMReadByte(STATUS_FLAG_ADDRESS) & 0x0F);
    12a6:	60 e0       	ldi	r22, 0x00	; 0
    12a8:	70 e3       	ldi	r23, 0x30	; 48
    12aa:	80 e0       	ldi	r24, 0x00	; 0
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	09 db       	rcall	.-2542   	; 0x8c2 <RAMReadByte>
    12b0:	c3 e6       	ldi	r28, 0x63	; 99
    12b2:	da e0       	ldi	r29, 0x0A	; 10
    12b4:	8f 70       	andi	r24, 0x0F	; 15
    12b6:	8a 83       	std	Y+2, r24	; 0x02
		Flags[NETWORK_SCAN] = (RAMReadByte(STATUS_FLAG_ADDRESS + 1) & 0x0F);
    12b8:	61 e0       	ldi	r22, 0x01	; 1
    12ba:	70 e3       	ldi	r23, 0x30	; 48
    12bc:	80 e0       	ldi	r24, 0x00	; 0
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	00 db       	rcall	.-2560   	; 0x8c2 <RAMReadByte>
    12c2:	8f 70       	andi	r24, 0x0F	; 15
    12c4:	8b 83       	std	Y+3, r24	; 0x03
		Flags[NETWORK_CONNECT] = (RAMReadByte(STATUS_FLAG_ADDRESS + 2) & 0x0F);
    12c6:	62 e0       	ldi	r22, 0x02	; 2
    12c8:	70 e3       	ldi	r23, 0x30	; 48
    12ca:	80 e0       	ldi	r24, 0x00	; 0
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	f9 da       	rcall	.-2574   	; 0x8c2 <RAMReadByte>
    12d0:	8f 70       	andi	r24, 0x0F	; 15
    12d2:	8c 83       	std	Y+4, r24	; 0x04
		
	}
	memset(filepath, 0x00, 100); 
    12d4:	84 e6       	ldi	r24, 0x64	; 100
    12d6:	eb ef       	ldi	r30, 0xFB	; 251
    12d8:	f9 e0       	ldi	r31, 0x09	; 9
    12da:	df 01       	movw	r26, r30
    12dc:	1d 92       	st	X+, r1
    12de:	8a 95       	dec	r24
    12e0:	e9 f7       	brne	.-6      	; 0x12dc <getFlagStatus+0x92>
	//Perform actions based on flags 
	if(Flags[PROGRAM] == 0x01)
    12e2:	80 91 65 0a 	lds	r24, 0x0A65
    12e6:	81 30       	cpi	r24, 0x01	; 1
    12e8:	31 f5       	brne	.+76     	; 0x1336 <getFlagStatus+0xec>
	{
		//Program Function 
		printf("Program!\n");
    12ea:	89 e5       	ldi	r24, 0x59	; 89
    12ec:	96 e0       	ldi	r25, 0x06	; 6
    12ee:	0e 94 2d 12 	call	0x245a	; 0x245a <puts>
		//PORTD &= ~(1<<CTS);
		//wifiDriverInit(); 
		//PORTD |= (1<<CTS); 
		//_delay_ms(2000);
		LED_PORT |= (1<<LED_Yellow);
    12f2:	a1 9a       	sbi	0x14, 1	; 20
		do 
		{
			getHexFile();
    12f4:	3f df       	rcall	.-386    	; 0x1174 <getHexFile>
		} while (!checkSum());
    12f6:	ba d2       	rcall	.+1396   	; 0x186c <checkSum>
    12f8:	89 2b       	or	r24, r25
    12fa:	e1 f3       	breq	.-8      	; 0x12f4 <getFlagStatus+0xaa>
		
		 
		Flags[DEVICE_ID] = (RAMReadByte(STATUS_FLAG_ADDRESS + DEVICE_ID) & 0x0F);
    12fc:	65 e0       	ldi	r22, 0x05	; 5
    12fe:	70 e3       	ldi	r23, 0x30	; 48
    1300:	80 e0       	ldi	r24, 0x00	; 0
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	de da       	rcall	.-2628   	; 0x8c2 <RAMReadByte>
    1306:	8f 70       	andi	r24, 0x0F	; 15
    1308:	80 93 68 0a 	sts	0x0A68, r24
		//printf("Device ID: %d\n", Flags[DEVICE_ID]); 
		//printf("Signature Byte: 0x%08X\n", signatureBytes); 
		switch(Flags[DEVICE_ID])
    130c:	82 30       	cpi	r24, 0x02	; 2
    130e:	19 f0       	breq	.+6      	; 0x1316 <getFlagStatus+0xcc>
    1310:	83 30       	cpi	r24, 0x03	; 3
    1312:	39 f0       	breq	.+14     	; 0x1322 <getFlagStatus+0xd8>
    1314:	0c c0       	rjmp	.+24     	; 0x132e <getFlagStatus+0xe4>
		{
			case ATtiny2313_ID:
				Program(ATtiny2313);
    1316:	6a e0       	ldi	r22, 0x0A	; 10
    1318:	71 e9       	ldi	r23, 0x91	; 145
    131a:	8e e1       	ldi	r24, 0x1E	; 30
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	42 d2       	rcall	.+1156   	; 0x17a4 <Program>
				break;
    1320:	0a c0       	rjmp	.+20     	; 0x1336 <getFlagStatus+0xec>
			case ATmega324PA_ID: 
				Program(ATmega324PA);
    1322:	61 e1       	ldi	r22, 0x11	; 17
    1324:	75 e9       	ldi	r23, 0x95	; 149
    1326:	8e e1       	ldi	r24, 0x1E	; 30
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	3c d2       	rcall	.+1144   	; 0x17a4 <Program>
				break;
    132c:	04 c0       	rjmp	.+8      	; 0x1336 <getFlagStatus+0xec>
			default:
				printf("Error, bad device ID!\n");
    132e:	82 e6       	ldi	r24, 0x62	; 98
    1330:	96 e0       	ldi	r25, 0x06	; 6
    1332:	0e 94 2d 12 	call	0x245a	; 0x245a <puts>
		//printf("Network Connect!\n");
		//networkConnect("Wi-Pro", "brightshoe902"); 
		//getFileEthernet()
	}
	//_delay_ms(500);
	clearFlags(); 
    1336:	a2 de       	rcall	.-700    	; 0x107c <clearFlags>
	TIMSK1 |= (1 << TOIE1);
    1338:	ef e6       	ldi	r30, 0x6F	; 111
    133a:	f0 e0       	ldi	r31, 0x00	; 0
    133c:	80 81       	ld	r24, Z
    133e:	81 60       	ori	r24, 0x01	; 1
    1340:	80 83       	st	Z, r24
	return 1; 
}
    1342:	81 e0       	ldi	r24, 0x01	; 1
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	df 91       	pop	r29
    1348:	cf 91       	pop	r28
    134a:	1f 91       	pop	r17
    134c:	0f 91       	pop	r16
    134e:	08 95       	ret

00001350 <__vector_20>:

//Timer overflow vector for polling 
ISR(TIMER1_OVF_vect)
{
    1350:	1f 92       	push	r1
    1352:	0f 92       	push	r0
    1354:	0f b6       	in	r0, 0x3f	; 63
    1356:	0f 92       	push	r0
    1358:	11 24       	eor	r1, r1
    135a:	0b b6       	in	r0, 0x3b	; 59
    135c:	0f 92       	push	r0
    135e:	2f 93       	push	r18
    1360:	3f 93       	push	r19
    1362:	4f 93       	push	r20
    1364:	5f 93       	push	r21
    1366:	6f 93       	push	r22
    1368:	7f 93       	push	r23
    136a:	8f 93       	push	r24
    136c:	9f 93       	push	r25
    136e:	af 93       	push	r26
    1370:	bf 93       	push	r27
    1372:	cf 93       	push	r28
    1374:	df 93       	push	r29
    1376:	ef 93       	push	r30
    1378:	ff 93       	push	r31
	//cli(); 
	TIMSK1 &= ~(1 << TOIE1);
    137a:	cf e6       	ldi	r28, 0x6F	; 111
    137c:	d0 e0       	ldi	r29, 0x00	; 0
    137e:	88 81       	ld	r24, Y
    1380:	8e 7f       	andi	r24, 0xFE	; 254
    1382:	88 83       	st	Y, r24
	printf("Flag Status\n");
    1384:	88 e7       	ldi	r24, 0x78	; 120
    1386:	96 e0       	ldi	r25, 0x06	; 6
    1388:	0e 94 2d 12 	call	0x245a	; 0x245a <puts>
	getFlagStatus(); 
    138c:	5e df       	rcall	.-324    	; 0x124a <getFlagStatus>
	TCNT1L = 0x00;
    138e:	10 92 84 00 	sts	0x0084, r1
	TCNT1H = 0x00;
    1392:	10 92 85 00 	sts	0x0085, r1
	TIMSK1 |= (1 << TOIE1);
    1396:	88 81       	ld	r24, Y
    1398:	81 60       	ori	r24, 0x01	; 1
    139a:	88 83       	st	Y, r24
	//sei();  
}
    139c:	ff 91       	pop	r31
    139e:	ef 91       	pop	r30
    13a0:	df 91       	pop	r29
    13a2:	cf 91       	pop	r28
    13a4:	bf 91       	pop	r27
    13a6:	af 91       	pop	r26
    13a8:	9f 91       	pop	r25
    13aa:	8f 91       	pop	r24
    13ac:	7f 91       	pop	r23
    13ae:	6f 91       	pop	r22
    13b0:	5f 91       	pop	r21
    13b2:	4f 91       	pop	r20
    13b4:	3f 91       	pop	r19
    13b6:	2f 91       	pop	r18
    13b8:	0f 90       	pop	r0
    13ba:	0b be       	out	0x3b, r0	; 59
    13bc:	0f 90       	pop	r0
    13be:	0f be       	out	0x3f, r0	; 63
    13c0:	0f 90       	pop	r0
    13c2:	1f 90       	pop	r1
    13c4:	18 95       	reti

000013c6 <__vector_6>:

ISR(INT5_vect)
{
    13c6:	1f 92       	push	r1
    13c8:	0f 92       	push	r0
    13ca:	0f b6       	in	r0, 0x3f	; 63
    13cc:	0f 92       	push	r0
    13ce:	11 24       	eor	r1, r1
    13d0:	0b b6       	in	r0, 0x3b	; 59
    13d2:	0f 92       	push	r0
    13d4:	2f 93       	push	r18
    13d6:	3f 93       	push	r19
    13d8:	4f 93       	push	r20
    13da:	5f 93       	push	r21
    13dc:	6f 93       	push	r22
    13de:	7f 93       	push	r23
    13e0:	8f 93       	push	r24
    13e2:	9f 93       	push	r25
    13e4:	af 93       	push	r26
    13e6:	bf 93       	push	r27
    13e8:	ef 93       	push	r30
    13ea:	ff 93       	push	r31
	cli();
    13ec:	f8 94       	cli
	if(PINE & (1<<INT5))
    13ee:	65 9b       	sbis	0x0c, 5	; 12
    13f0:	07 c0       	rjmp	.+14     	; 0x1400 <__vector_6+0x3a>
	{
		Flags[ETHERNET] = 0; 
    13f2:	10 92 63 0a 	sts	0x0A63, r1
		//checkWifiStatus(); 
		printf("Rising Edge!\n");
    13f6:	84 e8       	ldi	r24, 0x84	; 132
    13f8:	96 e0       	ldi	r25, 0x06	; 6
    13fa:	0e 94 2d 12 	call	0x245a	; 0x245a <puts>
    13fe:	08 c0       	rjmp	.+16     	; 0x1410 <__vector_6+0x4a>
	}
	else
	{
		Flags[ETHERNET] = 1; 
    1400:	81 e0       	ldi	r24, 0x01	; 1
    1402:	80 93 63 0a 	sts	0x0A63, r24
		ethernetInit();
    1406:	18 d0       	rcall	.+48     	; 0x1438 <ethernetInit>
		printf("Falling Edge!\n");
    1408:	81 e9       	ldi	r24, 0x91	; 145
    140a:	96 e0       	ldi	r25, 0x06	; 6
    140c:	0e 94 2d 12 	call	0x245a	; 0x245a <puts>
	}
	sei();
    1410:	78 94       	sei
}
    1412:	ff 91       	pop	r31
    1414:	ef 91       	pop	r30
    1416:	bf 91       	pop	r27
    1418:	af 91       	pop	r26
    141a:	9f 91       	pop	r25
    141c:	8f 91       	pop	r24
    141e:	7f 91       	pop	r23
    1420:	6f 91       	pop	r22
    1422:	5f 91       	pop	r21
    1424:	4f 91       	pop	r20
    1426:	3f 91       	pop	r19
    1428:	2f 91       	pop	r18
    142a:	0f 90       	pop	r0
    142c:	0b be       	out	0x3b, r0	; 59
    142e:	0f 90       	pop	r0
    1430:	0f be       	out	0x3f, r0	; 63
    1432:	0f 90       	pop	r0
    1434:	1f 90       	pop	r1
    1436:	18 95       	reti

00001438 <ethernetInit>:
	//EnableEthernetInterrupt(); 
	SendData(httpBuff, strlen(httpBuff), 0);
	ReceiveData(RAMAddress, receiveData, receiveLength, 1, externRAM);
	memset(httpBuff, 0x00, 100); 
	return receiveData; 
}
    1438:	20 e1       	ldi	r18, 0x10	; 16
    143a:	32 e0       	ldi	r19, 0x02	; 2
    143c:	44 e1       	ldi	r20, 0x14	; 20
    143e:	52 e0       	ldi	r21, 0x02	; 2
    1440:	68 e1       	ldi	r22, 0x18	; 24
    1442:	72 e0       	ldi	r23, 0x02	; 2
    1444:	8c e1       	ldi	r24, 0x1C	; 28
    1446:	92 e0       	ldi	r25, 0x02	; 2
    1448:	0e 94 bb 00 	call	0x176	; 0x176 <NetworkSetup>
    144c:	28 e0       	ldi	r18, 0x08	; 8
    144e:	32 e0       	ldi	r19, 0x02	; 2
    1450:	4a e0       	ldi	r20, 0x0A	; 10
    1452:	52 e0       	ldi	r21, 0x02	; 2
    1454:	6c e0       	ldi	r22, 0x0C	; 12
    1456:	72 e0       	ldi	r23, 0x02	; 2
    1458:	81 e0       	ldi	r24, 0x01	; 1
    145a:	20 d8       	rcall	.-4032   	; 0x49c <Server_Connect>
    145c:	89 2b       	or	r24, r25
    145e:	b1 f3       	breq	.-20     	; 0x144c <ethernetInit+0x14>
    1460:	be c8       	rjmp	.-3716   	; 0x5de <MemoryInit>
    1462:	08 95       	ret

00001464 <updateFileEthernet>:

void updateFileEthernet(char* filepath)
{
    1464:	cf 93       	push	r28
    1466:	df 93       	push	r29
	//strncpy(httpBuff, "GET ", 4); 
	strcpy(httpBuff, filepath); 
    1468:	bc 01       	movw	r22, r24
    146a:	89 e6       	ldi	r24, 0x69	; 105
    146c:	9a e0       	ldi	r25, 0x0A	; 10
    146e:	9e d7       	rcall	.+3900   	; 0x23ac <strcpy>
	strncat(httpBuff, " HTTP/1.1 \nHost: www.wi-pro.us \n\n", 40); 
    1470:	c9 e6       	ldi	r28, 0x69	; 105
    1472:	da e0       	ldi	r29, 0x0A	; 10
    1474:	de 01       	movw	r26, r28
    1476:	0d 90       	ld	r0, X+
    1478:	00 20       	and	r0, r0
    147a:	e9 f7       	brne	.-6      	; 0x1476 <updateFileEthernet+0x12>
    147c:	11 97       	sbiw	r26, 0x01	; 1
    147e:	82 e2       	ldi	r24, 0x22	; 34
    1480:	ef e9       	ldi	r30, 0x9F	; 159
    1482:	f6 e0       	ldi	r31, 0x06	; 6
    1484:	01 90       	ld	r0, Z+
    1486:	0d 92       	st	X+, r0
    1488:	8a 95       	dec	r24
    148a:	e1 f7       	brne	.-8      	; 0x1484 <updateFileEthernet+0x20>
	printf("%s", httpBuff); 
    148c:	df 93       	push	r29
    148e:	cf 93       	push	r28
    1490:	8d ea       	ldi	r24, 0xAD	; 173
    1492:	95 e0       	ldi	r25, 0x05	; 5
    1494:	9f 93       	push	r25
    1496:	8f 93       	push	r24
    1498:	c8 d7       	rcall	.+3984   	; 0x242a <printf>
	SendData(httpBuff, strlen(httpBuff), 0);
    149a:	fe 01       	movw	r30, r28
    149c:	01 90       	ld	r0, Z+
    149e:	00 20       	and	r0, r0
    14a0:	e9 f7       	brne	.-6      	; 0x149c <updateFileEthernet+0x38>
    14a2:	31 97       	sbiw	r30, 0x01	; 1
    14a4:	bf 01       	movw	r22, r30
    14a6:	69 56       	subi	r22, 0x69	; 105
    14a8:	7a 40       	sbci	r23, 0x0A	; 10
    14aa:	40 e0       	ldi	r20, 0x00	; 0
    14ac:	50 e0       	ldi	r21, 0x00	; 0
    14ae:	ce 01       	movw	r24, r28
    14b0:	ba d8       	rcall	.-3724   	; 0x626 <SendData>
	memset(httpBuff, 0x00, 100); 
    14b2:	84 e6       	ldi	r24, 0x64	; 100
    14b4:	fe 01       	movw	r30, r28
    14b6:	11 92       	st	Z+, r1
    14b8:	8a 95       	dec	r24
    14ba:	e9 f7       	brne	.-6      	; 0x14b6 <updateFileEthernet+0x52>
    14bc:	0f 90       	pop	r0
    14be:	0f 90       	pop	r0
    14c0:	0f 90       	pop	r0
    14c2:	0f 90       	pop	r0
}
    14c4:	df 91       	pop	r29
    14c6:	cf 91       	pop	r28
    14c8:	08 95       	ret

000014ca <SPI_FPGA_Write>:
	}
}

void SPI_FPGA_Write(unsigned char SPI_Data)
{
	FPGA_CS_PORT &= ~(1<<FPGA_SPI_CS);
    14ca:	a4 98       	cbi	0x14, 4	; 20
	// Start Write transmission
	SPDR = SPI_Data;
    14cc:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
    14ce:	0d b4       	in	r0, 0x2d	; 45
    14d0:	07 fe       	sbrs	r0, 7
    14d2:	fd cf       	rjmp	.-6      	; 0x14ce <SPI_FPGA_Write+0x4>
	FPGA_CS_PORT |= (1<<FPGA_SPI_CS);
    14d4:	a4 9a       	sbi	0x14, 4	; 20
    14d6:	08 95       	ret

000014d8 <SPI_FPGA_Init>:
#include "iop_pub_fpga.h"
#include "AVR.h"

void SPI_FPGA_Init(void)
{
	FPGA_CS_DDR |= (1<<FPGA_SPI_CS);
    14d8:	9c 9a       	sbi	0x13, 4	; 19
	FPGA_CS_PORT |= (1<<FPGA_SPI_CS);
    14da:	a4 9a       	sbi	0x14, 4	; 20
	
	WR_DDR |= 1<<FPGAWR;
    14dc:	e4 e0       	ldi	r30, 0x04	; 4
    14de:	f1 e0       	ldi	r31, 0x01	; 1
    14e0:	80 81       	ld	r24, Z
    14e2:	84 60       	ori	r24, 0x04	; 4
    14e4:	80 83       	st	Z, r24
	WR_PORT &= ~(1<<FPGAWR);
    14e6:	e5 e0       	ldi	r30, 0x05	; 5
    14e8:	f1 e0       	ldi	r31, 0x01	; 1
    14ea:	80 81       	ld	r24, Z
    14ec:	8b 7f       	andi	r24, 0xFB	; 251
    14ee:	80 83       	st	Z, r24
	SPI_FPGA_Write(FPGA_Disable);
    14f0:	80 e0       	ldi	r24, 0x00	; 0
    14f2:	eb cf       	rjmp	.-42     	; 0x14ca <SPI_FPGA_Write>
    14f4:	08 95       	ret

000014f6 <FPGA_Write>:
}

void FPGA_Write(uint32_t TargetMicrocontroller)
{
	switch (TargetMicrocontroller)
    14f6:	6a 30       	cpi	r22, 0x0A	; 10
    14f8:	21 e9       	ldi	r18, 0x91	; 145
    14fa:	72 07       	cpc	r23, r18
    14fc:	2e e1       	ldi	r18, 0x1E	; 30
    14fe:	82 07       	cpc	r24, r18
    1500:	91 05       	cpc	r25, r1
    1502:	31 f0       	breq	.+12     	; 0x1510 <FPGA_Write+0x1a>
    1504:	61 31       	cpi	r22, 0x11	; 17
    1506:	75 49       	sbci	r23, 0x95	; 149
    1508:	8e 41       	sbci	r24, 0x1E	; 30
    150a:	91 05       	cpc	r25, r1
    150c:	21 f0       	breq	.+8      	; 0x1516 <FPGA_Write+0x20>
    150e:	08 95       	ret
	{
		case ATtiny2313 :
			SPI_FPGA_Write(FPGA_ATtiny2313_Mapping);
    1510:	81 e0       	ldi	r24, 0x01	; 1
    1512:	db cf       	rjmp	.-74     	; 0x14ca <SPI_FPGA_Write>
		break;
    1514:	08 95       	ret
		case ATmega324PA :
			SPI_FPGA_Write(FPGA_ATmega324PA_Mapping);
    1516:	82 e0       	ldi	r24, 0x02	; 2
    1518:	d8 cf       	rjmp	.-80     	; 0x14ca <SPI_FPGA_Write>
    151a:	08 95       	ret

0000151c <hexInit>:
				   //':', 0x10, 0x00, 0x10, 0x00, 0x12, 0xC0, 0x11, 0xC0, 0x10, 0xC0, 0x0F, 0xC0, 0x0E, 0xC0, 0x0D, 0xC0, 0x0C, 0xC0, 0x0B, 0xC0, 0x6C,
				   //':', 0x00, 0x00, 0x00, 0x01, 0xFF};

void hexInit()
{
	RAMOffset = 0; 
    151c:	10 92 32 0b 	sts	0x0B32, r1
    1520:	10 92 31 0b 	sts	0x0B31, r1
	memset(hexRow, 0x00, 50); 
    1524:	82 e3       	ldi	r24, 0x32	; 50
    1526:	ef ef       	ldi	r30, 0xFF	; 255
    1528:	fa e0       	ldi	r31, 0x0A	; 10
    152a:	df 01       	movw	r26, r30
    152c:	1d 92       	st	X+, r1
    152e:	8a 95       	dec	r24
    1530:	e9 f7       	brne	.-6      	; 0x152c <hexInit+0x10>
    1532:	08 95       	ret

00001534 <resetRAMOffset>:
} 

void resetRAMOffset()
{
	RAMOffset = 0; 
    1534:	10 92 32 0b 	sts	0x0B32, r1
    1538:	10 92 31 0b 	sts	0x0B31, r1
    153c:	08 95       	ret

0000153e <getHexRow>:
}

char* getHexRow()
{
    153e:	0f 93       	push	r16
    1540:	1f 93       	push	r17
    1542:	cf 93       	push	r28
    1544:	df 93       	push	r29
    1546:	cf ef       	ldi	r28, 0xFF	; 255
    1548:	da e0       	ldi	r29, 0x0A	; 10
    154a:	04 e0       	ldi	r16, 0x04	; 4
    154c:	1b e0       	ldi	r17, 0x0B	; 11
	int i=0; 
	//printf("Getting Row!\n"); 
	for(i=0; i<DATA_BEGIN; i++)
	{
		//Read the bytes from RAM and throw them into the buffer
		rowBuff = RAMReadByte(HEX_FILE_ADDRESS + RAMOffset);
    154e:	60 91 31 0b 	lds	r22, 0x0B31
    1552:	70 91 32 0b 	lds	r23, 0x0B32
    1556:	80 e0       	ldi	r24, 0x00	; 0
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	b3 d9       	rcall	.-3226   	; 0x8c2 <RAMReadByte>
		//printf("0x%02X ", rowBuff);
		hexRow[i] = rowBuff; 
    155c:	89 93       	st	Y+, r24
		RAMOffset++; 
    155e:	80 91 31 0b 	lds	r24, 0x0B31
    1562:	90 91 32 0b 	lds	r25, 0x0B32
    1566:	01 96       	adiw	r24, 0x01	; 1
    1568:	90 93 32 0b 	sts	0x0B32, r25
    156c:	80 93 31 0b 	sts	0x0B31, r24
char* getHexRow()
{
	char rowBuff; 
	int i=0; 
	//printf("Getting Row!\n"); 
	for(i=0; i<DATA_BEGIN; i++)
    1570:	c0 17       	cp	r28, r16
    1572:	d1 07       	cpc	r29, r17
    1574:	61 f7       	brne	.-40     	; 0x154e <getHexRow+0x10>
		//printf("0x%02X ", rowBuff);
		hexRow[i] = rowBuff; 
		RAMOffset++; 
	}
	
	uint8_t dataLength = hexRow[BYTE_COUNT];
    1576:	00 91 00 0b 	lds	r16, 0x0B00
    157a:	c4 e0       	ldi	r28, 0x04	; 4
    157c:	db e0       	ldi	r29, 0x0B	; 11
    157e:	10 e0       	ldi	r17, 0x00	; 0
    1580:	0b 5f       	subi	r16, 0xFB	; 251
    1582:	14 4f       	sbci	r17, 0xF4	; 244
	//printf("Data Length: %d\n", dataLength); 
	//Add 1 to dataLength to catch the checkSum 
	for(i=0;i<dataLength+1;i++)
	{
		rowBuff = RAMReadByte(HEX_FILE_ADDRESS + RAMOffset);
    1584:	60 91 31 0b 	lds	r22, 0x0B31
    1588:	70 91 32 0b 	lds	r23, 0x0B32
    158c:	80 e0       	ldi	r24, 0x00	; 0
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	98 d9       	rcall	.-3280   	; 0x8c2 <RAMReadByte>
		//printf("0x%02X ",rowBuff);
		hexRow[DATA_BEGIN + i] = RAMReadByte(HEX_FILE_ADDRESS + RAMOffset);
    1592:	60 91 31 0b 	lds	r22, 0x0B31
    1596:	70 91 32 0b 	lds	r23, 0x0B32
    159a:	80 e0       	ldi	r24, 0x00	; 0
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	91 d9       	rcall	.-3294   	; 0x8c2 <RAMReadByte>
    15a0:	89 93       	st	Y+, r24
		RAMOffset++; 
    15a2:	80 91 31 0b 	lds	r24, 0x0B31
    15a6:	90 91 32 0b 	lds	r25, 0x0B32
    15aa:	01 96       	adiw	r24, 0x01	; 1
    15ac:	90 93 32 0b 	sts	0x0B32, r25
    15b0:	80 93 31 0b 	sts	0x0B31, r24
	}
	
	uint8_t dataLength = hexRow[BYTE_COUNT];
	//printf("Data Length: %d\n", dataLength); 
	//Add 1 to dataLength to catch the checkSum 
	for(i=0;i<dataLength+1;i++)
    15b4:	c0 17       	cp	r28, r16
    15b6:	d1 07       	cpc	r29, r17
    15b8:	29 f7       	brne	.-54     	; 0x1584 <getHexRow+0x46>
		hexRow[DATA_BEGIN + i] = RAMReadByte(HEX_FILE_ADDRESS + RAMOffset);
		RAMOffset++; 
	}
	
	return hexRow; 
}
    15ba:	8f ef       	ldi	r24, 0xFF	; 255
    15bc:	9a e0       	ldi	r25, 0x0A	; 10
    15be:	df 91       	pop	r29
    15c0:	cf 91       	pop	r28
    15c2:	1f 91       	pop	r17
    15c4:	0f 91       	pop	r16
    15c6:	08 95       	ret

000015c8 <getFileWifi>:
	j+=strlen(footer)-1; 
	return j; 
}

uint16_t getFileWifi(char* filepath, int externRAM, uint32_t RAMAddress, int multiReceive)
{ 
    15c8:	2f 92       	push	r2
    15ca:	3f 92       	push	r3
    15cc:	4f 92       	push	r4
    15ce:	5f 92       	push	r5
    15d0:	6f 92       	push	r6
    15d2:	7f 92       	push	r7
    15d4:	8f 92       	push	r8
    15d6:	9f 92       	push	r9
    15d8:	af 92       	push	r10
    15da:	bf 92       	push	r11
    15dc:	cf 92       	push	r12
    15de:	df 92       	push	r13
    15e0:	ef 92       	push	r14
    15e2:	ff 92       	push	r15
    15e4:	0f 93       	push	r16
    15e6:	1f 93       	push	r17
    15e8:	cf 93       	push	r28
    15ea:	df 93       	push	r29
    15ec:	ec 01       	movw	r28, r24
    15ee:	7b 01       	movw	r14, r22
    15f0:	29 01       	movw	r4, r18
    15f2:	3a 01       	movw	r6, r20
    15f4:	18 01       	movw	r2, r16
	//printf("Filepath: %s\n", filepath);
	//enableReceiveINT();
	//setTestPrint(1); 
	enableReceiveINT();   
    15f6:	f1 da       	rcall	.-2590   	; 0xbda <enableReceiveINT>
	//PORTD &= ~(1<<CTS);
	setReceiveCounter(0);
    15f8:	80 e0       	ldi	r24, 0x00	; 0
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	9f da       	rcall	.-2754   	; 0xb3c <setReceiveCounter>
	uint16_t i = 0; 
	char* receiveHeader; 
	//setCompressFlag(1);
	//PORTD |= (1<<CTS);
	sendCommand(NOPREFIX, HTTP_GET, filepath);
    15fe:	ae 01       	movw	r20, r28
    1600:	6e e6       	ldi	r22, 0x6E	; 110
    1602:	75 e0       	ldi	r23, 0x05	; 5
    1604:	8f ef       	ldi	r24, 0xFF	; 255
    1606:	ab db       	rcall	.-2218   	; 0xd5e <sendCommand>
	receiveStatus();
    1608:	f9 da       	rcall	.-2574   	; 0xbfc <receiveStatus>
	printf("WTF HELLO1!!!\n");
    160a:	83 e8       	ldi	r24, 0x83	; 131
    160c:	97 e0       	ldi	r25, 0x07	; 7
    160e:	25 d7       	rcall	.+3658   	; 0x245a <puts>
	//enableReceiveINT();
	//setTestPrint(1); 
	enableReceiveINT();   
	//PORTD &= ~(1<<CTS);
	setReceiveCounter(0);
	uint16_t i = 0; 
    1610:	00 e0       	ldi	r16, 0x00	; 0
    1612:	10 e0       	ldi	r17, 0x00	; 0
			
		setReceiveCounter(0);
		sendCommand(NOPREFIX, STREAM_READ, "0 500");
		receiveStatus();
		receiveHeader = getMessageHeader(); 
		printf("Tran Length: %s\n", receiveHeader); 
    1614:	0f 2e       	mov	r0, r31
    1616:	f4 eb       	ldi	r31, 0xB4	; 180
    1618:	cf 2e       	mov	r12, r31
    161a:	f7 e0       	ldi	r31, 0x07	; 7
    161c:	df 2e       	mov	r13, r31
    161e:	f0 2d       	mov	r31, r0
	sendCommand(NOPREFIX, HTTP_GET, filepath);
	receiveStatus();
	printf("WTF HELLO1!!!\n");
	do 
	{
		if(externRAM){
    1620:	e1 14       	cp	r14, r1
    1622:	f1 04       	cpc	r15, r1
    1624:	c1 f0       	breq	.+48     	; 0x1656 <getFileWifi+0x8e>
			updateRAMAddress(RAMAddress + i);
    1626:	53 01       	movw	r10, r6
    1628:	42 01       	movw	r8, r4
    162a:	80 0e       	add	r8, r16
    162c:	91 1e       	adc	r9, r17
    162e:	a1 1c       	adc	r10, r1
    1630:	b1 1c       	adc	r11, r1
    1632:	c5 01       	movw	r24, r10
    1634:	b4 01       	movw	r22, r8
    1636:	8a db       	rcall	.-2284   	; 0xd4c <updateRAMAddress>
			printf("RAM Address: %d\n", RAMAddress+i); 
    1638:	bf 92       	push	r11
    163a:	af 92       	push	r10
    163c:	9f 92       	push	r9
    163e:	8f 92       	push	r8
    1640:	a1 e9       	ldi	r26, 0x91	; 145
    1642:	b7 e0       	ldi	r27, 0x07	; 7
    1644:	bf 93       	push	r27
    1646:	af 93       	push	r26
    1648:	f0 d6       	rcall	.+3552   	; 0x242a <printf>
    164a:	0f 90       	pop	r0
    164c:	0f 90       	pop	r0
    164e:	0f 90       	pop	r0
    1650:	0f 90       	pop	r0
    1652:	0f 90       	pop	r0
    1654:	0f 90       	pop	r0
		}
		//if(RAMAddress == HEX_FILE_ADDRESS)
			//setTestPrint(1);
			
		setReceiveCounter(0);
    1656:	80 e0       	ldi	r24, 0x00	; 0
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	70 da       	rcall	.-2848   	; 0xb3c <setReceiveCounter>
		sendCommand(NOPREFIX, STREAM_READ, "0 500");
    165c:	42 ea       	ldi	r20, 0xA2	; 162
    165e:	57 e0       	ldi	r21, 0x07	; 7
    1660:	68 ea       	ldi	r22, 0xA8	; 168
    1662:	77 e0       	ldi	r23, 0x07	; 7
    1664:	8f ef       	ldi	r24, 0xFF	; 255
    1666:	7b db       	rcall	.-2314   	; 0xd5e <sendCommand>
		receiveStatus();
    1668:	c9 da       	rcall	.-2670   	; 0xbfc <receiveStatus>
		receiveHeader = getMessageHeader(); 
    166a:	6d db       	rcall	.-2342   	; 0xd46 <getMessageHeader>
    166c:	ec 01       	movw	r28, r24
		printf("Tran Length: %s\n", receiveHeader); 
    166e:	df 93       	push	r29
    1670:	cf 93       	push	r28
    1672:	df 92       	push	r13
    1674:	cf 92       	push	r12
    1676:	d9 d6       	rcall	.+3506   	; 0x242a <printf>
		if(receiveHeader[errorCode] == '1'){
    1678:	0f 90       	pop	r0
    167a:	0f 90       	pop	r0
    167c:	0f 90       	pop	r0
    167e:	0f 90       	pop	r0
    1680:	89 81       	ldd	r24, Y+1	; 0x01
    1682:	81 33       	cpi	r24, 0x31	; 49
    1684:	41 f0       	breq	.+16     	; 0x1696 <getFileWifi+0xce>
			break; 
		}
		i += getTransmissionLength() - 2; 
    1686:	5a db       	rcall	.-2380   	; 0xd3c <getTransmissionLength>
    1688:	02 97       	sbiw	r24, 0x02	; 2
    168a:	08 0f       	add	r16, r24
    168c:	19 1f       	adc	r17, r25
	} while (multiReceive);
    168e:	21 14       	cp	r2, r1
    1690:	31 04       	cpc	r3, r1
    1692:	09 f0       	breq	.+2      	; 0x1696 <getFileWifi+0xce>
    1694:	c5 cf       	rjmp	.-118    	; 0x1620 <getFileWifi+0x58>
	printf("WTF HELLO2!!!\n");
    1696:	85 ec       	ldi	r24, 0xC5	; 197
    1698:	97 e0       	ldi	r25, 0x07	; 7
    169a:	df d6       	rcall	.+3518   	; 0x245a <puts>
	disableReceiveINT(); 
    169c:	a7 da       	rcall	.-2738   	; 0xbec <disableReceiveINT>
	//_delay_ms(3000);  
	sendCommand(NOPREFIX, STREAM_CLOSE, NOVAL);
    169e:	40 ec       	ldi	r20, 0xC0	; 192
    16a0:	56 e0       	ldi	r21, 0x06	; 6
    16a2:	67 e4       	ldi	r22, 0x47	; 71
    16a4:	77 e0       	ldi	r23, 0x07	; 7
    16a6:	8f ef       	ldi	r24, 0xFF	; 255
    16a8:	5a db       	rcall	.-2380   	; 0xd5e <sendCommand>
	//receiveStatus(); 
	return i; 
}
    16aa:	c8 01       	movw	r24, r16
    16ac:	df 91       	pop	r29
    16ae:	cf 91       	pop	r28
    16b0:	1f 91       	pop	r17
    16b2:	0f 91       	pop	r16
    16b4:	ff 90       	pop	r15
    16b6:	ef 90       	pop	r14
    16b8:	df 90       	pop	r13
    16ba:	cf 90       	pop	r12
    16bc:	bf 90       	pop	r11
    16be:	af 90       	pop	r10
    16c0:	9f 90       	pop	r9
    16c2:	8f 90       	pop	r8
    16c4:	7f 90       	pop	r7
    16c6:	6f 90       	pop	r6
    16c8:	5f 90       	pop	r5
    16ca:	4f 90       	pop	r4
    16cc:	3f 90       	pop	r3
    16ce:	2f 90       	pop	r2
    16d0:	08 95       	ret

000016d2 <updateFileWifi>:

void updateFileWifi(char* filepath)
{
    16d2:	cf 93       	push	r28
    16d4:	df 93       	push	r29
    16d6:	ec 01       	movw	r28, r24
	disableReceiveINT(); 
    16d8:	89 da       	rcall	.-2798   	; 0xbec <disableReceiveINT>
	sendCommand(NOPREFIX, filepath, NOVAL);
    16da:	40 ec       	ldi	r20, 0xC0	; 192
    16dc:	56 e0       	ldi	r21, 0x06	; 6
    16de:	be 01       	movw	r22, r28
    16e0:	8f ef       	ldi	r24, 0xFF	; 255
    16e2:	3d db       	rcall	.-2438   	; 0xd5e <sendCommand>
	sendCommand(NOPREFIX, STREAM_CLOSE, NOVAL); 	
    16e4:	40 ec       	ldi	r20, 0xC0	; 192
    16e6:	56 e0       	ldi	r21, 0x06	; 6
    16e8:	67 e4       	ldi	r22, 0x47	; 71
    16ea:	77 e0       	ldi	r23, 0x07	; 7
    16ec:	8f ef       	ldi	r24, 0xFF	; 255
    16ee:	37 db       	rcall	.-2450   	; 0xd5e <sendCommand>
}
    16f0:	df 91       	pop	r29
    16f2:	cf 91       	pop	r28
    16f4:	08 95       	ret

000016f6 <verifySignature>:
		case ATmega324PA_ID: 
			return 0x001E9511; 
		default:
			return -1; 
	}
}
    16f6:	cf 92       	push	r12
    16f8:	df 92       	push	r13
    16fa:	ef 92       	push	r14
    16fc:	ff 92       	push	r15
    16fe:	cf 93       	push	r28
    1700:	df 93       	push	r29
    1702:	6b 01       	movw	r12, r22
    1704:	7c 01       	movw	r14, r24
    1706:	d2 d2       	rcall	.+1444   	; 0x1cac <ReadSignatureBytes>
    1708:	ec 01       	movw	r28, r24
    170a:	8a 81       	ldd	r24, Y+2	; 0x02
    170c:	1f 92       	push	r1
    170e:	8f 93       	push	r24
    1710:	89 81       	ldd	r24, Y+1	; 0x01
    1712:	1f 92       	push	r1
    1714:	8f 93       	push	r24
    1716:	88 81       	ld	r24, Y
    1718:	1f 92       	push	r1
    171a:	8f 93       	push	r24
    171c:	83 ed       	ldi	r24, 0xD3	; 211
    171e:	97 e0       	ldi	r25, 0x07	; 7
    1720:	9f 93       	push	r25
    1722:	8f 93       	push	r24
    1724:	82 d6       	rcall	.+3332   	; 0x242a <printf>
    1726:	88 81       	ld	r24, Y
    1728:	90 e0       	ldi	r25, 0x00	; 0
    172a:	a0 e0       	ldi	r26, 0x00	; 0
    172c:	b0 e0       	ldi	r27, 0x00	; 0
    172e:	4e 2d       	mov	r20, r14
    1730:	50 e0       	ldi	r21, 0x00	; 0
    1732:	60 e0       	ldi	r22, 0x00	; 0
    1734:	70 e0       	ldi	r23, 0x00	; 0
    1736:	2d b7       	in	r18, 0x3d	; 61
    1738:	3e b7       	in	r19, 0x3e	; 62
    173a:	28 5f       	subi	r18, 0xF8	; 248
    173c:	3f 4f       	sbci	r19, 0xFF	; 255
    173e:	0f b6       	in	r0, 0x3f	; 63
    1740:	f8 94       	cli
    1742:	3e bf       	out	0x3e, r19	; 62
    1744:	0f be       	out	0x3f, r0	; 63
    1746:	2d bf       	out	0x3d, r18	; 61
    1748:	84 17       	cp	r24, r20
    174a:	95 07       	cpc	r25, r21
    174c:	a6 07       	cpc	r26, r22
    174e:	b7 07       	cpc	r27, r23
    1750:	e9 f4       	brne	.+58     	; 0x178c <verifySignature+0x96>
    1752:	89 81       	ldd	r24, Y+1	; 0x01
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	a0 e0       	ldi	r26, 0x00	; 0
    1758:	b0 e0       	ldi	r27, 0x00	; 0
    175a:	4d 2d       	mov	r20, r13
    175c:	50 e0       	ldi	r21, 0x00	; 0
    175e:	60 e0       	ldi	r22, 0x00	; 0
    1760:	70 e0       	ldi	r23, 0x00	; 0
    1762:	84 17       	cp	r24, r20
    1764:	95 07       	cpc	r25, r21
    1766:	a6 07       	cpc	r26, r22
    1768:	b7 07       	cpc	r27, r23
    176a:	99 f4       	brne	.+38     	; 0x1792 <verifySignature+0x9c>
    176c:	4a 81       	ldd	r20, Y+2	; 0x02
    176e:	50 e0       	ldi	r21, 0x00	; 0
    1770:	60 e0       	ldi	r22, 0x00	; 0
    1772:	70 e0       	ldi	r23, 0x00	; 0
    1774:	dd 24       	eor	r13, r13
    1776:	ee 24       	eor	r14, r14
    1778:	ff 24       	eor	r15, r15
    177a:	81 e0       	ldi	r24, 0x01	; 1
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	4c 15       	cp	r20, r12
    1780:	5d 05       	cpc	r21, r13
    1782:	6e 05       	cpc	r22, r14
    1784:	7f 05       	cpc	r23, r15
    1786:	39 f0       	breq	.+14     	; 0x1796 <verifySignature+0xa0>
    1788:	80 e0       	ldi	r24, 0x00	; 0
    178a:	05 c0       	rjmp	.+10     	; 0x1796 <verifySignature+0xa0>
    178c:	80 e0       	ldi	r24, 0x00	; 0
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	02 c0       	rjmp	.+4      	; 0x1796 <verifySignature+0xa0>
    1792:	80 e0       	ldi	r24, 0x00	; 0
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	df 91       	pop	r29
    1798:	cf 91       	pop	r28
    179a:	ff 90       	pop	r15
    179c:	ef 90       	pop	r14
    179e:	df 90       	pop	r13
    17a0:	cf 90       	pop	r12
    17a2:	08 95       	ret

000017a4 <Program>:
    17a4:	cf 92       	push	r12
    17a6:	df 92       	push	r13
    17a8:	ef 92       	push	r14
    17aa:	ff 92       	push	r15
    17ac:	cf 93       	push	r28
    17ae:	df 93       	push	r29
    17b0:	6b 01       	movw	r12, r22
    17b2:	7c 01       	movw	r14, r24
    17b4:	46 d1       	rcall	.+652    	; 0x1a42 <ApplyPullDowns>
    17b6:	26 d1       	rcall	.+588    	; 0x1a04 <ProgInit>
    17b8:	bd de       	rcall	.-646    	; 0x1534 <resetRAMOffset>
    17ba:	c7 01       	movw	r24, r14
    17bc:	b6 01       	movw	r22, r12
    17be:	31 d2       	rcall	.+1122   	; 0x1c22 <EnableProgMode>
    17c0:	c7 01       	movw	r24, r14
    17c2:	b6 01       	movw	r22, r12
    17c4:	98 df       	rcall	.-208    	; 0x16f6 <verifySignature>
    17c6:	ec 01       	movw	r28, r24
    17c8:	89 2b       	or	r24, r25
    17ca:	09 f4       	brne	.+2      	; 0x17ce <Program+0x2a>
    17cc:	36 c0       	rjmp	.+108    	; 0x183a <Program+0x96>
    17ce:	85 ef       	ldi	r24, 0xF5	; 245
    17d0:	97 e0       	ldi	r25, 0x07	; 7
    17d2:	43 d6       	rcall	.+3206   	; 0x245a <puts>
    17d4:	8b e0       	ldi	r24, 0x0B	; 11
    17d6:	98 e0       	ldi	r25, 0x08	; 8
    17d8:	40 d6       	rcall	.+3200   	; 0x245a <puts>
    17da:	3a d4       	rcall	.+2164   	; 0x2050 <ChipErase>
    17dc:	86 e1       	ldi	r24, 0x16	; 22
    17de:	98 e0       	ldi	r25, 0x08	; 8
    17e0:	3c d6       	rcall	.+3192   	; 0x245a <puts>
    17e2:	85 e2       	ldi	r24, 0x25	; 37
    17e4:	98 e0       	ldi	r25, 0x08	; 8
    17e6:	39 d6       	rcall	.+3186   	; 0x245a <puts>
    17e8:	c7 01       	movw	r24, r14
    17ea:	b6 01       	movw	r22, r12
    17ec:	52 d4       	rcall	.+2212   	; 0x2092 <ProgramFlash>
    17ee:	84 e3       	ldi	r24, 0x34	; 52
    17f0:	98 e0       	ldi	r25, 0x08	; 8
    17f2:	33 d6       	rcall	.+3174   	; 0x245a <puts>
    17f4:	48 d3       	rcall	.+1680   	; 0x1e86 <ReadFlash>
    17f6:	83 e4       	ldi	r24, 0x43	; 67
    17f8:	98 e0       	ldi	r25, 0x08	; 8
    17fa:	2f d6       	rcall	.+3166   	; 0x245a <puts>
    17fc:	96 d3       	rcall	.+1836   	; 0x1f2a <VerifyFlash>
    17fe:	ec 01       	movw	r28, r24
    1800:	89 2b       	or	r24, r25
    1802:	49 f0       	breq	.+18     	; 0x1816 <Program+0x72>
    1804:	80 e5       	ldi	r24, 0x50	; 80
    1806:	98 e0       	ldi	r25, 0x08	; 8
    1808:	28 d6       	rcall	.+3152   	; 0x245a <puts>
    180a:	04 d5       	rcall	.+2568   	; 0x2214 <ExitParallelProgrammingMode>
    180c:	a1 98       	cbi	0x14, 1	; 20
    180e:	a0 9a       	sbi	0x14, 0	; 20
    1810:	c1 e0       	ldi	r28, 0x01	; 1
    1812:	d0 e0       	ldi	r29, 0x00	; 0
    1814:	23 c0       	rjmp	.+70     	; 0x185c <Program+0xb8>
    1816:	87 e6       	ldi	r24, 0x67	; 103
    1818:	98 e0       	ldi	r25, 0x08	; 8
    181a:	1f d6       	rcall	.+3134   	; 0x245a <puts>
    181c:	fb d4       	rcall	.+2550   	; 0x2214 <ExitParallelProgrammingMode>
    181e:	a1 98       	cbi	0x14, 1	; 20
    1820:	a2 9a       	sbi	0x14, 2	; 20
    1822:	2f e7       	ldi	r18, 0x7F	; 127
    1824:	8a e1       	ldi	r24, 0x1A	; 26
    1826:	96 e0       	ldi	r25, 0x06	; 6
    1828:	21 50       	subi	r18, 0x01	; 1
    182a:	80 40       	sbci	r24, 0x00	; 0
    182c:	90 40       	sbci	r25, 0x00	; 0
    182e:	e1 f7       	brne	.-8      	; 0x1828 <Program+0x84>
    1830:	00 c0       	rjmp	.+0      	; 0x1832 <Program+0x8e>
    1832:	00 00       	nop
    1834:	a2 98       	cbi	0x14, 2	; 20
    1836:	a0 9a       	sbi	0x14, 0	; 20
    1838:	11 c0       	rjmp	.+34     	; 0x185c <Program+0xb8>
    183a:	8b e7       	ldi	r24, 0x7B	; 123
    183c:	98 e0       	ldi	r25, 0x08	; 8
    183e:	0d d6       	rcall	.+3098   	; 0x245a <puts>
    1840:	e9 d4       	rcall	.+2514   	; 0x2214 <ExitParallelProgrammingMode>
    1842:	a2 9a       	sbi	0x14, 2	; 20
    1844:	2f e7       	ldi	r18, 0x7F	; 127
    1846:	8a e1       	ldi	r24, 0x1A	; 26
    1848:	96 e0       	ldi	r25, 0x06	; 6
    184a:	21 50       	subi	r18, 0x01	; 1
    184c:	80 40       	sbci	r24, 0x00	; 0
    184e:	90 40       	sbci	r25, 0x00	; 0
    1850:	e1 f7       	brne	.-8      	; 0x184a <Program+0xa6>
    1852:	00 c0       	rjmp	.+0      	; 0x1854 <Program+0xb0>
    1854:	00 00       	nop
    1856:	a1 98       	cbi	0x14, 1	; 20
    1858:	a2 98       	cbi	0x14, 2	; 20
    185a:	a0 9a       	sbi	0x14, 0	; 20
    185c:	ce 01       	movw	r24, r28
    185e:	df 91       	pop	r29
    1860:	cf 91       	pop	r28
    1862:	ff 90       	pop	r15
    1864:	ef 90       	pop	r14
    1866:	df 90       	pop	r13
    1868:	cf 90       	pop	r12
    186a:	08 95       	ret

0000186c <checkSum>:

int checkSum()
{
    186c:	7f 92       	push	r7
    186e:	8f 92       	push	r8
    1870:	9f 92       	push	r9
    1872:	af 92       	push	r10
    1874:	bf 92       	push	r11
    1876:	cf 92       	push	r12
    1878:	df 92       	push	r13
    187a:	ef 92       	push	r14
    187c:	ff 92       	push	r15
    187e:	0f 93       	push	r16
    1880:	1f 93       	push	r17
    1882:	cf 93       	push	r28
    1884:	df 93       	push	r29
	resetRAMOffset(); 
    1886:	56 de       	rcall	.-852    	; 0x1534 <resetRAMOffset>
	uint8_t i = 0; 
	
	while(1)
	{
		hexRow = getHexRow();
		checkSumVal = 0; 
    1888:	81 2c       	mov	r8, r1
	
		byteCount = (hexRow[BYTE_COUNT]);
		//Adding 4 bytes to account for the record type, high and low address, and data type 
		byteCount += 4; 

		for(i=1; i<=byteCount; i++)
    188a:	99 24       	eor	r9, r9
    188c:	93 94       	inc	r9
    188e:	a1 2c       	mov	r10, r1
    1890:	bb 24       	eor	r11, r11
    1892:	b3 94       	inc	r11
		}
		
		//Calculate checksum by performing 2's compliment 
		
		checkSumVal = ~checkSumVal + 1;
		printf("\nCalculated Checksum: 0x%02x\n", checkSumVal);
    1894:	0f 2e       	mov	r0, r31
    1896:	fd ea       	ldi	r31, 0xAD	; 173
    1898:	ef 2e       	mov	r14, r31
    189a:	f8 e0       	ldi	r31, 0x08	; 8
    189c:	ff 2e       	mov	r15, r31
    189e:	f0 2d       	mov	r31, r0
		printf("Actual Checksum: 0x%02x\n", hexRow[byteCount + 1]); 
    18a0:	0b ec       	ldi	r16, 0xCB	; 203
    18a2:	18 e0       	ldi	r17, 0x08	; 8
	uint8_t checkSumVal; 
	uint8_t i = 0; 
	
	while(1)
	{
		hexRow = getHexRow();
    18a4:	4c de       	rcall	.-872    	; 0x153e <getHexRow>
    18a6:	ec 01       	movw	r28, r24
		checkSumVal = 0; 
		byteCount = 0; 
	
		//printf("We're here now\n");
	
		if(hexRow[RECORD_TYPE] == TYPE_END_OF_FILE)
    18a8:	8c 81       	ldd	r24, Y+4	; 0x04
    18aa:	81 30       	cpi	r24, 0x01	; 1
    18ac:	49 f4       	brne	.+18     	; 0x18c0 <checkSum+0x54>
		{
			printf("End of File!\n");
    18ae:	8f e8       	ldi	r24, 0x8F	; 143
    18b0:	98 e0       	ldi	r25, 0x08	; 8
    18b2:	d3 d5       	rcall	.+2982   	; 0x245a <puts>
		printf("Actual Checksum: 0x%02x\n", hexRow[byteCount + 1]); 
		if(checkSumVal != hexRow[byteCount + 1])
			return 0;  	
	}
	
	printf("Checksum Passed!\n"); 
    18b4:	8c e9       	ldi	r24, 0x9C	; 156
    18b6:	98 e0       	ldi	r25, 0x08	; 8
    18b8:	d0 d5       	rcall	.+2976   	; 0x245a <puts>
	return 1; 
    18ba:	81 e0       	ldi	r24, 0x01	; 1
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	34 c0       	rjmp	.+104    	; 0x1928 <checkSum+0xbc>
		{
			printf("End of File!\n");
			break;
		}
	
		byteCount = (hexRow[BYTE_COUNT]);
    18c0:	c9 80       	ldd	r12, Y+1	; 0x01
    18c2:	d1 2c       	mov	r13, r1
		//Adding 4 bytes to account for the record type, high and low address, and data type 
		byteCount += 4; 

		for(i=1; i<=byteCount; i++)
    18c4:	a6 01       	movw	r20, r12
    18c6:	4c 5f       	subi	r20, 0xFC	; 252
    18c8:	5f 4f       	sbci	r21, 0xFF	; 255
    18ca:	29 2d       	mov	r18, r9
    18cc:	3a 2d       	mov	r19, r10
    18ce:	8b 2d       	mov	r24, r11
    18d0:	98 2d       	mov	r25, r8
		{
			checkSumVal += hexRow[i];
    18d2:	fe 01       	movw	r30, r28
    18d4:	e2 0f       	add	r30, r18
    18d6:	f3 1f       	adc	r31, r19
    18d8:	20 81       	ld	r18, Z
    18da:	92 0f       	add	r25, r18
	
		byteCount = (hexRow[BYTE_COUNT]);
		//Adding 4 bytes to account for the record type, high and low address, and data type 
		byteCount += 4; 

		for(i=1; i<=byteCount; i++)
    18dc:	8f 5f       	subi	r24, 0xFF	; 255
    18de:	28 2f       	mov	r18, r24
    18e0:	30 e0       	ldi	r19, 0x00	; 0
    18e2:	42 17       	cp	r20, r18
    18e4:	53 07       	cpc	r21, r19
    18e6:	a8 f7       	brcc	.-22     	; 0x18d2 <checkSum+0x66>
			//printf("Total Bytes: %d, i: %d, j: %d\n", totalBytes, i, j);
		}
		
		//Calculate checksum by performing 2's compliment 
		
		checkSumVal = ~checkSumVal + 1;
    18e8:	79 2e       	mov	r7, r25
    18ea:	71 94       	neg	r7
		printf("\nCalculated Checksum: 0x%02x\n", checkSumVal);
    18ec:	1f 92       	push	r1
    18ee:	7f 92       	push	r7
    18f0:	ff 92       	push	r15
    18f2:	ef 92       	push	r14
    18f4:	9a d5       	rcall	.+2868   	; 0x242a <printf>
		printf("Actual Checksum: 0x%02x\n", hexRow[byteCount + 1]); 
    18f6:	85 e0       	ldi	r24, 0x05	; 5
    18f8:	c8 0e       	add	r12, r24
    18fa:	d1 1c       	adc	r13, r1
    18fc:	cc 0d       	add	r28, r12
    18fe:	dd 1d       	adc	r29, r13
    1900:	88 81       	ld	r24, Y
    1902:	1f 92       	push	r1
    1904:	8f 93       	push	r24
    1906:	1f 93       	push	r17
    1908:	0f 93       	push	r16
    190a:	8f d5       	rcall	.+2846   	; 0x242a <printf>
		if(checkSumVal != hexRow[byteCount + 1])
    190c:	8d b7       	in	r24, 0x3d	; 61
    190e:	9e b7       	in	r25, 0x3e	; 62
    1910:	08 96       	adiw	r24, 0x08	; 8
    1912:	0f b6       	in	r0, 0x3f	; 63
    1914:	f8 94       	cli
    1916:	9e bf       	out	0x3e, r25	; 62
    1918:	0f be       	out	0x3f, r0	; 63
    191a:	8d bf       	out	0x3d, r24	; 61
    191c:	88 81       	ld	r24, Y
    191e:	87 15       	cp	r24, r7
    1920:	09 f4       	brne	.+2      	; 0x1924 <checkSum+0xb8>
    1922:	c0 cf       	rjmp	.-128    	; 0x18a4 <checkSum+0x38>
			return 0;  	
    1924:	80 e0       	ldi	r24, 0x00	; 0
    1926:	90 e0       	ldi	r25, 0x00	; 0
	}
	
	printf("Checksum Passed!\n"); 
	return 1; 
}
    1928:	df 91       	pop	r29
    192a:	cf 91       	pop	r28
    192c:	1f 91       	pop	r17
    192e:	0f 91       	pop	r16
    1930:	ff 90       	pop	r15
    1932:	ef 90       	pop	r14
    1934:	df 90       	pop	r13
    1936:	cf 90       	pop	r12
    1938:	bf 90       	pop	r11
    193a:	af 90       	pop	r10
    193c:	9f 90       	pop	r9
    193e:	8f 90       	pop	r8
    1940:	7f 90       	pop	r7
    1942:	08 95       	ret

00001944 <compressFile>:

//Converts ASCII to Hex in external RAM 
//Length should be the transmission length given from the Wi-Fi module 
int compressFile(uint16_t length)
{
    1944:	cf 92       	push	r12
    1946:	df 92       	push	r13
    1948:	ef 92       	push	r14
    194a:	ff 92       	push	r15
    194c:	0f 93       	push	r16
    194e:	1f 93       	push	r17
    1950:	cf 93       	push	r28
    1952:	6c 01       	movw	r12, r24
	uint8_t upperNibble; 
	uint8_t lowerNibble; 
	uint8_t hexVal; 
	uint16_t j = 0; 
	
	printf("Length: %d\n", length); 
    1954:	df 92       	push	r13
    1956:	8f 93       	push	r24
    1958:	8d e7       	ldi	r24, 0x7D	; 125
    195a:	95 e0       	ldi	r25, 0x05	; 5
    195c:	9f 93       	push	r25
    195e:	8f 93       	push	r24
    1960:	64 d5       	rcall	.+2760   	; 0x242a <printf>
	
	for(int i=0; i<length; i++)
    1962:	0f 90       	pop	r0
    1964:	0f 90       	pop	r0
    1966:	0f 90       	pop	r0
    1968:	0f 90       	pop	r0
    196a:	c1 14       	cp	r12, r1
    196c:	d1 04       	cpc	r13, r1
    196e:	09 f4       	brne	.+2      	; 0x1972 <compressFile+0x2e>
    1970:	3f c0       	rjmp	.+126    	; 0x19f0 <compressFile+0xac>
    1972:	00 e0       	ldi	r16, 0x00	; 0
    1974:	10 e0       	ldi	r17, 0x00	; 0
    1976:	e1 2c       	mov	r14, r1
    1978:	f1 2c       	mov	r15, r1
	{
		upperNibble = RAMReadByte(HEX_FILE_ADDRESS + i);
    197a:	b8 01       	movw	r22, r16
    197c:	01 2e       	mov	r0, r17
    197e:	00 0c       	add	r0, r0
    1980:	88 0b       	sbc	r24, r24
    1982:	99 0b       	sbc	r25, r25
    1984:	0e 94 61 04 	call	0x8c2	; 0x8c2 <RAMReadByte>
    1988:	c8 2f       	mov	r28, r24
		//If it's a colon, leave it alone as it is the start code 
		if(upperNibble == ':'){
    198a:	8a 33       	cpi	r24, 0x3A	; 58
    198c:	51 f4       	brne	.+20     	; 0x19a2 <compressFile+0x5e>
			RAMWriteByte(0x3A, HEX_FILE_ADDRESS + j);
    198e:	a7 01       	movw	r20, r14
    1990:	60 e0       	ldi	r22, 0x00	; 0
    1992:	70 e0       	ldi	r23, 0x00	; 0
    1994:	8a e3       	ldi	r24, 0x3A	; 58
    1996:	0e 94 46 04 	call	0x88c	; 0x88c <RAMWriteByte>
			j++;
    199a:	8f ef       	ldi	r24, 0xFF	; 255
    199c:	e8 1a       	sub	r14, r24
    199e:	f8 0a       	sbc	r15, r24
			continue;
    19a0:	22 c0       	rjmp	.+68     	; 0x19e6 <compressFile+0xa2>
		}
		//Discard any carriage returns or line feeds 
		else if(upperNibble == '\r' || upperNibble == '\n'){
    19a2:	8d 30       	cpi	r24, 0x0D	; 13
    19a4:	01 f1       	breq	.+64     	; 0x19e6 <compressFile+0xa2>
    19a6:	8a 30       	cpi	r24, 0x0A	; 10
    19a8:	f1 f0       	breq	.+60     	; 0x19e6 <compressFile+0xa2>
			//i++; 
			continue; 
		}
		
		lowerNibble = RAMReadByte(HEX_FILE_ADDRESS + 1 + i);
    19aa:	0f 5f       	subi	r16, 0xFF	; 255
    19ac:	1f 4f       	sbci	r17, 0xFF	; 255
    19ae:	b8 01       	movw	r22, r16
    19b0:	01 2e       	mov	r0, r17
    19b2:	00 0c       	add	r0, r0
    19b4:	88 0b       	sbc	r24, r24
    19b6:	99 0b       	sbc	r25, r25
    19b8:	0e 94 61 04 	call	0x8c2	; 0x8c2 <RAMReadByte>
		//if(i<600)
			//printf("%d...Upper: 0x%02x, Lower: 0x%02x\n", i, upperNibble, lowerNibble);
		
		if(upperNibble > 0x39)
    19bc:	ca 33       	cpi	r28, 0x3A	; 58
    19be:	10 f0       	brcs	.+4      	; 0x19c4 <compressFile+0x80>
			upperNibble -= 0x37; 
    19c0:	c7 53       	subi	r28, 0x37	; 55
    19c2:	01 c0       	rjmp	.+2      	; 0x19c6 <compressFile+0x82>
		else
			upperNibble &= 0x0F;
    19c4:	cf 70       	andi	r28, 0x0F	; 15
			
		upperNibble <<= 4;  
    19c6:	c2 95       	swap	r28
    19c8:	c0 7f       	andi	r28, 0xF0	; 240
		hexVal = upperNibble; 
		
		if(lowerNibble > 0x39)
    19ca:	8a 33       	cpi	r24, 0x3A	; 58
    19cc:	10 f0       	brcs	.+4      	; 0x19d2 <compressFile+0x8e>
			lowerNibble -= 0x37; 
    19ce:	87 53       	subi	r24, 0x37	; 55
    19d0:	01 c0       	rjmp	.+2      	; 0x19d4 <compressFile+0x90>
		else
			lowerNibble &= 0x0F;
    19d2:	8f 70       	andi	r24, 0x0F	; 15
		hexVal |= lowerNibble; 
		//if(i<600)
			//printf("%d...Hex: 0x%02x\n\n", j, hexVal);
		
		//Backfill the already converted ASCII value's addresses with the new hex value 
		RAMWriteByte(hexVal, HEX_FILE_ADDRESS + j); 
    19d4:	a7 01       	movw	r20, r14
    19d6:	60 e0       	ldi	r22, 0x00	; 0
    19d8:	70 e0       	ldi	r23, 0x00	; 0
    19da:	8c 2b       	or	r24, r28
    19dc:	0e 94 46 04 	call	0x88c	; 0x88c <RAMWriteByte>
		j++;
    19e0:	8f ef       	ldi	r24, 0xFF	; 255
    19e2:	e8 1a       	sub	r14, r24
    19e4:	f8 0a       	sbc	r15, r24
	uint8_t hexVal; 
	uint16_t j = 0; 
	
	printf("Length: %d\n", length); 
	
	for(int i=0; i<length; i++)
    19e6:	0f 5f       	subi	r16, 0xFF	; 255
    19e8:	1f 4f       	sbci	r17, 0xFF	; 255
    19ea:	0c 15       	cp	r16, r12
    19ec:	1d 05       	cpc	r17, r13
    19ee:	28 f2       	brcs	.-118    	; 0x197a <compressFile+0x36>
		//hence why the for loop does not have i+=2 
		i++;  
	}
	
	return 1; 
    19f0:	81 e0       	ldi	r24, 0x01	; 1
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	cf 91       	pop	r28
    19f6:	1f 91       	pop	r17
    19f8:	0f 91       	pop	r16
    19fa:	ff 90       	pop	r15
    19fc:	ef 90       	pop	r14
    19fe:	df 90       	pop	r13
    1a00:	cf 90       	pop	r12
    1a02:	08 95       	ret

00001a04 <ProgInit>:


void ProgInit(void)
{
	//SPI_Switching_Circuitry_Init(); 
	SPI_FPGA_Init();
    1a04:	69 dd       	rcall	.-1326   	; 0x14d8 <SPI_FPGA_Init>
	
	voltageControlInit();
    1a06:	60 d8       	rcall	.-3904   	; 0xac8 <voltageControlInit>
	setVpp(VPP_12V);
    1a08:	81 e0       	ldi	r24, 0x01	; 1
    1a0a:	7c d8       	rcall	.-3848   	; 0xb04 <setVpp>
	setVcc(VCC_5V);
    1a0c:	84 e0       	ldi	r24, 0x04	; 4
    1a0e:	6e d8       	rcall	.-3876   	; 0xaec <setVcc>
	setVLogic(VL_5V);
    1a10:	86 e0       	ldi	r24, 0x06	; 6
    1a12:	88 d8       	rcall	.-3824   	; 0xb24 <setVLogic>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1a14:	8f e0       	ldi	r24, 0x0F	; 15
    1a16:	97 e2       	ldi	r25, 0x27	; 39
    1a18:	01 97       	sbiw	r24, 0x01	; 1
    1a1a:	f1 f7       	brne	.-4      	; 0x1a18 <ProgInit+0x14>
    1a1c:	00 c0       	rjmp	.+0      	; 0x1a1e <ProgInit+0x1a>
    1a1e:	00 00       	nop
	_delay_ms(5);
	enableVccRegulator();
    1a20:	61 d8       	rcall	.-3902   	; 0xae4 <enableVccRegulator>
	enableVLogic();
    1a22:	7c d8       	rcall	.-3848   	; 0xb1c <enableVLogic>
    1a24:	8f e4       	ldi	r24, 0x4F	; 79
    1a26:	93 ec       	ldi	r25, 0xC3	; 195
    1a28:	01 97       	sbiw	r24, 0x01	; 1
    1a2a:	f1 f7       	brne	.-4      	; 0x1a28 <ProgInit+0x24>
    1a2c:	00 c0       	rjmp	.+0      	; 0x1a2e <ProgInit+0x2a>
    1a2e:	00 00       	nop
	_delay_ms(25);
	//Setting up Control lines
	CONTROL_DDR |= ( (1<<XTAL1) | (1<<OE) | (1<<WR) | (1<<BS1_PAGEL) | (1<<XA0) | (1<<XA1_BS2) | (1<<PAGEL) | (1<<BS2));
    1a30:	8a b1       	in	r24, 0x0a	; 10
    1a32:	8f ef       	ldi	r24, 0xFF	; 255
    1a34:	8a b9       	out	0x0a, r24	; 10
	RDY_BSY_DDR &= ~(1<<RDY_BSY);
    1a36:	38 98       	cbi	0x07, 0	; 7
	DATA_DDR = 0xFF;
    1a38:	80 93 0a 01 	sts	0x010A, r24
	
	//LED_DDR |= ((1<<LED_Green) | (1<<LED_Yellow) | (1<<LED_Red));
	LED_PORT &= ~(1<<LED_Green);
    1a3c:	a0 98       	cbi	0x14, 0	; 20
	LED_PORT |= (1<<LED_Yellow);
    1a3e:	a1 9a       	sbi	0x14, 1	; 20
    1a40:	08 95       	ret

00001a42 <ApplyPullDowns>:
}

void ApplyPullDowns(void)
{
	SPI_Switching_Circuitry_Init();
    1a42:	0e 94 66 04 	call	0x8cc	; 0x8cc <SPI_Switching_Circuitry_Init>
	
	SPI_Switching_Circuitry_Write(0xFF); //Pull Downs
    1a46:	8f ef       	ldi	r24, 0xFF	; 255
    1a48:	0e 94 74 04 	call	0x8e8	; 0x8e8 <SPI_Switching_Circuitry_Write>
	SPI_Switching_Circuitry_Write(0xFF);
    1a4c:	8f ef       	ldi	r24, 0xFF	; 255
    1a4e:	0e 94 74 04 	call	0x8e8	; 0x8e8 <SPI_Switching_Circuitry_Write>
	SPI_Switching_Circuitry_Write(0xFF);
    1a52:	8f ef       	ldi	r24, 0xFF	; 255
    1a54:	0e 94 74 04 	call	0x8e8	; 0x8e8 <SPI_Switching_Circuitry_Write>
	SPI_Switching_Circuitry_Write(0xFF);
    1a58:	8f ef       	ldi	r24, 0xFF	; 255
    1a5a:	0e 94 74 04 	call	0x8e8	; 0x8e8 <SPI_Switching_Circuitry_Write>
	SPI_Switching_Circuitry_Write(0xFF);
    1a5e:	8f ef       	ldi	r24, 0xFF	; 255
    1a60:	0e 94 74 04 	call	0x8e8	; 0x8e8 <SPI_Switching_Circuitry_Write>
	
	SPI_Switching_Circuitry_Write(0x00); //GND
    1a64:	80 e0       	ldi	r24, 0x00	; 0
    1a66:	0e 94 74 04 	call	0x8e8	; 0x8e8 <SPI_Switching_Circuitry_Write>
	SPI_Switching_Circuitry_Write(0x00);
    1a6a:	80 e0       	ldi	r24, 0x00	; 0
    1a6c:	0e 94 74 04 	call	0x8e8	; 0x8e8 <SPI_Switching_Circuitry_Write>
	SPI_Switching_Circuitry_Write(0x00);
    1a70:	80 e0       	ldi	r24, 0x00	; 0
    1a72:	0e 94 74 04 	call	0x8e8	; 0x8e8 <SPI_Switching_Circuitry_Write>
	SPI_Switching_Circuitry_Write(0x00);
    1a76:	80 e0       	ldi	r24, 0x00	; 0
    1a78:	0e 94 74 04 	call	0x8e8	; 0x8e8 <SPI_Switching_Circuitry_Write>
	SPI_Switching_Circuitry_Write(0x00);
    1a7c:	80 e0       	ldi	r24, 0x00	; 0
    1a7e:	0e 94 74 04 	call	0x8e8	; 0x8e8 <SPI_Switching_Circuitry_Write>
	
	SPI_Switching_Circuitry_Write(0x00); //Pull Ups
    1a82:	80 e0       	ldi	r24, 0x00	; 0
    1a84:	0e 94 74 04 	call	0x8e8	; 0x8e8 <SPI_Switching_Circuitry_Write>
	SPI_Switching_Circuitry_Write(0x00);
    1a88:	80 e0       	ldi	r24, 0x00	; 0
    1a8a:	0e 94 74 04 	call	0x8e8	; 0x8e8 <SPI_Switching_Circuitry_Write>
	SPI_Switching_Circuitry_Write(0x00);
    1a8e:	80 e0       	ldi	r24, 0x00	; 0
    1a90:	0e 94 74 04 	call	0x8e8	; 0x8e8 <SPI_Switching_Circuitry_Write>
	SPI_Switching_Circuitry_Write(0x00);
    1a94:	80 e0       	ldi	r24, 0x00	; 0
    1a96:	0e 94 74 04 	call	0x8e8	; 0x8e8 <SPI_Switching_Circuitry_Write>
	SPI_Switching_Circuitry_Write(0x00);
    1a9a:	80 e0       	ldi	r24, 0x00	; 0
    1a9c:	0e 94 74 04 	call	0x8e8	; 0x8e8 <SPI_Switching_Circuitry_Write>
	
	SPI_Switching_Circuitry_Write(0x00); //VCC
    1aa0:	80 e0       	ldi	r24, 0x00	; 0
    1aa2:	0e 94 74 04 	call	0x8e8	; 0x8e8 <SPI_Switching_Circuitry_Write>
	SPI_Switching_Circuitry_Write(0x00);
    1aa6:	80 e0       	ldi	r24, 0x00	; 0
    1aa8:	0e 94 74 04 	call	0x8e8	; 0x8e8 <SPI_Switching_Circuitry_Write>
	SPI_Switching_Circuitry_Write(0x00);
    1aac:	80 e0       	ldi	r24, 0x00	; 0
    1aae:	0e 94 74 04 	call	0x8e8	; 0x8e8 <SPI_Switching_Circuitry_Write>
	SPI_Switching_Circuitry_Write(0x00);
    1ab2:	80 e0       	ldi	r24, 0x00	; 0
    1ab4:	0e 94 74 04 	call	0x8e8	; 0x8e8 <SPI_Switching_Circuitry_Write>
	SPI_Switching_Circuitry_Write(0x00);
    1ab8:	80 e0       	ldi	r24, 0x00	; 0
    1aba:	0e 94 74 04 	call	0x8e8	; 0x8e8 <SPI_Switching_Circuitry_Write>
	
	SPI_Switching_Circuitry_Write(0x00); //VPP
    1abe:	80 e0       	ldi	r24, 0x00	; 0
    1ac0:	0e 94 74 04 	call	0x8e8	; 0x8e8 <SPI_Switching_Circuitry_Write>
	SPI_Switching_Circuitry_Write(0x00);
    1ac4:	80 e0       	ldi	r24, 0x00	; 0
    1ac6:	0e 94 74 04 	call	0x8e8	; 0x8e8 <SPI_Switching_Circuitry_Write>
	SPI_Switching_Circuitry_Write(0x00);
    1aca:	80 e0       	ldi	r24, 0x00	; 0
    1acc:	0e 94 74 04 	call	0x8e8	; 0x8e8 <SPI_Switching_Circuitry_Write>
	SPI_Switching_Circuitry_Write(0x00);
    1ad0:	80 e0       	ldi	r24, 0x00	; 0
    1ad2:	0e 94 74 04 	call	0x8e8	; 0x8e8 <SPI_Switching_Circuitry_Write>
	SPI_Switching_Circuitry_Write(0x00);
    1ad6:	80 e0       	ldi	r24, 0x00	; 0
    1ad8:	0e 94 74 04 	call	0x8e8	; 0x8e8 <SPI_Switching_Circuitry_Write>
	
	SR_CNTRL_PORT |= (1<<SRCS);
    1adc:	e5 e0       	ldi	r30, 0x05	; 5
    1ade:	f1 e0       	ldi	r31, 0x01	; 1
    1ae0:	80 81       	ld	r24, Z
    1ae2:	80 61       	ori	r24, 0x10	; 16
    1ae4:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1ae6:	85 e3       	ldi	r24, 0x35	; 53
    1ae8:	8a 95       	dec	r24
    1aea:	f1 f7       	brne	.-4      	; 0x1ae8 <ApplyPullDowns+0xa6>
    1aec:	00 00       	nop
	_delay_us(20);
	SR_CNTRL_PORT &= ~(1<<SRCS);
    1aee:	80 81       	ld	r24, Z
    1af0:	8f 7e       	andi	r24, 0xEF	; 239
    1af2:	80 83       	st	Z, r24
    1af4:	08 95       	ret

00001af6 <LoadCommand>:
}

void LoadCommand(char command)
{
	//A: Load Command "Program Flash"
	CONTROL_PORT |= 1<<XA1_BS2;
    1af6:	5d 9a       	sbi	0x0b, 5	; 11
	CONTROL_PORT &= ~(1<<XA0);
    1af8:	5c 98       	cbi	0x0b, 4	; 11
	CONTROL_PORT &= ~(1<<BS1_PAGEL);
    1afa:	5b 98       	cbi	0x0b, 3	; 11
	DATA_PORT = command;
    1afc:	80 93 0b 01 	sts	0x010B, r24
    1b00:	82 e4       	ldi	r24, 0x42	; 66
    1b02:	8a 95       	dec	r24
    1b04:	f1 f7       	brne	.-4      	; 0x1b02 <LoadCommand+0xc>
    1b06:	00 c0       	rjmp	.+0      	; 0x1b08 <LoadCommand+0x12>
	_delay_us(25);
	CONTROL_PORT |= 1<<XTAL1;
    1b08:	58 9a       	sbi	0x0b, 0	; 11
    1b0a:	82 e4       	ldi	r24, 0x42	; 66
    1b0c:	8a 95       	dec	r24
    1b0e:	f1 f7       	brne	.-4      	; 0x1b0c <LoadCommand+0x16>
    1b10:	00 c0       	rjmp	.+0      	; 0x1b12 <LoadCommand+0x1c>
	_delay_us(25);
	CONTROL_PORT &= ~(1<<XTAL1);
    1b12:	58 98       	cbi	0x0b, 0	; 11
    1b14:	82 e4       	ldi	r24, 0x42	; 66
    1b16:	8a 95       	dec	r24
    1b18:	f1 f7       	brne	.-4      	; 0x1b16 <LoadCommand+0x20>
    1b1a:	00 c0       	rjmp	.+0      	; 0x1b1c <LoadCommand+0x26>
    1b1c:	08 95       	ret

00001b1e <WriteWord>:
}

void WriteWord(uint16_t data)
{
	//C: Load Data Low Byte
	CONTROL_PORT &= ~(1<<XA1_BS2);
    1b1e:	5d 98       	cbi	0x0b, 5	; 11
	CONTROL_PORT |= 1<<XA0;
    1b20:	5c 9a       	sbi	0x0b, 4	; 11
	DATA_PORT = data & 0x00FF; 
    1b22:	eb e0       	ldi	r30, 0x0B	; 11
    1b24:	f1 e0       	ldi	r31, 0x01	; 1
    1b26:	80 83       	st	Z, r24
    1b28:	82 e4       	ldi	r24, 0x42	; 66
    1b2a:	8a 95       	dec	r24
    1b2c:	f1 f7       	brne	.-4      	; 0x1b2a <WriteWord+0xc>
    1b2e:	00 c0       	rjmp	.+0      	; 0x1b30 <WriteWord+0x12>
	_delay_us(25);
	CONTROL_PORT |= 1<<XTAL1;
    1b30:	58 9a       	sbi	0x0b, 0	; 11
    1b32:	82 e4       	ldi	r24, 0x42	; 66
    1b34:	8a 95       	dec	r24
    1b36:	f1 f7       	brne	.-4      	; 0x1b34 <WriteWord+0x16>
    1b38:	00 c0       	rjmp	.+0      	; 0x1b3a <WriteWord+0x1c>
	_delay_us(25);
	CONTROL_PORT &= ~(1<<XTAL1);
    1b3a:	58 98       	cbi	0x0b, 0	; 11
    1b3c:	82 e4       	ldi	r24, 0x42	; 66
    1b3e:	8a 95       	dec	r24
    1b40:	f1 f7       	brne	.-4      	; 0x1b3e <WriteWord+0x20>
    1b42:	00 c0       	rjmp	.+0      	; 0x1b44 <WriteWord+0x26>
	_delay_us(25);
	
	//D: Load Data High Byte
	CONTROL_PORT |= 1<<BS1_PAGEL;
    1b44:	5b 9a       	sbi	0x0b, 3	; 11
	CONTROL_PORT &= ~(1<<XA1_BS2);
    1b46:	5d 98       	cbi	0x0b, 5	; 11
	CONTROL_PORT |= 1<<XA0;
    1b48:	5c 9a       	sbi	0x0b, 4	; 11
	DATA_PORT = ((data & 0xFF00) >> 8); 
    1b4a:	90 83       	st	Z, r25
    1b4c:	82 e4       	ldi	r24, 0x42	; 66
    1b4e:	8a 95       	dec	r24
    1b50:	f1 f7       	brne	.-4      	; 0x1b4e <WriteWord+0x30>
    1b52:	00 c0       	rjmp	.+0      	; 0x1b54 <WriteWord+0x36>
	_delay_us(25);
	CONTROL_PORT |= 1<<XTAL1;
    1b54:	58 9a       	sbi	0x0b, 0	; 11
    1b56:	82 e4       	ldi	r24, 0x42	; 66
    1b58:	8a 95       	dec	r24
    1b5a:	f1 f7       	brne	.-4      	; 0x1b58 <WriteWord+0x3a>
    1b5c:	00 c0       	rjmp	.+0      	; 0x1b5e <WriteWord+0x40>
	_delay_us(25);
	CONTROL_PORT &= ~(1<<XTAL1);
    1b5e:	58 98       	cbi	0x0b, 0	; 11
    1b60:	82 e4       	ldi	r24, 0x42	; 66
    1b62:	8a 95       	dec	r24
    1b64:	f1 f7       	brne	.-4      	; 0x1b62 <WriteWord+0x44>
    1b66:	00 c0       	rjmp	.+0      	; 0x1b68 <WriteWord+0x4a>
    1b68:	08 95       	ret

00001b6a <LoadLowAddress>:
}

void LoadLowAddress(uint16_t address)
{
	//B: Load Address Low Byte
	CONTROL_PORT &= ~(1<<XA1_BS2);
    1b6a:	5d 98       	cbi	0x0b, 5	; 11
	CONTROL_PORT &= ~(1<<XA0);
    1b6c:	5c 98       	cbi	0x0b, 4	; 11
	CONTROL_PORT &= ~(1<<BS1_PAGEL);
    1b6e:	5b 98       	cbi	0x0b, 3	; 11
	CONTROL_PORT &= ~(1<<BS2);
    1b70:	5f 98       	cbi	0x0b, 7	; 11
	DATA_PORT = (address & 0x00FF);
    1b72:	80 93 0b 01 	sts	0x010B, r24
    1b76:	82 e4       	ldi	r24, 0x42	; 66
    1b78:	8a 95       	dec	r24
    1b7a:	f1 f7       	brne	.-4      	; 0x1b78 <LoadLowAddress+0xe>
    1b7c:	00 c0       	rjmp	.+0      	; 0x1b7e <LoadLowAddress+0x14>
	_delay_us(25);
	CONTROL_PORT |= 1<<XTAL1;
    1b7e:	58 9a       	sbi	0x0b, 0	; 11
    1b80:	82 e4       	ldi	r24, 0x42	; 66
    1b82:	8a 95       	dec	r24
    1b84:	f1 f7       	brne	.-4      	; 0x1b82 <LoadLowAddress+0x18>
    1b86:	00 c0       	rjmp	.+0      	; 0x1b88 <LoadLowAddress+0x1e>
	_delay_us(25);
	CONTROL_PORT &= ~(1<<XTAL1);
    1b88:	58 98       	cbi	0x0b, 0	; 11
    1b8a:	82 e4       	ldi	r24, 0x42	; 66
    1b8c:	8a 95       	dec	r24
    1b8e:	f1 f7       	brne	.-4      	; 0x1b8c <LoadLowAddress+0x22>
    1b90:	00 c0       	rjmp	.+0      	; 0x1b92 <LoadLowAddress+0x28>
    1b92:	08 95       	ret

00001b94 <LoadHighAddress>:
}

void LoadHighAddress(uint16_t address)
{
	//F: Load Address High Byte
	CONTROL_PORT &= ~(1<<XA1_BS2);
    1b94:	5d 98       	cbi	0x0b, 5	; 11
	CONTROL_PORT &= ~(1<<XA0);
    1b96:	5c 98       	cbi	0x0b, 4	; 11
	CONTROL_PORT &= ~(1<<BS2);
    1b98:	5f 98       	cbi	0x0b, 7	; 11
	CONTROL_PORT |= 1<<BS1_PAGEL;
    1b9a:	5b 9a       	sbi	0x0b, 3	; 11
	DATA_PORT = ((address & 0xFF00) >> 8);
    1b9c:	90 93 0b 01 	sts	0x010B, r25
    1ba0:	82 e4       	ldi	r24, 0x42	; 66
    1ba2:	8a 95       	dec	r24
    1ba4:	f1 f7       	brne	.-4      	; 0x1ba2 <LoadHighAddress+0xe>
    1ba6:	00 c0       	rjmp	.+0      	; 0x1ba8 <LoadHighAddress+0x14>
	_delay_us(25);
	CONTROL_PORT |= 1<<XTAL1;
    1ba8:	58 9a       	sbi	0x0b, 0	; 11
    1baa:	82 e4       	ldi	r24, 0x42	; 66
    1bac:	8a 95       	dec	r24
    1bae:	f1 f7       	brne	.-4      	; 0x1bac <LoadHighAddress+0x18>
    1bb0:	00 c0       	rjmp	.+0      	; 0x1bb2 <LoadHighAddress+0x1e>
	_delay_us(25);
	CONTROL_PORT &= ~(1<<XTAL1);
    1bb2:	58 98       	cbi	0x0b, 0	; 11
    1bb4:	82 e4       	ldi	r24, 0x42	; 66
    1bb6:	8a 95       	dec	r24
    1bb8:	f1 f7       	brne	.-4      	; 0x1bb6 <LoadHighAddress+0x22>
    1bba:	00 c0       	rjmp	.+0      	; 0x1bbc <LoadHighAddress+0x28>
    1bbc:	08 95       	ret

00001bbe <LatchData>:
	_delay_us(25);
}

void LatchData(void)
{
	CONTROL_PORT |= (1<<BS1_PAGEL);
    1bbe:	5b 9a       	sbi	0x0b, 3	; 11
    1bc0:	82 e4       	ldi	r24, 0x42	; 66
    1bc2:	8a 95       	dec	r24
    1bc4:	f1 f7       	brne	.-4      	; 0x1bc2 <LatchData+0x4>
    1bc6:	00 c0       	rjmp	.+0      	; 0x1bc8 <LatchData+0xa>
	_delay_us(25);
	CONTROL_PORT |= (1<<PAGEL);
    1bc8:	5e 9a       	sbi	0x0b, 6	; 11
    1bca:	82 e4       	ldi	r24, 0x42	; 66
    1bcc:	8a 95       	dec	r24
    1bce:	f1 f7       	brne	.-4      	; 0x1bcc <LatchData+0xe>
    1bd0:	00 c0       	rjmp	.+0      	; 0x1bd2 <LatchData+0x14>
	_delay_us(25);
	CONTROL_PORT &= ~(1<<PAGEL);
    1bd2:	5e 98       	cbi	0x0b, 6	; 11
    1bd4:	82 e4       	ldi	r24, 0x42	; 66
    1bd6:	8a 95       	dec	r24
    1bd8:	f1 f7       	brne	.-4      	; 0x1bd6 <LatchData+0x18>
    1bda:	00 c0       	rjmp	.+0      	; 0x1bdc <LatchData+0x1e>
    1bdc:	08 95       	ret

00001bde <ProgramPage>:
}

void ProgramPage(void)
{
	//G: Program Page
	CONTROL_PORT &= ~(1<<BS2);
    1bde:	5f 98       	cbi	0x0b, 7	; 11
	CONTROL_PORT &= ~(1<<BS1_PAGEL);
    1be0:	5b 98       	cbi	0x0b, 3	; 11
	CONTROL_PORT &= ~(1<<WR);
    1be2:	5a 98       	cbi	0x0b, 2	; 11
    1be4:	82 e4       	ldi	r24, 0x42	; 66
    1be6:	8a 95       	dec	r24
    1be8:	f1 f7       	brne	.-4      	; 0x1be6 <ProgramPage+0x8>
    1bea:	00 c0       	rjmp	.+0      	; 0x1bec <ProgramPage+0xe>
	_delay_us(25);
	CONTROL_PORT |= 1<<WR;
    1bec:	5a 9a       	sbi	0x0b, 2	; 11
    1bee:	82 e4       	ldi	r24, 0x42	; 66
    1bf0:	8a 95       	dec	r24
    1bf2:	f1 f7       	brne	.-4      	; 0x1bf0 <ProgramPage+0x12>
    1bf4:	00 c0       	rjmp	.+0      	; 0x1bf6 <ProgramPage+0x18>
	_delay_us(25);
	while(!(RDY_BSY_In & (1<<RDY_BSY)));
    1bf6:	30 9b       	sbis	0x06, 0	; 6
    1bf8:	fe cf       	rjmp	.-4      	; 0x1bf6 <ProgramPage+0x18>
}
    1bfa:	08 95       	ret

00001bfc <EndPageProgramming>:

void EndPageProgramming(void)
{
	//I: End Page Programming
	CONTROL_PORT |= 1<<XA1_BS2;
    1bfc:	5d 9a       	sbi	0x0b, 5	; 11
	CONTROL_PORT &= ~(1<<XA0);
    1bfe:	5c 98       	cbi	0x0b, 4	; 11
	DATA_PORT = 0x00;
    1c00:	10 92 0b 01 	sts	0x010B, r1
    1c04:	82 e4       	ldi	r24, 0x42	; 66
    1c06:	8a 95       	dec	r24
    1c08:	f1 f7       	brne	.-4      	; 0x1c06 <EndPageProgramming+0xa>
    1c0a:	00 c0       	rjmp	.+0      	; 0x1c0c <EndPageProgramming+0x10>
	_delay_us(25);
	CONTROL_PORT |= 1<<XTAL1;
    1c0c:	58 9a       	sbi	0x0b, 0	; 11
    1c0e:	82 e4       	ldi	r24, 0x42	; 66
    1c10:	8a 95       	dec	r24
    1c12:	f1 f7       	brne	.-4      	; 0x1c10 <EndPageProgramming+0x14>
    1c14:	00 c0       	rjmp	.+0      	; 0x1c16 <EndPageProgramming+0x1a>
	_delay_us(25);
	CONTROL_PORT &= ~(1<<XTAL1);
    1c16:	58 98       	cbi	0x0b, 0	; 11
    1c18:	82 e4       	ldi	r24, 0x42	; 66
    1c1a:	8a 95       	dec	r24
    1c1c:	f1 f7       	brne	.-4      	; 0x1c1a <EndPageProgramming+0x1e>
    1c1e:	00 c0       	rjmp	.+0      	; 0x1c20 <EndPageProgramming+0x24>
    1c20:	08 95       	ret

00001c22 <EnableProgMode>:
	_delay_us(25);
}

void EnableProgMode(uint32_t TargetMicrocontroller)
{
    1c22:	cf 92       	push	r12
    1c24:	df 92       	push	r13
    1c26:	ef 92       	push	r14
    1c28:	ff 92       	push	r15
    1c2a:	6b 01       	movw	r12, r22
    1c2c:	7c 01       	movw	r14, r24
	CONTROL_PORT &= ~(1<<XTAL1);
    1c2e:	58 98       	cbi	0x0b, 0	; 11
	CONTROL_PORT &= ~(1<<XA1_BS2 | 1<<XA0 | 1<<BS1_PAGEL | 1<<WR | PAGEL);
    1c30:	8b b1       	in	r24, 0x0b	; 11
    1c32:	81 7c       	andi	r24, 0xC1	; 193
    1c34:	8b b9       	out	0x0b, r24	; 11
	DATA_PORT = 0x00;
    1c36:	10 92 0b 01 	sts	0x010B, r1
	CONTROL_PORT = 0x00;
    1c3a:	1b b8       	out	0x0b, r1	; 11
	
	WR_PORT &= ~(1<<FPGAWR);
    1c3c:	e5 e0       	ldi	r30, 0x05	; 5
    1c3e:	f1 e0       	ldi	r31, 0x01	; 1
    1c40:	80 81       	ld	r24, Z
    1c42:	8b 7f       	andi	r24, 0xFB	; 251
    1c44:	80 83       	st	Z, r24
	FPGA_Write(TargetMicrocontroller);
    1c46:	c7 01       	movw	r24, r14
    1c48:	b6 01       	movw	r22, r12
    1c4a:	55 dc       	rcall	.-1878   	; 0x14f6 <FPGA_Write>
	
	switch (TargetMicrocontroller)
    1c4c:	8a e0       	ldi	r24, 0x0A	; 10
    1c4e:	c8 16       	cp	r12, r24
    1c50:	81 e9       	ldi	r24, 0x91	; 145
    1c52:	d8 06       	cpc	r13, r24
    1c54:	8e e1       	ldi	r24, 0x1E	; 30
    1c56:	e8 06       	cpc	r14, r24
    1c58:	f1 04       	cpc	r15, r1
    1c5a:	49 f0       	breq	.+18     	; 0x1c6e <EnableProgMode+0x4c>
    1c5c:	91 e1       	ldi	r25, 0x11	; 17
    1c5e:	c9 16       	cp	r12, r25
    1c60:	95 e9       	ldi	r25, 0x95	; 149
    1c62:	d9 06       	cpc	r13, r25
    1c64:	9e e1       	ldi	r25, 0x1E	; 30
    1c66:	e9 06       	cpc	r14, r25
    1c68:	f1 04       	cpc	r15, r1
    1c6a:	21 f0       	breq	.+8      	; 0x1c74 <EnableProgMode+0x52>
    1c6c:	05 c0       	rjmp	.+10     	; 0x1c78 <EnableProgMode+0x56>
	{
		case ATtiny2313 :
			setAtTiny2313();
    1c6e:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <setAtTiny2313>
			break;
    1c72:	02 c0       	rjmp	.+4      	; 0x1c78 <EnableProgMode+0x56>
		case ATmega324PA :
			setAtMega324PA();
    1c74:	0e 94 19 05 	call	0xa32	; 0xa32 <setAtMega324PA>
    1c78:	87 ec       	ldi	r24, 0xC7	; 199
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	01 97       	sbiw	r24, 0x01	; 1
    1c7e:	f1 f7       	brne	.-4      	; 0x1c7c <EnableProgMode+0x5a>
    1c80:	00 c0       	rjmp	.+0      	; 0x1c82 <EnableProgMode+0x60>
    1c82:	00 00       	nop
		default:
			break;
	}
	
	_delay_us(100);
	enableVppRegulator();
    1c84:	0e 94 6e 05 	call	0xadc	; 0xadc <enableVppRegulator>
    1c88:	95 e8       	ldi	r25, 0x85	; 133
    1c8a:	9a 95       	dec	r25
    1c8c:	f1 f7       	brne	.-4      	; 0x1c8a <EnableProgMode+0x68>
    1c8e:	00 00       	nop
	_delay_us(50);
	CONTROL_PORT |= (1<<WR | 1<<OE);
    1c90:	8b b1       	in	r24, 0x0b	; 11
    1c92:	86 60       	ori	r24, 0x06	; 6
    1c94:	8b b9       	out	0x0b, r24	; 11
    1c96:	87 ee       	ldi	r24, 0xE7	; 231
    1c98:	93 e0       	ldi	r25, 0x03	; 3
    1c9a:	01 97       	sbiw	r24, 0x01	; 1
    1c9c:	f1 f7       	brne	.-4      	; 0x1c9a <EnableProgMode+0x78>
    1c9e:	00 c0       	rjmp	.+0      	; 0x1ca0 <EnableProgMode+0x7e>
    1ca0:	00 00       	nop
	_delay_us(500);
}
    1ca2:	ff 90       	pop	r15
    1ca4:	ef 90       	pop	r14
    1ca6:	df 90       	pop	r13
    1ca8:	cf 90       	pop	r12
    1caa:	08 95       	ret

00001cac <ReadSignatureBytes>:

char* ReadSignatureBytes(void)
{
    1cac:	7f 92       	push	r7
    1cae:	8f 92       	push	r8
    1cb0:	9f 92       	push	r9
    1cb2:	af 92       	push	r10
    1cb4:	bf 92       	push	r11
    1cb6:	cf 92       	push	r12
    1cb8:	df 92       	push	r13
    1cba:	ef 92       	push	r14
    1cbc:	ff 92       	push	r15
    1cbe:	0f 93       	push	r16
    1cc0:	1f 93       	push	r17
    1cc2:	cf 93       	push	r28
    1cc4:	df 93       	push	r29
	static char SignatureBytes[3];
	
	//A: Load Command "Read Signature Bytes"
	LoadCommand(READ_SIG_BYTE);
    1cc6:	88 e0       	ldi	r24, 0x08	; 8
    1cc8:	16 df       	rcall	.-468    	; 0x1af6 <LoadCommand>
	
	//B: Load Address Low Byte
	CONTROL_PORT &= ~(1<<XA1_BS2);
    1cca:	5d 98       	cbi	0x0b, 5	; 11
	CONTROL_PORT &= ~(1<<XA0);
    1ccc:	5c 98       	cbi	0x0b, 4	; 11
	CONTROL_PORT &= ~(1<<BS1_PAGEL);
    1cce:	5b 98       	cbi	0x0b, 3	; 11
	DATA_PORT = 0x00;
    1cd0:	0f 2e       	mov	r0, r31
    1cd2:	fb e0       	ldi	r31, 0x0B	; 11
    1cd4:	ef 2e       	mov	r14, r31
    1cd6:	ff 24       	eor	r15, r15
    1cd8:	f3 94       	inc	r15
    1cda:	f0 2d       	mov	r31, r0
    1cdc:	f7 01       	movw	r30, r14
    1cde:	10 82       	st	Z, r1
    1ce0:	87 ec       	ldi	r24, 0xC7	; 199
    1ce2:	90 e0       	ldi	r25, 0x00	; 0
    1ce4:	01 97       	sbiw	r24, 0x01	; 1
    1ce6:	f1 f7       	brne	.-4      	; 0x1ce4 <ReadSignatureBytes+0x38>
    1ce8:	00 c0       	rjmp	.+0      	; 0x1cea <ReadSignatureBytes+0x3e>
    1cea:	00 00       	nop
	_delay_us(100);
	CONTROL_PORT |= 1<<XTAL1;
    1cec:	58 9a       	sbi	0x0b, 0	; 11
    1cee:	92 e4       	ldi	r25, 0x42	; 66
    1cf0:	9a 95       	dec	r25
    1cf2:	f1 f7       	brne	.-4      	; 0x1cf0 <ReadSignatureBytes+0x44>
    1cf4:	00 c0       	rjmp	.+0      	; 0x1cf6 <ReadSignatureBytes+0x4a>
	_delay_us(25);
	CONTROL_PORT &= ~(1<<XTAL1);
    1cf6:	58 98       	cbi	0x0b, 0	; 11
    1cf8:	e7 ec       	ldi	r30, 0xC7	; 199
    1cfa:	f0 e0       	ldi	r31, 0x00	; 0
    1cfc:	31 97       	sbiw	r30, 0x01	; 1
    1cfe:	f1 f7       	brne	.-4      	; 0x1cfc <ReadSignatureBytes+0x50>
    1d00:	00 c0       	rjmp	.+0      	; 0x1d02 <ReadSignatureBytes+0x56>
    1d02:	00 00       	nop
	_delay_us(100);
	
	//Read data
	DATA_DDR = 0;
    1d04:	ca e0       	ldi	r28, 0x0A	; 10
    1d06:	d1 e0       	ldi	r29, 0x01	; 1
    1d08:	18 82       	st	Y, r1
	WR_PORT |= (1<<FPGAWR);
    1d0a:	0f 2e       	mov	r0, r31
    1d0c:	f5 e0       	ldi	r31, 0x05	; 5
    1d0e:	8f 2e       	mov	r8, r31
    1d10:	99 24       	eor	r9, r9
    1d12:	93 94       	inc	r9
    1d14:	f0 2d       	mov	r31, r0
    1d16:	f4 01       	movw	r30, r8
    1d18:	80 81       	ld	r24, Z
    1d1a:	84 60       	ori	r24, 0x04	; 4
    1d1c:	80 83       	st	Z, r24
	CONTROL_PORT &= ~(1<<OE);
    1d1e:	59 98       	cbi	0x0b, 1	; 11
	CONTROL_PORT &= ~(1<<BS1_PAGEL);
    1d20:	5b 98       	cbi	0x0b, 3	; 11
    1d22:	87 ee       	ldi	r24, 0xE7	; 231
    1d24:	93 e0       	ldi	r25, 0x03	; 3
    1d26:	01 97       	sbiw	r24, 0x01	; 1
    1d28:	f1 f7       	brne	.-4      	; 0x1d26 <ReadSignatureBytes+0x7a>
    1d2a:	00 c0       	rjmp	.+0      	; 0x1d2c <ReadSignatureBytes+0x80>
    1d2c:	00 00       	nop
	_delay_us(500);
	SignatureBytes[0] = DATA_PIN;
    1d2e:	0f 2e       	mov	r0, r31
    1d30:	f9 e0       	ldi	r31, 0x09	; 9
    1d32:	af 2e       	mov	r10, r31
    1d34:	bb 24       	eor	r11, r11
    1d36:	b3 94       	inc	r11
    1d38:	f0 2d       	mov	r31, r0
    1d3a:	f5 01       	movw	r30, r10
    1d3c:	80 81       	ld	r24, Z
    1d3e:	0f 2e       	mov	r0, r31
    1d40:	f2 e5       	ldi	r31, 0x52	; 82
    1d42:	cf 2e       	mov	r12, r31
    1d44:	f9 e0       	ldi	r31, 0x09	; 9
    1d46:	df 2e       	mov	r13, r31
    1d48:	f0 2d       	mov	r31, r0
    1d4a:	f6 01       	movw	r30, r12
    1d4c:	80 83       	st	Z, r24
	printf("0x%02X ", SignatureBytes[0]);
    1d4e:	1f 92       	push	r1
    1d50:	8f 93       	push	r24
    1d52:	04 ee       	ldi	r16, 0xE4	; 228
    1d54:	18 e0       	ldi	r17, 0x08	; 8
    1d56:	1f 93       	push	r17
    1d58:	0f 93       	push	r16
    1d5a:	67 d3       	rcall	.+1742   	; 0x242a <printf>
	CONTROL_PORT |= 1<<OE;
    1d5c:	59 9a       	sbi	0x0b, 1	; 11
	WR_PORT &= ~(1<<FPGAWR);
    1d5e:	f4 01       	movw	r30, r8
    1d60:	80 81       	ld	r24, Z
    1d62:	8b 7f       	andi	r24, 0xFB	; 251
    1d64:	80 83       	st	Z, r24
	DATA_DDR = 0xFF;
    1d66:	77 24       	eor	r7, r7
    1d68:	7a 94       	dec	r7
    1d6a:	78 82       	st	Y, r7
    1d6c:	87 ec       	ldi	r24, 0xC7	; 199
    1d6e:	90 e0       	ldi	r25, 0x00	; 0
    1d70:	01 97       	sbiw	r24, 0x01	; 1
    1d72:	f1 f7       	brne	.-4      	; 0x1d70 <ReadSignatureBytes+0xc4>
    1d74:	00 c0       	rjmp	.+0      	; 0x1d76 <ReadSignatureBytes+0xca>
    1d76:	00 00       	nop
	_delay_us(100);
	
	//Load Address Low Byte
	CONTROL_PORT &= ~(1<<XA1_BS2);
    1d78:	5d 98       	cbi	0x0b, 5	; 11
	CONTROL_PORT &= ~(1<<XA0);
    1d7a:	5c 98       	cbi	0x0b, 4	; 11
	CONTROL_PORT &= ~(1<<BS1_PAGEL);
    1d7c:	5b 98       	cbi	0x0b, 3	; 11
	DATA_PORT = 0x01;
    1d7e:	81 e0       	ldi	r24, 0x01	; 1
    1d80:	f7 01       	movw	r30, r14
    1d82:	80 83       	st	Z, r24
    1d84:	87 ec       	ldi	r24, 0xC7	; 199
    1d86:	90 e0       	ldi	r25, 0x00	; 0
    1d88:	01 97       	sbiw	r24, 0x01	; 1
    1d8a:	f1 f7       	brne	.-4      	; 0x1d88 <ReadSignatureBytes+0xdc>
    1d8c:	00 c0       	rjmp	.+0      	; 0x1d8e <ReadSignatureBytes+0xe2>
    1d8e:	00 00       	nop
	_delay_us(100);
	CONTROL_PORT |= 1<<XTAL1;
    1d90:	58 9a       	sbi	0x0b, 0	; 11
    1d92:	92 e4       	ldi	r25, 0x42	; 66
    1d94:	9a 95       	dec	r25
    1d96:	f1 f7       	brne	.-4      	; 0x1d94 <ReadSignatureBytes+0xe8>
    1d98:	00 c0       	rjmp	.+0      	; 0x1d9a <ReadSignatureBytes+0xee>
	_delay_us(25);
	CONTROL_PORT &= ~(1<<XTAL1);
    1d9a:	58 98       	cbi	0x0b, 0	; 11
    1d9c:	e7 ec       	ldi	r30, 0xC7	; 199
    1d9e:	f0 e0       	ldi	r31, 0x00	; 0
    1da0:	31 97       	sbiw	r30, 0x01	; 1
    1da2:	f1 f7       	brne	.-4      	; 0x1da0 <ReadSignatureBytes+0xf4>
    1da4:	00 c0       	rjmp	.+0      	; 0x1da6 <ReadSignatureBytes+0xfa>
    1da6:	00 00       	nop
	_delay_us(100);
	
	//Read data
	DATA_DDR = 0;
    1da8:	18 82       	st	Y, r1
	WR_PORT |= (1<<FPGAWR);
    1daa:	f4 01       	movw	r30, r8
    1dac:	80 81       	ld	r24, Z
    1dae:	84 60       	ori	r24, 0x04	; 4
    1db0:	80 83       	st	Z, r24
	CONTROL_PORT &= ~(1<<OE);
    1db2:	59 98       	cbi	0x0b, 1	; 11
	CONTROL_PORT &= ~(1<<BS1_PAGEL);
    1db4:	5b 98       	cbi	0x0b, 3	; 11
    1db6:	87 ee       	ldi	r24, 0xE7	; 231
    1db8:	93 e0       	ldi	r25, 0x03	; 3
    1dba:	01 97       	sbiw	r24, 0x01	; 1
    1dbc:	f1 f7       	brne	.-4      	; 0x1dba <ReadSignatureBytes+0x10e>
    1dbe:	00 c0       	rjmp	.+0      	; 0x1dc0 <ReadSignatureBytes+0x114>
    1dc0:	00 00       	nop
	_delay_us(500);
	SignatureBytes[1] = DATA_PIN;
    1dc2:	f5 01       	movw	r30, r10
    1dc4:	80 81       	ld	r24, Z
    1dc6:	f6 01       	movw	r30, r12
    1dc8:	81 83       	std	Z+1, r24	; 0x01
	printf("0x%02X ", SignatureBytes[1]);
    1dca:	1f 92       	push	r1
    1dcc:	8f 93       	push	r24
    1dce:	1f 93       	push	r17
    1dd0:	0f 93       	push	r16
    1dd2:	2b d3       	rcall	.+1622   	; 0x242a <printf>
	CONTROL_PORT |= 1<<OE;
    1dd4:	59 9a       	sbi	0x0b, 1	; 11
	WR_PORT &= ~(1<<FPGAWR);
    1dd6:	f4 01       	movw	r30, r8
    1dd8:	80 81       	ld	r24, Z
    1dda:	8b 7f       	andi	r24, 0xFB	; 251
    1ddc:	80 83       	st	Z, r24
	DATA_DDR = 0xFF;
    1dde:	78 82       	st	Y, r7
    1de0:	87 ec       	ldi	r24, 0xC7	; 199
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	01 97       	sbiw	r24, 0x01	; 1
    1de6:	f1 f7       	brne	.-4      	; 0x1de4 <ReadSignatureBytes+0x138>
    1de8:	00 c0       	rjmp	.+0      	; 0x1dea <ReadSignatureBytes+0x13e>
    1dea:	00 00       	nop
	_delay_us(100);
	
	//Load Address Low Byte
	CONTROL_PORT &= ~(1<<XA1_BS2);
    1dec:	5d 98       	cbi	0x0b, 5	; 11
	CONTROL_PORT &= ~(1<<XA0);
    1dee:	5c 98       	cbi	0x0b, 4	; 11
	CONTROL_PORT &= ~(1<<BS1_PAGEL);
    1df0:	5b 98       	cbi	0x0b, 3	; 11
	DATA_PORT = 0x02;
    1df2:	82 e0       	ldi	r24, 0x02	; 2
    1df4:	f7 01       	movw	r30, r14
    1df6:	80 83       	st	Z, r24
    1df8:	87 ec       	ldi	r24, 0xC7	; 199
    1dfa:	90 e0       	ldi	r25, 0x00	; 0
    1dfc:	01 97       	sbiw	r24, 0x01	; 1
    1dfe:	f1 f7       	brne	.-4      	; 0x1dfc <ReadSignatureBytes+0x150>
    1e00:	00 c0       	rjmp	.+0      	; 0x1e02 <ReadSignatureBytes+0x156>
    1e02:	00 00       	nop
	_delay_us(100);
	CONTROL_PORT |= 1<<XTAL1;
    1e04:	58 9a       	sbi	0x0b, 0	; 11
    1e06:	92 e4       	ldi	r25, 0x42	; 66
    1e08:	9a 95       	dec	r25
    1e0a:	f1 f7       	brne	.-4      	; 0x1e08 <ReadSignatureBytes+0x15c>
    1e0c:	00 c0       	rjmp	.+0      	; 0x1e0e <ReadSignatureBytes+0x162>
	_delay_us(25);
	CONTROL_PORT &= ~(1<<XTAL1);
    1e0e:	58 98       	cbi	0x0b, 0	; 11
    1e10:	e7 ec       	ldi	r30, 0xC7	; 199
    1e12:	f0 e0       	ldi	r31, 0x00	; 0
    1e14:	31 97       	sbiw	r30, 0x01	; 1
    1e16:	f1 f7       	brne	.-4      	; 0x1e14 <ReadSignatureBytes+0x168>
    1e18:	00 c0       	rjmp	.+0      	; 0x1e1a <ReadSignatureBytes+0x16e>
    1e1a:	00 00       	nop
	_delay_us(100);
	
	//Read data
	DATA_DDR = 0;
    1e1c:	18 82       	st	Y, r1
	WR_PORT |= (1<<FPGAWR);
    1e1e:	f4 01       	movw	r30, r8
    1e20:	80 81       	ld	r24, Z
    1e22:	84 60       	ori	r24, 0x04	; 4
    1e24:	80 83       	st	Z, r24
	CONTROL_PORT &= ~(1<<OE);
    1e26:	59 98       	cbi	0x0b, 1	; 11
	CONTROL_PORT &= ~(1<<BS1_PAGEL);
    1e28:	5b 98       	cbi	0x0b, 3	; 11
    1e2a:	87 ee       	ldi	r24, 0xE7	; 231
    1e2c:	93 e0       	ldi	r25, 0x03	; 3
    1e2e:	01 97       	sbiw	r24, 0x01	; 1
    1e30:	f1 f7       	brne	.-4      	; 0x1e2e <ReadSignatureBytes+0x182>
    1e32:	00 c0       	rjmp	.+0      	; 0x1e34 <ReadSignatureBytes+0x188>
    1e34:	00 00       	nop
	_delay_us(500);
	SignatureBytes[2] = DATA_PIN;
    1e36:	f5 01       	movw	r30, r10
    1e38:	80 81       	ld	r24, Z
    1e3a:	f6 01       	movw	r30, r12
    1e3c:	82 83       	std	Z+2, r24	; 0x02
	printf("0x%02X ", SignatureBytes[2]);
    1e3e:	1f 92       	push	r1
    1e40:	8f 93       	push	r24
    1e42:	1f 93       	push	r17
    1e44:	0f 93       	push	r16
    1e46:	f1 d2       	rcall	.+1506   	; 0x242a <printf>
	CONTROL_PORT |= 1<<OE;
    1e48:	59 9a       	sbi	0x0b, 1	; 11
	WR_PORT &= ~(1<<FPGAWR);
    1e4a:	f4 01       	movw	r30, r8
    1e4c:	80 81       	ld	r24, Z
    1e4e:	8b 7f       	andi	r24, 0xFB	; 251
    1e50:	80 83       	st	Z, r24
	DATA_DDR = 0xFF;
    1e52:	78 82       	st	Y, r7
	DATA_PORT = 0x00;
    1e54:	f7 01       	movw	r30, r14
    1e56:	10 82       	st	Z, r1
	
	return SignatureBytes;
    1e58:	8d b7       	in	r24, 0x3d	; 61
    1e5a:	9e b7       	in	r25, 0x3e	; 62
    1e5c:	0c 96       	adiw	r24, 0x0c	; 12
    1e5e:	0f b6       	in	r0, 0x3f	; 63
    1e60:	f8 94       	cli
    1e62:	9e bf       	out	0x3e, r25	; 62
    1e64:	0f be       	out	0x3f, r0	; 63
    1e66:	8d bf       	out	0x3d, r24	; 61
}
    1e68:	c6 01       	movw	r24, r12
    1e6a:	df 91       	pop	r29
    1e6c:	cf 91       	pop	r28
    1e6e:	1f 91       	pop	r17
    1e70:	0f 91       	pop	r16
    1e72:	ff 90       	pop	r15
    1e74:	ef 90       	pop	r14
    1e76:	df 90       	pop	r13
    1e78:	cf 90       	pop	r12
    1e7a:	bf 90       	pop	r11
    1e7c:	af 90       	pop	r10
    1e7e:	9f 90       	pop	r9
    1e80:	8f 90       	pop	r8
    1e82:	7f 90       	pop	r7
    1e84:	08 95       	ret

00001e86 <ReadFlash>:

void ReadFlash(void)
{
    1e86:	bf 92       	push	r11
    1e88:	cf 92       	push	r12
    1e8a:	df 92       	push	r13
    1e8c:	ef 92       	push	r14
    1e8e:	ff 92       	push	r15
    1e90:	0f 93       	push	r16
    1e92:	1f 93       	push	r17
    1e94:	cf 93       	push	r28
    1e96:	df 93       	push	r29
	char DataValueIn = 0;
	
	//A: Load Command "Read Flash"
	LoadCommand(READ_FLASH);
    1e98:	82 e0       	ldi	r24, 0x02	; 2
    1e9a:	2d de       	rcall	.-934    	; 0x1af6 <LoadCommand>
	
	for (unsigned int LowAddressByte = 0; LowAddressByte < 16; LowAddressByte++)
    1e9c:	00 e0       	ldi	r16, 0x00	; 0
    1e9e:	10 e0       	ldi	r17, 0x00	; 0
		
		//B: Load Address Low Byte
		LoadLowAddress(LowAddressByte);
		
		//Read data
		DATA_DDR = 0;
    1ea0:	0f 2e       	mov	r0, r31
    1ea2:	fa e0       	ldi	r31, 0x0A	; 10
    1ea4:	cf 2e       	mov	r12, r31
    1ea6:	dd 24       	eor	r13, r13
    1ea8:	d3 94       	inc	r13
    1eaa:	f0 2d       	mov	r31, r0
		WR_PORT |= (1<<FPGAWR);
    1eac:	c5 e0       	ldi	r28, 0x05	; 5
    1eae:	d1 e0       	ldi	r29, 0x01	; 1
		CONTROL_PORT &= ~(1<<OE);
		CONTROL_PORT &= ~(1<<BS1_PAGEL); //Reading flash word low byte
		_delay_us(500);
		DataValueIn = DATA_PIN;
    1eb0:	0f 2e       	mov	r0, r31
    1eb2:	f9 e0       	ldi	r31, 0x09	; 9
    1eb4:	ef 2e       	mov	r14, r31
    1eb6:	ff 24       	eor	r15, r15
    1eb8:	f3 94       	inc	r15
    1eba:	f0 2d       	mov	r31, r0
		_delay_us(500);
		DataValueIn = DATA_PIN;
		//printf("0x%02X ", DataValueIn);
		CONTROL_PORT |= 1<<OE;
		WR_PORT &= ~(1<<FPGAWR);
		DATA_DDR = 0xFF;
    1ebc:	bb 24       	eor	r11, r11
    1ebe:	ba 94       	dec	r11
	LoadCommand(READ_FLASH);
	
	for (unsigned int LowAddressByte = 0; LowAddressByte < 16; LowAddressByte++)
	{
		//F: Load Address High Byte
		LoadHighAddress(0x00);
    1ec0:	80 e0       	ldi	r24, 0x00	; 0
    1ec2:	90 e0       	ldi	r25, 0x00	; 0
    1ec4:	67 de       	rcall	.-818    	; 0x1b94 <LoadHighAddress>
		
		//B: Load Address Low Byte
		LoadLowAddress(LowAddressByte);
    1ec6:	c8 01       	movw	r24, r16
    1ec8:	50 de       	rcall	.-864    	; 0x1b6a <LoadLowAddress>
		
		//Read data
		DATA_DDR = 0;
    1eca:	f6 01       	movw	r30, r12
    1ecc:	10 82       	st	Z, r1
		WR_PORT |= (1<<FPGAWR);
    1ece:	88 81       	ld	r24, Y
    1ed0:	84 60       	ori	r24, 0x04	; 4
    1ed2:	88 83       	st	Y, r24
		CONTROL_PORT &= ~(1<<OE);
    1ed4:	59 98       	cbi	0x0b, 1	; 11
		CONTROL_PORT &= ~(1<<BS1_PAGEL); //Reading flash word low byte
    1ed6:	5b 98       	cbi	0x0b, 3	; 11
    1ed8:	87 ee       	ldi	r24, 0xE7	; 231
    1eda:	93 e0       	ldi	r25, 0x03	; 3
    1edc:	01 97       	sbiw	r24, 0x01	; 1
    1ede:	f1 f7       	brne	.-4      	; 0x1edc <ReadFlash+0x56>
    1ee0:	00 c0       	rjmp	.+0      	; 0x1ee2 <ReadFlash+0x5c>
    1ee2:	00 00       	nop
		_delay_us(500);
		DataValueIn = DATA_PIN;
    1ee4:	f7 01       	movw	r30, r14
    1ee6:	80 81       	ld	r24, Z
		//printf("0x%02X ", DataValueIn);
		CONTROL_PORT |= 1<<BS1_PAGEL; //Reading flash word high byte
    1ee8:	5b 9a       	sbi	0x0b, 3	; 11
    1eea:	87 ee       	ldi	r24, 0xE7	; 231
    1eec:	93 e0       	ldi	r25, 0x03	; 3
    1eee:	01 97       	sbiw	r24, 0x01	; 1
    1ef0:	f1 f7       	brne	.-4      	; 0x1eee <ReadFlash+0x68>
    1ef2:	00 c0       	rjmp	.+0      	; 0x1ef4 <ReadFlash+0x6e>
    1ef4:	00 00       	nop
		_delay_us(500);
		DataValueIn = DATA_PIN;
    1ef6:	80 81       	ld	r24, Z
		//printf("0x%02X ", DataValueIn);
		CONTROL_PORT |= 1<<OE;
    1ef8:	59 9a       	sbi	0x0b, 1	; 11
		WR_PORT &= ~(1<<FPGAWR);
    1efa:	88 81       	ld	r24, Y
    1efc:	8b 7f       	andi	r24, 0xFB	; 251
    1efe:	88 83       	st	Y, r24
		DATA_DDR = 0xFF;
    1f00:	f6 01       	movw	r30, r12
    1f02:	b0 82       	st	Z, r11
    1f04:	f2 e4       	ldi	r31, 0x42	; 66
    1f06:	fa 95       	dec	r31
    1f08:	f1 f7       	brne	.-4      	; 0x1f06 <ReadFlash+0x80>
    1f0a:	00 c0       	rjmp	.+0      	; 0x1f0c <ReadFlash+0x86>
	char DataValueIn = 0;
	
	//A: Load Command "Read Flash"
	LoadCommand(READ_FLASH);
	
	for (unsigned int LowAddressByte = 0; LowAddressByte < 16; LowAddressByte++)
    1f0c:	0f 5f       	subi	r16, 0xFF	; 255
    1f0e:	1f 4f       	sbci	r17, 0xFF	; 255
    1f10:	00 31       	cpi	r16, 0x10	; 16
    1f12:	11 05       	cpc	r17, r1
    1f14:	a9 f6       	brne	.-86     	; 0x1ec0 <ReadFlash+0x3a>
		CONTROL_PORT |= 1<<OE;
		WR_PORT &= ~(1<<FPGAWR);
		DATA_DDR = 0xFF;
		_delay_us(25);
	}
}
    1f16:	df 91       	pop	r29
    1f18:	cf 91       	pop	r28
    1f1a:	1f 91       	pop	r17
    1f1c:	0f 91       	pop	r16
    1f1e:	ff 90       	pop	r15
    1f20:	ef 90       	pop	r14
    1f22:	df 90       	pop	r13
    1f24:	cf 90       	pop	r12
    1f26:	bf 90       	pop	r11
    1f28:	08 95       	ret

00001f2a <VerifyFlash>:

int VerifyFlash(void)
{
    1f2a:	2f 92       	push	r2
    1f2c:	3f 92       	push	r3
    1f2e:	4f 92       	push	r4
    1f30:	5f 92       	push	r5
    1f32:	6f 92       	push	r6
    1f34:	7f 92       	push	r7
    1f36:	8f 92       	push	r8
    1f38:	9f 92       	push	r9
    1f3a:	af 92       	push	r10
    1f3c:	bf 92       	push	r11
    1f3e:	cf 92       	push	r12
    1f40:	df 92       	push	r13
    1f42:	ef 92       	push	r14
    1f44:	ff 92       	push	r15
    1f46:	0f 93       	push	r16
    1f48:	1f 93       	push	r17
    1f4a:	cf 93       	push	r28
    1f4c:	df 93       	push	r29
	resetRAMOffset(); 
    1f4e:	f2 da       	rcall	.-2588   	; 0x1534 <resetRAMOffset>
	uint16_t byteCount;
	uint16_t address;
	uint16_t data;
	//Keep looping until the hexRow is the end of file or we hit the end of a page
	
	LoadCommand(READ_FLASH);
    1f50:	82 e0       	ldi	r24, 0x02	; 2
    1f52:	d1 dd       	rcall	.-1118   	; 0x1af6 <LoadCommand>
		address <<= 8;
		address |= (hexRow[ADDRESS_L]);
		address /= 2;
		
		int j =0;
		for(int i=0; i<byteCount; i+=2)
    1f54:	21 2c       	mov	r2, r1
			LoadLowAddress(address + j);
			//printf("\nAddress: 0x%04X\n",(address + j));
			j++;
			
			//Read data
			DATA_DDR = 0;
    1f56:	0f 2e       	mov	r0, r31
    1f58:	fa e0       	ldi	r31, 0x0A	; 10
    1f5a:	af 2e       	mov	r10, r31
    1f5c:	bb 24       	eor	r11, r11
    1f5e:	b3 94       	inc	r11
    1f60:	f0 2d       	mov	r31, r0
			WR_PORT |= (1<<FPGAWR);
    1f62:	05 e0       	ldi	r16, 0x05	; 5
    1f64:	11 e0       	ldi	r17, 0x01	; 1
			CONTROL_PORT &= ~(1<<OE);
			CONTROL_PORT &= ~(1<<BS1_PAGEL); //Reading flash word low byte
			_delay_us(500);
			DataValueIn = DATA_PIN;
    1f66:	0f 2e       	mov	r0, r31
    1f68:	f9 e0       	ldi	r31, 0x09	; 9
    1f6a:	cf 2e       	mov	r12, r31
    1f6c:	dd 24       	eor	r13, r13
    1f6e:	d3 94       	inc	r13
    1f70:	f0 2d       	mov	r31, r0
			{
				return 0;
			}
			CONTROL_PORT |= 1<<OE;
			WR_PORT &= ~(1<<FPGAWR);
			DATA_DDR = 0xFF;
    1f72:	33 24       	eor	r3, r3
    1f74:	3a 94       	dec	r3
	
	LoadCommand(READ_FLASH);
	
	while(1)
	{
		hexRow = getHexRow();
    1f76:	e3 da       	rcall	.-2618   	; 0x153e <getHexRow>
    1f78:	ec 01       	movw	r28, r24
		
		//printf("We're here now\n");
		
		if(hexRow[RECORD_TYPE] == TYPE_END_OF_FILE)
    1f7a:	8c 81       	ldd	r24, Y+4	; 0x04
    1f7c:	81 30       	cpi	r24, 0x01	; 1
    1f7e:	09 f4       	brne	.+2      	; 0x1f82 <VerifyFlash+0x58>
    1f80:	4c c0       	rjmp	.+152    	; 0x201a <VerifyFlash+0xf0>
		{
			return 1;
		}
		
		byteCount = (hexRow[BYTE_COUNT]);
    1f82:	69 80       	ldd	r6, Y+1	; 0x01
    1f84:	71 2c       	mov	r7, r1
		address = hexRow[ADDRESS_H];
    1f86:	4a 80       	ldd	r4, Y+2	; 0x02
    1f88:	51 2c       	mov	r5, r1
		address <<= 8;
    1f8a:	54 2c       	mov	r5, r4
    1f8c:	44 24       	eor	r4, r4
		address |= (hexRow[ADDRESS_L]);
    1f8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f90:	48 2a       	or	r4, r24
		address /= 2;
    1f92:	56 94       	lsr	r5
    1f94:	47 94       	ror	r4
		
		int j =0;
		for(int i=0; i<byteCount; i+=2)
    1f96:	61 14       	cp	r6, r1
    1f98:	71 04       	cpc	r7, r1
    1f9a:	69 f3       	breq	.-38     	; 0x1f76 <VerifyFlash+0x4c>
    1f9c:	26 96       	adiw	r28, 0x06	; 6
    1f9e:	72 01       	movw	r14, r4
    1fa0:	82 2c       	mov	r8, r2
    1fa2:	91 2c       	mov	r9, r1
		{
			LoadHighAddress(address);
    1fa4:	c2 01       	movw	r24, r4
    1fa6:	f6 dd       	rcall	.-1044   	; 0x1b94 <LoadHighAddress>
			LoadLowAddress(address + j);
    1fa8:	c7 01       	movw	r24, r14
    1faa:	df dd       	rcall	.-1090   	; 0x1b6a <LoadLowAddress>
			//printf("\nAddress: 0x%04X\n",(address + j));
			j++;
			
			//Read data
			DATA_DDR = 0;
    1fac:	f5 01       	movw	r30, r10
    1fae:	10 82       	st	Z, r1
			WR_PORT |= (1<<FPGAWR);
    1fb0:	f8 01       	movw	r30, r16
    1fb2:	80 81       	ld	r24, Z
    1fb4:	84 60       	ori	r24, 0x04	; 4
    1fb6:	80 83       	st	Z, r24
			CONTROL_PORT &= ~(1<<OE);
    1fb8:	59 98       	cbi	0x0b, 1	; 11
			CONTROL_PORT &= ~(1<<BS1_PAGEL); //Reading flash word low byte
    1fba:	5b 98       	cbi	0x0b, 3	; 11
    1fbc:	87 ee       	ldi	r24, 0xE7	; 231
    1fbe:	93 e0       	ldi	r25, 0x03	; 3
    1fc0:	01 97       	sbiw	r24, 0x01	; 1
    1fc2:	f1 f7       	brne	.-4      	; 0x1fc0 <VerifyFlash+0x96>
    1fc4:	00 c0       	rjmp	.+0      	; 0x1fc6 <VerifyFlash+0x9c>
    1fc6:	00 00       	nop
			_delay_us(500);
			DataValueIn = DATA_PIN;
    1fc8:	f6 01       	movw	r30, r12
    1fca:	80 81       	ld	r24, Z
    1fcc:	fe 01       	movw	r30, r28
    1fce:	31 97       	sbiw	r30, 0x01	; 1
			//printf("0x%02X ", DataValueIn);
			if (DataValueIn != hexRow[DATA_BEGIN + i])
    1fd0:	90 81       	ld	r25, Z
    1fd2:	98 13       	cpse	r25, r24
    1fd4:	25 c0       	rjmp	.+74     	; 0x2020 <VerifyFlash+0xf6>
			{
				return 0;
			}
			CONTROL_PORT |= 1<<BS1_PAGEL; //Reading flash word high byte
    1fd6:	5b 9a       	sbi	0x0b, 3	; 11
    1fd8:	87 ee       	ldi	r24, 0xE7	; 231
    1fda:	93 e0       	ldi	r25, 0x03	; 3
    1fdc:	01 97       	sbiw	r24, 0x01	; 1
    1fde:	f1 f7       	brne	.-4      	; 0x1fdc <VerifyFlash+0xb2>
    1fe0:	00 c0       	rjmp	.+0      	; 0x1fe2 <VerifyFlash+0xb8>
    1fe2:	00 00       	nop
			_delay_us(500);
			DataValueIn = DATA_PIN;
    1fe4:	f6 01       	movw	r30, r12
    1fe6:	80 81       	ld	r24, Z
			//printf("0x%02X ", DataValueIn);
			if (DataValueIn != hexRow[DATA_BEGIN + i + 1])
    1fe8:	98 81       	ld	r25, Y
    1fea:	98 13       	cpse	r25, r24
    1fec:	1c c0       	rjmp	.+56     	; 0x2026 <VerifyFlash+0xfc>
			{
				return 0;
			}
			CONTROL_PORT |= 1<<OE;
    1fee:	59 9a       	sbi	0x0b, 1	; 11
			WR_PORT &= ~(1<<FPGAWR);
    1ff0:	f8 01       	movw	r30, r16
    1ff2:	80 81       	ld	r24, Z
    1ff4:	8b 7f       	andi	r24, 0xFB	; 251
    1ff6:	80 83       	st	Z, r24
			DATA_DDR = 0xFF;
    1ff8:	f5 01       	movw	r30, r10
    1ffa:	30 82       	st	Z, r3
    1ffc:	f2 e4       	ldi	r31, 0x42	; 66
    1ffe:	fa 95       	dec	r31
    2000:	f1 f7       	brne	.-4      	; 0x1ffe <VerifyFlash+0xd4>
    2002:	00 c0       	rjmp	.+0      	; 0x2004 <VerifyFlash+0xda>
		address <<= 8;
		address |= (hexRow[ADDRESS_L]);
		address /= 2;
		
		int j =0;
		for(int i=0; i<byteCount; i+=2)
    2004:	82 e0       	ldi	r24, 0x02	; 2
    2006:	88 0e       	add	r8, r24
    2008:	91 1c       	adc	r9, r1
    200a:	9f ef       	ldi	r25, 0xFF	; 255
    200c:	e9 1a       	sub	r14, r25
    200e:	f9 0a       	sbc	r15, r25
    2010:	22 96       	adiw	r28, 0x02	; 2
    2012:	86 14       	cp	r8, r6
    2014:	97 04       	cpc	r9, r7
    2016:	30 f2       	brcs	.-116    	; 0x1fa4 <VerifyFlash+0x7a>
    2018:	ae cf       	rjmp	.-164    	; 0x1f76 <VerifyFlash+0x4c>
		
		//printf("We're here now\n");
		
		if(hexRow[RECORD_TYPE] == TYPE_END_OF_FILE)
		{
			return 1;
    201a:	81 e0       	ldi	r24, 0x01	; 1
    201c:	90 e0       	ldi	r25, 0x00	; 0
    201e:	05 c0       	rjmp	.+10     	; 0x202a <VerifyFlash+0x100>
			_delay_us(500);
			DataValueIn = DATA_PIN;
			//printf("0x%02X ", DataValueIn);
			if (DataValueIn != hexRow[DATA_BEGIN + i])
			{
				return 0;
    2020:	80 e0       	ldi	r24, 0x00	; 0
    2022:	90 e0       	ldi	r25, 0x00	; 0
    2024:	02 c0       	rjmp	.+4      	; 0x202a <VerifyFlash+0x100>
			_delay_us(500);
			DataValueIn = DATA_PIN;
			//printf("0x%02X ", DataValueIn);
			if (DataValueIn != hexRow[DATA_BEGIN + i + 1])
			{
				return 0;
    2026:	80 e0       	ldi	r24, 0x00	; 0
    2028:	90 e0       	ldi	r25, 0x00	; 0
			WR_PORT &= ~(1<<FPGAWR);
			DATA_DDR = 0xFF;
			_delay_us(25);
		}
	}
}
    202a:	df 91       	pop	r29
    202c:	cf 91       	pop	r28
    202e:	1f 91       	pop	r17
    2030:	0f 91       	pop	r16
    2032:	ff 90       	pop	r15
    2034:	ef 90       	pop	r14
    2036:	df 90       	pop	r13
    2038:	cf 90       	pop	r12
    203a:	bf 90       	pop	r11
    203c:	af 90       	pop	r10
    203e:	9f 90       	pop	r9
    2040:	8f 90       	pop	r8
    2042:	7f 90       	pop	r7
    2044:	6f 90       	pop	r6
    2046:	5f 90       	pop	r5
    2048:	4f 90       	pop	r4
    204a:	3f 90       	pop	r3
    204c:	2f 90       	pop	r2
    204e:	08 95       	ret

00002050 <ChipErase>:

void ChipErase(void)
{
	CONTROL_PORT |= 1<<XA1_BS2;
    2050:	5d 9a       	sbi	0x0b, 5	; 11
	CONTROL_PORT &= ~(1<<XA0);
    2052:	5c 98       	cbi	0x0b, 4	; 11
	CONTROL_PORT &= ~(1<<BS1_PAGEL);
    2054:	5b 98       	cbi	0x0b, 3	; 11
	DATA_PORT = 0x80;
    2056:	80 e8       	ldi	r24, 0x80	; 128
    2058:	80 93 0b 01 	sts	0x010B, r24
    205c:	82 e4       	ldi	r24, 0x42	; 66
    205e:	8a 95       	dec	r24
    2060:	f1 f7       	brne	.-4      	; 0x205e <ChipErase+0xe>
    2062:	00 c0       	rjmp	.+0      	; 0x2064 <ChipErase+0x14>
	_delay_us(25);
	CONTROL_PORT |= 1<<XTAL1;
    2064:	58 9a       	sbi	0x0b, 0	; 11
    2066:	82 e4       	ldi	r24, 0x42	; 66
    2068:	8a 95       	dec	r24
    206a:	f1 f7       	brne	.-4      	; 0x2068 <ChipErase+0x18>
    206c:	00 c0       	rjmp	.+0      	; 0x206e <ChipErase+0x1e>
	_delay_us(25);
	CONTROL_PORT &= ~(1<<XTAL1);
    206e:	58 98       	cbi	0x0b, 0	; 11
    2070:	82 e4       	ldi	r24, 0x42	; 66
    2072:	8a 95       	dec	r24
    2074:	f1 f7       	brne	.-4      	; 0x2072 <ChipErase+0x22>
    2076:	00 c0       	rjmp	.+0      	; 0x2078 <ChipErase+0x28>
	_delay_us(25);
	CONTROL_PORT &= ~(1<<WR);
    2078:	5a 98       	cbi	0x0b, 2	; 11
    207a:	82 e4       	ldi	r24, 0x42	; 66
    207c:	8a 95       	dec	r24
    207e:	f1 f7       	brne	.-4      	; 0x207c <ChipErase+0x2c>
    2080:	00 c0       	rjmp	.+0      	; 0x2082 <ChipErase+0x32>
	_delay_us(25);
	CONTROL_PORT |= 1<<WR;
    2082:	5a 9a       	sbi	0x0b, 2	; 11
    2084:	82 e4       	ldi	r24, 0x42	; 66
    2086:	8a 95       	dec	r24
    2088:	f1 f7       	brne	.-4      	; 0x2086 <ChipErase+0x36>
    208a:	00 c0       	rjmp	.+0      	; 0x208c <ChipErase+0x3c>
	_delay_us(25);
	while(!(RDY_BSY_In & (1<<RDY_BSY)));
    208c:	30 9b       	sbis	0x06, 0	; 6
    208e:	fe cf       	rjmp	.-4      	; 0x208c <ChipErase+0x3c>
}
    2090:	08 95       	ret

00002092 <ProgramFlash>:

void ProgramFlash(uint32_t sigBytes)
{
    2092:	2f 92       	push	r2
    2094:	3f 92       	push	r3
    2096:	4f 92       	push	r4
    2098:	5f 92       	push	r5
    209a:	6f 92       	push	r6
    209c:	7f 92       	push	r7
    209e:	8f 92       	push	r8
    20a0:	9f 92       	push	r9
    20a2:	af 92       	push	r10
    20a4:	bf 92       	push	r11
    20a6:	cf 92       	push	r12
    20a8:	df 92       	push	r13
    20aa:	ef 92       	push	r14
    20ac:	ff 92       	push	r15
    20ae:	0f 93       	push	r16
    20b0:	1f 93       	push	r17
    20b2:	cf 93       	push	r28
    20b4:	df 93       	push	r29
    20b6:	00 d0       	rcall	.+0      	; 0x20b8 <ProgramFlash+0x26>
    20b8:	00 d0       	rcall	.+0      	; 0x20ba <ProgramFlash+0x28>
    20ba:	00 d0       	rcall	.+0      	; 0x20bc <ProgramFlash+0x2a>
    20bc:	cd b7       	in	r28, 0x3d	; 61
    20be:	de b7       	in	r29, 0x3e	; 62
	uint32_t totalBytes = 0; 
	uint16_t pageSize;
	int j;
	int i; 
	//Keep looping until the hexRow is the end of file or we hit the end of a page 
	if(sigBytes == ATtiny2313)
    20c0:	6a 30       	cpi	r22, 0x0A	; 10
    20c2:	21 e9       	ldi	r18, 0x91	; 145
    20c4:	72 07       	cpc	r23, r18
    20c6:	2e e1       	ldi	r18, 0x1E	; 30
    20c8:	82 07       	cpc	r24, r18
    20ca:	91 05       	cpc	r25, r1
    20cc:	41 f4       	brne	.+16     	; 0x20de <ProgramFlash+0x4c>
	{
		printf("Page size is 16\n");
    20ce:	8c ee       	ldi	r24, 0xEC	; 236
    20d0:	98 e0       	ldi	r25, 0x08	; 8
    20d2:	c3 d1       	rcall	.+902    	; 0x245a <puts>
		pageSize = 16; 
    20d4:	68 94       	set
    20d6:	22 24       	eor	r2, r2
    20d8:	24 f8       	bld	r2, 4
    20da:	31 2c       	mov	r3, r1
    20dc:	0c c0       	rjmp	.+24     	; 0x20f6 <ProgramFlash+0x64>
	}
	else if(sigBytes == ATmega324PA)
    20de:	61 31       	cpi	r22, 0x11	; 17
    20e0:	75 49       	sbci	r23, 0x95	; 149
    20e2:	8e 41       	sbci	r24, 0x1E	; 30
    20e4:	91 05       	cpc	r25, r1
    20e6:	39 f4       	brne	.+14     	; 0x20f6 <ProgramFlash+0x64>
	{
		pageSize = 64; 
		printf("Page size is 64\n");
    20e8:	8c ef       	ldi	r24, 0xFC	; 252
    20ea:	98 e0       	ldi	r25, 0x08	; 8
    20ec:	b6 d1       	rcall	.+876    	; 0x245a <puts>
		printf("Page size is 16\n");
		pageSize = 16; 
	}
	else if(sigBytes == ATmega324PA)
	{
		pageSize = 64; 
    20ee:	68 94       	set
    20f0:	22 24       	eor	r2, r2
    20f2:	26 f8       	bld	r2, 6
    20f4:	31 2c       	mov	r3, r1
		printf("Page size is 64\n");
	}
	
	LoadCommand(WRITE_FLASH);
    20f6:	80 e1       	ldi	r24, 0x10	; 16
    20f8:	fe dc       	rcall	.-1540   	; 0x1af6 <LoadCommand>
{
	char* hexRow;
	uint16_t byteCount;
	uint16_t address;
	uint16_t data;
	uint32_t totalBytes = 0; 
    20fa:	41 2c       	mov	r4, r1
    20fc:	51 2c       	mov	r5, r1
    20fe:	32 01       	movw	r6, r4
		address <<= 8;
		address |= (hexRow[ADDRESS_L]);
		address /= 2; 
		//printf("\nByteCount: %d, Address: 0x%04x\n", byteCount, address); 
		j =0;
		for(i=0; i<byteCount; i+=2)
    2100:	91 2c       	mov	r9, r1
    2102:	81 2c       	mov	r8, r1
			//printf("Total Bytes: %d, i: %d, j: %d\n", totalBytes, i, j);
			LatchData();
		}
		
		//Check to see if we hit the end of a page 
		if(totalBytes%pageSize == 0)
    2104:	c1 01       	movw	r24, r2
    2106:	a0 e0       	ldi	r26, 0x00	; 0
    2108:	b0 e0       	ldi	r27, 0x00	; 0
    210a:	89 83       	std	Y+1, r24	; 0x01
    210c:	9a 83       	std	Y+2, r25	; 0x02
    210e:	ab 83       	std	Y+3, r26	; 0x03
    2110:	bc 83       	std	Y+4, r27	; 0x04
	
	LoadCommand(WRITE_FLASH);
	
	while(1)
	{
		hexRow = getHexRow();
    2112:	15 da       	rcall	.-3030   	; 0x153e <getHexRow>
    2114:	fc 01       	movw	r30, r24
		
		//printf("We're here now\n");
		
		if(hexRow[RECORD_TYPE] == TYPE_END_OF_FILE)
    2116:	84 81       	ldd	r24, Z+4	; 0x04
    2118:	81 30       	cpi	r24, 0x01	; 1
    211a:	79 f4       	brne	.+30     	; 0x213a <ProgramFlash+0xa8>
		{
			printf("End of File!\n"); 
    211c:	8f e8       	ldi	r24, 0x8F	; 143
    211e:	98 e0       	ldi	r25, 0x08	; 8
    2120:	9c d1       	rcall	.+824    	; 0x245a <puts>
			ProgramPage();
		}
	}
	
	//After reaching end of file, do a final page write in case we did not fill an entire page
	if(totalBytes%pageSize != 0)
    2122:	91 01       	movw	r18, r2
    2124:	40 e0       	ldi	r20, 0x00	; 0
    2126:	50 e0       	ldi	r21, 0x00	; 0
    2128:	c3 01       	movw	r24, r6
    212a:	b2 01       	movw	r22, r4
    212c:	03 d1       	rcall	.+518    	; 0x2334 <__udivmodsi4>
    212e:	67 2b       	or	r22, r23
    2130:	68 2b       	or	r22, r24
    2132:	69 2b       	or	r22, r25
    2134:	09 f4       	brne	.+2      	; 0x2138 <ProgramFlash+0xa6>
    2136:	51 c0       	rjmp	.+162    	; 0x21da <ProgramFlash+0x148>
    2138:	4a c0       	rjmp	.+148    	; 0x21ce <ProgramFlash+0x13c>
		{
			printf("End of File!\n"); 
			break;
		}
					
		byteCount = (hexRow[BYTE_COUNT]);
    213a:	c1 80       	ldd	r12, Z+1	; 0x01
    213c:	d1 2c       	mov	r13, r1
		address = hexRow[ADDRESS_H];
    213e:	a2 80       	ldd	r10, Z+2	; 0x02
    2140:	b1 2c       	mov	r11, r1
		address <<= 8;
    2142:	ba 2c       	mov	r11, r10
    2144:	aa 24       	eor	r10, r10
		address |= (hexRow[ADDRESS_L]);
    2146:	83 81       	ldd	r24, Z+3	; 0x03
    2148:	a8 2a       	or	r10, r24
		address /= 2; 
    214a:	b6 94       	lsr	r11
    214c:	a7 94       	ror	r10
		//printf("\nByteCount: %d, Address: 0x%04x\n", byteCount, address); 
		j =0;
		for(i=0; i<byteCount; i+=2)
    214e:	c1 14       	cp	r12, r1
    2150:	d1 04       	cpc	r13, r1
    2152:	51 f1       	breq	.+84     	; 0x21a8 <ProgramFlash+0x116>
    2154:	df 01       	movw	r26, r30
    2156:	16 96       	adiw	r26, 0x06	; 6
    2158:	be 83       	std	Y+6, r27	; 0x06
    215a:	ad 83       	std	Y+5, r26	; 0x05
    215c:	75 01       	movw	r14, r10
    215e:	09 2d       	mov	r16, r9
    2160:	18 2d       	mov	r17, r8
		{
			LoadLowAddress(address + j);
    2162:	c7 01       	movw	r24, r14
    2164:	02 dd       	rcall	.-1532   	; 0x1b6a <LoadLowAddress>
			//printf("Address: 0x%04X\n",(address + j));
			data = hexRow[DATA_BEGIN + i + 1];
    2166:	ed 81       	ldd	r30, Y+5	; 0x05
    2168:	fe 81       	ldd	r31, Y+6	; 0x06
    216a:	80 81       	ld	r24, Z
    216c:	90 e0       	ldi	r25, 0x00	; 0
			data <<= 8;
    216e:	98 2f       	mov	r25, r24
    2170:	88 27       	eor	r24, r24
    2172:	31 97       	sbiw	r30, 0x01	; 1
			data |= hexRow[DATA_BEGIN + i];
    2174:	20 81       	ld	r18, Z
			WriteWord(data);
    2176:	82 2b       	or	r24, r18
    2178:	d2 dc       	rcall	.-1628   	; 0x1b1e <WriteWord>
			//printf("Word: 0x%04X\n",(data));
			totalBytes+=i; 
    217a:	c8 01       	movw	r24, r16
    217c:	01 2e       	mov	r0, r17
    217e:	00 0c       	add	r0, r0
    2180:	aa 0b       	sbc	r26, r26
    2182:	bb 0b       	sbc	r27, r27
    2184:	48 0e       	add	r4, r24
    2186:	59 1e       	adc	r5, r25
    2188:	6a 1e       	adc	r6, r26
    218a:	7b 1e       	adc	r7, r27
			j++;
			//printf("Total Bytes: %d, i: %d, j: %d\n", totalBytes, i, j);
			LatchData();
    218c:	18 dd       	rcall	.-1488   	; 0x1bbe <LatchData>
		address <<= 8;
		address |= (hexRow[ADDRESS_L]);
		address /= 2; 
		//printf("\nByteCount: %d, Address: 0x%04x\n", byteCount, address); 
		j =0;
		for(i=0; i<byteCount; i+=2)
    218e:	0e 5f       	subi	r16, 0xFE	; 254
    2190:	1f 4f       	sbci	r17, 0xFF	; 255
    2192:	ff ef       	ldi	r31, 0xFF	; 255
    2194:	ef 1a       	sub	r14, r31
    2196:	ff 0a       	sbc	r15, r31
    2198:	8d 81       	ldd	r24, Y+5	; 0x05
    219a:	9e 81       	ldd	r25, Y+6	; 0x06
    219c:	02 96       	adiw	r24, 0x02	; 2
    219e:	9e 83       	std	Y+6, r25	; 0x06
    21a0:	8d 83       	std	Y+5, r24	; 0x05
    21a2:	0c 15       	cp	r16, r12
    21a4:	1d 05       	cpc	r17, r13
    21a6:	e8 f2       	brcs	.-70     	; 0x2162 <ProgramFlash+0xd0>
			//printf("Total Bytes: %d, i: %d, j: %d\n", totalBytes, i, j);
			LatchData();
		}
		
		//Check to see if we hit the end of a page 
		if(totalBytes%pageSize == 0)
    21a8:	c3 01       	movw	r24, r6
    21aa:	b2 01       	movw	r22, r4
    21ac:	29 81       	ldd	r18, Y+1	; 0x01
    21ae:	3a 81       	ldd	r19, Y+2	; 0x02
    21b0:	4b 81       	ldd	r20, Y+3	; 0x03
    21b2:	5c 81       	ldd	r21, Y+4	; 0x04
    21b4:	bf d0       	rcall	.+382    	; 0x2334 <__udivmodsi4>
    21b6:	67 2b       	or	r22, r23
    21b8:	68 2b       	or	r22, r24
    21ba:	69 2b       	or	r22, r25
    21bc:	09 f0       	breq	.+2      	; 0x21c0 <ProgramFlash+0x12e>
    21be:	a9 cf       	rjmp	.-174    	; 0x2112 <ProgramFlash+0x80>
		{
			printf("Full Page Written\n");
    21c0:	8c e0       	ldi	r24, 0x0C	; 12
    21c2:	99 e0       	ldi	r25, 0x09	; 9
    21c4:	4a d1       	rcall	.+660    	; 0x245a <puts>
			LoadHighAddress(address);
    21c6:	c5 01       	movw	r24, r10
    21c8:	e5 dc       	rcall	.-1590   	; 0x1b94 <LoadHighAddress>
			ProgramPage();
    21ca:	09 dd       	rcall	.-1518   	; 0x1bde <ProgramPage>
    21cc:	a2 cf       	rjmp	.-188    	; 0x2112 <ProgramFlash+0x80>
	}
	
	//After reaching end of file, do a final page write in case we did not fill an entire page
	if(totalBytes%pageSize != 0)
	{
		printf("Partial Page Written\n");
    21ce:	8e e1       	ldi	r24, 0x1E	; 30
    21d0:	99 e0       	ldi	r25, 0x09	; 9
    21d2:	43 d1       	rcall	.+646    	; 0x245a <puts>
		LoadHighAddress(address);
    21d4:	c5 01       	movw	r24, r10
    21d6:	de dc       	rcall	.-1604   	; 0x1b94 <LoadHighAddress>
		ProgramPage();
    21d8:	02 dd       	rcall	.-1532   	; 0x1bde <ProgramPage>
	} 
	printf("Ending Page Programming!\n");
    21da:	83 e3       	ldi	r24, 0x33	; 51
    21dc:	99 e0       	ldi	r25, 0x09	; 9
    21de:	3d d1       	rcall	.+634    	; 0x245a <puts>
	EndPageProgramming();
    21e0:	0d dd       	rcall	.-1510   	; 0x1bfc <EndPageProgramming>
}
    21e2:	26 96       	adiw	r28, 0x06	; 6
    21e4:	0f b6       	in	r0, 0x3f	; 63
    21e6:	f8 94       	cli
    21e8:	de bf       	out	0x3e, r29	; 62
    21ea:	0f be       	out	0x3f, r0	; 63
    21ec:	cd bf       	out	0x3d, r28	; 61
    21ee:	df 91       	pop	r29
    21f0:	cf 91       	pop	r28
    21f2:	1f 91       	pop	r17
    21f4:	0f 91       	pop	r16
    21f6:	ff 90       	pop	r15
    21f8:	ef 90       	pop	r14
    21fa:	df 90       	pop	r13
    21fc:	cf 90       	pop	r12
    21fe:	bf 90       	pop	r11
    2200:	af 90       	pop	r10
    2202:	9f 90       	pop	r9
    2204:	8f 90       	pop	r8
    2206:	7f 90       	pop	r7
    2208:	6f 90       	pop	r6
    220a:	5f 90       	pop	r5
    220c:	4f 90       	pop	r4
    220e:	3f 90       	pop	r3
    2210:	2f 90       	pop	r2
    2212:	08 95       	ret

00002214 <ExitParallelProgrammingMode>:

void ExitParallelProgrammingMode(void)
{
	disableVppRegulator();
    2214:	0e 94 70 05 	call	0xae0	; 0xae0 <disableVppRegulator>
	disableVccRegulator();
    2218:	0e 94 74 05 	call	0xae8	; 0xae8 <disableVccRegulator>
	disableVLogic();
    221c:	0e 94 90 05 	call	0xb20	; 0xb20 <disableVLogic>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2220:	8f e0       	ldi	r24, 0x0F	; 15
    2222:	97 e2       	ldi	r25, 0x27	; 39
    2224:	01 97       	sbiw	r24, 0x01	; 1
    2226:	f1 f7       	brne	.-4      	; 0x2224 <ExitParallelProgrammingMode+0x10>
    2228:	00 c0       	rjmp	.+0      	; 0x222a <ExitParallelProgrammingMode+0x16>
    222a:	00 00       	nop
	
	_delay_ms(5);
	DATA_PORT = 0x00;
    222c:	10 92 0b 01 	sts	0x010B, r1
	CONTROL_PORT = 0x00;
    2230:	1b b8       	out	0x0b, r1	; 11
    2232:	8f ec       	ldi	r24, 0xCF	; 207
    2234:	97 e0       	ldi	r25, 0x07	; 7
    2236:	01 97       	sbiw	r24, 0x01	; 1
    2238:	f1 f7       	brne	.-4      	; 0x2236 <ExitParallelProgrammingMode+0x22>
    223a:	00 c0       	rjmp	.+0      	; 0x223c <ExitParallelProgrammingMode+0x28>
    223c:	00 00       	nop
	_delay_ms(1);
	SPI_FPGA_Write(FPGA_Disable);
    223e:	80 e0       	ldi	r24, 0x00	; 0
    2240:	44 d9       	rcall	.-3448   	; 0x14ca <SPI_FPGA_Write>
	
	SR_CNTRL_PORT &= ~(1<<SR_RESET); //Clearing Max395s and Shift Registers
    2242:	e5 e0       	ldi	r30, 0x05	; 5
    2244:	f1 e0       	ldi	r31, 0x01	; 1
    2246:	80 81       	ld	r24, Z
    2248:	8f 7d       	andi	r24, 0xDF	; 223
    224a:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    224c:	95 e3       	ldi	r25, 0x35	; 53
    224e:	9a 95       	dec	r25
    2250:	f1 f7       	brne	.-4      	; 0x224e <ExitParallelProgrammingMode+0x3a>
    2252:	00 00       	nop
	_delay_us(20);
	SR_CNTRL_PORT |= (1<<SR_RESET);
    2254:	80 81       	ld	r24, Z
    2256:	80 62       	ori	r24, 0x20	; 32
    2258:	80 83       	st	Z, r24
    225a:	2d e0       	ldi	r18, 0x0D	; 13
    225c:	2a 95       	dec	r18
    225e:	f1 f7       	brne	.-4      	; 0x225c <ExitParallelProgrammingMode+0x48>
    2260:	00 00       	nop
	_delay_us(5);
	SR_CNTRL_PORT |= (1<<SRCS);
    2262:	80 81       	ld	r24, Z
    2264:	80 61       	ori	r24, 0x10	; 16
    2266:	80 83       	st	Z, r24
    2268:	85 e3       	ldi	r24, 0x35	; 53
    226a:	8a 95       	dec	r24
    226c:	f1 f7       	brne	.-4      	; 0x226a <ExitParallelProgrammingMode+0x56>
    226e:	00 00       	nop
	_delay_us(20);
	SR_CNTRL_PORT &= ~(1<<SRCS);
    2270:	80 81       	ld	r24, Z
    2272:	8f 7e       	andi	r24, 0xEF	; 239
    2274:	80 83       	st	Z, r24
	
	SR_CNTRL_PORT |= (1<<SROE);
    2276:	80 81       	ld	r24, Z
    2278:	88 60       	ori	r24, 0x08	; 8
    227a:	80 83       	st	Z, r24
	
	LED_PORT |= ((1<<LED_Green) | (1<<LED_Yellow) | (1<<LED_Red));
    227c:	84 b3       	in	r24, 0x14	; 20
    227e:	87 60       	ori	r24, 0x07	; 7
    2280:	84 bb       	out	0x14, r24	; 20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2282:	9f ef       	ldi	r25, 0xFF	; 255
    2284:	29 e6       	ldi	r18, 0x69	; 105
    2286:	88 e1       	ldi	r24, 0x18	; 24
    2288:	91 50       	subi	r25, 0x01	; 1
    228a:	20 40       	sbci	r18, 0x00	; 0
    228c:	80 40       	sbci	r24, 0x00	; 0
    228e:	e1 f7       	brne	.-8      	; 0x2288 <ExitParallelProgrammingMode+0x74>
    2290:	00 c0       	rjmp	.+0      	; 0x2292 <ExitParallelProgrammingMode+0x7e>
    2292:	00 00       	nop
	_delay_ms(1000);
	LED_PORT |= (1<<LED_Green);
    2294:	a0 9a       	sbi	0x14, 0	; 20
	LED_PORT &= ~((1<<LED_Yellow) | (1<<LED_Red));
    2296:	84 b3       	in	r24, 0x14	; 20
    2298:	89 7f       	andi	r24, 0xF9	; 249
    229a:	84 bb       	out	0x14, r24	; 20
    229c:	08 95       	ret

0000229e <main>:
    229e:	2f ef       	ldi	r18, 0xFF	; 255
    22a0:	89 e6       	ldi	r24, 0x69	; 105
    22a2:	98 e1       	ldi	r25, 0x18	; 24
    22a4:	21 50       	subi	r18, 0x01	; 1
    22a6:	80 40       	sbci	r24, 0x00	; 0
    22a8:	90 40       	sbci	r25, 0x00	; 0
    22aa:	e1 f7       	brne	.-8      	; 0x22a4 <main+0x6>
    22ac:	00 c0       	rjmp	.+0      	; 0x22ae <main+0x10>
    22ae:	00 00       	nop
#include "AVR.h"

int main(void)
{
	_delay_ms(1000);
	LED_DDR |= ((1<<LED_Green) | (1<<LED_Yellow) | (1<<LED_Red));
    22b0:	83 b3       	in	r24, 0x13	; 19
    22b2:	87 60       	ori	r24, 0x07	; 7
    22b4:	83 bb       	out	0x13, r24	; 19
	LED_PORT |= (1<<LED_Green);
    22b6:	a0 9a       	sbi	0x14, 0	; 20
	connectionInit(); 
    22b8:	0e 94 2d 08 	call	0x105a	; 0x105a <connectionInit>
	hexInit();
    22bc:	2f d9       	rcall	.-3490   	; 0x151c <hexInit>
	//ethernetInit(); 
	sei(); 
    22be:	78 94       	sei
	//Collecting garbage transmission on wi-fi module bootup 
	//receiveStatus();
	//networkConnect("Wi-Pro", "brightshoe902"); 
	//_delay_ms(100);
	//networkTest();  
	pollingInit(); 
    22c0:	0e 94 1a 08 	call	0x1034	; 0x1034 <pollingInit>
	//Write test file to external RAM
	//Test switching circuitry code
	
	//Program(ATmega324PA);
	
	printf("Done!\n"); 
    22c4:	8c e4       	ldi	r24, 0x4C	; 76
    22c6:	99 e0       	ldi	r25, 0x09	; 9
    22c8:	c8 d0       	rcall	.+400    	; 0x245a <puts>
    while(1)
    {
        //TODO:: Please write your application code 
    }
    22ca:	ff cf       	rjmp	.-2      	; 0x22ca <main+0x2c>

000022cc <uart_sendStream>:
	// ANSI turn off all attribute: me=\E[0m
	putchar(27);
	putchar('[');
	putchar('0');
	putchar('m');
}
    22cc:	cf 93       	push	r28
    22ce:	c8 2f       	mov	r28, r24
    22d0:	8a 30       	cpi	r24, 0x0A	; 10
    22d2:	11 f4       	brne	.+4      	; 0x22d8 <uart_sendStream+0xc>
    22d4:	8d e0       	ldi	r24, 0x0D	; 13
    22d6:	fa df       	rcall	.-12     	; 0x22cc <uart_sendStream>
    22d8:	e0 ed       	ldi	r30, 0xD0	; 208
    22da:	f0 e0       	ldi	r31, 0x00	; 0
    22dc:	90 81       	ld	r25, Z
    22de:	95 ff       	sbrs	r25, 5
    22e0:	fd cf       	rjmp	.-6      	; 0x22dc <uart_sendStream+0x10>
    22e2:	c0 93 d6 00 	sts	0x00D6, r28
    22e6:	80 e0       	ldi	r24, 0x00	; 0
    22e8:	90 e0       	ldi	r25, 0x00	; 0
    22ea:	cf 91       	pop	r28
    22ec:	08 95       	ret

000022ee <uart_receiveStream>:
    22ee:	cf 93       	push	r28
    22f0:	bc 01       	movw	r22, r24
    22f2:	e0 ed       	ldi	r30, 0xD0	; 208
    22f4:	f0 e0       	ldi	r31, 0x00	; 0
    22f6:	90 81       	ld	r25, Z
    22f8:	99 23       	and	r25, r25
    22fa:	ec f7       	brge	.-6      	; 0x22f6 <uart_receiveStream+0x8>
    22fc:	c0 91 d6 00 	lds	r28, 0x00D6
    2300:	8c 2f       	mov	r24, r28
    2302:	e4 df       	rcall	.-56     	; 0x22cc <uart_sendStream>
    2304:	8c 2f       	mov	r24, r28
    2306:	90 e0       	ldi	r25, 0x00	; 0
    2308:	cf 91       	pop	r28
    230a:	08 95       	ret

0000230c <uart2_init>:

FILE uart_stream = FDEV_SETUP_STREAM(uart_sendStream, uart_receiveStream, _FDEV_SETUP_RW);

void uart2_init()
{
	UBRR2H = (((F_CPU/BAUD_RATE)/16)-1)>>8;	// set baud rate
    230c:	10 92 d5 00 	sts	0x00D5, r1
	UBRR2L = (((F_CPU/BAUD_RATE)/16)-1);
    2310:	87 e0       	ldi	r24, 0x07	; 7
    2312:	80 93 d4 00 	sts	0x00D4, r24
	UCSR2B = (1<<RXEN2)|(1<<TXEN2); 		// enable Rx & Tx
    2316:	88 e1       	ldi	r24, 0x18	; 24
    2318:	80 93 d1 00 	sts	0x00D1, r24
	UCSR2C=  (1<<UCSZ21)|(1<<UCSZ20);  	       // config USART; 8N1
    231c:	86 e0       	ldi	r24, 0x06	; 6
    231e:	80 93 d2 00 	sts	0x00D2, r24
	//DDRD |= (1<<PORTD1)|(1<<PORTD0);
	// Define Output/Input Stream
	stdout = stdin = &uart_stream;
    2322:	e3 e3       	ldi	r30, 0x33	; 51
    2324:	fb e0       	ldi	r31, 0x0B	; 11
    2326:	82 e2       	ldi	r24, 0x22	; 34
    2328:	92 e0       	ldi	r25, 0x02	; 2
    232a:	91 83       	std	Z+1, r25	; 0x01
    232c:	80 83       	st	Z, r24
    232e:	93 83       	std	Z+3, r25	; 0x03
    2330:	82 83       	std	Z+2, r24	; 0x02
    2332:	08 95       	ret

00002334 <__udivmodsi4>:
    2334:	a1 e2       	ldi	r26, 0x21	; 33
    2336:	1a 2e       	mov	r1, r26
    2338:	aa 1b       	sub	r26, r26
    233a:	bb 1b       	sub	r27, r27
    233c:	fd 01       	movw	r30, r26
    233e:	0d c0       	rjmp	.+26     	; 0x235a <__udivmodsi4_ep>

00002340 <__udivmodsi4_loop>:
    2340:	aa 1f       	adc	r26, r26
    2342:	bb 1f       	adc	r27, r27
    2344:	ee 1f       	adc	r30, r30
    2346:	ff 1f       	adc	r31, r31
    2348:	a2 17       	cp	r26, r18
    234a:	b3 07       	cpc	r27, r19
    234c:	e4 07       	cpc	r30, r20
    234e:	f5 07       	cpc	r31, r21
    2350:	20 f0       	brcs	.+8      	; 0x235a <__udivmodsi4_ep>
    2352:	a2 1b       	sub	r26, r18
    2354:	b3 0b       	sbc	r27, r19
    2356:	e4 0b       	sbc	r30, r20
    2358:	f5 0b       	sbc	r31, r21

0000235a <__udivmodsi4_ep>:
    235a:	66 1f       	adc	r22, r22
    235c:	77 1f       	adc	r23, r23
    235e:	88 1f       	adc	r24, r24
    2360:	99 1f       	adc	r25, r25
    2362:	1a 94       	dec	r1
    2364:	69 f7       	brne	.-38     	; 0x2340 <__udivmodsi4_loop>
    2366:	60 95       	com	r22
    2368:	70 95       	com	r23
    236a:	80 95       	com	r24
    236c:	90 95       	com	r25
    236e:	9b 01       	movw	r18, r22
    2370:	ac 01       	movw	r20, r24
    2372:	bd 01       	movw	r22, r26
    2374:	cf 01       	movw	r24, r30
    2376:	08 95       	ret

00002378 <__umulhisi3>:
    2378:	a2 9f       	mul	r26, r18
    237a:	b0 01       	movw	r22, r0
    237c:	b3 9f       	mul	r27, r19
    237e:	c0 01       	movw	r24, r0
    2380:	a3 9f       	mul	r26, r19
    2382:	70 0d       	add	r23, r0
    2384:	81 1d       	adc	r24, r1
    2386:	11 24       	eor	r1, r1
    2388:	91 1d       	adc	r25, r1
    238a:	b2 9f       	mul	r27, r18
    238c:	70 0d       	add	r23, r0
    238e:	81 1d       	adc	r24, r1
    2390:	11 24       	eor	r1, r1
    2392:	91 1d       	adc	r25, r1
    2394:	08 95       	ret

00002396 <strcat>:
    2396:	fb 01       	movw	r30, r22
    2398:	dc 01       	movw	r26, r24
    239a:	0d 90       	ld	r0, X+
    239c:	00 20       	and	r0, r0
    239e:	e9 f7       	brne	.-6      	; 0x239a <strcat+0x4>
    23a0:	11 97       	sbiw	r26, 0x01	; 1
    23a2:	01 90       	ld	r0, Z+
    23a4:	0d 92       	st	X+, r0
    23a6:	00 20       	and	r0, r0
    23a8:	e1 f7       	brne	.-8      	; 0x23a2 <strcat+0xc>
    23aa:	08 95       	ret

000023ac <strcpy>:
    23ac:	fb 01       	movw	r30, r22
    23ae:	dc 01       	movw	r26, r24
    23b0:	01 90       	ld	r0, Z+
    23b2:	0d 92       	st	X+, r0
    23b4:	00 20       	and	r0, r0
    23b6:	e1 f7       	brne	.-8      	; 0x23b0 <strcpy+0x4>
    23b8:	08 95       	ret

000023ba <fputc>:
    23ba:	0f 93       	push	r16
    23bc:	1f 93       	push	r17
    23be:	cf 93       	push	r28
    23c0:	df 93       	push	r29
    23c2:	fb 01       	movw	r30, r22
    23c4:	23 81       	ldd	r18, Z+3	; 0x03
    23c6:	21 fd       	sbrc	r18, 1
    23c8:	03 c0       	rjmp	.+6      	; 0x23d0 <fputc+0x16>
    23ca:	8f ef       	ldi	r24, 0xFF	; 255
    23cc:	9f ef       	ldi	r25, 0xFF	; 255
    23ce:	28 c0       	rjmp	.+80     	; 0x2420 <fputc+0x66>
    23d0:	22 ff       	sbrs	r18, 2
    23d2:	16 c0       	rjmp	.+44     	; 0x2400 <fputc+0x46>
    23d4:	46 81       	ldd	r20, Z+6	; 0x06
    23d6:	57 81       	ldd	r21, Z+7	; 0x07
    23d8:	24 81       	ldd	r18, Z+4	; 0x04
    23da:	35 81       	ldd	r19, Z+5	; 0x05
    23dc:	42 17       	cp	r20, r18
    23de:	53 07       	cpc	r21, r19
    23e0:	44 f4       	brge	.+16     	; 0x23f2 <fputc+0x38>
    23e2:	a0 81       	ld	r26, Z
    23e4:	b1 81       	ldd	r27, Z+1	; 0x01
    23e6:	9d 01       	movw	r18, r26
    23e8:	2f 5f       	subi	r18, 0xFF	; 255
    23ea:	3f 4f       	sbci	r19, 0xFF	; 255
    23ec:	31 83       	std	Z+1, r19	; 0x01
    23ee:	20 83       	st	Z, r18
    23f0:	8c 93       	st	X, r24
    23f2:	26 81       	ldd	r18, Z+6	; 0x06
    23f4:	37 81       	ldd	r19, Z+7	; 0x07
    23f6:	2f 5f       	subi	r18, 0xFF	; 255
    23f8:	3f 4f       	sbci	r19, 0xFF	; 255
    23fa:	37 83       	std	Z+7, r19	; 0x07
    23fc:	26 83       	std	Z+6, r18	; 0x06
    23fe:	10 c0       	rjmp	.+32     	; 0x2420 <fputc+0x66>
    2400:	eb 01       	movw	r28, r22
    2402:	09 2f       	mov	r16, r25
    2404:	18 2f       	mov	r17, r24
    2406:	00 84       	ldd	r0, Z+8	; 0x08
    2408:	f1 85       	ldd	r31, Z+9	; 0x09
    240a:	e0 2d       	mov	r30, r0
    240c:	09 95       	icall
    240e:	89 2b       	or	r24, r25
    2410:	e1 f6       	brne	.-72     	; 0x23ca <fputc+0x10>
    2412:	8e 81       	ldd	r24, Y+6	; 0x06
    2414:	9f 81       	ldd	r25, Y+7	; 0x07
    2416:	01 96       	adiw	r24, 0x01	; 1
    2418:	9f 83       	std	Y+7, r25	; 0x07
    241a:	8e 83       	std	Y+6, r24	; 0x06
    241c:	81 2f       	mov	r24, r17
    241e:	90 2f       	mov	r25, r16
    2420:	df 91       	pop	r29
    2422:	cf 91       	pop	r28
    2424:	1f 91       	pop	r17
    2426:	0f 91       	pop	r16
    2428:	08 95       	ret

0000242a <printf>:
    242a:	cf 93       	push	r28
    242c:	df 93       	push	r29
    242e:	cd b7       	in	r28, 0x3d	; 61
    2430:	de b7       	in	r29, 0x3e	; 62
    2432:	ae 01       	movw	r20, r28
    2434:	4b 5f       	subi	r20, 0xFB	; 251
    2436:	5f 4f       	sbci	r21, 0xFF	; 255
    2438:	fa 01       	movw	r30, r20
    243a:	61 91       	ld	r22, Z+
    243c:	71 91       	ld	r23, Z+
    243e:	af 01       	movw	r20, r30
    2440:	80 91 35 0b 	lds	r24, 0x0B35
    2444:	90 91 36 0b 	lds	r25, 0x0B36
    2448:	38 d0       	rcall	.+112    	; 0x24ba <vfprintf>
    244a:	df 91       	pop	r29
    244c:	cf 91       	pop	r28
    244e:	08 95       	ret

00002450 <putchar>:
    2450:	60 91 35 0b 	lds	r22, 0x0B35
    2454:	70 91 36 0b 	lds	r23, 0x0B36
    2458:	b0 cf       	rjmp	.-160    	; 0x23ba <fputc>

0000245a <puts>:
    245a:	0f 93       	push	r16
    245c:	1f 93       	push	r17
    245e:	cf 93       	push	r28
    2460:	df 93       	push	r29
    2462:	e0 91 35 0b 	lds	r30, 0x0B35
    2466:	f0 91 36 0b 	lds	r31, 0x0B36
    246a:	23 81       	ldd	r18, Z+3	; 0x03
    246c:	21 ff       	sbrs	r18, 1
    246e:	1b c0       	rjmp	.+54     	; 0x24a6 <puts+0x4c>
    2470:	8c 01       	movw	r16, r24
    2472:	d0 e0       	ldi	r29, 0x00	; 0
    2474:	c0 e0       	ldi	r28, 0x00	; 0
    2476:	f8 01       	movw	r30, r16
    2478:	81 91       	ld	r24, Z+
    247a:	8f 01       	movw	r16, r30
    247c:	60 91 35 0b 	lds	r22, 0x0B35
    2480:	70 91 36 0b 	lds	r23, 0x0B36
    2484:	db 01       	movw	r26, r22
    2486:	18 96       	adiw	r26, 0x08	; 8
    2488:	ed 91       	ld	r30, X+
    248a:	fc 91       	ld	r31, X
    248c:	19 97       	sbiw	r26, 0x09	; 9
    248e:	88 23       	and	r24, r24
    2490:	31 f0       	breq	.+12     	; 0x249e <puts+0x44>
    2492:	09 95       	icall
    2494:	89 2b       	or	r24, r25
    2496:	79 f3       	breq	.-34     	; 0x2476 <puts+0x1c>
    2498:	df ef       	ldi	r29, 0xFF	; 255
    249a:	cf ef       	ldi	r28, 0xFF	; 255
    249c:	ec cf       	rjmp	.-40     	; 0x2476 <puts+0x1c>
    249e:	8a e0       	ldi	r24, 0x0A	; 10
    24a0:	09 95       	icall
    24a2:	89 2b       	or	r24, r25
    24a4:	19 f0       	breq	.+6      	; 0x24ac <puts+0x52>
    24a6:	8f ef       	ldi	r24, 0xFF	; 255
    24a8:	9f ef       	ldi	r25, 0xFF	; 255
    24aa:	02 c0       	rjmp	.+4      	; 0x24b0 <puts+0x56>
    24ac:	8d 2f       	mov	r24, r29
    24ae:	9c 2f       	mov	r25, r28
    24b0:	df 91       	pop	r29
    24b2:	cf 91       	pop	r28
    24b4:	1f 91       	pop	r17
    24b6:	0f 91       	pop	r16
    24b8:	08 95       	ret

000024ba <vfprintf>:
    24ba:	2f 92       	push	r2
    24bc:	3f 92       	push	r3
    24be:	4f 92       	push	r4
    24c0:	5f 92       	push	r5
    24c2:	6f 92       	push	r6
    24c4:	7f 92       	push	r7
    24c6:	8f 92       	push	r8
    24c8:	9f 92       	push	r9
    24ca:	af 92       	push	r10
    24cc:	bf 92       	push	r11
    24ce:	cf 92       	push	r12
    24d0:	df 92       	push	r13
    24d2:	ef 92       	push	r14
    24d4:	ff 92       	push	r15
    24d6:	0f 93       	push	r16
    24d8:	1f 93       	push	r17
    24da:	cf 93       	push	r28
    24dc:	df 93       	push	r29
    24de:	cd b7       	in	r28, 0x3d	; 61
    24e0:	de b7       	in	r29, 0x3e	; 62
    24e2:	2c 97       	sbiw	r28, 0x0c	; 12
    24e4:	0f b6       	in	r0, 0x3f	; 63
    24e6:	f8 94       	cli
    24e8:	de bf       	out	0x3e, r29	; 62
    24ea:	0f be       	out	0x3f, r0	; 63
    24ec:	cd bf       	out	0x3d, r28	; 61
    24ee:	7c 01       	movw	r14, r24
    24f0:	6b 01       	movw	r12, r22
    24f2:	8a 01       	movw	r16, r20
    24f4:	fc 01       	movw	r30, r24
    24f6:	17 82       	std	Z+7, r1	; 0x07
    24f8:	16 82       	std	Z+6, r1	; 0x06
    24fa:	83 81       	ldd	r24, Z+3	; 0x03
    24fc:	81 ff       	sbrs	r24, 1
    24fe:	b0 c1       	rjmp	.+864    	; 0x2860 <vfprintf+0x3a6>
    2500:	ce 01       	movw	r24, r28
    2502:	01 96       	adiw	r24, 0x01	; 1
    2504:	4c 01       	movw	r8, r24
    2506:	f7 01       	movw	r30, r14
    2508:	93 81       	ldd	r25, Z+3	; 0x03
    250a:	f6 01       	movw	r30, r12
    250c:	93 fd       	sbrc	r25, 3
    250e:	85 91       	lpm	r24, Z+
    2510:	93 ff       	sbrs	r25, 3
    2512:	81 91       	ld	r24, Z+
    2514:	6f 01       	movw	r12, r30
    2516:	88 23       	and	r24, r24
    2518:	09 f4       	brne	.+2      	; 0x251c <vfprintf+0x62>
    251a:	9e c1       	rjmp	.+828    	; 0x2858 <vfprintf+0x39e>
    251c:	85 32       	cpi	r24, 0x25	; 37
    251e:	39 f4       	brne	.+14     	; 0x252e <vfprintf+0x74>
    2520:	93 fd       	sbrc	r25, 3
    2522:	85 91       	lpm	r24, Z+
    2524:	93 ff       	sbrs	r25, 3
    2526:	81 91       	ld	r24, Z+
    2528:	6f 01       	movw	r12, r30
    252a:	85 32       	cpi	r24, 0x25	; 37
    252c:	21 f4       	brne	.+8      	; 0x2536 <vfprintf+0x7c>
    252e:	b7 01       	movw	r22, r14
    2530:	90 e0       	ldi	r25, 0x00	; 0
    2532:	43 df       	rcall	.-378    	; 0x23ba <fputc>
    2534:	e8 cf       	rjmp	.-48     	; 0x2506 <vfprintf+0x4c>
    2536:	51 2c       	mov	r5, r1
    2538:	31 2c       	mov	r3, r1
    253a:	20 e0       	ldi	r18, 0x00	; 0
    253c:	20 32       	cpi	r18, 0x20	; 32
    253e:	a0 f4       	brcc	.+40     	; 0x2568 <vfprintf+0xae>
    2540:	8b 32       	cpi	r24, 0x2B	; 43
    2542:	69 f0       	breq	.+26     	; 0x255e <vfprintf+0xa4>
    2544:	30 f4       	brcc	.+12     	; 0x2552 <vfprintf+0x98>
    2546:	80 32       	cpi	r24, 0x20	; 32
    2548:	59 f0       	breq	.+22     	; 0x2560 <vfprintf+0xa6>
    254a:	83 32       	cpi	r24, 0x23	; 35
    254c:	69 f4       	brne	.+26     	; 0x2568 <vfprintf+0xae>
    254e:	20 61       	ori	r18, 0x10	; 16
    2550:	2c c0       	rjmp	.+88     	; 0x25aa <vfprintf+0xf0>
    2552:	8d 32       	cpi	r24, 0x2D	; 45
    2554:	39 f0       	breq	.+14     	; 0x2564 <vfprintf+0xaa>
    2556:	80 33       	cpi	r24, 0x30	; 48
    2558:	39 f4       	brne	.+14     	; 0x2568 <vfprintf+0xae>
    255a:	21 60       	ori	r18, 0x01	; 1
    255c:	26 c0       	rjmp	.+76     	; 0x25aa <vfprintf+0xf0>
    255e:	22 60       	ori	r18, 0x02	; 2
    2560:	24 60       	ori	r18, 0x04	; 4
    2562:	23 c0       	rjmp	.+70     	; 0x25aa <vfprintf+0xf0>
    2564:	28 60       	ori	r18, 0x08	; 8
    2566:	21 c0       	rjmp	.+66     	; 0x25aa <vfprintf+0xf0>
    2568:	27 fd       	sbrc	r18, 7
    256a:	27 c0       	rjmp	.+78     	; 0x25ba <vfprintf+0x100>
    256c:	30 ed       	ldi	r19, 0xD0	; 208
    256e:	38 0f       	add	r19, r24
    2570:	3a 30       	cpi	r19, 0x0A	; 10
    2572:	78 f4       	brcc	.+30     	; 0x2592 <vfprintf+0xd8>
    2574:	26 ff       	sbrs	r18, 6
    2576:	06 c0       	rjmp	.+12     	; 0x2584 <vfprintf+0xca>
    2578:	fa e0       	ldi	r31, 0x0A	; 10
    257a:	5f 9e       	mul	r5, r31
    257c:	30 0d       	add	r19, r0
    257e:	11 24       	eor	r1, r1
    2580:	53 2e       	mov	r5, r19
    2582:	13 c0       	rjmp	.+38     	; 0x25aa <vfprintf+0xf0>
    2584:	8a e0       	ldi	r24, 0x0A	; 10
    2586:	38 9e       	mul	r3, r24
    2588:	30 0d       	add	r19, r0
    258a:	11 24       	eor	r1, r1
    258c:	33 2e       	mov	r3, r19
    258e:	20 62       	ori	r18, 0x20	; 32
    2590:	0c c0       	rjmp	.+24     	; 0x25aa <vfprintf+0xf0>
    2592:	8e 32       	cpi	r24, 0x2E	; 46
    2594:	21 f4       	brne	.+8      	; 0x259e <vfprintf+0xe4>
    2596:	26 fd       	sbrc	r18, 6
    2598:	5f c1       	rjmp	.+702    	; 0x2858 <vfprintf+0x39e>
    259a:	20 64       	ori	r18, 0x40	; 64
    259c:	06 c0       	rjmp	.+12     	; 0x25aa <vfprintf+0xf0>
    259e:	8c 36       	cpi	r24, 0x6C	; 108
    25a0:	11 f4       	brne	.+4      	; 0x25a6 <vfprintf+0xec>
    25a2:	20 68       	ori	r18, 0x80	; 128
    25a4:	02 c0       	rjmp	.+4      	; 0x25aa <vfprintf+0xf0>
    25a6:	88 36       	cpi	r24, 0x68	; 104
    25a8:	41 f4       	brne	.+16     	; 0x25ba <vfprintf+0x100>
    25aa:	f6 01       	movw	r30, r12
    25ac:	93 fd       	sbrc	r25, 3
    25ae:	85 91       	lpm	r24, Z+
    25b0:	93 ff       	sbrs	r25, 3
    25b2:	81 91       	ld	r24, Z+
    25b4:	6f 01       	movw	r12, r30
    25b6:	81 11       	cpse	r24, r1
    25b8:	c1 cf       	rjmp	.-126    	; 0x253c <vfprintf+0x82>
    25ba:	98 2f       	mov	r25, r24
    25bc:	9f 7d       	andi	r25, 0xDF	; 223
    25be:	95 54       	subi	r25, 0x45	; 69
    25c0:	93 30       	cpi	r25, 0x03	; 3
    25c2:	28 f4       	brcc	.+10     	; 0x25ce <vfprintf+0x114>
    25c4:	0c 5f       	subi	r16, 0xFC	; 252
    25c6:	1f 4f       	sbci	r17, 0xFF	; 255
    25c8:	ff e3       	ldi	r31, 0x3F	; 63
    25ca:	f9 83       	std	Y+1, r31	; 0x01
    25cc:	0d c0       	rjmp	.+26     	; 0x25e8 <vfprintf+0x12e>
    25ce:	83 36       	cpi	r24, 0x63	; 99
    25d0:	31 f0       	breq	.+12     	; 0x25de <vfprintf+0x124>
    25d2:	83 37       	cpi	r24, 0x73	; 115
    25d4:	71 f0       	breq	.+28     	; 0x25f2 <vfprintf+0x138>
    25d6:	83 35       	cpi	r24, 0x53	; 83
    25d8:	09 f0       	breq	.+2      	; 0x25dc <vfprintf+0x122>
    25da:	57 c0       	rjmp	.+174    	; 0x268a <vfprintf+0x1d0>
    25dc:	21 c0       	rjmp	.+66     	; 0x2620 <vfprintf+0x166>
    25de:	f8 01       	movw	r30, r16
    25e0:	80 81       	ld	r24, Z
    25e2:	89 83       	std	Y+1, r24	; 0x01
    25e4:	0e 5f       	subi	r16, 0xFE	; 254
    25e6:	1f 4f       	sbci	r17, 0xFF	; 255
    25e8:	44 24       	eor	r4, r4
    25ea:	43 94       	inc	r4
    25ec:	51 2c       	mov	r5, r1
    25ee:	54 01       	movw	r10, r8
    25f0:	14 c0       	rjmp	.+40     	; 0x261a <vfprintf+0x160>
    25f2:	38 01       	movw	r6, r16
    25f4:	f2 e0       	ldi	r31, 0x02	; 2
    25f6:	6f 0e       	add	r6, r31
    25f8:	71 1c       	adc	r7, r1
    25fa:	f8 01       	movw	r30, r16
    25fc:	a0 80       	ld	r10, Z
    25fe:	b1 80       	ldd	r11, Z+1	; 0x01
    2600:	26 ff       	sbrs	r18, 6
    2602:	03 c0       	rjmp	.+6      	; 0x260a <vfprintf+0x150>
    2604:	65 2d       	mov	r22, r5
    2606:	70 e0       	ldi	r23, 0x00	; 0
    2608:	02 c0       	rjmp	.+4      	; 0x260e <vfprintf+0x154>
    260a:	6f ef       	ldi	r22, 0xFF	; 255
    260c:	7f ef       	ldi	r23, 0xFF	; 255
    260e:	c5 01       	movw	r24, r10
    2610:	2c 87       	std	Y+12, r18	; 0x0c
    2612:	4c d1       	rcall	.+664    	; 0x28ac <strnlen>
    2614:	2c 01       	movw	r4, r24
    2616:	83 01       	movw	r16, r6
    2618:	2c 85       	ldd	r18, Y+12	; 0x0c
    261a:	2f 77       	andi	r18, 0x7F	; 127
    261c:	22 2e       	mov	r2, r18
    261e:	16 c0       	rjmp	.+44     	; 0x264c <vfprintf+0x192>
    2620:	38 01       	movw	r6, r16
    2622:	f2 e0       	ldi	r31, 0x02	; 2
    2624:	6f 0e       	add	r6, r31
    2626:	71 1c       	adc	r7, r1
    2628:	f8 01       	movw	r30, r16
    262a:	a0 80       	ld	r10, Z
    262c:	b1 80       	ldd	r11, Z+1	; 0x01
    262e:	26 ff       	sbrs	r18, 6
    2630:	03 c0       	rjmp	.+6      	; 0x2638 <vfprintf+0x17e>
    2632:	65 2d       	mov	r22, r5
    2634:	70 e0       	ldi	r23, 0x00	; 0
    2636:	02 c0       	rjmp	.+4      	; 0x263c <vfprintf+0x182>
    2638:	6f ef       	ldi	r22, 0xFF	; 255
    263a:	7f ef       	ldi	r23, 0xFF	; 255
    263c:	c5 01       	movw	r24, r10
    263e:	2c 87       	std	Y+12, r18	; 0x0c
    2640:	2a d1       	rcall	.+596    	; 0x2896 <strnlen_P>
    2642:	2c 01       	movw	r4, r24
    2644:	2c 85       	ldd	r18, Y+12	; 0x0c
    2646:	20 68       	ori	r18, 0x80	; 128
    2648:	22 2e       	mov	r2, r18
    264a:	83 01       	movw	r16, r6
    264c:	23 fc       	sbrc	r2, 3
    264e:	19 c0       	rjmp	.+50     	; 0x2682 <vfprintf+0x1c8>
    2650:	83 2d       	mov	r24, r3
    2652:	90 e0       	ldi	r25, 0x00	; 0
    2654:	48 16       	cp	r4, r24
    2656:	59 06       	cpc	r5, r25
    2658:	a0 f4       	brcc	.+40     	; 0x2682 <vfprintf+0x1c8>
    265a:	b7 01       	movw	r22, r14
    265c:	80 e2       	ldi	r24, 0x20	; 32
    265e:	90 e0       	ldi	r25, 0x00	; 0
    2660:	ac de       	rcall	.-680    	; 0x23ba <fputc>
    2662:	3a 94       	dec	r3
    2664:	f5 cf       	rjmp	.-22     	; 0x2650 <vfprintf+0x196>
    2666:	f5 01       	movw	r30, r10
    2668:	27 fc       	sbrc	r2, 7
    266a:	85 91       	lpm	r24, Z+
    266c:	27 fe       	sbrs	r2, 7
    266e:	81 91       	ld	r24, Z+
    2670:	5f 01       	movw	r10, r30
    2672:	b7 01       	movw	r22, r14
    2674:	90 e0       	ldi	r25, 0x00	; 0
    2676:	a1 de       	rcall	.-702    	; 0x23ba <fputc>
    2678:	31 10       	cpse	r3, r1
    267a:	3a 94       	dec	r3
    267c:	f1 e0       	ldi	r31, 0x01	; 1
    267e:	4f 1a       	sub	r4, r31
    2680:	51 08       	sbc	r5, r1
    2682:	41 14       	cp	r4, r1
    2684:	51 04       	cpc	r5, r1
    2686:	79 f7       	brne	.-34     	; 0x2666 <vfprintf+0x1ac>
    2688:	de c0       	rjmp	.+444    	; 0x2846 <vfprintf+0x38c>
    268a:	84 36       	cpi	r24, 0x64	; 100
    268c:	11 f0       	breq	.+4      	; 0x2692 <vfprintf+0x1d8>
    268e:	89 36       	cpi	r24, 0x69	; 105
    2690:	31 f5       	brne	.+76     	; 0x26de <vfprintf+0x224>
    2692:	f8 01       	movw	r30, r16
    2694:	27 ff       	sbrs	r18, 7
    2696:	07 c0       	rjmp	.+14     	; 0x26a6 <vfprintf+0x1ec>
    2698:	60 81       	ld	r22, Z
    269a:	71 81       	ldd	r23, Z+1	; 0x01
    269c:	82 81       	ldd	r24, Z+2	; 0x02
    269e:	93 81       	ldd	r25, Z+3	; 0x03
    26a0:	0c 5f       	subi	r16, 0xFC	; 252
    26a2:	1f 4f       	sbci	r17, 0xFF	; 255
    26a4:	08 c0       	rjmp	.+16     	; 0x26b6 <vfprintf+0x1fc>
    26a6:	60 81       	ld	r22, Z
    26a8:	71 81       	ldd	r23, Z+1	; 0x01
    26aa:	07 2e       	mov	r0, r23
    26ac:	00 0c       	add	r0, r0
    26ae:	88 0b       	sbc	r24, r24
    26b0:	99 0b       	sbc	r25, r25
    26b2:	0e 5f       	subi	r16, 0xFE	; 254
    26b4:	1f 4f       	sbci	r17, 0xFF	; 255
    26b6:	2f 76       	andi	r18, 0x6F	; 111
    26b8:	72 2e       	mov	r7, r18
    26ba:	97 ff       	sbrs	r25, 7
    26bc:	09 c0       	rjmp	.+18     	; 0x26d0 <vfprintf+0x216>
    26be:	90 95       	com	r25
    26c0:	80 95       	com	r24
    26c2:	70 95       	com	r23
    26c4:	61 95       	neg	r22
    26c6:	7f 4f       	sbci	r23, 0xFF	; 255
    26c8:	8f 4f       	sbci	r24, 0xFF	; 255
    26ca:	9f 4f       	sbci	r25, 0xFF	; 255
    26cc:	20 68       	ori	r18, 0x80	; 128
    26ce:	72 2e       	mov	r7, r18
    26d0:	2a e0       	ldi	r18, 0x0A	; 10
    26d2:	30 e0       	ldi	r19, 0x00	; 0
    26d4:	a4 01       	movw	r20, r8
    26d6:	f5 d0       	rcall	.+490    	; 0x28c2 <__ultoa_invert>
    26d8:	a8 2e       	mov	r10, r24
    26da:	a8 18       	sub	r10, r8
    26dc:	43 c0       	rjmp	.+134    	; 0x2764 <vfprintf+0x2aa>
    26de:	85 37       	cpi	r24, 0x75	; 117
    26e0:	29 f4       	brne	.+10     	; 0x26ec <vfprintf+0x232>
    26e2:	2f 7e       	andi	r18, 0xEF	; 239
    26e4:	b2 2e       	mov	r11, r18
    26e6:	2a e0       	ldi	r18, 0x0A	; 10
    26e8:	30 e0       	ldi	r19, 0x00	; 0
    26ea:	25 c0       	rjmp	.+74     	; 0x2736 <vfprintf+0x27c>
    26ec:	f2 2f       	mov	r31, r18
    26ee:	f9 7f       	andi	r31, 0xF9	; 249
    26f0:	bf 2e       	mov	r11, r31
    26f2:	8f 36       	cpi	r24, 0x6F	; 111
    26f4:	c1 f0       	breq	.+48     	; 0x2726 <vfprintf+0x26c>
    26f6:	18 f4       	brcc	.+6      	; 0x26fe <vfprintf+0x244>
    26f8:	88 35       	cpi	r24, 0x58	; 88
    26fa:	79 f0       	breq	.+30     	; 0x271a <vfprintf+0x260>
    26fc:	ad c0       	rjmp	.+346    	; 0x2858 <vfprintf+0x39e>
    26fe:	80 37       	cpi	r24, 0x70	; 112
    2700:	19 f0       	breq	.+6      	; 0x2708 <vfprintf+0x24e>
    2702:	88 37       	cpi	r24, 0x78	; 120
    2704:	21 f0       	breq	.+8      	; 0x270e <vfprintf+0x254>
    2706:	a8 c0       	rjmp	.+336    	; 0x2858 <vfprintf+0x39e>
    2708:	2f 2f       	mov	r18, r31
    270a:	20 61       	ori	r18, 0x10	; 16
    270c:	b2 2e       	mov	r11, r18
    270e:	b4 fe       	sbrs	r11, 4
    2710:	0d c0       	rjmp	.+26     	; 0x272c <vfprintf+0x272>
    2712:	8b 2d       	mov	r24, r11
    2714:	84 60       	ori	r24, 0x04	; 4
    2716:	b8 2e       	mov	r11, r24
    2718:	09 c0       	rjmp	.+18     	; 0x272c <vfprintf+0x272>
    271a:	24 ff       	sbrs	r18, 4
    271c:	0a c0       	rjmp	.+20     	; 0x2732 <vfprintf+0x278>
    271e:	9f 2f       	mov	r25, r31
    2720:	96 60       	ori	r25, 0x06	; 6
    2722:	b9 2e       	mov	r11, r25
    2724:	06 c0       	rjmp	.+12     	; 0x2732 <vfprintf+0x278>
    2726:	28 e0       	ldi	r18, 0x08	; 8
    2728:	30 e0       	ldi	r19, 0x00	; 0
    272a:	05 c0       	rjmp	.+10     	; 0x2736 <vfprintf+0x27c>
    272c:	20 e1       	ldi	r18, 0x10	; 16
    272e:	30 e0       	ldi	r19, 0x00	; 0
    2730:	02 c0       	rjmp	.+4      	; 0x2736 <vfprintf+0x27c>
    2732:	20 e1       	ldi	r18, 0x10	; 16
    2734:	32 e0       	ldi	r19, 0x02	; 2
    2736:	f8 01       	movw	r30, r16
    2738:	b7 fe       	sbrs	r11, 7
    273a:	07 c0       	rjmp	.+14     	; 0x274a <vfprintf+0x290>
    273c:	60 81       	ld	r22, Z
    273e:	71 81       	ldd	r23, Z+1	; 0x01
    2740:	82 81       	ldd	r24, Z+2	; 0x02
    2742:	93 81       	ldd	r25, Z+3	; 0x03
    2744:	0c 5f       	subi	r16, 0xFC	; 252
    2746:	1f 4f       	sbci	r17, 0xFF	; 255
    2748:	06 c0       	rjmp	.+12     	; 0x2756 <vfprintf+0x29c>
    274a:	60 81       	ld	r22, Z
    274c:	71 81       	ldd	r23, Z+1	; 0x01
    274e:	80 e0       	ldi	r24, 0x00	; 0
    2750:	90 e0       	ldi	r25, 0x00	; 0
    2752:	0e 5f       	subi	r16, 0xFE	; 254
    2754:	1f 4f       	sbci	r17, 0xFF	; 255
    2756:	a4 01       	movw	r20, r8
    2758:	b4 d0       	rcall	.+360    	; 0x28c2 <__ultoa_invert>
    275a:	a8 2e       	mov	r10, r24
    275c:	a8 18       	sub	r10, r8
    275e:	fb 2d       	mov	r31, r11
    2760:	ff 77       	andi	r31, 0x7F	; 127
    2762:	7f 2e       	mov	r7, r31
    2764:	76 fe       	sbrs	r7, 6
    2766:	0b c0       	rjmp	.+22     	; 0x277e <vfprintf+0x2c4>
    2768:	37 2d       	mov	r19, r7
    276a:	3e 7f       	andi	r19, 0xFE	; 254
    276c:	a5 14       	cp	r10, r5
    276e:	50 f4       	brcc	.+20     	; 0x2784 <vfprintf+0x2ca>
    2770:	74 fe       	sbrs	r7, 4
    2772:	0a c0       	rjmp	.+20     	; 0x2788 <vfprintf+0x2ce>
    2774:	72 fc       	sbrc	r7, 2
    2776:	08 c0       	rjmp	.+16     	; 0x2788 <vfprintf+0x2ce>
    2778:	37 2d       	mov	r19, r7
    277a:	3e 7e       	andi	r19, 0xEE	; 238
    277c:	05 c0       	rjmp	.+10     	; 0x2788 <vfprintf+0x2ce>
    277e:	ba 2c       	mov	r11, r10
    2780:	37 2d       	mov	r19, r7
    2782:	03 c0       	rjmp	.+6      	; 0x278a <vfprintf+0x2d0>
    2784:	ba 2c       	mov	r11, r10
    2786:	01 c0       	rjmp	.+2      	; 0x278a <vfprintf+0x2d0>
    2788:	b5 2c       	mov	r11, r5
    278a:	34 ff       	sbrs	r19, 4
    278c:	0d c0       	rjmp	.+26     	; 0x27a8 <vfprintf+0x2ee>
    278e:	fe 01       	movw	r30, r28
    2790:	ea 0d       	add	r30, r10
    2792:	f1 1d       	adc	r31, r1
    2794:	80 81       	ld	r24, Z
    2796:	80 33       	cpi	r24, 0x30	; 48
    2798:	11 f4       	brne	.+4      	; 0x279e <vfprintf+0x2e4>
    279a:	39 7e       	andi	r19, 0xE9	; 233
    279c:	09 c0       	rjmp	.+18     	; 0x27b0 <vfprintf+0x2f6>
    279e:	32 ff       	sbrs	r19, 2
    27a0:	06 c0       	rjmp	.+12     	; 0x27ae <vfprintf+0x2f4>
    27a2:	b3 94       	inc	r11
    27a4:	b3 94       	inc	r11
    27a6:	04 c0       	rjmp	.+8      	; 0x27b0 <vfprintf+0x2f6>
    27a8:	83 2f       	mov	r24, r19
    27aa:	86 78       	andi	r24, 0x86	; 134
    27ac:	09 f0       	breq	.+2      	; 0x27b0 <vfprintf+0x2f6>
    27ae:	b3 94       	inc	r11
    27b0:	33 fd       	sbrc	r19, 3
    27b2:	12 c0       	rjmp	.+36     	; 0x27d8 <vfprintf+0x31e>
    27b4:	30 ff       	sbrs	r19, 0
    27b6:	06 c0       	rjmp	.+12     	; 0x27c4 <vfprintf+0x30a>
    27b8:	5a 2c       	mov	r5, r10
    27ba:	b3 14       	cp	r11, r3
    27bc:	18 f4       	brcc	.+6      	; 0x27c4 <vfprintf+0x30a>
    27be:	53 0c       	add	r5, r3
    27c0:	5b 18       	sub	r5, r11
    27c2:	b3 2c       	mov	r11, r3
    27c4:	b3 14       	cp	r11, r3
    27c6:	60 f4       	brcc	.+24     	; 0x27e0 <vfprintf+0x326>
    27c8:	b7 01       	movw	r22, r14
    27ca:	80 e2       	ldi	r24, 0x20	; 32
    27cc:	90 e0       	ldi	r25, 0x00	; 0
    27ce:	3c 87       	std	Y+12, r19	; 0x0c
    27d0:	f4 dd       	rcall	.-1048   	; 0x23ba <fputc>
    27d2:	b3 94       	inc	r11
    27d4:	3c 85       	ldd	r19, Y+12	; 0x0c
    27d6:	f6 cf       	rjmp	.-20     	; 0x27c4 <vfprintf+0x30a>
    27d8:	b3 14       	cp	r11, r3
    27da:	10 f4       	brcc	.+4      	; 0x27e0 <vfprintf+0x326>
    27dc:	3b 18       	sub	r3, r11
    27de:	01 c0       	rjmp	.+2      	; 0x27e2 <vfprintf+0x328>
    27e0:	31 2c       	mov	r3, r1
    27e2:	34 ff       	sbrs	r19, 4
    27e4:	11 c0       	rjmp	.+34     	; 0x2808 <vfprintf+0x34e>
    27e6:	b7 01       	movw	r22, r14
    27e8:	80 e3       	ldi	r24, 0x30	; 48
    27ea:	90 e0       	ldi	r25, 0x00	; 0
    27ec:	3c 87       	std	Y+12, r19	; 0x0c
    27ee:	e5 dd       	rcall	.-1078   	; 0x23ba <fputc>
    27f0:	3c 85       	ldd	r19, Y+12	; 0x0c
    27f2:	32 ff       	sbrs	r19, 2
    27f4:	16 c0       	rjmp	.+44     	; 0x2822 <vfprintf+0x368>
    27f6:	31 fd       	sbrc	r19, 1
    27f8:	03 c0       	rjmp	.+6      	; 0x2800 <vfprintf+0x346>
    27fa:	88 e7       	ldi	r24, 0x78	; 120
    27fc:	90 e0       	ldi	r25, 0x00	; 0
    27fe:	02 c0       	rjmp	.+4      	; 0x2804 <vfprintf+0x34a>
    2800:	88 e5       	ldi	r24, 0x58	; 88
    2802:	90 e0       	ldi	r25, 0x00	; 0
    2804:	b7 01       	movw	r22, r14
    2806:	0c c0       	rjmp	.+24     	; 0x2820 <vfprintf+0x366>
    2808:	83 2f       	mov	r24, r19
    280a:	86 78       	andi	r24, 0x86	; 134
    280c:	51 f0       	breq	.+20     	; 0x2822 <vfprintf+0x368>
    280e:	31 ff       	sbrs	r19, 1
    2810:	02 c0       	rjmp	.+4      	; 0x2816 <vfprintf+0x35c>
    2812:	8b e2       	ldi	r24, 0x2B	; 43
    2814:	01 c0       	rjmp	.+2      	; 0x2818 <vfprintf+0x35e>
    2816:	80 e2       	ldi	r24, 0x20	; 32
    2818:	37 fd       	sbrc	r19, 7
    281a:	8d e2       	ldi	r24, 0x2D	; 45
    281c:	b7 01       	movw	r22, r14
    281e:	90 e0       	ldi	r25, 0x00	; 0
    2820:	cc dd       	rcall	.-1128   	; 0x23ba <fputc>
    2822:	a5 14       	cp	r10, r5
    2824:	30 f4       	brcc	.+12     	; 0x2832 <vfprintf+0x378>
    2826:	b7 01       	movw	r22, r14
    2828:	80 e3       	ldi	r24, 0x30	; 48
    282a:	90 e0       	ldi	r25, 0x00	; 0
    282c:	c6 dd       	rcall	.-1140   	; 0x23ba <fputc>
    282e:	5a 94       	dec	r5
    2830:	f8 cf       	rjmp	.-16     	; 0x2822 <vfprintf+0x368>
    2832:	aa 94       	dec	r10
    2834:	f4 01       	movw	r30, r8
    2836:	ea 0d       	add	r30, r10
    2838:	f1 1d       	adc	r31, r1
    283a:	80 81       	ld	r24, Z
    283c:	b7 01       	movw	r22, r14
    283e:	90 e0       	ldi	r25, 0x00	; 0
    2840:	bc dd       	rcall	.-1160   	; 0x23ba <fputc>
    2842:	a1 10       	cpse	r10, r1
    2844:	f6 cf       	rjmp	.-20     	; 0x2832 <vfprintf+0x378>
    2846:	33 20       	and	r3, r3
    2848:	09 f4       	brne	.+2      	; 0x284c <vfprintf+0x392>
    284a:	5d ce       	rjmp	.-838    	; 0x2506 <vfprintf+0x4c>
    284c:	b7 01       	movw	r22, r14
    284e:	80 e2       	ldi	r24, 0x20	; 32
    2850:	90 e0       	ldi	r25, 0x00	; 0
    2852:	b3 dd       	rcall	.-1178   	; 0x23ba <fputc>
    2854:	3a 94       	dec	r3
    2856:	f7 cf       	rjmp	.-18     	; 0x2846 <vfprintf+0x38c>
    2858:	f7 01       	movw	r30, r14
    285a:	86 81       	ldd	r24, Z+6	; 0x06
    285c:	97 81       	ldd	r25, Z+7	; 0x07
    285e:	02 c0       	rjmp	.+4      	; 0x2864 <vfprintf+0x3aa>
    2860:	8f ef       	ldi	r24, 0xFF	; 255
    2862:	9f ef       	ldi	r25, 0xFF	; 255
    2864:	2c 96       	adiw	r28, 0x0c	; 12
    2866:	0f b6       	in	r0, 0x3f	; 63
    2868:	f8 94       	cli
    286a:	de bf       	out	0x3e, r29	; 62
    286c:	0f be       	out	0x3f, r0	; 63
    286e:	cd bf       	out	0x3d, r28	; 61
    2870:	df 91       	pop	r29
    2872:	cf 91       	pop	r28
    2874:	1f 91       	pop	r17
    2876:	0f 91       	pop	r16
    2878:	ff 90       	pop	r15
    287a:	ef 90       	pop	r14
    287c:	df 90       	pop	r13
    287e:	cf 90       	pop	r12
    2880:	bf 90       	pop	r11
    2882:	af 90       	pop	r10
    2884:	9f 90       	pop	r9
    2886:	8f 90       	pop	r8
    2888:	7f 90       	pop	r7
    288a:	6f 90       	pop	r6
    288c:	5f 90       	pop	r5
    288e:	4f 90       	pop	r4
    2890:	3f 90       	pop	r3
    2892:	2f 90       	pop	r2
    2894:	08 95       	ret

00002896 <strnlen_P>:
    2896:	fc 01       	movw	r30, r24
    2898:	05 90       	lpm	r0, Z+
    289a:	61 50       	subi	r22, 0x01	; 1
    289c:	70 40       	sbci	r23, 0x00	; 0
    289e:	01 10       	cpse	r0, r1
    28a0:	d8 f7       	brcc	.-10     	; 0x2898 <strnlen_P+0x2>
    28a2:	80 95       	com	r24
    28a4:	90 95       	com	r25
    28a6:	8e 0f       	add	r24, r30
    28a8:	9f 1f       	adc	r25, r31
    28aa:	08 95       	ret

000028ac <strnlen>:
    28ac:	fc 01       	movw	r30, r24
    28ae:	61 50       	subi	r22, 0x01	; 1
    28b0:	70 40       	sbci	r23, 0x00	; 0
    28b2:	01 90       	ld	r0, Z+
    28b4:	01 10       	cpse	r0, r1
    28b6:	d8 f7       	brcc	.-10     	; 0x28ae <strnlen+0x2>
    28b8:	80 95       	com	r24
    28ba:	90 95       	com	r25
    28bc:	8e 0f       	add	r24, r30
    28be:	9f 1f       	adc	r25, r31
    28c0:	08 95       	ret

000028c2 <__ultoa_invert>:
    28c2:	fa 01       	movw	r30, r20
    28c4:	aa 27       	eor	r26, r26
    28c6:	28 30       	cpi	r18, 0x08	; 8
    28c8:	51 f1       	breq	.+84     	; 0x291e <__ultoa_invert+0x5c>
    28ca:	20 31       	cpi	r18, 0x10	; 16
    28cc:	81 f1       	breq	.+96     	; 0x292e <__ultoa_invert+0x6c>
    28ce:	e8 94       	clt
    28d0:	6f 93       	push	r22
    28d2:	6e 7f       	andi	r22, 0xFE	; 254
    28d4:	6e 5f       	subi	r22, 0xFE	; 254
    28d6:	7f 4f       	sbci	r23, 0xFF	; 255
    28d8:	8f 4f       	sbci	r24, 0xFF	; 255
    28da:	9f 4f       	sbci	r25, 0xFF	; 255
    28dc:	af 4f       	sbci	r26, 0xFF	; 255
    28de:	b1 e0       	ldi	r27, 0x01	; 1
    28e0:	3e d0       	rcall	.+124    	; 0x295e <__ultoa_invert+0x9c>
    28e2:	b4 e0       	ldi	r27, 0x04	; 4
    28e4:	3c d0       	rcall	.+120    	; 0x295e <__ultoa_invert+0x9c>
    28e6:	67 0f       	add	r22, r23
    28e8:	78 1f       	adc	r23, r24
    28ea:	89 1f       	adc	r24, r25
    28ec:	9a 1f       	adc	r25, r26
    28ee:	a1 1d       	adc	r26, r1
    28f0:	68 0f       	add	r22, r24
    28f2:	79 1f       	adc	r23, r25
    28f4:	8a 1f       	adc	r24, r26
    28f6:	91 1d       	adc	r25, r1
    28f8:	a1 1d       	adc	r26, r1
    28fa:	6a 0f       	add	r22, r26
    28fc:	71 1d       	adc	r23, r1
    28fe:	81 1d       	adc	r24, r1
    2900:	91 1d       	adc	r25, r1
    2902:	a1 1d       	adc	r26, r1
    2904:	20 d0       	rcall	.+64     	; 0x2946 <__ultoa_invert+0x84>
    2906:	09 f4       	brne	.+2      	; 0x290a <__ultoa_invert+0x48>
    2908:	68 94       	set
    290a:	3f 91       	pop	r19
    290c:	2a e0       	ldi	r18, 0x0A	; 10
    290e:	26 9f       	mul	r18, r22
    2910:	11 24       	eor	r1, r1
    2912:	30 19       	sub	r19, r0
    2914:	30 5d       	subi	r19, 0xD0	; 208
    2916:	31 93       	st	Z+, r19
    2918:	de f6       	brtc	.-74     	; 0x28d0 <__ultoa_invert+0xe>
    291a:	cf 01       	movw	r24, r30
    291c:	08 95       	ret
    291e:	46 2f       	mov	r20, r22
    2920:	47 70       	andi	r20, 0x07	; 7
    2922:	40 5d       	subi	r20, 0xD0	; 208
    2924:	41 93       	st	Z+, r20
    2926:	b3 e0       	ldi	r27, 0x03	; 3
    2928:	0f d0       	rcall	.+30     	; 0x2948 <__ultoa_invert+0x86>
    292a:	c9 f7       	brne	.-14     	; 0x291e <__ultoa_invert+0x5c>
    292c:	f6 cf       	rjmp	.-20     	; 0x291a <__ultoa_invert+0x58>
    292e:	46 2f       	mov	r20, r22
    2930:	4f 70       	andi	r20, 0x0F	; 15
    2932:	40 5d       	subi	r20, 0xD0	; 208
    2934:	4a 33       	cpi	r20, 0x3A	; 58
    2936:	18 f0       	brcs	.+6      	; 0x293e <__ultoa_invert+0x7c>
    2938:	49 5d       	subi	r20, 0xD9	; 217
    293a:	31 fd       	sbrc	r19, 1
    293c:	40 52       	subi	r20, 0x20	; 32
    293e:	41 93       	st	Z+, r20
    2940:	02 d0       	rcall	.+4      	; 0x2946 <__ultoa_invert+0x84>
    2942:	a9 f7       	brne	.-22     	; 0x292e <__ultoa_invert+0x6c>
    2944:	ea cf       	rjmp	.-44     	; 0x291a <__ultoa_invert+0x58>
    2946:	b4 e0       	ldi	r27, 0x04	; 4
    2948:	a6 95       	lsr	r26
    294a:	97 95       	ror	r25
    294c:	87 95       	ror	r24
    294e:	77 95       	ror	r23
    2950:	67 95       	ror	r22
    2952:	ba 95       	dec	r27
    2954:	c9 f7       	brne	.-14     	; 0x2948 <__ultoa_invert+0x86>
    2956:	00 97       	sbiw	r24, 0x00	; 0
    2958:	61 05       	cpc	r22, r1
    295a:	71 05       	cpc	r23, r1
    295c:	08 95       	ret
    295e:	9b 01       	movw	r18, r22
    2960:	ac 01       	movw	r20, r24
    2962:	0a 2e       	mov	r0, r26
    2964:	06 94       	lsr	r0
    2966:	57 95       	ror	r21
    2968:	47 95       	ror	r20
    296a:	37 95       	ror	r19
    296c:	27 95       	ror	r18
    296e:	ba 95       	dec	r27
    2970:	c9 f7       	brne	.-14     	; 0x2964 <__ultoa_invert+0xa2>
    2972:	62 0f       	add	r22, r18
    2974:	73 1f       	adc	r23, r19
    2976:	84 1f       	adc	r24, r20
    2978:	95 1f       	adc	r25, r21
    297a:	a0 1d       	adc	r26, r0
    297c:	08 95       	ret

0000297e <_exit>:
    297e:	f8 94       	cli

00002980 <__stop_program>:
    2980:	ff cf       	rjmp	.-2      	; 0x2980 <__stop_program>
