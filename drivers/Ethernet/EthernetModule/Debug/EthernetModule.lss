
EthernetModule.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000004b8  00800100  00001676  0000170a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001676  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  008005b8  008005b8  00001bc2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001bc2  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000d8  00000000  00000000  00001c1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001529  00000000  00000000  00001cf6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000052e  00000000  00000000  0000321f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000056a  00000000  00000000  0000374d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000604  00000000  00000000  00003cb8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000463  00000000  00000000  000042bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001552  00000000  00000000  0000471f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d0  00000000  00000000  00005c71  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
       4:	0c 94 d4 06 	jmp	0xda8	; 0xda8 <__vector_1>
       8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf ef       	ldi	r28, 0xFF	; 255
      82:	d8 e0       	ldi	r29, 0x08	; 8
      84:	de bf       	out	0x3e, r29	; 62
      86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
      88:	15 e0       	ldi	r17, 0x05	; 5
      8a:	a0 e0       	ldi	r26, 0x00	; 0
      8c:	b1 e0       	ldi	r27, 0x01	; 1
      8e:	e6 e7       	ldi	r30, 0x76	; 118
      90:	f6 e1       	ldi	r31, 0x16	; 22
      92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
      94:	05 90       	lpm	r0, Z+
      96:	0d 92       	st	X+, r0
      98:	a8 3b       	cpi	r26, 0xB8	; 184
      9a:	b1 07       	cpc	r27, r17
      9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
      9e:	25 e0       	ldi	r18, 0x05	; 5
      a0:	a8 eb       	ldi	r26, 0xB8	; 184
      a2:	b5 e0       	ldi	r27, 0x05	; 5
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	a6 3c       	cpi	r26, 0xC6	; 198
      aa:	b2 07       	cpc	r27, r18
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 6c 07 	call	0xed8	; 0xed8 <main>
      b2:	0c 94 39 0b 	jmp	0x1672	; 0x1672 <_exit>

000000b6 <__bad_interrupt>:
      b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <uart_putch>:
	unsigned char dummy;
	while (UCSR0A & (1<<RXC0)) dummy = UDR0;
}

int uart_putch(char ch,FILE *stream)
{
      ba:	cf 93       	push	r28
      bc:	c8 2f       	mov	r28, r24
	if (ch == '\n')
      be:	8a 30       	cpi	r24, 0x0A	; 10
      c0:	19 f4       	brne	.+6      	; 0xc8 <uart_putch+0xe>
	uart_putch('\r', stream);
      c2:	8d e0       	ldi	r24, 0x0D	; 13
      c4:	0e 94 5d 00 	call	0xba	; 0xba <uart_putch>
	while (!(UCSR0A & (1<<UDRE0)));
      c8:	e0 ec       	ldi	r30, 0xC0	; 192
      ca:	f0 e0       	ldi	r31, 0x00	; 0
      cc:	90 81       	ld	r25, Z
      ce:	95 ff       	sbrs	r25, 5
      d0:	fd cf       	rjmp	.-6      	; 0xcc <uart_putch+0x12>
	UDR0=ch;
      d2:	c0 93 c6 00 	sts	0x00C6, r28
	return 0;
}
      d6:	80 e0       	ldi	r24, 0x00	; 0
      d8:	90 e0       	ldi	r25, 0x00	; 0
      da:	cf 91       	pop	r28
      dc:	08 95       	ret

000000de <uart_getch>:

int uart_getch(FILE *stream)
{
      de:	cf 93       	push	r28
      e0:	bc 01       	movw	r22, r24
	unsigned char ch;
	while (!(UCSR0A & (1<<RXC0)));
      e2:	e0 ec       	ldi	r30, 0xC0	; 192
      e4:	f0 e0       	ldi	r31, 0x00	; 0
      e6:	80 81       	ld	r24, Z
      e8:	88 23       	and	r24, r24
      ea:	ec f7       	brge	.-6      	; 0xe6 <uart_getch+0x8>
	ch=UDR0;
      ec:	c0 91 c6 00 	lds	r28, 0x00C6

	/* Echo the Output Back to terminal */
	uart_putch(ch,stream);
      f0:	8c 2f       	mov	r24, r28
      f2:	0e 94 5d 00 	call	0xba	; 0xba <uart_putch>

	return ch;
}
      f6:	8c 2f       	mov	r24, r28
      f8:	90 e0       	ldi	r25, 0x00	; 0
      fa:	cf 91       	pop	r28
      fc:	08 95       	ret

000000fe <uart_init>:
unsigned int S0_TX_BASE;
unsigned int S0_TX_MASK;

void uart_init(void)
{
	UBRR0H = (((F_CPU/BAUD_RATE)/16)-1)>>8;	// set baud rate
      fe:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (((F_CPU/BAUD_RATE)/16)-1);
     102:	89 e1       	ldi	r24, 0x19	; 25
     104:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0B = (1<<RXEN0)|(1<<TXEN0); 		// enable Rx & Tx
     108:	88 e1       	ldi	r24, 0x18	; 24
     10a:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C =  (1<<UCSZ01)|(1<<UCSZ00);  	// config USART; 8N1
     10e:	86 e0       	ldi	r24, 0x06	; 6
     110:	80 93 c2 00 	sts	0x00C2, r24
     114:	08 95       	ret

00000116 <uart_flush>:
}

void uart_flush(void)
{
	unsigned char dummy;
	while (UCSR0A & (1<<RXC0)) dummy = UDR0;
     116:	80 91 c0 00 	lds	r24, 0x00C0
     11a:	88 23       	and	r24, r24
     11c:	44 f4       	brge	.+16     	; 0x12e <uart_flush+0x18>
     11e:	a6 ec       	ldi	r26, 0xC6	; 198
     120:	b0 e0       	ldi	r27, 0x00	; 0
     122:	e0 ec       	ldi	r30, 0xC0	; 192
     124:	f0 e0       	ldi	r31, 0x00	; 0
     126:	8c 91       	ld	r24, X
     128:	80 81       	ld	r24, Z
     12a:	88 23       	and	r24, r24
     12c:	e4 f3       	brlt	.-8      	; 0x126 <uart_flush+0x10>
     12e:	08 95       	ret

00000130 <ansi_cl>:

	return ch;
}

void ansi_cl(void)
{
     130:	cf 93       	push	r28
     132:	df 93       	push	r29
	// ANSI clear screen: cl=\E[H\E[J
	putchar(27);
     134:	c2 ec       	ldi	r28, 0xC2	; 194
     136:	d5 e0       	ldi	r29, 0x05	; 5
     138:	68 81       	ld	r22, Y
     13a:	79 81       	ldd	r23, Y+1	; 0x01
     13c:	8b e1       	ldi	r24, 0x1B	; 27
     13e:	90 e0       	ldi	r25, 0x00	; 0
     140:	0e 94 49 08 	call	0x1092	; 0x1092 <fputc>
	putchar('[');
     144:	68 81       	ld	r22, Y
     146:	79 81       	ldd	r23, Y+1	; 0x01
     148:	8b e5       	ldi	r24, 0x5B	; 91
     14a:	90 e0       	ldi	r25, 0x00	; 0
     14c:	0e 94 49 08 	call	0x1092	; 0x1092 <fputc>
	putchar('H');
     150:	68 81       	ld	r22, Y
     152:	79 81       	ldd	r23, Y+1	; 0x01
     154:	88 e4       	ldi	r24, 0x48	; 72
     156:	90 e0       	ldi	r25, 0x00	; 0
     158:	0e 94 49 08 	call	0x1092	; 0x1092 <fputc>
	putchar(27);
     15c:	68 81       	ld	r22, Y
     15e:	79 81       	ldd	r23, Y+1	; 0x01
     160:	8b e1       	ldi	r24, 0x1B	; 27
     162:	90 e0       	ldi	r25, 0x00	; 0
     164:	0e 94 49 08 	call	0x1092	; 0x1092 <fputc>
	putchar('[');
     168:	68 81       	ld	r22, Y
     16a:	79 81       	ldd	r23, Y+1	; 0x01
     16c:	8b e5       	ldi	r24, 0x5B	; 91
     16e:	90 e0       	ldi	r25, 0x00	; 0
     170:	0e 94 49 08 	call	0x1092	; 0x1092 <fputc>
	putchar('J');
     174:	68 81       	ld	r22, Y
     176:	79 81       	ldd	r23, Y+1	; 0x01
     178:	8a e4       	ldi	r24, 0x4A	; 74
     17a:	90 e0       	ldi	r25, 0x00	; 0
     17c:	0e 94 49 08 	call	0x1092	; 0x1092 <fputc>
}
     180:	df 91       	pop	r29
     182:	cf 91       	pop	r28
     184:	08 95       	ret

00000186 <ansi_me>:

void ansi_me(void)
{
     186:	cf 93       	push	r28
     188:	df 93       	push	r29
	// ANSI turn off all attribute: me=\E[0m
	putchar(27);
     18a:	c2 ec       	ldi	r28, 0xC2	; 194
     18c:	d5 e0       	ldi	r29, 0x05	; 5
     18e:	68 81       	ld	r22, Y
     190:	79 81       	ldd	r23, Y+1	; 0x01
     192:	8b e1       	ldi	r24, 0x1B	; 27
     194:	90 e0       	ldi	r25, 0x00	; 0
     196:	0e 94 49 08 	call	0x1092	; 0x1092 <fputc>
	putchar('[');
     19a:	68 81       	ld	r22, Y
     19c:	79 81       	ldd	r23, Y+1	; 0x01
     19e:	8b e5       	ldi	r24, 0x5B	; 91
     1a0:	90 e0       	ldi	r25, 0x00	; 0
     1a2:	0e 94 49 08 	call	0x1092	; 0x1092 <fputc>
	putchar('0');
     1a6:	68 81       	ld	r22, Y
     1a8:	79 81       	ldd	r23, Y+1	; 0x01
     1aa:	80 e3       	ldi	r24, 0x30	; 48
     1ac:	90 e0       	ldi	r25, 0x00	; 0
     1ae:	0e 94 49 08 	call	0x1092	; 0x1092 <fputc>
	putchar('m');
     1b2:	68 81       	ld	r22, Y
     1b4:	79 81       	ldd	r23, Y+1	; 0x01
     1b6:	8d e6       	ldi	r24, 0x6D	; 109
     1b8:	90 e0       	ldi	r25, 0x00	; 0
     1ba:	0e 94 49 08 	call	0x1092	; 0x1092 <fputc>
}
     1be:	df 91       	pop	r29
     1c0:	cf 91       	pop	r28
     1c2:	08 95       	ret

000001c4 <SPI_Write>:

void SPI_Write(unsigned int addr,unsigned char data)
{
	// Activate the CS pin
	CS_PORT &= ~(1<<SPI_CS);
     1c4:	10 98       	cbi	0x02, 0	; 2
	// Start Wiznet W5100 Write OpCode transmission
	SPDR0 = WIZNET_WRITE_OPCODE;
     1c6:	20 ef       	ldi	r18, 0xF0	; 240
     1c8:	2e bd       	out	0x2e, r18	; 46
	// Wait for transmission complete
	while(!(SPSR0 & (1<<SPIF0)));
     1ca:	0d b4       	in	r0, 0x2d	; 45
     1cc:	07 fe       	sbrs	r0, 7
     1ce:	fd cf       	rjmp	.-6      	; 0x1ca <SPI_Write+0x6>
	// Start Wiznet W5100 Address High Bytes transmission
	SPDR0 = (addr & 0xFF00) >> 8;
     1d0:	9e bd       	out	0x2e, r25	; 46
	// Wait for transmission complete
	while(!(SPSR0 & (1<<SPIF0)));
     1d2:	0d b4       	in	r0, 0x2d	; 45
     1d4:	07 fe       	sbrs	r0, 7
     1d6:	fd cf       	rjmp	.-6      	; 0x1d2 <SPI_Write+0xe>
	// Start Wiznet W5100 Address Low Bytes transmission
	SPDR0 = addr & 0x00FF;
     1d8:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR0 & (1<<SPIF0)));
     1da:	0d b4       	in	r0, 0x2d	; 45
     1dc:	07 fe       	sbrs	r0, 7
     1de:	fd cf       	rjmp	.-6      	; 0x1da <SPI_Write+0x16>

	// Start Data transmission
	SPDR0 = data;
     1e0:	6e bd       	out	0x2e, r22	; 46
	// Wait for transmission complete
	while(!(SPSR0 & (1<<SPIF0)));
     1e2:	0d b4       	in	r0, 0x2d	; 45
     1e4:	07 fe       	sbrs	r0, 7
     1e6:	fd cf       	rjmp	.-6      	; 0x1e2 <SPI_Write+0x1e>
	// CS pin is not active
	CS_PORT |= (1<<SPI_CS);
     1e8:	10 9a       	sbi	0x02, 0	; 2
     1ea:	08 95       	ret

000001ec <SPI_Read>:
}

unsigned char SPI_Read(unsigned int addr)
{
	// Activate the CS pin
	CS_PORT &= ~(1<<SPI_CS);
     1ec:	10 98       	cbi	0x02, 0	; 2
	// Start Wiznet W5100 Read OpCode transmission
	SPDR0 = WIZNET_READ_OPCODE;
     1ee:	2f e0       	ldi	r18, 0x0F	; 15
     1f0:	2e bd       	out	0x2e, r18	; 46
	// Wait for transmission complete
	while(!(SPSR0 & (1<<SPIF0)));
     1f2:	0d b4       	in	r0, 0x2d	; 45
     1f4:	07 fe       	sbrs	r0, 7
     1f6:	fd cf       	rjmp	.-6      	; 0x1f2 <SPI_Read+0x6>
	// Start Wiznet W5100 Address High Bytes transmission
	SPDR0 = (addr & 0xFF00) >> 8;
     1f8:	9e bd       	out	0x2e, r25	; 46
	// Wait for transmission complete
	while(!(SPSR0 & (1<<SPIF0)));
     1fa:	0d b4       	in	r0, 0x2d	; 45
     1fc:	07 fe       	sbrs	r0, 7
     1fe:	fd cf       	rjmp	.-6      	; 0x1fa <SPI_Read+0xe>
	// Start Wiznet W5100 Address Low Bytes transmission
	SPDR0 = addr & 0x00FF;
     200:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR0 & (1<<SPIF0)));
     202:	0d b4       	in	r0, 0x2d	; 45
     204:	07 fe       	sbrs	r0, 7
     206:	fd cf       	rjmp	.-6      	; 0x202 <SPI_Read+0x16>

	// Send Dummy transmission for reading the data
	SPDR0 = 0x00;
     208:	1e bc       	out	0x2e, r1	; 46
	// Wait for transmission complete
	while(!(SPSR0 & (1<<SPIF0)));
     20a:	0d b4       	in	r0, 0x2d	; 45
     20c:	07 fe       	sbrs	r0, 7
     20e:	fd cf       	rjmp	.-6      	; 0x20a <SPI_Read+0x1e>

	// CS pin is not active
	CS_PORT |= (1<<SPI_CS);
     210:	10 9a       	sbi	0x02, 0	; 2
	return(SPDR0);
     212:	8e b5       	in	r24, 0x2e	; 46
}
     214:	08 95       	ret

00000216 <Server_Connect>:
	printf("Done Wiznet W5100 Initialized!\n");
	Memory_Init(); 
}

int Server_Connect(uint8_t socketMode, uint8_t server_ip_addr[4], uint8_t server_port[2], uint8_t source_port[2])
{
     216:	6f 92       	push	r6
     218:	7f 92       	push	r7
     21a:	8f 92       	push	r8
     21c:	9f 92       	push	r9
     21e:	af 92       	push	r10
     220:	bf 92       	push	r11
     222:	cf 92       	push	r12
     224:	df 92       	push	r13
     226:	ef 92       	push	r14
     228:	ff 92       	push	r15
     22a:	0f 93       	push	r16
     22c:	1f 93       	push	r17
     22e:	cf 93       	push	r28
     230:	df 93       	push	r29
     232:	68 2e       	mov	r6, r24
     234:	5b 01       	movw	r10, r22
     236:	4a 01       	movw	r8, r20
     238:	e9 01       	movw	r28, r18
	{
		//printf("SPI SR Status: %d\n", SPI_Read(S0_SR));
		SPI_Write(S0_CR, CLOSE);
		//SPI_Write(S0_MR, TCP_MODE);
		SPI_Write(S0_MR, socketMode);
		printf("Setting Source Port on Socket 0 %d%d\n",source_port[0],source_port[1]);
     23a:	0f 2e       	mov	r0, r31
     23c:	f4 e1       	ldi	r31, 0x14	; 20
     23e:	cf 2e       	mov	r12, r31
     240:	f1 e0       	ldi	r31, 0x01	; 1
     242:	df 2e       	mov	r13, r31
     244:	f0 2d       	mov	r31, r0
		SPI_Write(S0_SPORT + 0, source_port[0]);
		SPI_Write(S0_SPORT + 1, source_port[1]);
		printf("Reading Source Port on Socket 0 %d%d\n\n",SPI_Read(S0_SPORT),SPI_Read(S0_SPORT + 1));
     246:	0f 2e       	mov	r0, r31
     248:	fa e3       	ldi	r31, 0x3A	; 58
     24a:	ef 2e       	mov	r14, r31
     24c:	f1 e0       	ldi	r31, 0x01	; 1
     24e:	ff 2e       	mov	r15, r31
     250:	f0 2d       	mov	r31, r0
		
		printf("Setting Socket 0 to Open\n\n");
		SPI_Write(S0_CR, OPEN);
		printf("SPI SR Status: %d\n", SPI_Read(S0_SR));
     252:	0b e7       	ldi	r16, 0x7B	; 123
     254:	11 e0       	ldi	r17, 0x01	; 1
int Server_Connect(uint8_t socketMode, uint8_t server_ip_addr[4], uint8_t server_port[2], uint8_t source_port[2])
{
	do 
	{
		//printf("SPI SR Status: %d\n", SPI_Read(S0_SR));
		SPI_Write(S0_CR, CLOSE);
     256:	60 e1       	ldi	r22, 0x10	; 16
     258:	81 e0       	ldi	r24, 0x01	; 1
     25a:	94 e0       	ldi	r25, 0x04	; 4
     25c:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <SPI_Write>
		//SPI_Write(S0_MR, TCP_MODE);
		SPI_Write(S0_MR, socketMode);
     260:	66 2d       	mov	r22, r6
     262:	80 e0       	ldi	r24, 0x00	; 0
     264:	94 e0       	ldi	r25, 0x04	; 4
     266:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <SPI_Write>
		printf("Setting Source Port on Socket 0 %d%d\n",source_port[0],source_port[1]);
     26a:	99 81       	ldd	r25, Y+1	; 0x01
     26c:	1f 92       	push	r1
     26e:	9f 93       	push	r25
     270:	98 81       	ld	r25, Y
     272:	1f 92       	push	r1
     274:	9f 93       	push	r25
     276:	df 92       	push	r13
     278:	cf 92       	push	r12
     27a:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <printf>
		SPI_Write(S0_SPORT + 0, source_port[0]);
     27e:	68 81       	ld	r22, Y
     280:	84 e0       	ldi	r24, 0x04	; 4
     282:	94 e0       	ldi	r25, 0x04	; 4
     284:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <SPI_Write>
		SPI_Write(S0_SPORT + 1, source_port[1]);
     288:	69 81       	ldd	r22, Y+1	; 0x01
     28a:	85 e0       	ldi	r24, 0x05	; 5
     28c:	94 e0       	ldi	r25, 0x04	; 4
     28e:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <SPI_Write>
		printf("Reading Source Port on Socket 0 %d%d\n\n",SPI_Read(S0_SPORT),SPI_Read(S0_SPORT + 1));
     292:	85 e0       	ldi	r24, 0x05	; 5
     294:	94 e0       	ldi	r25, 0x04	; 4
     296:	0e 94 f6 00 	call	0x1ec	; 0x1ec <SPI_Read>
     29a:	78 2e       	mov	r7, r24
     29c:	84 e0       	ldi	r24, 0x04	; 4
     29e:	94 e0       	ldi	r25, 0x04	; 4
     2a0:	0e 94 f6 00 	call	0x1ec	; 0x1ec <SPI_Read>
     2a4:	1f 92       	push	r1
     2a6:	7f 92       	push	r7
     2a8:	1f 92       	push	r1
     2aa:	8f 93       	push	r24
     2ac:	ff 92       	push	r15
     2ae:	ef 92       	push	r14
     2b0:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <printf>
		
		printf("Setting Socket 0 to Open\n\n");
     2b4:	81 e6       	ldi	r24, 0x61	; 97
     2b6:	91 e0       	ldi	r25, 0x01	; 1
     2b8:	0e 94 8f 08 	call	0x111e	; 0x111e <puts>
		SPI_Write(S0_CR, OPEN);
     2bc:	61 e0       	ldi	r22, 0x01	; 1
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	94 e0       	ldi	r25, 0x04	; 4
     2c2:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <SPI_Write>
		printf("SPI SR Status: %d\n", SPI_Read(S0_SR));
     2c6:	83 e0       	ldi	r24, 0x03	; 3
     2c8:	94 e0       	ldi	r25, 0x04	; 4
     2ca:	0e 94 f6 00 	call	0x1ec	; 0x1ec <SPI_Read>
     2ce:	1f 92       	push	r1
     2d0:	8f 93       	push	r24
     2d2:	1f 93       	push	r17
     2d4:	0f 93       	push	r16
     2d6:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <printf>
		
	} while (SPI_Read(S0_SR) != SOCK_INIT && SPI_Read(S0_SR) != SOCK_IPRAW);
     2da:	83 e0       	ldi	r24, 0x03	; 3
     2dc:	94 e0       	ldi	r25, 0x04	; 4
     2de:	0e 94 f6 00 	call	0x1ec	; 0x1ec <SPI_Read>
     2e2:	2d b7       	in	r18, 0x3d	; 61
     2e4:	3e b7       	in	r19, 0x3e	; 62
     2e6:	20 5f       	subi	r18, 0xF0	; 240
     2e8:	3f 4f       	sbci	r19, 0xFF	; 255
     2ea:	0f b6       	in	r0, 0x3f	; 63
     2ec:	f8 94       	cli
     2ee:	3e bf       	out	0x3e, r19	; 62
     2f0:	0f be       	out	0x3f, r0	; 63
     2f2:	2d bf       	out	0x3d, r18	; 61
     2f4:	83 31       	cpi	r24, 0x13	; 19
     2f6:	39 f0       	breq	.+14     	; 0x306 <Server_Connect+0xf0>
     2f8:	83 e0       	ldi	r24, 0x03	; 3
     2fa:	94 e0       	ldi	r25, 0x04	; 4
     2fc:	0e 94 f6 00 	call	0x1ec	; 0x1ec <SPI_Read>
     300:	82 33       	cpi	r24, 0x32	; 50
     302:	09 f0       	breq	.+2      	; 0x306 <Server_Connect+0xf0>
     304:	a8 cf       	rjmp	.-176    	; 0x256 <Server_Connect+0x40>
	
	//Write Server IP to Socket 0 IP Register
	printf("Setting Server IP Address %d.%d.%d.%d\n",server_ip_addr[0],server_ip_addr[1],\
     306:	f5 01       	movw	r30, r10
     308:	83 81       	ldd	r24, Z+3	; 0x03
     30a:	1f 92       	push	r1
     30c:	8f 93       	push	r24
     30e:	82 81       	ldd	r24, Z+2	; 0x02
     310:	1f 92       	push	r1
     312:	8f 93       	push	r24
     314:	81 81       	ldd	r24, Z+1	; 0x01
     316:	1f 92       	push	r1
     318:	8f 93       	push	r24
     31a:	80 81       	ld	r24, Z
     31c:	1f 92       	push	r1
     31e:	8f 93       	push	r24
     320:	8e e8       	ldi	r24, 0x8E	; 142
     322:	91 e0       	ldi	r25, 0x01	; 1
     324:	9f 93       	push	r25
     326:	8f 93       	push	r24
     328:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <printf>
	server_ip_addr[2],server_ip_addr[3]); 
	SPI_Write(S0_DIPR + 0,server_ip_addr[0]);
     32c:	f5 01       	movw	r30, r10
     32e:	60 81       	ld	r22, Z
     330:	8c e0       	ldi	r24, 0x0C	; 12
     332:	94 e0       	ldi	r25, 0x04	; 4
     334:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <SPI_Write>
	SPI_Write(S0_DIPR + 1, server_ip_addr[1]);
     338:	f5 01       	movw	r30, r10
     33a:	61 81       	ldd	r22, Z+1	; 0x01
     33c:	8d e0       	ldi	r24, 0x0D	; 13
     33e:	94 e0       	ldi	r25, 0x04	; 4
     340:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <SPI_Write>
	SPI_Write(S0_DIPR + 2,server_ip_addr[2]);
     344:	f5 01       	movw	r30, r10
     346:	62 81       	ldd	r22, Z+2	; 0x02
     348:	8e e0       	ldi	r24, 0x0E	; 14
     34a:	94 e0       	ldi	r25, 0x04	; 4
     34c:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <SPI_Write>
	SPI_Write(S0_DIPR + 3, server_ip_addr[3]);
     350:	f5 01       	movw	r30, r10
     352:	63 81       	ldd	r22, Z+3	; 0x03
     354:	8f e0       	ldi	r24, 0x0F	; 15
     356:	94 e0       	ldi	r25, 0x04	; 4
     358:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <SPI_Write>
	printf("Reading S0_DIPR: %d.%d.%d.%d\n\n",SPI_Read(S0_DIPR + 0),SPI_Read(S0_DIPR + 1),\
	SPI_Read(S0_DIPR + 2),SPI_Read(S0_DIPR + 3));
     35c:	8f e0       	ldi	r24, 0x0F	; 15
     35e:	94 e0       	ldi	r25, 0x04	; 4
     360:	0e 94 f6 00 	call	0x1ec	; 0x1ec <SPI_Read>
     364:	18 2f       	mov	r17, r24
     366:	8e e0       	ldi	r24, 0x0E	; 14
     368:	94 e0       	ldi	r25, 0x04	; 4
     36a:	0e 94 f6 00 	call	0x1ec	; 0x1ec <SPI_Read>
     36e:	d8 2f       	mov	r29, r24
	server_ip_addr[2],server_ip_addr[3]); 
	SPI_Write(S0_DIPR + 0,server_ip_addr[0]);
	SPI_Write(S0_DIPR + 1, server_ip_addr[1]);
	SPI_Write(S0_DIPR + 2,server_ip_addr[2]);
	SPI_Write(S0_DIPR + 3, server_ip_addr[3]);
	printf("Reading S0_DIPR: %d.%d.%d.%d\n\n",SPI_Read(S0_DIPR + 0),SPI_Read(S0_DIPR + 1),\
     370:	8d e0       	ldi	r24, 0x0D	; 13
     372:	94 e0       	ldi	r25, 0x04	; 4
     374:	0e 94 f6 00 	call	0x1ec	; 0x1ec <SPI_Read>
     378:	c8 2f       	mov	r28, r24
     37a:	8c e0       	ldi	r24, 0x0C	; 12
     37c:	94 e0       	ldi	r25, 0x04	; 4
     37e:	0e 94 f6 00 	call	0x1ec	; 0x1ec <SPI_Read>
     382:	1f 92       	push	r1
     384:	1f 93       	push	r17
     386:	1f 92       	push	r1
     388:	df 93       	push	r29
     38a:	1f 92       	push	r1
     38c:	cf 93       	push	r28
     38e:	1f 92       	push	r1
     390:	8f 93       	push	r24
     392:	85 eb       	ldi	r24, 0xB5	; 181
     394:	91 e0       	ldi	r25, 0x01	; 1
     396:	9f 93       	push	r25
     398:	8f 93       	push	r24
     39a:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <printf>
	SPI_Read(S0_DIPR + 2),SPI_Read(S0_DIPR + 3));
	printf("SPI SR Status: %d\n", SPI_Read(S0_SR));
     39e:	83 e0       	ldi	r24, 0x03	; 3
     3a0:	94 e0       	ldi	r25, 0x04	; 4
     3a2:	0e 94 f6 00 	call	0x1ec	; 0x1ec <SPI_Read>
     3a6:	1f 92       	push	r1
     3a8:	8f 93       	push	r24
     3aa:	cb e7       	ldi	r28, 0x7B	; 123
     3ac:	d1 e0       	ldi	r29, 0x01	; 1
     3ae:	df 93       	push	r29
     3b0:	cf 93       	push	r28
     3b2:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <printf>
	
	//Write Server Port to Socket 0 IP Register 
	printf("Setting Server Port\n");
     3b6:	84 ed       	ldi	r24, 0xD4	; 212
     3b8:	91 e0       	ldi	r25, 0x01	; 1
     3ba:	0e 94 8f 08 	call	0x111e	; 0x111e <puts>
	SPI_Write(S0_DPORT + 0, server_port[0]); 
     3be:	f4 01       	movw	r30, r8
     3c0:	60 81       	ld	r22, Z
     3c2:	80 e1       	ldi	r24, 0x10	; 16
     3c4:	94 e0       	ldi	r25, 0x04	; 4
     3c6:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <SPI_Write>
	SPI_Write(S0_DPORT + 1, server_port[1]);
     3ca:	f4 01       	movw	r30, r8
     3cc:	61 81       	ldd	r22, Z+1	; 0x01
     3ce:	81 e1       	ldi	r24, 0x11	; 17
     3d0:	94 e0       	ldi	r25, 0x04	; 4
     3d2:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <SPI_Write>
	printf("Reading S0_DPORT: %d%d\n\n",SPI_Read(S0_DPORT + 0),SPI_Read(S0_DPORT + 1)); 
     3d6:	81 e1       	ldi	r24, 0x11	; 17
     3d8:	94 e0       	ldi	r25, 0x04	; 4
     3da:	0e 94 f6 00 	call	0x1ec	; 0x1ec <SPI_Read>
     3de:	18 2f       	mov	r17, r24
     3e0:	80 e1       	ldi	r24, 0x10	; 16
     3e2:	94 e0       	ldi	r25, 0x04	; 4
     3e4:	0e 94 f6 00 	call	0x1ec	; 0x1ec <SPI_Read>
     3e8:	1f 92       	push	r1
     3ea:	1f 93       	push	r17
     3ec:	1f 92       	push	r1
     3ee:	8f 93       	push	r24
     3f0:	88 ee       	ldi	r24, 0xE8	; 232
     3f2:	91 e0       	ldi	r25, 0x01	; 1
     3f4:	9f 93       	push	r25
     3f6:	8f 93       	push	r24
     3f8:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <printf>
	printf("SPI SR Status: %d\n", SPI_Read(S0_SR));
     3fc:	83 e0       	ldi	r24, 0x03	; 3
     3fe:	94 e0       	ldi	r25, 0x04	; 4
     400:	0e 94 f6 00 	call	0x1ec	; 0x1ec <SPI_Read>
     404:	1f 92       	push	r1
     406:	8f 93       	push	r24
     408:	df 93       	push	r29
     40a:	cf 93       	push	r28
     40c:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <printf>
	
	//Try to connect 
	SPI_Write(S0_CR, CONNECT);
     410:	8d b7       	in	r24, 0x3d	; 61
     412:	9e b7       	in	r25, 0x3e	; 62
     414:	82 96       	adiw	r24, 0x22	; 34
     416:	0f b6       	in	r0, 0x3f	; 63
     418:	f8 94       	cli
     41a:	9e bf       	out	0x3e, r25	; 62
     41c:	0f be       	out	0x3f, r0	; 63
     41e:	8d bf       	out	0x3d, r24	; 61
     420:	64 e0       	ldi	r22, 0x04	; 4
     422:	81 e0       	ldi	r24, 0x01	; 1
     424:	94 e0       	ldi	r25, 0x04	; 4
     426:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <SPI_Write>
	while((SPI_Read(S0_IR) & 0x1F) != 0); 
     42a:	82 e0       	ldi	r24, 0x02	; 2
     42c:	94 e0       	ldi	r25, 0x04	; 4
     42e:	0e 94 f6 00 	call	0x1ec	; 0x1ec <SPI_Read>
     432:	8f 71       	andi	r24, 0x1F	; 31
     434:	d1 f7       	brne	.-12     	; 0x42a <Server_Connect+0x214>
	printf("Done Wiznet W5100 Initialized!\n");
	Memory_Init(); 
}

int Server_Connect(uint8_t socketMode, uint8_t server_ip_addr[4], uint8_t server_port[2], uint8_t source_port[2])
{
     436:	08 ee       	ldi	r16, 0xE8	; 232
     438:	13 e0       	ldi	r17, 0x03	; 3
     43a:	0d c0       	rjmp	.+26     	; 0x456 <Server_Connect+0x240>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     43c:	ed ee       	ldi	r30, 0xED	; 237
     43e:	f2 e0       	ldi	r31, 0x02	; 2
     440:	31 97       	sbiw	r30, 0x01	; 1
     442:	f1 f7       	brne	.-4      	; 0x440 <Server_Connect+0x22a>
     444:	00 c0       	rjmp	.+0      	; 0x446 <Server_Connect+0x230>
     446:	00 00       	nop
     448:	21 97       	sbiw	r28, 0x01	; 1
	while(SPI_Read(S0_SR) == SOCK_SYNSENT)
	{
		_delay_ms(3);
		delayCount += 1; 
		//Every 3 seconds
		if(delayCount == 1000)
     44a:	20 97       	sbiw	r28, 0x00	; 0
     44c:	31 f4       	brne	.+12     	; 0x45a <Server_Connect+0x244>
		{
			printf("Trying to Establish Connection...\n");
     44e:	81 e0       	ldi	r24, 0x01	; 1
     450:	92 e0       	ldi	r25, 0x02	; 2
     452:	0e 94 8f 08 	call	0x111e	; 0x111e <puts>
	printf("Done Wiznet W5100 Initialized!\n");
	Memory_Init(); 
}

int Server_Connect(uint8_t socketMode, uint8_t server_ip_addr[4], uint8_t server_port[2], uint8_t source_port[2])
{
     456:	c0 2f       	mov	r28, r16
     458:	d1 2f       	mov	r29, r17
	//Try to connect 
	SPI_Write(S0_CR, CONNECT);
	while((SPI_Read(S0_IR) & 0x1F) != 0); 
	//Check to see if connection has been established 
	unsigned int delayCount = 0; 
	while(SPI_Read(S0_SR) == SOCK_SYNSENT)
     45a:	83 e0       	ldi	r24, 0x03	; 3
     45c:	94 e0       	ldi	r25, 0x04	; 4
     45e:	0e 94 f6 00 	call	0x1ec	; 0x1ec <SPI_Read>
     462:	85 31       	cpi	r24, 0x15	; 21
     464:	59 f3       	breq	.-42     	; 0x43c <Server_Connect+0x226>
			printf("Trying to Establish Connection...\n");
			delayCount = 0; 
		}
	}
	
	printf("SPI SR Status: %d\n", SPI_Read(S0_SR));
     466:	83 e0       	ldi	r24, 0x03	; 3
     468:	94 e0       	ldi	r25, 0x04	; 4
     46a:	0e 94 f6 00 	call	0x1ec	; 0x1ec <SPI_Read>
     46e:	1f 92       	push	r1
     470:	8f 93       	push	r24
     472:	8b e7       	ldi	r24, 0x7B	; 123
     474:	91 e0       	ldi	r25, 0x01	; 1
     476:	9f 93       	push	r25
     478:	8f 93       	push	r24
     47a:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <printf>
	if(SPI_Read(S0_SR) == SOCK_ESTABLISHED)
     47e:	83 e0       	ldi	r24, 0x03	; 3
     480:	94 e0       	ldi	r25, 0x04	; 4
     482:	0e 94 f6 00 	call	0x1ec	; 0x1ec <SPI_Read>
     486:	0f 90       	pop	r0
     488:	0f 90       	pop	r0
     48a:	0f 90       	pop	r0
     48c:	0f 90       	pop	r0
     48e:	87 31       	cpi	r24, 0x17	; 23
     490:	b9 f4       	brne	.+46     	; 0x4c0 <Server_Connect+0x2aa>
	{
		printf("SPI SR Status: %d\n", SPI_Read(S0_SR));
     492:	83 e0       	ldi	r24, 0x03	; 3
     494:	94 e0       	ldi	r25, 0x04	; 4
     496:	0e 94 f6 00 	call	0x1ec	; 0x1ec <SPI_Read>
     49a:	1f 92       	push	r1
     49c:	8f 93       	push	r24
     49e:	8b e7       	ldi	r24, 0x7B	; 123
     4a0:	91 e0       	ldi	r25, 0x01	; 1
     4a2:	9f 93       	push	r25
     4a4:	8f 93       	push	r24
     4a6:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <printf>
		printf("Connection Succeeded!\n\n");
     4aa:	83 e2       	ldi	r24, 0x23	; 35
     4ac:	92 e0       	ldi	r25, 0x02	; 2
     4ae:	0e 94 8f 08 	call	0x111e	; 0x111e <puts>
		return 1; 
     4b2:	0f 90       	pop	r0
     4b4:	0f 90       	pop	r0
     4b6:	0f 90       	pop	r0
     4b8:	0f 90       	pop	r0
     4ba:	81 e0       	ldi	r24, 0x01	; 1
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	16 c0       	rjmp	.+44     	; 0x4ec <Server_Connect+0x2d6>
	}
	//Connection Failed 
	else
	{
		printf("SPI SR Status: %d\n", SPI_Read(S0_SR));
     4c0:	83 e0       	ldi	r24, 0x03	; 3
     4c2:	94 e0       	ldi	r25, 0x04	; 4
     4c4:	0e 94 f6 00 	call	0x1ec	; 0x1ec <SPI_Read>
     4c8:	1f 92       	push	r1
     4ca:	8f 93       	push	r24
     4cc:	8b e7       	ldi	r24, 0x7B	; 123
     4ce:	91 e0       	ldi	r25, 0x01	; 1
     4d0:	9f 93       	push	r25
     4d2:	8f 93       	push	r24
     4d4:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <printf>
		printf("Could not connect. Exiting...\n\n");
     4d8:	8a e3       	ldi	r24, 0x3A	; 58
     4da:	92 e0       	ldi	r25, 0x02	; 2
     4dc:	0e 94 8f 08 	call	0x111e	; 0x111e <puts>
		return 0; 
     4e0:	0f 90       	pop	r0
     4e2:	0f 90       	pop	r0
     4e4:	0f 90       	pop	r0
     4e6:	0f 90       	pop	r0
     4e8:	80 e0       	ldi	r24, 0x00	; 0
     4ea:	90 e0       	ldi	r25, 0x00	; 0
	}
}
     4ec:	df 91       	pop	r29
     4ee:	cf 91       	pop	r28
     4f0:	1f 91       	pop	r17
     4f2:	0f 91       	pop	r16
     4f4:	ff 90       	pop	r15
     4f6:	ef 90       	pop	r14
     4f8:	df 90       	pop	r13
     4fa:	cf 90       	pop	r12
     4fc:	bf 90       	pop	r11
     4fe:	af 90       	pop	r10
     500:	9f 90       	pop	r9
     502:	8f 90       	pop	r8
     504:	7f 90       	pop	r7
     506:	6f 90       	pop	r6
     508:	08 95       	ret

0000050a <Memory_Init>:

void Memory_Init()
{
	//assign 8kb rx memory to socket 0 
	SPI_Write(RMSR, 0x55);
     50a:	65 e5       	ldi	r22, 0x55	; 85
     50c:	8a e1       	ldi	r24, 0x1A	; 26
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <SPI_Write>
	//assign 8kb tx memory to socket 0 
	SPI_Write(TMSR, 0x55);	
     514:	65 e5       	ldi	r22, 0x55	; 85
     516:	8b e1       	ldi	r24, 0x1B	; 27
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <SPI_Write>
	//Equal 2K buffers 
	S0_TX_MASK = 0x7FF;
     51e:	8f ef       	ldi	r24, 0xFF	; 255
     520:	97 e0       	ldi	r25, 0x07	; 7
     522:	90 93 b9 05 	sts	0x05B9, r25
     526:	80 93 b8 05 	sts	0x05B8, r24
	S0_TX_BASE = 0x4000;
     52a:	20 e0       	ldi	r18, 0x00	; 0
     52c:	30 e4       	ldi	r19, 0x40	; 64
     52e:	30 93 bb 05 	sts	0x05BB, r19
     532:	20 93 ba 05 	sts	0x05BA, r18
	S0_RX_MASK = 0x07FF;
     536:	90 93 bf 05 	sts	0x05BF, r25
     53a:	80 93 be 05 	sts	0x05BE, r24
	S0_RX_BASE = 0x6000;
     53e:	80 e0       	ldi	r24, 0x00	; 0
     540:	90 e6       	ldi	r25, 0x60	; 96
     542:	90 93 bd 05 	sts	0x05BD, r25
     546:	80 93 bc 05 	sts	0x05BC, r24
     54a:	08 95       	ret

0000054c <Ethernet_Init>:
	CS_PORT |= (1<<SPI_CS);
	return(SPDR0);
}

void Ethernet_Init(uint16_t *mac_addr, uint8_t local_ip_addr[4], uint8_t sub_mask[4], uint8_t gtw_addr[4])
{
     54c:	bf 92       	push	r11
     54e:	cf 92       	push	r12
     550:	df 92       	push	r13
     552:	ef 92       	push	r14
     554:	ff 92       	push	r15
     556:	0f 93       	push	r16
     558:	1f 93       	push	r17
     55a:	cf 93       	push	r28
     55c:	df 93       	push	r29
     55e:	ec 01       	movw	r28, r24
     560:	7b 01       	movw	r14, r22
     562:	6a 01       	movw	r12, r20
     564:	89 01       	movw	r16, r18
	// Set MOSI, SCK and SS as output, others as input
	SPI_DDR = (1<<MOSI)|(1<<SCK)|(1<<SS);
     566:	80 eb       	ldi	r24, 0xB0	; 176
     568:	84 b9       	out	0x04, r24	; 4
	// CS pin is not active
	CS_PORT |= (1<<SPI_CS);
     56a:	10 9a       	sbi	0x02, 0	; 2
	// Enable SPI, Master Mode 0, set the clock rate fck/2
	SPCR0 = (1<<SPE0)|(1<<MSTR0);
     56c:	80 e5       	ldi	r24, 0x50	; 80
     56e:	8c bd       	out	0x2c, r24	; 44
	// Initial the Wiznet W5100
	printf("Wiznet W5100 Init\n");
     570:	89 e5       	ldi	r24, 0x59	; 89
     572:	92 e0       	ldi	r25, 0x02	; 2
     574:	0e 94 8f 08 	call	0x111e	; 0x111e <puts>
	// Ethernet Setup
	printf("Enterting Ethernet Setup\n");
     578:	8b e6       	ldi	r24, 0x6B	; 107
     57a:	92 e0       	ldi	r25, 0x02	; 2
     57c:	0e 94 8f 08 	call	0x111e	; 0x111e <puts>
	// Setting the Wiznet W5100 Mode Register: 0x0000
	SPI_Write(MR,0x80); 
     580:	60 e8       	ldi	r22, 0x80	; 128
     582:	80 e0       	ldi	r24, 0x00	; 0
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <SPI_Write>
     58a:	89 ef       	ldi	r24, 0xF9	; 249
     58c:	90 e0       	ldi	r25, 0x00	; 0
     58e:	01 97       	sbiw	r24, 0x01	; 1
     590:	f1 f7       	brne	.-4      	; 0x58e <Ethernet_Init+0x42>
     592:	00 c0       	rjmp	.+0      	; 0x594 <Ethernet_Init+0x48>
     594:	00 00       	nop
	_delay_ms(1);
	printf("Reading MR: %d\n\n",SPI_Read(MR));
     596:	80 e0       	ldi	r24, 0x00	; 0
     598:	90 e0       	ldi	r25, 0x00	; 0
     59a:	0e 94 f6 00 	call	0x1ec	; 0x1ec <SPI_Read>
     59e:	1f 92       	push	r1
     5a0:	8f 93       	push	r24
     5a2:	84 e8       	ldi	r24, 0x84	; 132
     5a4:	92 e0       	ldi	r25, 0x02	; 2
     5a6:	9f 93       	push	r25
     5a8:	8f 93       	push	r24
     5aa:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <printf>
	// Setting the Wiznet W5100 Gateway Address
	printf("Setting Gateway Address %d.%d.%d.%d\n",gtw_addr[0],gtw_addr[1],\
     5ae:	f8 01       	movw	r30, r16
     5b0:	83 81       	ldd	r24, Z+3	; 0x03
     5b2:	1f 92       	push	r1
     5b4:	8f 93       	push	r24
     5b6:	82 81       	ldd	r24, Z+2	; 0x02
     5b8:	1f 92       	push	r1
     5ba:	8f 93       	push	r24
     5bc:	81 81       	ldd	r24, Z+1	; 0x01
     5be:	1f 92       	push	r1
     5c0:	8f 93       	push	r24
     5c2:	80 81       	ld	r24, Z
     5c4:	1f 92       	push	r1
     5c6:	8f 93       	push	r24
     5c8:	85 e9       	ldi	r24, 0x95	; 149
     5ca:	92 e0       	ldi	r25, 0x02	; 2
     5cc:	9f 93       	push	r25
     5ce:	8f 93       	push	r24
     5d0:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <printf>
	gtw_addr[2],gtw_addr[3]);
	SPI_Write(GAR + 0,gtw_addr[0]);
     5d4:	f8 01       	movw	r30, r16
     5d6:	60 81       	ld	r22, Z
     5d8:	81 e0       	ldi	r24, 0x01	; 1
     5da:	90 e0       	ldi	r25, 0x00	; 0
     5dc:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <SPI_Write>
	SPI_Write(GAR + 1,gtw_addr[1]);
     5e0:	f8 01       	movw	r30, r16
     5e2:	61 81       	ldd	r22, Z+1	; 0x01
     5e4:	82 e0       	ldi	r24, 0x02	; 2
     5e6:	90 e0       	ldi	r25, 0x00	; 0
     5e8:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <SPI_Write>
	SPI_Write(GAR + 2,gtw_addr[2]);
     5ec:	f8 01       	movw	r30, r16
     5ee:	62 81       	ldd	r22, Z+2	; 0x02
     5f0:	83 e0       	ldi	r24, 0x03	; 3
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <SPI_Write>
	SPI_Write(GAR + 3,gtw_addr[3]);
     5f8:	f8 01       	movw	r30, r16
     5fa:	63 81       	ldd	r22, Z+3	; 0x03
     5fc:	84 e0       	ldi	r24, 0x04	; 4
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <SPI_Write>
     604:	89 ef       	ldi	r24, 0xF9	; 249
     606:	90 e0       	ldi	r25, 0x00	; 0
     608:	01 97       	sbiw	r24, 0x01	; 1
     60a:	f1 f7       	brne	.-4      	; 0x608 <Ethernet_Init+0xbc>
     60c:	00 c0       	rjmp	.+0      	; 0x60e <Ethernet_Init+0xc2>
     60e:	00 00       	nop
	_delay_ms(1);
	printf("Reading GAR: %d.%d.%d.%d\n\n",SPI_Read(GAR + 0),SPI_Read(GAR + 1),\
	SPI_Read(GAR + 2),SPI_Read(GAR + 3));
     610:	84 e0       	ldi	r24, 0x04	; 4
     612:	90 e0       	ldi	r25, 0x00	; 0
     614:	0e 94 f6 00 	call	0x1ec	; 0x1ec <SPI_Read>
     618:	b8 2e       	mov	r11, r24
     61a:	83 e0       	ldi	r24, 0x03	; 3
     61c:	90 e0       	ldi	r25, 0x00	; 0
     61e:	0e 94 f6 00 	call	0x1ec	; 0x1ec <SPI_Read>
     622:	08 2f       	mov	r16, r24
	SPI_Write(GAR + 0,gtw_addr[0]);
	SPI_Write(GAR + 1,gtw_addr[1]);
	SPI_Write(GAR + 2,gtw_addr[2]);
	SPI_Write(GAR + 3,gtw_addr[3]);
	_delay_ms(1);
	printf("Reading GAR: %d.%d.%d.%d\n\n",SPI_Read(GAR + 0),SPI_Read(GAR + 1),\
     624:	82 e0       	ldi	r24, 0x02	; 2
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	0e 94 f6 00 	call	0x1ec	; 0x1ec <SPI_Read>
     62c:	18 2f       	mov	r17, r24
     62e:	81 e0       	ldi	r24, 0x01	; 1
     630:	90 e0       	ldi	r25, 0x00	; 0
     632:	0e 94 f6 00 	call	0x1ec	; 0x1ec <SPI_Read>
     636:	1f 92       	push	r1
     638:	bf 92       	push	r11
     63a:	1f 92       	push	r1
     63c:	0f 93       	push	r16
     63e:	1f 92       	push	r1
     640:	1f 93       	push	r17
     642:	1f 92       	push	r1
     644:	8f 93       	push	r24
     646:	8a eb       	ldi	r24, 0xBA	; 186
     648:	92 e0       	ldi	r25, 0x02	; 2
     64a:	9f 93       	push	r25
     64c:	8f 93       	push	r24
     64e:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <printf>
	SPI_Read(GAR + 2),SPI_Read(GAR + 3));
	
	// Setting the Wiznet W5100 Source Address Register
	printf("Setting Source Address %.2x:%.2x:%.2x:%.2x:%.2x:%.2x\n",mac_addr[0],mac_addr[1],\
     652:	8b 85       	ldd	r24, Y+11	; 0x0b
     654:	8f 93       	push	r24
     656:	8a 85       	ldd	r24, Y+10	; 0x0a
     658:	8f 93       	push	r24
     65a:	89 85       	ldd	r24, Y+9	; 0x09
     65c:	8f 93       	push	r24
     65e:	88 85       	ldd	r24, Y+8	; 0x08
     660:	8f 93       	push	r24
     662:	8f 81       	ldd	r24, Y+7	; 0x07
     664:	8f 93       	push	r24
     666:	8e 81       	ldd	r24, Y+6	; 0x06
     668:	8f 93       	push	r24
     66a:	8d 81       	ldd	r24, Y+5	; 0x05
     66c:	8f 93       	push	r24
     66e:	8c 81       	ldd	r24, Y+4	; 0x04
     670:	8f 93       	push	r24
     672:	8b 81       	ldd	r24, Y+3	; 0x03
     674:	8f 93       	push	r24
     676:	8a 81       	ldd	r24, Y+2	; 0x02
     678:	8f 93       	push	r24
     67a:	89 81       	ldd	r24, Y+1	; 0x01
     67c:	8f 93       	push	r24
     67e:	88 81       	ld	r24, Y
     680:	8f 93       	push	r24
     682:	85 ed       	ldi	r24, 0xD5	; 213
     684:	92 e0       	ldi	r25, 0x02	; 2
     686:	9f 93       	push	r25
     688:	8f 93       	push	r24
     68a:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <printf>
	mac_addr[2],mac_addr[3],mac_addr[4],mac_addr[5]);
	SPI_Write(SAR + 0,mac_addr[0]);
     68e:	ed b7       	in	r30, 0x3d	; 61
     690:	fe b7       	in	r31, 0x3e	; 62
     692:	b6 96       	adiw	r30, 0x26	; 38
     694:	0f b6       	in	r0, 0x3f	; 63
     696:	f8 94       	cli
     698:	fe bf       	out	0x3e, r31	; 62
     69a:	0f be       	out	0x3f, r0	; 63
     69c:	ed bf       	out	0x3d, r30	; 61
     69e:	68 81       	ld	r22, Y
     6a0:	89 e0       	ldi	r24, 0x09	; 9
     6a2:	90 e0       	ldi	r25, 0x00	; 0
     6a4:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <SPI_Write>
	SPI_Write(SAR + 1,mac_addr[1]);
     6a8:	6a 81       	ldd	r22, Y+2	; 0x02
     6aa:	8a e0       	ldi	r24, 0x0A	; 10
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <SPI_Write>
	SPI_Write(SAR + 2,mac_addr[2]);
     6b2:	6c 81       	ldd	r22, Y+4	; 0x04
     6b4:	8b e0       	ldi	r24, 0x0B	; 11
     6b6:	90 e0       	ldi	r25, 0x00	; 0
     6b8:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <SPI_Write>
	SPI_Write(SAR + 3,mac_addr[3]);
     6bc:	6e 81       	ldd	r22, Y+6	; 0x06
     6be:	8c e0       	ldi	r24, 0x0C	; 12
     6c0:	90 e0       	ldi	r25, 0x00	; 0
     6c2:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <SPI_Write>
	SPI_Write(SAR + 4,mac_addr[4]);
     6c6:	68 85       	ldd	r22, Y+8	; 0x08
     6c8:	8d e0       	ldi	r24, 0x0D	; 13
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <SPI_Write>
	SPI_Write(SAR + 5,mac_addr[5]);
     6d0:	6a 85       	ldd	r22, Y+10	; 0x0a
     6d2:	8e e0       	ldi	r24, 0x0E	; 14
     6d4:	90 e0       	ldi	r25, 0x00	; 0
     6d6:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <SPI_Write>
     6da:	89 ef       	ldi	r24, 0xF9	; 249
     6dc:	90 e0       	ldi	r25, 0x00	; 0
     6de:	01 97       	sbiw	r24, 0x01	; 1
     6e0:	f1 f7       	brne	.-4      	; 0x6de <Ethernet_Init+0x192>
     6e2:	00 c0       	rjmp	.+0      	; 0x6e4 <Ethernet_Init+0x198>
     6e4:	00 00       	nop
	_delay_ms(1);
	printf("Reading SAR: %.2x:%.2x:%.2x:%.2x:%.2x:%.2x\n\n",SPI_Read(SAR + 0),SPI_Read(SAR + 1),\
	SPI_Read(SAR + 2),SPI_Read(SAR + 3),SPI_Read(SAR + 4),SPI_Read(SAR + 5));
     6e6:	8e e0       	ldi	r24, 0x0E	; 14
     6e8:	90 e0       	ldi	r25, 0x00	; 0
     6ea:	0e 94 f6 00 	call	0x1ec	; 0x1ec <SPI_Read>
     6ee:	b8 2e       	mov	r11, r24
     6f0:	8d e0       	ldi	r24, 0x0D	; 13
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	0e 94 f6 00 	call	0x1ec	; 0x1ec <SPI_Read>
     6f8:	08 2f       	mov	r16, r24
     6fa:	8c e0       	ldi	r24, 0x0C	; 12
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	0e 94 f6 00 	call	0x1ec	; 0x1ec <SPI_Read>
     702:	18 2f       	mov	r17, r24
     704:	8b e0       	ldi	r24, 0x0B	; 11
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	0e 94 f6 00 	call	0x1ec	; 0x1ec <SPI_Read>
     70c:	d8 2f       	mov	r29, r24
	SPI_Write(SAR + 2,mac_addr[2]);
	SPI_Write(SAR + 3,mac_addr[3]);
	SPI_Write(SAR + 4,mac_addr[4]);
	SPI_Write(SAR + 5,mac_addr[5]);
	_delay_ms(1);
	printf("Reading SAR: %.2x:%.2x:%.2x:%.2x:%.2x:%.2x\n\n",SPI_Read(SAR + 0),SPI_Read(SAR + 1),\
     70e:	8a e0       	ldi	r24, 0x0A	; 10
     710:	90 e0       	ldi	r25, 0x00	; 0
     712:	0e 94 f6 00 	call	0x1ec	; 0x1ec <SPI_Read>
     716:	c8 2f       	mov	r28, r24
     718:	89 e0       	ldi	r24, 0x09	; 9
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	0e 94 f6 00 	call	0x1ec	; 0x1ec <SPI_Read>
     720:	1f 92       	push	r1
     722:	bf 92       	push	r11
     724:	1f 92       	push	r1
     726:	0f 93       	push	r16
     728:	1f 92       	push	r1
     72a:	1f 93       	push	r17
     72c:	1f 92       	push	r1
     72e:	df 93       	push	r29
     730:	1f 92       	push	r1
     732:	cf 93       	push	r28
     734:	1f 92       	push	r1
     736:	8f 93       	push	r24
     738:	8b e0       	ldi	r24, 0x0B	; 11
     73a:	93 e0       	ldi	r25, 0x03	; 3
     73c:	9f 93       	push	r25
     73e:	8f 93       	push	r24
     740:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <printf>
	SPI_Read(SAR + 2),SPI_Read(SAR + 3),SPI_Read(SAR + 4),SPI_Read(SAR + 5));
	
	// Setting the Wiznet W5100 Sub Mask Address
	printf("Setting Sub Mask Address %d.%d.%d.%d\n",sub_mask[0],sub_mask[1],\
     744:	f6 01       	movw	r30, r12
     746:	83 81       	ldd	r24, Z+3	; 0x03
     748:	1f 92       	push	r1
     74a:	8f 93       	push	r24
     74c:	82 81       	ldd	r24, Z+2	; 0x02
     74e:	1f 92       	push	r1
     750:	8f 93       	push	r24
     752:	81 81       	ldd	r24, Z+1	; 0x01
     754:	1f 92       	push	r1
     756:	8f 93       	push	r24
     758:	80 81       	ld	r24, Z
     75a:	1f 92       	push	r1
     75c:	8f 93       	push	r24
     75e:	88 e3       	ldi	r24, 0x38	; 56
     760:	93 e0       	ldi	r25, 0x03	; 3
     762:	9f 93       	push	r25
     764:	8f 93       	push	r24
     766:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <printf>
	sub_mask[2],sub_mask[3]);
	SPI_Write(SUBR + 0,sub_mask[0]);
     76a:	f6 01       	movw	r30, r12
     76c:	60 81       	ld	r22, Z
     76e:	85 e0       	ldi	r24, 0x05	; 5
     770:	90 e0       	ldi	r25, 0x00	; 0
     772:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <SPI_Write>
	SPI_Write(SUBR + 1,sub_mask[1]);
     776:	f6 01       	movw	r30, r12
     778:	61 81       	ldd	r22, Z+1	; 0x01
     77a:	86 e0       	ldi	r24, 0x06	; 6
     77c:	90 e0       	ldi	r25, 0x00	; 0
     77e:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <SPI_Write>
	SPI_Write(SUBR + 2,sub_mask[2]);
     782:	f6 01       	movw	r30, r12
     784:	62 81       	ldd	r22, Z+2	; 0x02
     786:	87 e0       	ldi	r24, 0x07	; 7
     788:	90 e0       	ldi	r25, 0x00	; 0
     78a:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <SPI_Write>
	SPI_Write(SUBR + 3,sub_mask[3]);
     78e:	f6 01       	movw	r30, r12
     790:	63 81       	ldd	r22, Z+3	; 0x03
     792:	88 e0       	ldi	r24, 0x08	; 8
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <SPI_Write>
     79a:	89 ef       	ldi	r24, 0xF9	; 249
     79c:	90 e0       	ldi	r25, 0x00	; 0
     79e:	01 97       	sbiw	r24, 0x01	; 1
     7a0:	f1 f7       	brne	.-4      	; 0x79e <Ethernet_Init+0x252>
     7a2:	00 c0       	rjmp	.+0      	; 0x7a4 <Ethernet_Init+0x258>
     7a4:	00 00       	nop
	_delay_ms(1);
	printf("Reading SUBR: %d.%d.%d.%d\n\n",SPI_Read(SUBR + 0),SPI_Read(SUBR + 1),\
	SPI_Read(SUBR + 2),SPI_Read(SUBR + 3));
     7a6:	88 e0       	ldi	r24, 0x08	; 8
     7a8:	90 e0       	ldi	r25, 0x00	; 0
     7aa:	0e 94 f6 00 	call	0x1ec	; 0x1ec <SPI_Read>
     7ae:	18 2f       	mov	r17, r24
     7b0:	87 e0       	ldi	r24, 0x07	; 7
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	0e 94 f6 00 	call	0x1ec	; 0x1ec <SPI_Read>
     7b8:	d8 2f       	mov	r29, r24
	SPI_Write(SUBR + 0,sub_mask[0]);
	SPI_Write(SUBR + 1,sub_mask[1]);
	SPI_Write(SUBR + 2,sub_mask[2]);
	SPI_Write(SUBR + 3,sub_mask[3]);
	_delay_ms(1);
	printf("Reading SUBR: %d.%d.%d.%d\n\n",SPI_Read(SUBR + 0),SPI_Read(SUBR + 1),\
     7ba:	86 e0       	ldi	r24, 0x06	; 6
     7bc:	90 e0       	ldi	r25, 0x00	; 0
     7be:	0e 94 f6 00 	call	0x1ec	; 0x1ec <SPI_Read>
     7c2:	c8 2f       	mov	r28, r24
     7c4:	85 e0       	ldi	r24, 0x05	; 5
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	0e 94 f6 00 	call	0x1ec	; 0x1ec <SPI_Read>
     7cc:	1f 92       	push	r1
     7ce:	1f 93       	push	r17
     7d0:	1f 92       	push	r1
     7d2:	df 93       	push	r29
     7d4:	1f 92       	push	r1
     7d6:	cf 93       	push	r28
     7d8:	1f 92       	push	r1
     7da:	8f 93       	push	r24
     7dc:	8e e5       	ldi	r24, 0x5E	; 94
     7de:	93 e0       	ldi	r25, 0x03	; 3
     7e0:	9f 93       	push	r25
     7e2:	8f 93       	push	r24
     7e4:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <printf>
	SPI_Read(SUBR + 2),SPI_Read(SUBR + 3));
	
	// Setting the Wiznet W5100 IP Address (SIPR): 0x000F to 0x0012
	printf("Setting IP Address %d.%d.%d.%d\n",local_ip_addr[0],local_ip_addr[1],\
     7e8:	ed b7       	in	r30, 0x3d	; 61
     7ea:	fe b7       	in	r31, 0x3e	; 62
     7ec:	b2 96       	adiw	r30, 0x22	; 34
     7ee:	0f b6       	in	r0, 0x3f	; 63
     7f0:	f8 94       	cli
     7f2:	fe bf       	out	0x3e, r31	; 62
     7f4:	0f be       	out	0x3f, r0	; 63
     7f6:	ed bf       	out	0x3d, r30	; 61
     7f8:	f7 01       	movw	r30, r14
     7fa:	83 81       	ldd	r24, Z+3	; 0x03
     7fc:	1f 92       	push	r1
     7fe:	8f 93       	push	r24
     800:	82 81       	ldd	r24, Z+2	; 0x02
     802:	1f 92       	push	r1
     804:	8f 93       	push	r24
     806:	81 81       	ldd	r24, Z+1	; 0x01
     808:	1f 92       	push	r1
     80a:	8f 93       	push	r24
     80c:	80 81       	ld	r24, Z
     80e:	1f 92       	push	r1
     810:	8f 93       	push	r24
     812:	8a e7       	ldi	r24, 0x7A	; 122
     814:	93 e0       	ldi	r25, 0x03	; 3
     816:	9f 93       	push	r25
     818:	8f 93       	push	r24
     81a:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <printf>
	local_ip_addr[2],local_ip_addr[3]);
	SPI_Write(SIPR + 0,local_ip_addr[0]);
     81e:	f7 01       	movw	r30, r14
     820:	60 81       	ld	r22, Z
     822:	8f e0       	ldi	r24, 0x0F	; 15
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <SPI_Write>
	SPI_Write(SIPR + 1,local_ip_addr[1]);
     82a:	f7 01       	movw	r30, r14
     82c:	61 81       	ldd	r22, Z+1	; 0x01
     82e:	80 e1       	ldi	r24, 0x10	; 16
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <SPI_Write>
	SPI_Write(SIPR + 2,local_ip_addr[2]);
     836:	f7 01       	movw	r30, r14
     838:	62 81       	ldd	r22, Z+2	; 0x02
     83a:	81 e1       	ldi	r24, 0x11	; 17
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <SPI_Write>
	SPI_Write(SIPR + 3,local_ip_addr[3]);
     842:	f7 01       	movw	r30, r14
     844:	63 81       	ldd	r22, Z+3	; 0x03
     846:	82 e1       	ldi	r24, 0x12	; 18
     848:	90 e0       	ldi	r25, 0x00	; 0
     84a:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <SPI_Write>
     84e:	89 ef       	ldi	r24, 0xF9	; 249
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	01 97       	sbiw	r24, 0x01	; 1
     854:	f1 f7       	brne	.-4      	; 0x852 <Ethernet_Init+0x306>
     856:	00 c0       	rjmp	.+0      	; 0x858 <Ethernet_Init+0x30c>
     858:	00 00       	nop
	_delay_ms(1);
	
	printf("Reading SIPR: %d.%d.%d.%d\n\n",SPI_Read(SIPR + 0),SPI_Read(SIPR + 1),\
	SPI_Read(SIPR + 2),SPI_Read(SIPR + 3));
     85a:	82 e1       	ldi	r24, 0x12	; 18
     85c:	90 e0       	ldi	r25, 0x00	; 0
     85e:	0e 94 f6 00 	call	0x1ec	; 0x1ec <SPI_Read>
     862:	18 2f       	mov	r17, r24
     864:	81 e1       	ldi	r24, 0x11	; 17
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	0e 94 f6 00 	call	0x1ec	; 0x1ec <SPI_Read>
     86c:	d8 2f       	mov	r29, r24
	SPI_Write(SIPR + 1,local_ip_addr[1]);
	SPI_Write(SIPR + 2,local_ip_addr[2]);
	SPI_Write(SIPR + 3,local_ip_addr[3]);
	_delay_ms(1);
	
	printf("Reading SIPR: %d.%d.%d.%d\n\n",SPI_Read(SIPR + 0),SPI_Read(SIPR + 1),\
     86e:	80 e1       	ldi	r24, 0x10	; 16
     870:	90 e0       	ldi	r25, 0x00	; 0
     872:	0e 94 f6 00 	call	0x1ec	; 0x1ec <SPI_Read>
     876:	c8 2f       	mov	r28, r24
     878:	8f e0       	ldi	r24, 0x0F	; 15
     87a:	90 e0       	ldi	r25, 0x00	; 0
     87c:	0e 94 f6 00 	call	0x1ec	; 0x1ec <SPI_Read>
     880:	1f 92       	push	r1
     882:	1f 93       	push	r17
     884:	1f 92       	push	r1
     886:	df 93       	push	r29
     888:	1f 92       	push	r1
     88a:	cf 93       	push	r28
     88c:	1f 92       	push	r1
     88e:	8f 93       	push	r24
     890:	8a e9       	ldi	r24, 0x9A	; 154
     892:	93 e0       	ldi	r25, 0x03	; 3
     894:	9f 93       	push	r25
     896:	8f 93       	push	r24
     898:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <printf>
	SPI_Read(SIPR + 2),SPI_Read(SIPR + 3));
	printf("Done Wiznet W5100 Initialized!\n");
     89c:	86 eb       	ldi	r24, 0xB6	; 182
     89e:	93 e0       	ldi	r25, 0x03	; 3
     8a0:	0e 94 8f 08 	call	0x111e	; 0x111e <puts>
	Memory_Init(); 
     8a4:	0e 94 85 02 	call	0x50a	; 0x50a <Memory_Init>
     8a8:	ed b7       	in	r30, 0x3d	; 61
     8aa:	fe b7       	in	r31, 0x3e	; 62
     8ac:	74 96       	adiw	r30, 0x14	; 20
     8ae:	0f b6       	in	r0, 0x3f	; 63
     8b0:	f8 94       	cli
     8b2:	fe bf       	out	0x3e, r31	; 62
     8b4:	0f be       	out	0x3f, r0	; 63
     8b6:	ed bf       	out	0x3d, r30	; 61
}
     8b8:	df 91       	pop	r29
     8ba:	cf 91       	pop	r28
     8bc:	1f 91       	pop	r17
     8be:	0f 91       	pop	r16
     8c0:	ff 90       	pop	r15
     8c2:	ef 90       	pop	r14
     8c4:	df 90       	pop	r13
     8c6:	cf 90       	pop	r12
     8c8:	bf 90       	pop	r11
     8ca:	08 95       	ret

000008cc <ReceiveSize>:

	return 1;
}

uint16_t ReceiveSize(void)
{
     8cc:	cf 93       	push	r28
	return ((SPI_Read(S0_RX_RSR) & 0x00FF) << 8 ) + SPI_Read(S0_RX_RSR + 1);
     8ce:	86 e2       	ldi	r24, 0x26	; 38
     8d0:	94 e0       	ldi	r25, 0x04	; 4
     8d2:	0e 94 f6 00 	call	0x1ec	; 0x1ec <SPI_Read>
     8d6:	c8 2f       	mov	r28, r24
     8d8:	87 e2       	ldi	r24, 0x27	; 39
     8da:	94 e0       	ldi	r25, 0x04	; 4
     8dc:	0e 94 f6 00 	call	0x1ec	; 0x1ec <SPI_Read>
     8e0:	2c 2f       	mov	r18, r28
     8e2:	30 e0       	ldi	r19, 0x00	; 0
     8e4:	32 2f       	mov	r19, r18
     8e6:	22 27       	eor	r18, r18
}
     8e8:	a9 01       	movw	r20, r18
     8ea:	48 0f       	add	r20, r24
     8ec:	51 1d       	adc	r21, r1
     8ee:	ca 01       	movw	r24, r20
     8f0:	cf 91       	pop	r28
     8f2:	08 95       	ret

000008f4 <SocketCommand>:

void SocketCommand(uint8_t command) 
{
	SPI_Write(S0_CR, command);
     8f4:	68 2f       	mov	r22, r24
     8f6:	81 e0       	ldi	r24, 0x01	; 1
     8f8:	94 e0       	ldi	r25, 0x04	; 4
     8fa:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <SPI_Write>
     8fe:	08 95       	ret

00000900 <SendData>:
	//S0_RX_MASK = 0x1FFF;
	//S0_RX_BASE = 0x6000;
}

int SendData(const uint8_t *buffer,uint16_t bufferLength)
{
     900:	6f 92       	push	r6
     902:	7f 92       	push	r7
     904:	8f 92       	push	r8
     906:	9f 92       	push	r9
     908:	af 92       	push	r10
     90a:	bf 92       	push	r11
     90c:	cf 92       	push	r12
     90e:	df 92       	push	r13
     910:	ef 92       	push	r14
     912:	ff 92       	push	r15
     914:	0f 93       	push	r16
     916:	1f 93       	push	r17
     918:	cf 93       	push	r28
     91a:	df 93       	push	r29
     91c:	6c 01       	movw	r12, r24
     91e:	7b 01       	movw	r14, r22
	uint16_t ptr,offaddr,realaddr,txsize,timeout;
	
	//#if _DEBUG_MODE
	printf("Send Size: %d\n",bufferLength);
     920:	ff 92       	push	r15
     922:	6f 93       	push	r22
     924:	85 ed       	ldi	r24, 0xD5	; 213
     926:	93 e0       	ldi	r25, 0x03	; 3
     928:	9f 93       	push	r25
     92a:	8f 93       	push	r24
     92c:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <printf>
	//#endif
	// Make sure the TX Free Size Register is available
	txsize = SPI_Read(S0_TX_FSR);
     930:	80 e2       	ldi	r24, 0x20	; 32
     932:	94 e0       	ldi	r25, 0x04	; 4
     934:	0e 94 f6 00 	call	0x1ec	; 0x1ec <SPI_Read>
     938:	c8 2f       	mov	r28, r24
     93a:	d0 e0       	ldi	r29, 0x00	; 0
	txsize = (((txsize & 0x00FF) << 8 ) + SPI_Read(S0_TX_FSR + 1));
     93c:	dc 2f       	mov	r29, r28
     93e:	cc 27       	eor	r28, r28
     940:	81 e2       	ldi	r24, 0x21	; 33
     942:	94 e0       	ldi	r25, 0x04	; 4
     944:	0e 94 f6 00 	call	0x1ec	; 0x1ec <SPI_Read>
     948:	c8 0f       	add	r28, r24
     94a:	d1 1d       	adc	r29, r1
	//#if _DEBUG_MODE
	printf("TX Free Size: %d\n",txsize);
     94c:	df 93       	push	r29
     94e:	cf 93       	push	r28
     950:	84 ee       	ldi	r24, 0xE4	; 228
     952:	93 e0       	ldi	r25, 0x03	; 3
     954:	9f 93       	push	r25
     956:	8f 93       	push	r24
     958:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <printf>
	//#endif
	timeout = 0;
	//Writing our buffer to the transmit buffer
	while (txsize < bufferLength) {
     95c:	8d b7       	in	r24, 0x3d	; 61
     95e:	9e b7       	in	r25, 0x3e	; 62
     960:	08 96       	adiw	r24, 0x08	; 8
     962:	0f b6       	in	r0, 0x3f	; 63
     964:	f8 94       	cli
     966:	9e bf       	out	0x3e, r25	; 62
     968:	0f be       	out	0x3f, r0	; 63
     96a:	8d bf       	out	0x3d, r24	; 61
     96c:	ce 15       	cp	r28, r14
     96e:	df 05       	cpc	r29, r15
     970:	08 f4       	brcc	.+2      	; 0x974 <SendData+0x74>
     972:	2c c1       	rjmp	.+600    	; 0xbcc <SendData+0x2cc>
     974:	35 c0       	rjmp	.+106    	; 0x9e0 <SendData+0xe0>
     976:	e9 ef       	ldi	r30, 0xF9	; 249
     978:	f0 e0       	ldi	r31, 0x00	; 0
     97a:	31 97       	sbiw	r30, 0x01	; 1
     97c:	f1 f7       	brne	.-4      	; 0x97a <SendData+0x7a>
     97e:	00 c0       	rjmp	.+0      	; 0x980 <SendData+0x80>
     980:	00 00       	nop
		_delay_ms(1);
		txsize = SPI_Read(S0_TX_FSR);
     982:	80 e2       	ldi	r24, 0x20	; 32
     984:	94 e0       	ldi	r25, 0x04	; 4
     986:	0e 94 f6 00 	call	0x1ec	; 0x1ec <SPI_Read>
     98a:	c8 2f       	mov	r28, r24
     98c:	d0 e0       	ldi	r29, 0x00	; 0
		txsize = (((txsize & 0x00FF) << 8 ) + SPI_Read(S0_TX_FSR + 1));
     98e:	dc 2f       	mov	r29, r28
     990:	cc 27       	eor	r28, r28
     992:	81 e2       	ldi	r24, 0x21	; 33
     994:	94 e0       	ldi	r25, 0x04	; 4
     996:	0e 94 f6 00 	call	0x1ec	; 0x1ec <SPI_Read>
     99a:	c8 0f       	add	r28, r24
     99c:	d1 1d       	adc	r29, r1
		printf("TX Size: %d", txsize);
     99e:	df 93       	push	r29
     9a0:	cf 93       	push	r28
     9a2:	1f 93       	push	r17
     9a4:	0f 93       	push	r16
     9a6:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <printf>
     9aa:	31 e0       	ldi	r19, 0x01	; 1
     9ac:	83 1a       	sub	r8, r19
     9ae:	91 08       	sbc	r9, r1
		// Timeout for approx 1000 ms
		if (timeout++ > 1000) {
     9b0:	0f 90       	pop	r0
     9b2:	0f 90       	pop	r0
     9b4:	0f 90       	pop	r0
     9b6:	0f 90       	pop	r0
     9b8:	81 14       	cp	r8, r1
     9ba:	91 04       	cpc	r9, r1
     9bc:	71 f4       	brne	.+28     	; 0x9da <SendData+0xda>
			//#if _DEBUG_MODE
			printf("TX Free Size Error!\n");
     9be:	82 e0       	ldi	r24, 0x02	; 2
     9c0:	94 e0       	ldi	r25, 0x04	; 4
     9c2:	0e 94 8f 08 	call	0x111e	; 0x111e <puts>
			//#endif
			// Disconnect the connection
			SocketCommand(DISCON);
     9c6:	88 e0       	ldi	r24, 0x08	; 8
     9c8:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <SocketCommand>
			while(SPI_Read(S0_CR));
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	94 e0       	ldi	r25, 0x04	; 4
     9d0:	0e 94 f6 00 	call	0x1ec	; 0x1ec <SPI_Read>
     9d4:	81 11       	cpse	r24, r1
     9d6:	fa cf       	rjmp	.-12     	; 0x9cc <SendData+0xcc>
     9d8:	f3 c0       	rjmp	.+486    	; 0xbc0 <SendData+0x2c0>
	//#if _DEBUG_MODE
	printf("TX Free Size: %d\n",txsize);
	//#endif
	timeout = 0;
	//Writing our buffer to the transmit buffer
	while (txsize < bufferLength) {
     9da:	ce 15       	cp	r28, r14
     9dc:	df 05       	cpc	r29, r15
     9de:	58 f2       	brcs	.-106    	; 0x976 <SendData+0x76>
			return 0;
		}
	}

	// Read the Tx Write Pointer
	ptr = SPI_Read(S0_TX_WR);
     9e0:	84 e2       	ldi	r24, 0x24	; 36
     9e2:	94 e0       	ldi	r25, 0x04	; 4
     9e4:	0e 94 f6 00 	call	0x1ec	; 0x1ec <SPI_Read>
     9e8:	08 2f       	mov	r16, r24
	offaddr = (((ptr & 0x00FF) << 8 ) + SPI_Read(S0_TX_WR + 1));
     9ea:	85 e2       	ldi	r24, 0x25	; 37
     9ec:	94 e0       	ldi	r25, 0x04	; 4
     9ee:	0e 94 f6 00 	call	0x1ec	; 0x1ec <SPI_Read>
			return 0;
		}
	}

	// Read the Tx Write Pointer
	ptr = SPI_Read(S0_TX_WR);
     9f2:	10 e0       	ldi	r17, 0x00	; 0
	offaddr = (((ptr & 0x00FF) << 8 ) + SPI_Read(S0_TX_WR + 1));
     9f4:	10 2f       	mov	r17, r16
     9f6:	00 27       	eor	r16, r16
     9f8:	08 0f       	add	r16, r24
     9fa:	11 1d       	adc	r17, r1
	unsigned int startaddr = (((SPI_Read(S0_TX_RR) << 8) + SPI_Read(S0_TX_RR + 1)));
     9fc:	82 e2       	ldi	r24, 0x22	; 34
     9fe:	94 e0       	ldi	r25, 0x04	; 4
     a00:	0e 94 f6 00 	call	0x1ec	; 0x1ec <SPI_Read>
     a04:	68 2e       	mov	r6, r24
     a06:	83 e2       	ldi	r24, 0x23	; 35
     a08:	94 e0       	ldi	r25, 0x04	; 4
     a0a:	0e 94 f6 00 	call	0x1ec	; 0x1ec <SPI_Read>
     a0e:	78 2e       	mov	r7, r24
	//#if _DEBUG_MODE
	printf("TX Buffer: %x\n",offaddr);
     a10:	1f 93       	push	r17
     a12:	0f 93       	push	r16
     a14:	86 e1       	ldi	r24, 0x16	; 22
     a16:	94 e0       	ldi	r25, 0x04	; 4
     a18:	9f 93       	push	r25
     a1a:	8f 93       	push	r24
     a1c:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <printf>
	unsigned int realWR = S0_TX_BASE + (offaddr & S0_TX_MASK);
     a20:	80 90 b8 05 	lds	r8, 0x05B8
     a24:	90 90 b9 05 	lds	r9, 0x05B9
     a28:	c0 91 ba 05 	lds	r28, 0x05BA
     a2c:	d0 91 bb 05 	lds	r29, 0x05BB
     a30:	98 01       	movw	r18, r16
     a32:	28 21       	and	r18, r8
     a34:	39 21       	and	r19, r9
     a36:	2c 0f       	add	r18, r28
     a38:	3d 1f       	adc	r19, r29
	unsigned int realRR = S0_TX_BASE + (startaddr & S0_TX_MASK);
	printf("Real WR: %d\n", realWR);
     a3a:	3f 93       	push	r19
     a3c:	2f 93       	push	r18
     a3e:	25 e2       	ldi	r18, 0x25	; 37
     a40:	34 e0       	ldi	r19, 0x04	; 4
     a42:	3f 93       	push	r19
     a44:	2f 93       	push	r18
     a46:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <printf>
	}

	// Read the Tx Write Pointer
	ptr = SPI_Read(S0_TX_WR);
	offaddr = (((ptr & 0x00FF) << 8 ) + SPI_Read(S0_TX_WR + 1));
	unsigned int startaddr = (((SPI_Read(S0_TX_RR) << 8) + SPI_Read(S0_TX_RR + 1)));
     a4a:	86 2d       	mov	r24, r6
     a4c:	90 e0       	ldi	r25, 0x00	; 0
     a4e:	98 2f       	mov	r25, r24
     a50:	88 27       	eor	r24, r24
     a52:	fc 01       	movw	r30, r24
     a54:	e7 0d       	add	r30, r7
     a56:	f1 1d       	adc	r31, r1
	//#if _DEBUG_MODE
	printf("TX Buffer: %x\n",offaddr);
	unsigned int realWR = S0_TX_BASE + (offaddr & S0_TX_MASK);
	unsigned int realRR = S0_TX_BASE + (startaddr & S0_TX_MASK);
     a58:	8e 22       	and	r8, r30
     a5a:	9f 22       	and	r9, r31
     a5c:	c8 0d       	add	r28, r8
     a5e:	d9 1d       	adc	r29, r9
	printf("Real WR: %d\n", realWR);
	printf("Real RR: %d\n", realRR); 
     a60:	df 93       	push	r29
     a62:	cf 93       	push	r28
     a64:	82 e3       	ldi	r24, 0x32	; 50
     a66:	94 e0       	ldi	r25, 0x04	; 4
     a68:	9f 93       	push	r25
     a6a:	8f 93       	push	r24
     a6c:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <printf>
	//#endif
	unsigned int bufferLTemp = bufferLength;
	unsigned int bufferTemp = buffer; 
	unsigned int offaddrTemp = offaddr;  
	
	while(bufferLength) {
     a70:	8d b7       	in	r24, 0x3d	; 61
     a72:	9e b7       	in	r25, 0x3e	; 62
     a74:	0c 96       	adiw	r24, 0x0c	; 12
     a76:	0f b6       	in	r0, 0x3f	; 63
     a78:	f8 94       	cli
     a7a:	9e bf       	out	0x3e, r25	; 62
     a7c:	0f be       	out	0x3f, r0	; 63
     a7e:	8d bf       	out	0x3d, r24	; 61
     a80:	e1 14       	cp	r14, r1
     a82:	f1 04       	cpc	r15, r1
     a84:	e1 f0       	breq	.+56     	; 0xabe <SendData+0x1be>
		}
	}

	// Read the Tx Write Pointer
	ptr = SPI_Read(S0_TX_WR);
	offaddr = (((ptr & 0x00FF) << 8 ) + SPI_Read(S0_TX_WR + 1));
     a86:	48 01       	movw	r8, r16
	//#endif
	unsigned int bufferLTemp = bufferLength;
	unsigned int bufferTemp = buffer; 
	unsigned int offaddrTemp = offaddr;  
	
	while(bufferLength) {
     a88:	e7 01       	movw	r28, r14
		bufferLength--;
     a8a:	21 97       	sbiw	r28, 0x01	; 1
		// Calculate the real W5100 physical Tx Buffer Address
		realaddr = S0_TX_BASE + (offaddr & S0_TX_MASK);
     a8c:	a0 90 b8 05 	lds	r10, 0x05B8
     a90:	b0 90 b9 05 	lds	r11, 0x05B9
     a94:	a8 20       	and	r10, r8
     a96:	b9 20       	and	r11, r9
     a98:	80 91 ba 05 	lds	r24, 0x05BA
     a9c:	90 91 bb 05 	lds	r25, 0x05BB
     aa0:	a8 0e       	add	r10, r24
     aa2:	b9 1e       	adc	r11, r25
		//printf("TX Real Address: %d\n", realaddr);
		// Copy the application data to the W5100 Tx Buffer
		SPI_Write(realaddr,*buffer);
     aa4:	f6 01       	movw	r30, r12
     aa6:	61 91       	ld	r22, Z+
     aa8:	6f 01       	movw	r12, r30
     aaa:	c5 01       	movw	r24, r10
     aac:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <SPI_Write>
		offaddr++;
     ab0:	ff ef       	ldi	r31, 0xFF	; 255
     ab2:	8f 1a       	sub	r8, r31
     ab4:	9f 0a       	sbc	r9, r31
	//#endif
	unsigned int bufferLTemp = bufferLength;
	unsigned int bufferTemp = buffer; 
	unsigned int offaddrTemp = offaddr;  
	
	while(bufferLength) {
     ab6:	20 97       	sbiw	r28, 0x00	; 0
     ab8:	41 f7       	brne	.-48     	; 0xa8a <SendData+0x18a>
     aba:	0e 0d       	add	r16, r14
     abc:	1f 1d       	adc	r17, r15
		// Copy the application data to the W5100 Tx Buffer
		SPI_Write(realaddr,*buffer);
		offaddr++;
		buffer++;
	}
		SPI_Write(realaddr + 1, 0x00);
     abe:	60 e0       	ldi	r22, 0x00	; 0
     ac0:	c5 01       	movw	r24, r10
     ac2:	01 96       	adiw	r24, 0x01	; 1
     ac4:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <SPI_Write>

	// Increase the S0_TX_WR value, so it point to the next transmit
	printf("Offset After: %d\n", offaddr);
     ac8:	1f 93       	push	r17
     aca:	0f 93       	push	r16
     acc:	8f e3       	ldi	r24, 0x3F	; 63
     ace:	94 e0       	ldi	r25, 0x04	; 4
     ad0:	9f 93       	push	r25
     ad2:	8f 93       	push	r24
     ad4:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <printf>
	ptr = SPI_Read(S0_TX_WR);
     ad8:	84 e2       	ldi	r24, 0x24	; 36
     ada:	94 e0       	ldi	r25, 0x04	; 4
     adc:	0e 94 f6 00 	call	0x1ec	; 0x1ec <SPI_Read>
	printf("WR Low: %d\n", SPI_Read(S0_TX_WR)); 
     ae0:	84 e2       	ldi	r24, 0x24	; 36
     ae2:	94 e0       	ldi	r25, 0x04	; 4
     ae4:	0e 94 f6 00 	call	0x1ec	; 0x1ec <SPI_Read>
     ae8:	1f 92       	push	r1
     aea:	8f 93       	push	r24
     aec:	0f 2e       	mov	r0, r31
     aee:	f1 e5       	ldi	r31, 0x51	; 81
     af0:	cf 2e       	mov	r12, r31
     af2:	f4 e0       	ldi	r31, 0x04	; 4
     af4:	df 2e       	mov	r13, r31
     af6:	f0 2d       	mov	r31, r0
     af8:	df 92       	push	r13
     afa:	cf 92       	push	r12
     afc:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <printf>
	printf("WR High: %d\n", SPI_Read(S0_TX_WR + 1)); 
     b00:	85 e2       	ldi	r24, 0x25	; 37
     b02:	94 e0       	ldi	r25, 0x04	; 4
     b04:	0e 94 f6 00 	call	0x1ec	; 0x1ec <SPI_Read>
     b08:	1f 92       	push	r1
     b0a:	8f 93       	push	r24
     b0c:	0f 2e       	mov	r0, r31
     b0e:	fd e5       	ldi	r31, 0x5D	; 93
     b10:	ef 2e       	mov	r14, r31
     b12:	f4 e0       	ldi	r31, 0x04	; 4
     b14:	ff 2e       	mov	r15, r31
     b16:	f0 2d       	mov	r31, r0
     b18:	ff 92       	push	r15
     b1a:	ef 92       	push	r14
     b1c:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <printf>
	//offaddr = (((ptr & 0x00FF) << 8 ) + SPI_Read(S0_TX_WR + 1));
	//realWR = S0_TX_BASE + (offaddr & S0_TX_MASK);
	//printf("Real WR: %d\n", realWR);
	printf("%d\n", (offaddr & 0xFF00) >> 8);
     b20:	1f 92       	push	r1
     b22:	1f 93       	push	r17
     b24:	cb e3       	ldi	r28, 0x3B	; 59
     b26:	d4 e0       	ldi	r29, 0x04	; 4
     b28:	df 93       	push	r29
     b2a:	cf 93       	push	r28
     b2c:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <printf>
	printf("%d\n", (offaddr & 0x00FF));
     b30:	58 01       	movw	r10, r16
     b32:	bb 24       	eor	r11, r11
     b34:	bf 92       	push	r11
     b36:	af 92       	push	r10
     b38:	df 93       	push	r29
     b3a:	cf 93       	push	r28
     b3c:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <printf>
	//SPI_Write(S0_TX_WR,(offaddr & 0xFF00) >> 8 );
	SPI_Write(S0_TX_WR, 0xFF);
     b40:	6f ef       	ldi	r22, 0xFF	; 255
     b42:	84 e2       	ldi	r24, 0x24	; 36
     b44:	94 e0       	ldi	r25, 0x04	; 4
     b46:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <SPI_Write>
	SPI_Write(S0_TX_WR + 1,(offaddr & 0x00FF));
     b4a:	60 2f       	mov	r22, r16
     b4c:	85 e2       	ldi	r24, 0x25	; 37
     b4e:	94 e0       	ldi	r25, 0x04	; 4
     b50:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <SPI_Write>
	printf("%d\n", (offaddr & 0xFF00) >> 8);
     b54:	1f 92       	push	r1
     b56:	1f 93       	push	r17
     b58:	df 93       	push	r29
     b5a:	cf 93       	push	r28
     b5c:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <printf>
	printf("%d\n", (offaddr & 0x00FF));
     b60:	bf 92       	push	r11
     b62:	af 92       	push	r10
     b64:	df 93       	push	r29
     b66:	cf 93       	push	r28
     b68:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <printf>
	//ptr = SPI_Read(S0_TX_WR);
	
	//Debug 
	printf("WR Low: %d\n", SPI_Read(S0_TX_WR));
     b6c:	84 e2       	ldi	r24, 0x24	; 36
     b6e:	94 e0       	ldi	r25, 0x04	; 4
     b70:	0e 94 f6 00 	call	0x1ec	; 0x1ec <SPI_Read>
     b74:	1f 92       	push	r1
     b76:	8f 93       	push	r24
     b78:	df 92       	push	r13
     b7a:	cf 92       	push	r12
     b7c:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <printf>
	printf("WR High: %d\n", SPI_Read(S0_TX_WR + 1));
     b80:	8d b7       	in	r24, 0x3d	; 61
     b82:	9e b7       	in	r25, 0x3e	; 62
     b84:	80 96       	adiw	r24, 0x20	; 32
     b86:	0f b6       	in	r0, 0x3f	; 63
     b88:	f8 94       	cli
     b8a:	9e bf       	out	0x3e, r25	; 62
     b8c:	0f be       	out	0x3f, r0	; 63
     b8e:	8d bf       	out	0x3d, r24	; 61
     b90:	85 e2       	ldi	r24, 0x25	; 37
     b92:	94 e0       	ldi	r25, 0x04	; 4
     b94:	0e 94 f6 00 	call	0x1ec	; 0x1ec <SPI_Read>
     b98:	1f 92       	push	r1
     b9a:	8f 93       	push	r24
     b9c:	ff 92       	push	r15
     b9e:	ef 92       	push	r14
     ba0:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <printf>
	//realRR = S0_TX_BASE + (startaddr & S0_TX_MASK);
	//printf("Real WR: %d\n", realWR);
	//printf("Real RR: %d\n", realRR);
	
	// Now Send the SEND command
	SocketCommand(SEND);
     ba4:	80 e2       	ldi	r24, 0x20	; 32
     ba6:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <SocketCommand>
	//printf("WR Low: %d\n", SPI_Read(S0_TX_WR));
	//printf("WR High: %d\n", SPI_Read(S0_TX_WR + 1));
	// Wait for Sending Process
	while(SPI_Read(S0_CR));
     baa:	0f 90       	pop	r0
     bac:	0f 90       	pop	r0
     bae:	0f 90       	pop	r0
     bb0:	0f 90       	pop	r0
     bb2:	81 e0       	ldi	r24, 0x01	; 1
     bb4:	94 e0       	ldi	r25, 0x04	; 4
     bb6:	0e 94 f6 00 	call	0x1ec	; 0x1ec <SPI_Read>
     bba:	81 11       	cpse	r24, r1
     bbc:	fa cf       	rjmp	.-12     	; 0xbb2 <SendData+0x2b2>
     bbe:	03 c0       	rjmp	.+6      	; 0xbc6 <SendData+0x2c6>
			printf("TX Free Size Error!\n");
			//#endif
			// Disconnect the connection
			SocketCommand(DISCON);
			while(SPI_Read(S0_CR));
			return 0;
     bc0:	80 e0       	ldi	r24, 0x00	; 0
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	2c c0       	rjmp	.+88     	; 0xc1e <SendData+0x31e>
	//printf("WR Low: %d\n", SPI_Read(S0_TX_WR));
	//printf("WR High: %d\n", SPI_Read(S0_TX_WR + 1));
	// Wait for Sending Process
	while(SPI_Read(S0_CR));

	return 1;
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	29 c0       	rjmp	.+82     	; 0xc1e <SendData+0x31e>
     bcc:	e9 ef       	ldi	r30, 0xF9	; 249
     bce:	f0 e0       	ldi	r31, 0x00	; 0
     bd0:	31 97       	sbiw	r30, 0x01	; 1
     bd2:	f1 f7       	brne	.-4      	; 0xbd0 <SendData+0x2d0>
     bd4:	00 c0       	rjmp	.+0      	; 0xbd6 <SendData+0x2d6>
     bd6:	00 00       	nop
	//#endif
	timeout = 0;
	//Writing our buffer to the transmit buffer
	while (txsize < bufferLength) {
		_delay_ms(1);
		txsize = SPI_Read(S0_TX_FSR);
     bd8:	80 e2       	ldi	r24, 0x20	; 32
     bda:	94 e0       	ldi	r25, 0x04	; 4
     bdc:	0e 94 f6 00 	call	0x1ec	; 0x1ec <SPI_Read>
     be0:	c8 2f       	mov	r28, r24
     be2:	d0 e0       	ldi	r29, 0x00	; 0
		txsize = (((txsize & 0x00FF) << 8 ) + SPI_Read(S0_TX_FSR + 1));
     be4:	dc 2f       	mov	r29, r28
     be6:	cc 27       	eor	r28, r28
     be8:	81 e2       	ldi	r24, 0x21	; 33
     bea:	94 e0       	ldi	r25, 0x04	; 4
     bec:	0e 94 f6 00 	call	0x1ec	; 0x1ec <SPI_Read>
     bf0:	c8 0f       	add	r28, r24
     bf2:	d1 1d       	adc	r29, r1
		printf("TX Size: %d", txsize);
     bf4:	df 93       	push	r29
     bf6:	cf 93       	push	r28
     bf8:	86 ef       	ldi	r24, 0xF6	; 246
     bfa:	93 e0       	ldi	r25, 0x03	; 3
     bfc:	9f 93       	push	r25
     bfe:	8f 93       	push	r24
     c00:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <printf>
     c04:	0f 90       	pop	r0
     c06:	0f 90       	pop	r0
     c08:	0f 90       	pop	r0
     c0a:	0f 90       	pop	r0
     c0c:	0f 2e       	mov	r0, r31
     c0e:	f9 ee       	ldi	r31, 0xE9	; 233
     c10:	8f 2e       	mov	r8, r31
     c12:	f3 e0       	ldi	r31, 0x03	; 3
     c14:	9f 2e       	mov	r9, r31
     c16:	f0 2d       	mov	r31, r0
     c18:	06 ef       	ldi	r16, 0xF6	; 246
     c1a:	13 e0       	ldi	r17, 0x03	; 3
     c1c:	de ce       	rjmp	.-580    	; 0x9da <SendData+0xda>
	//printf("WR High: %d\n", SPI_Read(S0_TX_WR + 1));
	// Wait for Sending Process
	while(SPI_Read(S0_CR));

	return 1;
}
     c1e:	df 91       	pop	r29
     c20:	cf 91       	pop	r28
     c22:	1f 91       	pop	r17
     c24:	0f 91       	pop	r16
     c26:	ff 90       	pop	r15
     c28:	ef 90       	pop	r14
     c2a:	df 90       	pop	r13
     c2c:	cf 90       	pop	r12
     c2e:	bf 90       	pop	r11
     c30:	af 90       	pop	r10
     c32:	9f 90       	pop	r9
     c34:	8f 90       	pop	r8
     c36:	7f 90       	pop	r7
     c38:	6f 90       	pop	r6
     c3a:	08 95       	ret

00000c3c <ReceiveData>:

int ReceiveData(uint8_t *buffer,uint16_t bufferLength)
{
     c3c:	8f 92       	push	r8
     c3e:	9f 92       	push	r9
     c40:	af 92       	push	r10
     c42:	bf 92       	push	r11
     c44:	cf 92       	push	r12
     c46:	df 92       	push	r13
     c48:	ef 92       	push	r14
     c4a:	ff 92       	push	r15
     c4c:	0f 93       	push	r16
     c4e:	1f 93       	push	r17
     c50:	cf 93       	push	r28
     c52:	df 93       	push	r29
     c54:	5c 01       	movw	r10, r24
     c56:	6b 01       	movw	r12, r22
	uint16_t ptr,offaddr,realaddr;

	// If the request size > MAX_BUF,just truncate it
	if (bufferLength > MAX_BUFF)
     c58:	61 30       	cpi	r22, 0x01	; 1
     c5a:	82 e0       	ldi	r24, 0x02	; 2
     c5c:	78 07       	cpc	r23, r24
     c5e:	d0 f5       	brcc	.+116    	; 0xcd4 <ReceiveData+0x98>
	bufferLength = MAX_BUFF - 2;
	// Read the Rx Read Pointer
	ptr = SPI_Read(S0_RX_RD);
     c60:	88 e2       	ldi	r24, 0x28	; 40
     c62:	94 e0       	ldi	r25, 0x04	; 4
     c64:	0e 94 f6 00 	call	0x1ec	; 0x1ec <SPI_Read>
     c68:	e8 2e       	mov	r14, r24
	//printf("RX Read Pointer: %d\n", ptr);
	offaddr = (((ptr & 0x00FF) << 8 ) + SPI_Read(S0_RX_RD + 1));
     c6a:	89 e2       	ldi	r24, 0x29	; 41
     c6c:	94 e0       	ldi	r25, 0x04	; 4
     c6e:	0e 94 f6 00 	call	0x1ec	; 0x1ec <SPI_Read>

	// If the request size > MAX_BUF,just truncate it
	if (bufferLength > MAX_BUFF)
	bufferLength = MAX_BUFF - 2;
	// Read the Rx Read Pointer
	ptr = SPI_Read(S0_RX_RD);
     c72:	f1 2c       	mov	r15, r1
	//printf("RX Read Pointer: %d\n", ptr);
	offaddr = (((ptr & 0x00FF) << 8 ) + SPI_Read(S0_RX_RD + 1));
     c74:	fe 2c       	mov	r15, r14
     c76:	ee 24       	eor	r14, r14
     c78:	e8 0e       	add	r14, r24
     c7a:	f1 1c       	adc	r15, r1
	//#if _DEBUG_MODE
	printf("RX Buffer: %x\n",offaddr);
     c7c:	ff 92       	push	r15
     c7e:	ef 92       	push	r14
     c80:	8a e6       	ldi	r24, 0x6A	; 106
     c82:	94 e0       	ldi	r25, 0x04	; 4
     c84:	9f 93       	push	r25
     c86:	8f 93       	push	r24
     c88:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <printf>
	//#endif

	while(bufferLength) {
     c8c:	0f 90       	pop	r0
     c8e:	0f 90       	pop	r0
     c90:	0f 90       	pop	r0
     c92:	0f 90       	pop	r0
     c94:	c1 14       	cp	r12, r1
     c96:	d1 04       	cpc	r13, r1
     c98:	e9 f5       	brne	.+122    	; 0xd14 <ReceiveData+0xd8>
     c9a:	40 c0       	rjmp	.+128    	; 0xd1c <ReceiveData+0xe0>
		bufferLength--;
     c9c:	21 97       	sbiw	r28, 0x01	; 1
		realaddr = S0_RX_BASE + (offaddr & S0_RX_MASK);
     c9e:	80 91 be 05 	lds	r24, 0x05BE
     ca2:	90 91 bf 05 	lds	r25, 0x05BF
     ca6:	88 21       	and	r24, r8
     ca8:	99 21       	and	r25, r9
     caa:	20 91 bc 05 	lds	r18, 0x05BC
     cae:	30 91 bd 05 	lds	r19, 0x05BD
		//printf("Real Address: %d\n", realaddr);
		*buffer = SPI_Read(realaddr);
     cb2:	82 0f       	add	r24, r18
     cb4:	93 1f       	adc	r25, r19
     cb6:	0e 94 f6 00 	call	0x1ec	; 0x1ec <SPI_Read>
     cba:	f8 01       	movw	r30, r16
     cbc:	81 93       	st	Z+, r24
     cbe:	8f 01       	movw	r16, r30
		offaddr++;
     cc0:	ff ef       	ldi	r31, 0xFF	; 255
     cc2:	8f 1a       	sub	r8, r31
     cc4:	9f 0a       	sbc	r9, r31
	offaddr = (((ptr & 0x00FF) << 8 ) + SPI_Read(S0_RX_RD + 1));
	//#if _DEBUG_MODE
	printf("RX Buffer: %x\n",offaddr);
	//#endif

	while(bufferLength) {
     cc6:	20 97       	sbiw	r28, 0x00	; 0
     cc8:	49 f7       	brne	.-46     	; 0xc9c <ReceiveData+0x60>
     cca:	ec 0c       	add	r14, r12
     ccc:	fd 1c       	adc	r15, r13
     cce:	ac 0c       	add	r10, r12
     cd0:	bd 1c       	adc	r11, r13
     cd2:	24 c0       	rjmp	.+72     	; 0xd1c <ReceiveData+0xe0>

	// If the request size > MAX_BUF,just truncate it
	if (bufferLength > MAX_BUFF)
	bufferLength = MAX_BUFF - 2;
	// Read the Rx Read Pointer
	ptr = SPI_Read(S0_RX_RD);
     cd4:	88 e2       	ldi	r24, 0x28	; 40
     cd6:	94 e0       	ldi	r25, 0x04	; 4
     cd8:	0e 94 f6 00 	call	0x1ec	; 0x1ec <SPI_Read>
     cdc:	e8 2e       	mov	r14, r24
	//printf("RX Read Pointer: %d\n", ptr);
	offaddr = (((ptr & 0x00FF) << 8 ) + SPI_Read(S0_RX_RD + 1));
     cde:	89 e2       	ldi	r24, 0x29	; 41
     ce0:	94 e0       	ldi	r25, 0x04	; 4
     ce2:	0e 94 f6 00 	call	0x1ec	; 0x1ec <SPI_Read>

	// If the request size > MAX_BUF,just truncate it
	if (bufferLength > MAX_BUFF)
	bufferLength = MAX_BUFF - 2;
	// Read the Rx Read Pointer
	ptr = SPI_Read(S0_RX_RD);
     ce6:	f1 2c       	mov	r15, r1
	//printf("RX Read Pointer: %d\n", ptr);
	offaddr = (((ptr & 0x00FF) << 8 ) + SPI_Read(S0_RX_RD + 1));
     ce8:	fe 2c       	mov	r15, r14
     cea:	ee 24       	eor	r14, r14
     cec:	e8 0e       	add	r14, r24
     cee:	f1 1c       	adc	r15, r1
	//#if _DEBUG_MODE
	printf("RX Buffer: %x\n",offaddr);
     cf0:	ff 92       	push	r15
     cf2:	ef 92       	push	r14
     cf4:	8a e6       	ldi	r24, 0x6A	; 106
     cf6:	94 e0       	ldi	r25, 0x04	; 4
     cf8:	9f 93       	push	r25
     cfa:	8f 93       	push	r24
     cfc:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <printf>
     d00:	0f 90       	pop	r0
     d02:	0f 90       	pop	r0
     d04:	0f 90       	pop	r0
     d06:	0f 90       	pop	r0
{
	uint16_t ptr,offaddr,realaddr;

	// If the request size > MAX_BUF,just truncate it
	if (bufferLength > MAX_BUFF)
	bufferLength = MAX_BUFF - 2;
     d08:	0f 2e       	mov	r0, r31
     d0a:	fe ef       	ldi	r31, 0xFE	; 254
     d0c:	cf 2e       	mov	r12, r31
     d0e:	dd 24       	eor	r13, r13
     d10:	d3 94       	inc	r13
     d12:	f0 2d       	mov	r31, r0

	return 1;
}

int ReceiveData(uint8_t *buffer,uint16_t bufferLength)
{
     d14:	47 01       	movw	r8, r14
     d16:	e6 01       	movw	r28, r12
     d18:	85 01       	movw	r16, r10
     d1a:	c0 cf       	rjmp	.-128    	; 0xc9c <ReceiveData+0x60>
		//printf("Real Address: %d\n", realaddr);
		*buffer = SPI_Read(realaddr);
		offaddr++;
		buffer++;
	}
	*buffer='\0';        // String terminated character
     d1c:	f5 01       	movw	r30, r10
     d1e:	10 82       	st	Z, r1

	// Increase the S0_RX_RD value, so it point to the next receive
	SPI_Write(S0_RX_RD,(offaddr & 0xFF00) >> 8 );
     d20:	6f 2d       	mov	r22, r15
     d22:	88 e2       	ldi	r24, 0x28	; 40
     d24:	94 e0       	ldi	r25, 0x04	; 4
     d26:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <SPI_Write>
	SPI_Write(S0_RX_RD + 1,(offaddr & 0x00FF));
     d2a:	6e 2d       	mov	r22, r14
     d2c:	89 e2       	ldi	r24, 0x29	; 41
     d2e:	94 e0       	ldi	r25, 0x04	; 4
     d30:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <SPI_Write>

	// Now Send the RECV command
	SocketCommand(RECV);
     d34:	80 e4       	ldi	r24, 0x40	; 64
     d36:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <SocketCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d3a:	00 c0       	rjmp	.+0      	; 0xd3c <ReceiveData+0x100>
     d3c:	00 c0       	rjmp	.+0      	; 0xd3e <ReceiveData+0x102>
     d3e:	00 00       	nop
	_delay_us(5);    // Wait for Receive Process

	return 1;
}
     d40:	81 e0       	ldi	r24, 0x01	; 1
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	df 91       	pop	r29
     d46:	cf 91       	pop	r28
     d48:	1f 91       	pop	r17
     d4a:	0f 91       	pop	r16
     d4c:	ff 90       	pop	r15
     d4e:	ef 90       	pop	r14
     d50:	df 90       	pop	r13
     d52:	cf 90       	pop	r12
     d54:	bf 90       	pop	r11
     d56:	af 90       	pop	r10
     d58:	9f 90       	pop	r9
     d5a:	8f 90       	pop	r8
     d5c:	08 95       	ret

00000d5e <SocketDisconnect>:
	SPI_Write(S0_CR, command);
}

void SocketDisconnect()
{
	SocketCommand(DISCON);
     d5e:	88 e0       	ldi	r24, 0x08	; 8
     d60:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <SocketCommand>
	while(SPI_Read(S0_CR));
     d64:	81 e0       	ldi	r24, 0x01	; 1
     d66:	94 e0       	ldi	r25, 0x04	; 4
     d68:	0e 94 f6 00 	call	0x1ec	; 0x1ec <SPI_Read>
     d6c:	81 11       	cpse	r24, r1
     d6e:	fa cf       	rjmp	.-12     	; 0xd64 <SocketDisconnect+0x6>
}
     d70:	08 95       	ret

00000d72 <UARTStream_Init>:
FILE uart_str = FDEV_SETUP_STREAM(uart_putch, uart_getch, _FDEV_SETUP_RW);

void UARTStream_Init()
{
		// Set the PORTD as Output:
		DDRD=0xFF;
     d72:	8f ef       	ldi	r24, 0xFF	; 255
     d74:	8a b9       	out	0x0a, r24	; 10
		PORTD=0x00;
     d76:	1b b8       	out	0x0b, r1	; 11
		DDRA = 0xFF; 
     d78:	81 b9       	out	0x01, r24	; 1
		// Define Output/Input Stream
		stdout = stdin = &uart_str;
     d7a:	80 e0       	ldi	r24, 0x00	; 0
     d7c:	91 e0       	ldi	r25, 0x01	; 1
     d7e:	90 93 c1 05 	sts	0x05C1, r25
     d82:	80 93 c0 05 	sts	0x05C0, r24
     d86:	90 93 c3 05 	sts	0x05C3, r25
     d8a:	80 93 c2 05 	sts	0x05C2, r24
		// Initial UART Peripheral
		uart_init();
     d8e:	0e 94 7f 00 	call	0xfe	; 0xfe <uart_init>
		// Clear Screen
		ansi_me();
     d92:	0e 94 c3 00 	call	0x186	; 0x186 <ansi_me>
		ansi_cl();
     d96:	0e 94 98 00 	call	0x130	; 0x130 <ansi_cl>
		ansi_me();
     d9a:	0e 94 c3 00 	call	0x186	; 0x186 <ansi_me>
		ansi_cl();
     d9e:	0e 94 98 00 	call	0x130	; 0x130 <ansi_cl>
		uart_flush();
     da2:	0e 94 8b 00 	call	0x116	; 0x116 <uart_flush>
     da6:	08 95       	ret

00000da8 <__vector_1>:
		//Ethernet_Init();
}

ISR(INT0_vect)
{
     da8:	1f 92       	push	r1
     daa:	0f 92       	push	r0
     dac:	0f b6       	in	r0, 0x3f	; 63
     dae:	0f 92       	push	r0
     db0:	11 24       	eor	r1, r1
     db2:	2f 93       	push	r18
     db4:	3f 93       	push	r19
     db6:	4f 93       	push	r20
     db8:	5f 93       	push	r21
     dba:	6f 93       	push	r22
     dbc:	7f 93       	push	r23
     dbe:	8f 93       	push	r24
     dc0:	9f 93       	push	r25
     dc2:	af 93       	push	r26
     dc4:	bf 93       	push	r27
     dc6:	cf 93       	push	r28
     dc8:	ef 93       	push	r30
     dca:	ff 93       	push	r31
	//check the status of the interrupt register 
	printf("Mask Register Value: %d\n", SPI_Read(IMR));
     dcc:	86 e1       	ldi	r24, 0x16	; 22
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	0e 94 f6 00 	call	0x1ec	; 0x1ec <SPI_Read>
     dd4:	1f 92       	push	r1
     dd6:	8f 93       	push	r24
     dd8:	89 e7       	ldi	r24, 0x79	; 121
     dda:	94 e0       	ldi	r25, 0x04	; 4
     ddc:	9f 93       	push	r25
     dde:	8f 93       	push	r24
     de0:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <printf>
	unsigned char error = SPI_Read(INTR);
     de4:	85 e1       	ldi	r24, 0x15	; 21
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	0e 94 f6 00 	call	0x1ec	; 0x1ec <SPI_Read>
     dec:	c8 2f       	mov	r28, r24
	printf("Interrupt Register Value: %d\n", error);
     dee:	1f 92       	push	r1
     df0:	8f 93       	push	r24
     df2:	22 e9       	ldi	r18, 0x92	; 146
     df4:	34 e0       	ldi	r19, 0x04	; 4
     df6:	3f 93       	push	r19
     df8:	2f 93       	push	r18
     dfa:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <printf>
	SPI_Write(S0_IR, 0x00);
     dfe:	60 e0       	ldi	r22, 0x00	; 0
     e00:	82 e0       	ldi	r24, 0x02	; 2
     e02:	94 e0       	ldi	r25, 0x04	; 4
     e04:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <SPI_Write>
	SPI_Write(S1_IR, 0x00);
     e08:	60 e0       	ldi	r22, 0x00	; 0
     e0a:	82 e0       	ldi	r24, 0x02	; 2
     e0c:	95 e0       	ldi	r25, 0x05	; 5
     e0e:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <SPI_Write>
	SPI_Write(S2_IR, 0x00);
     e12:	60 e0       	ldi	r22, 0x00	; 0
     e14:	82 e0       	ldi	r24, 0x02	; 2
     e16:	96 e0       	ldi	r25, 0x06	; 6
     e18:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <SPI_Write>
	SPI_Write(S3_IR, 0x00);
     e1c:	60 e0       	ldi	r22, 0x00	; 0
     e1e:	82 e0       	ldi	r24, 0x02	; 2
     e20:	97 e0       	ldi	r25, 0x07	; 7
     e22:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <SPI_Write>
	SPI_Write(INTR, SPI_Read(INTR) | 0xE0);
     e26:	85 e1       	ldi	r24, 0x15	; 21
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	0e 94 f6 00 	call	0x1ec	; 0x1ec <SPI_Read>
     e2e:	68 2f       	mov	r22, r24
     e30:	60 6e       	ori	r22, 0xE0	; 224
     e32:	85 e1       	ldi	r24, 0x15	; 21
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <SPI_Write>
	//Socket 0 Interrupt 
	if((error & (1<<S0_INT)) == 1)
     e3a:	8d b7       	in	r24, 0x3d	; 61
     e3c:	9e b7       	in	r25, 0x3e	; 62
     e3e:	08 96       	adiw	r24, 0x08	; 8
     e40:	0f b6       	in	r0, 0x3f	; 63
     e42:	f8 94       	cli
     e44:	9e bf       	out	0x3e, r25	; 62
     e46:	0f be       	out	0x3f, r0	; 63
     e48:	8d bf       	out	0x3d, r24	; 61
     e4a:	c0 ff       	sbrs	r28, 0
     e4c:	33 c0       	rjmp	.+102    	; 0xeb4 <__vector_1+0x10c>
	{
		unsigned char socketInt = SPI_Read(S0_IR);
     e4e:	82 e0       	ldi	r24, 0x02	; 2
     e50:	94 e0       	ldi	r25, 0x04	; 4
     e52:	0e 94 f6 00 	call	0x1ec	; 0x1ec <SPI_Read>
		
		if((socketInt & (1<<SIR_SEND_OK))){
     e56:	84 ff       	sbrs	r24, 4
     e58:	05 c0       	rjmp	.+10     	; 0xe64 <__vector_1+0xbc>
			printf("Send Operation Complete.\n");
     e5a:	80 eb       	ldi	r24, 0xB0	; 176
     e5c:	94 e0       	ldi	r25, 0x04	; 4
     e5e:	0e 94 8f 08 	call	0x111e	; 0x111e <puts>
     e62:	28 c0       	rjmp	.+80     	; 0xeb4 <__vector_1+0x10c>
		}
		else if((socketInt & (1<<SIR_TIMEOUT))){
     e64:	83 ff       	sbrs	r24, 3
     e66:	05 c0       	rjmp	.+10     	; 0xe72 <__vector_1+0xca>
			printf("Timeout Occurred on Socket 0!\n");
     e68:	89 ec       	ldi	r24, 0xC9	; 201
     e6a:	94 e0       	ldi	r25, 0x04	; 4
     e6c:	0e 94 8f 08 	call	0x111e	; 0x111e <puts>
     e70:	21 c0       	rjmp	.+66     	; 0xeb4 <__vector_1+0x10c>
		}
		else if((socketInt & (1<<SIR_RECV))){
     e72:	82 ff       	sbrs	r24, 2
     e74:	05 c0       	rjmp	.+10     	; 0xe80 <__vector_1+0xd8>
			printf("Receiving Data...\n");
     e76:	87 ee       	ldi	r24, 0xE7	; 231
     e78:	94 e0       	ldi	r25, 0x04	; 4
     e7a:	0e 94 8f 08 	call	0x111e	; 0x111e <puts>
     e7e:	1a c0       	rjmp	.+52     	; 0xeb4 <__vector_1+0x10c>
		}
		else if((socketInt & (1<<SIR_DISCON))){
     e80:	81 ff       	sbrs	r24, 1
     e82:	05 c0       	rjmp	.+10     	; 0xe8e <__vector_1+0xe6>
			printf("Socket Disconnected.\n");
     e84:	89 ef       	ldi	r24, 0xF9	; 249
     e86:	94 e0       	ldi	r25, 0x04	; 4
     e88:	0e 94 8f 08 	call	0x111e	; 0x111e <puts>
     e8c:	13 c0       	rjmp	.+38     	; 0xeb4 <__vector_1+0x10c>
		}
		else if((socketInt & (1<<SIR_CON))){
     e8e:	80 ff       	sbrs	r24, 0
     e90:	05 c0       	rjmp	.+10     	; 0xe9c <__vector_1+0xf4>
			printf("Socket 0 Connected.\n");
     e92:	8e e0       	ldi	r24, 0x0E	; 14
     e94:	95 e0       	ldi	r25, 0x05	; 5
     e96:	0e 94 8f 08 	call	0x111e	; 0x111e <puts>
     e9a:	0c c0       	rjmp	.+24     	; 0xeb4 <__vector_1+0x10c>
		}
		else{
			printf("Undefined Interrupt Occurred. Int Value: %d", socketInt);
     e9c:	1f 92       	push	r1
     e9e:	8f 93       	push	r24
     ea0:	82 e2       	ldi	r24, 0x22	; 34
     ea2:	95 e0       	ldi	r25, 0x05	; 5
     ea4:	9f 93       	push	r25
     ea6:	8f 93       	push	r24
     ea8:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <printf>
     eac:	0f 90       	pop	r0
     eae:	0f 90       	pop	r0
     eb0:	0f 90       	pop	r0
     eb2:	0f 90       	pop	r0
		//break; 
		//default: 
			//printf("Unspecified Interrupt Occurred.\n\n");
		//break;  
	//}
}
     eb4:	ff 91       	pop	r31
     eb6:	ef 91       	pop	r30
     eb8:	cf 91       	pop	r28
     eba:	bf 91       	pop	r27
     ebc:	af 91       	pop	r26
     ebe:	9f 91       	pop	r25
     ec0:	8f 91       	pop	r24
     ec2:	7f 91       	pop	r23
     ec4:	6f 91       	pop	r22
     ec6:	5f 91       	pop	r21
     ec8:	4f 91       	pop	r20
     eca:	3f 91       	pop	r19
     ecc:	2f 91       	pop	r18
     ece:	0f 90       	pop	r0
     ed0:	0f be       	out	0x3f, r0	; 63
     ed2:	0f 90       	pop	r0
     ed4:	1f 90       	pop	r1
     ed6:	18 95       	reti

00000ed8 <main>:
#include <avr/io.h>
#include <stdio.h>
#include <util/delay.h>
#include "EthernetLibrary.h"

int main(void){
     ed8:	cf 93       	push	r28
     eda:	df 93       	push	r29
     edc:	cd b7       	in	r28, 0x3d	; 61
     ede:	de b7       	in	r29, 0x3e	; 62
     ee0:	c8 54       	subi	r28, 0x48	; 72
     ee2:	d2 40       	sbci	r29, 0x02	; 2
     ee4:	0f b6       	in	r0, 0x3f	; 63
     ee6:	f8 94       	cli
     ee8:	de bf       	out	0x3e, r29	; 62
     eea:	0f be       	out	0x3f, r0	; 63
     eec:	cd bf       	out	0x3d, r28	; 61
	
	unsigned char receiveMessage[500];

	unsigned char mac_addr[] = {0x50,0xE5,0x49,0xBF,0x91,0x40};
     eee:	86 e0       	ldi	r24, 0x06	; 6
     ef0:	ee e0       	ldi	r30, 0x0E	; 14
     ef2:	f1 e0       	ldi	r31, 0x01	; 1
     ef4:	de 01       	movw	r26, r28
     ef6:	ab 50       	subi	r26, 0x0B	; 11
     ef8:	be 4f       	sbci	r27, 0xFE	; 254
     efa:	01 90       	ld	r0, Z+
     efc:	0d 92       	st	X+, r0
     efe:	8a 95       	dec	r24
     f00:	e1 f7       	brne	.-8      	; 0xefa <main+0x22>
	unsigned char local_ip_addr[] = {192,168,1,5};
     f02:	30 ec       	ldi	r19, 0xC0	; 192
     f04:	c5 50       	subi	r28, 0x05	; 5
     f06:	de 4f       	sbci	r29, 0xFE	; 254
     f08:	38 83       	st	Y, r19
     f0a:	cb 5f       	subi	r28, 0xFB	; 251
     f0c:	d1 40       	sbci	r29, 0x01	; 1
     f0e:	28 ea       	ldi	r18, 0xA8	; 168
     f10:	c4 50       	subi	r28, 0x04	; 4
     f12:	de 4f       	sbci	r29, 0xFE	; 254
     f14:	28 83       	st	Y, r18
     f16:	cc 5f       	subi	r28, 0xFC	; 252
     f18:	d1 40       	sbci	r29, 0x01	; 1
     f1a:	81 e0       	ldi	r24, 0x01	; 1
     f1c:	c3 50       	subi	r28, 0x03	; 3
     f1e:	de 4f       	sbci	r29, 0xFE	; 254
     f20:	88 83       	st	Y, r24
     f22:	cd 5f       	subi	r28, 0xFD	; 253
     f24:	d1 40       	sbci	r29, 0x01	; 1
     f26:	95 e0       	ldi	r25, 0x05	; 5
     f28:	c2 50       	subi	r28, 0x02	; 2
     f2a:	de 4f       	sbci	r29, 0xFE	; 254
     f2c:	98 83       	st	Y, r25
     f2e:	ce 5f       	subi	r28, 0xFE	; 254
     f30:	d1 40       	sbci	r29, 0x01	; 1
	unsigned char sub_mask[] = {255,255,255,0};
     f32:	9f ef       	ldi	r25, 0xFF	; 255
     f34:	c1 50       	subi	r28, 0x01	; 1
     f36:	de 4f       	sbci	r29, 0xFE	; 254
     f38:	98 83       	st	Y, r25
     f3a:	cf 5f       	subi	r28, 0xFF	; 255
     f3c:	d1 40       	sbci	r29, 0x01	; 1
     f3e:	c0 50       	subi	r28, 0x00	; 0
     f40:	de 4f       	sbci	r29, 0xFE	; 254
     f42:	98 83       	st	Y, r25
     f44:	c0 50       	subi	r28, 0x00	; 0
     f46:	d2 40       	sbci	r29, 0x02	; 2
     f48:	cf 5f       	subi	r28, 0xFF	; 255
     f4a:	dd 4f       	sbci	r29, 0xFD	; 253
     f4c:	98 83       	st	Y, r25
     f4e:	c1 50       	subi	r28, 0x01	; 1
     f50:	d2 40       	sbci	r29, 0x02	; 2
     f52:	ce 5f       	subi	r28, 0xFE	; 254
     f54:	dd 4f       	sbci	r29, 0xFD	; 253
     f56:	18 82       	st	Y, r1
     f58:	c2 50       	subi	r28, 0x02	; 2
     f5a:	d2 40       	sbci	r29, 0x02	; 2
	unsigned char gtw_addr[] = {192,168,1,1};
     f5c:	cd 5f       	subi	r28, 0xFD	; 253
     f5e:	dd 4f       	sbci	r29, 0xFD	; 253
     f60:	38 83       	st	Y, r19
     f62:	c3 50       	subi	r28, 0x03	; 3
     f64:	d2 40       	sbci	r29, 0x02	; 2
     f66:	cc 5f       	subi	r28, 0xFC	; 252
     f68:	dd 4f       	sbci	r29, 0xFD	; 253
     f6a:	28 83       	st	Y, r18
     f6c:	c4 50       	subi	r28, 0x04	; 4
     f6e:	d2 40       	sbci	r29, 0x02	; 2
     f70:	cb 5f       	subi	r28, 0xFB	; 251
     f72:	dd 4f       	sbci	r29, 0xFD	; 253
     f74:	88 83       	st	Y, r24
     f76:	c5 50       	subi	r28, 0x05	; 5
     f78:	d2 40       	sbci	r29, 0x02	; 2
     f7a:	ca 5f       	subi	r28, 0xFA	; 250
     f7c:	dd 4f       	sbci	r29, 0xFD	; 253
     f7e:	88 83       	st	Y, r24
     f80:	c6 50       	subi	r28, 0x06	; 6
     f82:	d2 40       	sbci	r29, 0x02	; 2

	unsigned char server_ip_addr[] = {104,131,36,80};
     f84:	88 e6       	ldi	r24, 0x68	; 104
     f86:	c9 5f       	subi	r28, 0xF9	; 249
     f88:	dd 4f       	sbci	r29, 0xFD	; 253
     f8a:	88 83       	st	Y, r24
     f8c:	c7 50       	subi	r28, 0x07	; 7
     f8e:	d2 40       	sbci	r29, 0x02	; 2
     f90:	83 e8       	ldi	r24, 0x83	; 131
     f92:	c8 5f       	subi	r28, 0xF8	; 248
     f94:	dd 4f       	sbci	r29, 0xFD	; 253
     f96:	88 83       	st	Y, r24
     f98:	c8 50       	subi	r28, 0x08	; 8
     f9a:	d2 40       	sbci	r29, 0x02	; 2
     f9c:	84 e2       	ldi	r24, 0x24	; 36
     f9e:	c7 5f       	subi	r28, 0xF7	; 247
     fa0:	dd 4f       	sbci	r29, 0xFD	; 253
     fa2:	88 83       	st	Y, r24
     fa4:	c9 50       	subi	r28, 0x09	; 9
     fa6:	d2 40       	sbci	r29, 0x02	; 2
     fa8:	80 e5       	ldi	r24, 0x50	; 80
     faa:	c6 5f       	subi	r28, 0xF6	; 246
     fac:	dd 4f       	sbci	r29, 0xFD	; 253
     fae:	88 83       	st	Y, r24
     fb0:	ca 50       	subi	r28, 0x0A	; 10
     fb2:	d2 40       	sbci	r29, 0x02	; 2
	unsigned char server_port[] = {00,80};
     fb4:	c5 5f       	subi	r28, 0xF5	; 245
     fb6:	dd 4f       	sbci	r29, 0xFD	; 253
     fb8:	18 82       	st	Y, r1
     fba:	cb 50       	subi	r28, 0x0B	; 11
     fbc:	d2 40       	sbci	r29, 0x02	; 2
     fbe:	c4 5f       	subi	r28, 0xF4	; 244
     fc0:	dd 4f       	sbci	r29, 0xFD	; 253
     fc2:	88 83       	st	Y, r24
     fc4:	cc 50       	subi	r28, 0x0C	; 12
     fc6:	d2 40       	sbci	r29, 0x02	; 2
	unsigned char source_port[] = {00,80};
     fc8:	c3 5f       	subi	r28, 0xF3	; 243
     fca:	dd 4f       	sbci	r29, 0xFD	; 253
     fcc:	18 82       	st	Y, r1
     fce:	cd 50       	subi	r28, 0x0D	; 13
     fd0:	d2 40       	sbci	r29, 0x02	; 2
     fd2:	c2 5f       	subi	r28, 0xF2	; 242
     fd4:	dd 4f       	sbci	r29, 0xFD	; 253
     fd6:	88 83       	st	Y, r24
     fd8:	ce 50       	subi	r28, 0x0E	; 14
     fda:	d2 40       	sbci	r29, 0x02	; 2
	
	UARTStream_Init();  
     fdc:	0e 94 b9 06 	call	0xd72	; 0xd72 <UARTStream_Init>
	Ethernet_Init(mac_addr, local_ip_addr, sub_mask, gtw_addr);
     fe0:	9e 01       	movw	r18, r28
     fe2:	2d 5f       	subi	r18, 0xFD	; 253
     fe4:	3d 4f       	sbci	r19, 0xFD	; 253
     fe6:	ae 01       	movw	r20, r28
     fe8:	41 50       	subi	r20, 0x01	; 1
     fea:	5e 4f       	sbci	r21, 0xFE	; 254
     fec:	be 01       	movw	r22, r28
     fee:	65 50       	subi	r22, 0x05	; 5
     ff0:	7e 4f       	sbci	r23, 0xFE	; 254
     ff2:	ce 01       	movw	r24, r28
     ff4:	8b 50       	subi	r24, 0x0B	; 11
     ff6:	9e 4f       	sbci	r25, 0xFE	; 254
     ff8:	0e 94 a6 02 	call	0x54c	; 0x54c <Ethernet_Init>
	Server_Connect(TCP_MODE, server_ip_addr, server_port, source_port);
     ffc:	9e 01       	movw	r18, r28
     ffe:	23 5f       	subi	r18, 0xF3	; 243
    1000:	3d 4f       	sbci	r19, 0xFD	; 253
    1002:	ae 01       	movw	r20, r28
    1004:	45 5f       	subi	r20, 0xF5	; 245
    1006:	5d 4f       	sbci	r21, 0xFD	; 253
    1008:	be 01       	movw	r22, r28
    100a:	69 5f       	subi	r22, 0xF9	; 249
    100c:	7d 4f       	sbci	r23, 0xFD	; 253
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	0e 94 0b 01 	call	0x216	; 0x216 <Server_Connect>
	//unsigned char message[100] = "GET /uploads/hex/2222222222/Toggle.hex HTTP/1.1";
	//unsigned char message[] = "GET http://www.wi-pro.us/uploads/hex/11111111111/default.hex HTTP/1.1 \nHost: www.wi-pro.us \n\n";
	unsigned char message[] = "POST /data?t=Hello%20World HTTP/1.1\nhost: www.wi-pro.us\n\n";
    1014:	8e 01       	movw	r16, r28
    1016:	01 5f       	subi	r16, 0xF1	; 241
    1018:	1d 4f       	sbci	r17, 0xFD	; 253
    101a:	8a e3       	ldi	r24, 0x3A	; 58
    101c:	ee e7       	ldi	r30, 0x7E	; 126
    101e:	f5 e0       	ldi	r31, 0x05	; 5
    1020:	d8 01       	movw	r26, r16
    1022:	01 90       	ld	r0, Z+
    1024:	0d 92       	st	X+, r0
    1026:	8a 95       	dec	r24
    1028:	e1 f7       	brne	.-8      	; 0x1022 <main+0x14a>
	unsigned char* messagePointer = message;

	unsigned char* recMessagePointer = receiveMessage;

	printf("Sent Message: %s\n", message);
    102a:	1f 93       	push	r17
    102c:	0f 93       	push	r16
    102e:	8e e4       	ldi	r24, 0x4E	; 78
    1030:	95 e0       	ldi	r25, 0x05	; 5
    1032:	9f 93       	push	r25
    1034:	8f 93       	push	r24
    1036:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <printf>
	SendData(messagePointer, strlen((char *)messagePointer));
    103a:	f8 01       	movw	r30, r16
    103c:	01 90       	ld	r0, Z+
    103e:	00 20       	and	r0, r0
    1040:	e9 f7       	brne	.-6      	; 0x103c <main+0x164>
    1042:	31 97       	sbiw	r30, 0x01	; 1
    1044:	bf 01       	movw	r22, r30
    1046:	60 1b       	sub	r22, r16
    1048:	71 0b       	sbc	r23, r17
    104a:	c8 01       	movw	r24, r16
    104c:	0e 94 80 04 	call	0x900	; 0x900 <SendData>
	ReceiveData(recMessagePointer, 100);
    1050:	64 e6       	ldi	r22, 0x64	; 100
    1052:	70 e0       	ldi	r23, 0x00	; 0
    1054:	0e 50       	subi	r16, 0x0E	; 14
    1056:	12 40       	sbci	r17, 0x02	; 2
    1058:	c8 01       	movw	r24, r16
    105a:	0e 94 1e 06 	call	0xc3c	; 0xc3c <ReceiveData>
	printf("Receive Size: %d\n", ReceiveSize());
    105e:	0e 94 66 04 	call	0x8cc	; 0x8cc <ReceiveSize>
    1062:	9f 93       	push	r25
    1064:	8f 93       	push	r24
    1066:	80 e6       	ldi	r24, 0x60	; 96
    1068:	95 e0       	ldi	r25, 0x05	; 5
    106a:	9f 93       	push	r25
    106c:	8f 93       	push	r24
    106e:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <printf>
	printf("Message: %s", recMessagePointer);
    1072:	1f 93       	push	r17
    1074:	0f 93       	push	r16
    1076:	82 e7       	ldi	r24, 0x72	; 114
    1078:	95 e0       	ldi	r25, 0x05	; 5
    107a:	9f 93       	push	r25
    107c:	8f 93       	push	r24
    107e:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <printf>
	SocketDisconnect();
    1082:	0e 94 af 06 	call	0xd5e	; 0xd5e <SocketDisconnect>
    1086:	0f b6       	in	r0, 0x3f	; 63
    1088:	f8 94       	cli
    108a:	de bf       	out	0x3e, r29	; 62
    108c:	0f be       	out	0x3f, r0	; 63
    108e:	cd bf       	out	0x3d, r28	; 61
    1090:	ff cf       	rjmp	.-2      	; 0x1090 <main+0x1b8>

00001092 <fputc>:
    1092:	0f 93       	push	r16
    1094:	1f 93       	push	r17
    1096:	cf 93       	push	r28
    1098:	df 93       	push	r29
    109a:	18 2f       	mov	r17, r24
    109c:	09 2f       	mov	r16, r25
    109e:	eb 01       	movw	r28, r22
    10a0:	8b 81       	ldd	r24, Y+3	; 0x03
    10a2:	81 fd       	sbrc	r24, 1
    10a4:	03 c0       	rjmp	.+6      	; 0x10ac <fputc+0x1a>
    10a6:	8f ef       	ldi	r24, 0xFF	; 255
    10a8:	9f ef       	ldi	r25, 0xFF	; 255
    10aa:	20 c0       	rjmp	.+64     	; 0x10ec <fputc+0x5a>
    10ac:	82 ff       	sbrs	r24, 2
    10ae:	10 c0       	rjmp	.+32     	; 0x10d0 <fputc+0x3e>
    10b0:	4e 81       	ldd	r20, Y+6	; 0x06
    10b2:	5f 81       	ldd	r21, Y+7	; 0x07
    10b4:	2c 81       	ldd	r18, Y+4	; 0x04
    10b6:	3d 81       	ldd	r19, Y+5	; 0x05
    10b8:	42 17       	cp	r20, r18
    10ba:	53 07       	cpc	r21, r19
    10bc:	7c f4       	brge	.+30     	; 0x10dc <fputc+0x4a>
    10be:	e8 81       	ld	r30, Y
    10c0:	f9 81       	ldd	r31, Y+1	; 0x01
    10c2:	9f 01       	movw	r18, r30
    10c4:	2f 5f       	subi	r18, 0xFF	; 255
    10c6:	3f 4f       	sbci	r19, 0xFF	; 255
    10c8:	39 83       	std	Y+1, r19	; 0x01
    10ca:	28 83       	st	Y, r18
    10cc:	10 83       	st	Z, r17
    10ce:	06 c0       	rjmp	.+12     	; 0x10dc <fputc+0x4a>
    10d0:	e8 85       	ldd	r30, Y+8	; 0x08
    10d2:	f9 85       	ldd	r31, Y+9	; 0x09
    10d4:	81 2f       	mov	r24, r17
    10d6:	09 95       	icall
    10d8:	89 2b       	or	r24, r25
    10da:	29 f7       	brne	.-54     	; 0x10a6 <fputc+0x14>
    10dc:	2e 81       	ldd	r18, Y+6	; 0x06
    10de:	3f 81       	ldd	r19, Y+7	; 0x07
    10e0:	2f 5f       	subi	r18, 0xFF	; 255
    10e2:	3f 4f       	sbci	r19, 0xFF	; 255
    10e4:	3f 83       	std	Y+7, r19	; 0x07
    10e6:	2e 83       	std	Y+6, r18	; 0x06
    10e8:	81 2f       	mov	r24, r17
    10ea:	90 2f       	mov	r25, r16
    10ec:	df 91       	pop	r29
    10ee:	cf 91       	pop	r28
    10f0:	1f 91       	pop	r17
    10f2:	0f 91       	pop	r16
    10f4:	08 95       	ret

000010f6 <printf>:
    10f6:	a0 e0       	ldi	r26, 0x00	; 0
    10f8:	b0 e0       	ldi	r27, 0x00	; 0
    10fa:	e1 e8       	ldi	r30, 0x81	; 129
    10fc:	f8 e0       	ldi	r31, 0x08	; 8
    10fe:	0c 94 12 0b 	jmp	0x1624	; 0x1624 <__prologue_saves__+0x20>
    1102:	fe 01       	movw	r30, r28
    1104:	35 96       	adiw	r30, 0x05	; 5
    1106:	61 91       	ld	r22, Z+
    1108:	71 91       	ld	r23, Z+
    110a:	af 01       	movw	r20, r30
    110c:	80 91 c2 05 	lds	r24, 0x05C2
    1110:	90 91 c3 05 	lds	r25, 0x05C3
    1114:	0e 94 bc 08 	call	0x1178	; 0x1178 <vfprintf>
    1118:	e2 e0       	ldi	r30, 0x02	; 2
    111a:	0c 94 2e 0b 	jmp	0x165c	; 0x165c <__epilogue_restores__+0x20>

0000111e <puts>:
    111e:	0f 93       	push	r16
    1120:	1f 93       	push	r17
    1122:	cf 93       	push	r28
    1124:	df 93       	push	r29
    1126:	e0 91 c2 05 	lds	r30, 0x05C2
    112a:	f0 91 c3 05 	lds	r31, 0x05C3
    112e:	23 81       	ldd	r18, Z+3	; 0x03
    1130:	21 ff       	sbrs	r18, 1
    1132:	1b c0       	rjmp	.+54     	; 0x116a <puts+0x4c>
    1134:	ec 01       	movw	r28, r24
    1136:	00 e0       	ldi	r16, 0x00	; 0
    1138:	10 e0       	ldi	r17, 0x00	; 0
    113a:	89 91       	ld	r24, Y+
    113c:	60 91 c2 05 	lds	r22, 0x05C2
    1140:	70 91 c3 05 	lds	r23, 0x05C3
    1144:	db 01       	movw	r26, r22
    1146:	18 96       	adiw	r26, 0x08	; 8
    1148:	ed 91       	ld	r30, X+
    114a:	fc 91       	ld	r31, X
    114c:	19 97       	sbiw	r26, 0x09	; 9
    114e:	88 23       	and	r24, r24
    1150:	31 f0       	breq	.+12     	; 0x115e <puts+0x40>
    1152:	09 95       	icall
    1154:	89 2b       	or	r24, r25
    1156:	89 f3       	breq	.-30     	; 0x113a <puts+0x1c>
    1158:	0f ef       	ldi	r16, 0xFF	; 255
    115a:	1f ef       	ldi	r17, 0xFF	; 255
    115c:	ee cf       	rjmp	.-36     	; 0x113a <puts+0x1c>
    115e:	8a e0       	ldi	r24, 0x0A	; 10
    1160:	09 95       	icall
    1162:	89 2b       	or	r24, r25
    1164:	11 f4       	brne	.+4      	; 0x116a <puts+0x4c>
    1166:	c8 01       	movw	r24, r16
    1168:	02 c0       	rjmp	.+4      	; 0x116e <puts+0x50>
    116a:	8f ef       	ldi	r24, 0xFF	; 255
    116c:	9f ef       	ldi	r25, 0xFF	; 255
    116e:	df 91       	pop	r29
    1170:	cf 91       	pop	r28
    1172:	1f 91       	pop	r17
    1174:	0f 91       	pop	r16
    1176:	08 95       	ret

00001178 <vfprintf>:
    1178:	ac e0       	ldi	r26, 0x0C	; 12
    117a:	b0 e0       	ldi	r27, 0x00	; 0
    117c:	e2 ec       	ldi	r30, 0xC2	; 194
    117e:	f8 e0       	ldi	r31, 0x08	; 8
    1180:	0c 94 02 0b 	jmp	0x1604	; 0x1604 <__prologue_saves__>
    1184:	7c 01       	movw	r14, r24
    1186:	6b 01       	movw	r12, r22
    1188:	8a 01       	movw	r16, r20
    118a:	fc 01       	movw	r30, r24
    118c:	17 82       	std	Z+7, r1	; 0x07
    118e:	16 82       	std	Z+6, r1	; 0x06
    1190:	83 81       	ldd	r24, Z+3	; 0x03
    1192:	81 ff       	sbrs	r24, 1
    1194:	bd c1       	rjmp	.+890    	; 0x1510 <vfprintf+0x398>
    1196:	ce 01       	movw	r24, r28
    1198:	01 96       	adiw	r24, 0x01	; 1
    119a:	4c 01       	movw	r8, r24
    119c:	f7 01       	movw	r30, r14
    119e:	93 81       	ldd	r25, Z+3	; 0x03
    11a0:	f6 01       	movw	r30, r12
    11a2:	93 fd       	sbrc	r25, 3
    11a4:	85 91       	lpm	r24, Z+
    11a6:	93 ff       	sbrs	r25, 3
    11a8:	81 91       	ld	r24, Z+
    11aa:	6f 01       	movw	r12, r30
    11ac:	88 23       	and	r24, r24
    11ae:	09 f4       	brne	.+2      	; 0x11b2 <vfprintf+0x3a>
    11b0:	ab c1       	rjmp	.+854    	; 0x1508 <vfprintf+0x390>
    11b2:	85 32       	cpi	r24, 0x25	; 37
    11b4:	39 f4       	brne	.+14     	; 0x11c4 <vfprintf+0x4c>
    11b6:	93 fd       	sbrc	r25, 3
    11b8:	85 91       	lpm	r24, Z+
    11ba:	93 ff       	sbrs	r25, 3
    11bc:	81 91       	ld	r24, Z+
    11be:	6f 01       	movw	r12, r30
    11c0:	85 32       	cpi	r24, 0x25	; 37
    11c2:	29 f4       	brne	.+10     	; 0x11ce <vfprintf+0x56>
    11c4:	b7 01       	movw	r22, r14
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	0e 94 49 08 	call	0x1092	; 0x1092 <fputc>
    11cc:	e7 cf       	rjmp	.-50     	; 0x119c <vfprintf+0x24>
    11ce:	51 2c       	mov	r5, r1
    11d0:	31 2c       	mov	r3, r1
    11d2:	20 e0       	ldi	r18, 0x00	; 0
    11d4:	20 32       	cpi	r18, 0x20	; 32
    11d6:	a0 f4       	brcc	.+40     	; 0x1200 <vfprintf+0x88>
    11d8:	8b 32       	cpi	r24, 0x2B	; 43
    11da:	69 f0       	breq	.+26     	; 0x11f6 <vfprintf+0x7e>
    11dc:	30 f4       	brcc	.+12     	; 0x11ea <vfprintf+0x72>
    11de:	80 32       	cpi	r24, 0x20	; 32
    11e0:	59 f0       	breq	.+22     	; 0x11f8 <vfprintf+0x80>
    11e2:	83 32       	cpi	r24, 0x23	; 35
    11e4:	69 f4       	brne	.+26     	; 0x1200 <vfprintf+0x88>
    11e6:	20 61       	ori	r18, 0x10	; 16
    11e8:	2c c0       	rjmp	.+88     	; 0x1242 <vfprintf+0xca>
    11ea:	8d 32       	cpi	r24, 0x2D	; 45
    11ec:	39 f0       	breq	.+14     	; 0x11fc <vfprintf+0x84>
    11ee:	80 33       	cpi	r24, 0x30	; 48
    11f0:	39 f4       	brne	.+14     	; 0x1200 <vfprintf+0x88>
    11f2:	21 60       	ori	r18, 0x01	; 1
    11f4:	26 c0       	rjmp	.+76     	; 0x1242 <vfprintf+0xca>
    11f6:	22 60       	ori	r18, 0x02	; 2
    11f8:	24 60       	ori	r18, 0x04	; 4
    11fa:	23 c0       	rjmp	.+70     	; 0x1242 <vfprintf+0xca>
    11fc:	28 60       	ori	r18, 0x08	; 8
    11fe:	21 c0       	rjmp	.+66     	; 0x1242 <vfprintf+0xca>
    1200:	27 fd       	sbrc	r18, 7
    1202:	27 c0       	rjmp	.+78     	; 0x1252 <vfprintf+0xda>
    1204:	30 ed       	ldi	r19, 0xD0	; 208
    1206:	38 0f       	add	r19, r24
    1208:	3a 30       	cpi	r19, 0x0A	; 10
    120a:	78 f4       	brcc	.+30     	; 0x122a <vfprintf+0xb2>
    120c:	26 ff       	sbrs	r18, 6
    120e:	06 c0       	rjmp	.+12     	; 0x121c <vfprintf+0xa4>
    1210:	fa e0       	ldi	r31, 0x0A	; 10
    1212:	5f 9e       	mul	r5, r31
    1214:	30 0d       	add	r19, r0
    1216:	11 24       	eor	r1, r1
    1218:	53 2e       	mov	r5, r19
    121a:	13 c0       	rjmp	.+38     	; 0x1242 <vfprintf+0xca>
    121c:	8a e0       	ldi	r24, 0x0A	; 10
    121e:	38 9e       	mul	r3, r24
    1220:	30 0d       	add	r19, r0
    1222:	11 24       	eor	r1, r1
    1224:	33 2e       	mov	r3, r19
    1226:	20 62       	ori	r18, 0x20	; 32
    1228:	0c c0       	rjmp	.+24     	; 0x1242 <vfprintf+0xca>
    122a:	8e 32       	cpi	r24, 0x2E	; 46
    122c:	21 f4       	brne	.+8      	; 0x1236 <vfprintf+0xbe>
    122e:	26 fd       	sbrc	r18, 6
    1230:	6b c1       	rjmp	.+726    	; 0x1508 <vfprintf+0x390>
    1232:	20 64       	ori	r18, 0x40	; 64
    1234:	06 c0       	rjmp	.+12     	; 0x1242 <vfprintf+0xca>
    1236:	8c 36       	cpi	r24, 0x6C	; 108
    1238:	11 f4       	brne	.+4      	; 0x123e <vfprintf+0xc6>
    123a:	20 68       	ori	r18, 0x80	; 128
    123c:	02 c0       	rjmp	.+4      	; 0x1242 <vfprintf+0xca>
    123e:	88 36       	cpi	r24, 0x68	; 104
    1240:	41 f4       	brne	.+16     	; 0x1252 <vfprintf+0xda>
    1242:	f6 01       	movw	r30, r12
    1244:	93 fd       	sbrc	r25, 3
    1246:	85 91       	lpm	r24, Z+
    1248:	93 ff       	sbrs	r25, 3
    124a:	81 91       	ld	r24, Z+
    124c:	6f 01       	movw	r12, r30
    124e:	81 11       	cpse	r24, r1
    1250:	c1 cf       	rjmp	.-126    	; 0x11d4 <vfprintf+0x5c>
    1252:	98 2f       	mov	r25, r24
    1254:	9f 7d       	andi	r25, 0xDF	; 223
    1256:	95 54       	subi	r25, 0x45	; 69
    1258:	93 30       	cpi	r25, 0x03	; 3
    125a:	28 f4       	brcc	.+10     	; 0x1266 <vfprintf+0xee>
    125c:	0c 5f       	subi	r16, 0xFC	; 252
    125e:	1f 4f       	sbci	r17, 0xFF	; 255
    1260:	ff e3       	ldi	r31, 0x3F	; 63
    1262:	f9 83       	std	Y+1, r31	; 0x01
    1264:	0d c0       	rjmp	.+26     	; 0x1280 <vfprintf+0x108>
    1266:	83 36       	cpi	r24, 0x63	; 99
    1268:	31 f0       	breq	.+12     	; 0x1276 <vfprintf+0xfe>
    126a:	83 37       	cpi	r24, 0x73	; 115
    126c:	71 f0       	breq	.+28     	; 0x128a <vfprintf+0x112>
    126e:	83 35       	cpi	r24, 0x53	; 83
    1270:	09 f0       	breq	.+2      	; 0x1274 <vfprintf+0xfc>
    1272:	5b c0       	rjmp	.+182    	; 0x132a <vfprintf+0x1b2>
    1274:	22 c0       	rjmp	.+68     	; 0x12ba <vfprintf+0x142>
    1276:	f8 01       	movw	r30, r16
    1278:	80 81       	ld	r24, Z
    127a:	89 83       	std	Y+1, r24	; 0x01
    127c:	0e 5f       	subi	r16, 0xFE	; 254
    127e:	1f 4f       	sbci	r17, 0xFF	; 255
    1280:	44 24       	eor	r4, r4
    1282:	43 94       	inc	r4
    1284:	51 2c       	mov	r5, r1
    1286:	54 01       	movw	r10, r8
    1288:	15 c0       	rjmp	.+42     	; 0x12b4 <vfprintf+0x13c>
    128a:	38 01       	movw	r6, r16
    128c:	f2 e0       	ldi	r31, 0x02	; 2
    128e:	6f 0e       	add	r6, r31
    1290:	71 1c       	adc	r7, r1
    1292:	f8 01       	movw	r30, r16
    1294:	a0 80       	ld	r10, Z
    1296:	b1 80       	ldd	r11, Z+1	; 0x01
    1298:	26 ff       	sbrs	r18, 6
    129a:	03 c0       	rjmp	.+6      	; 0x12a2 <vfprintf+0x12a>
    129c:	65 2d       	mov	r22, r5
    129e:	70 e0       	ldi	r23, 0x00	; 0
    12a0:	02 c0       	rjmp	.+4      	; 0x12a6 <vfprintf+0x12e>
    12a2:	6f ef       	ldi	r22, 0xFF	; 255
    12a4:	7f ef       	ldi	r23, 0xFF	; 255
    12a6:	c5 01       	movw	r24, r10
    12a8:	2c 87       	std	Y+12, r18	; 0x0c
    12aa:	0e 94 99 0a 	call	0x1532	; 0x1532 <strnlen>
    12ae:	2c 01       	movw	r4, r24
    12b0:	83 01       	movw	r16, r6
    12b2:	2c 85       	ldd	r18, Y+12	; 0x0c
    12b4:	2f 77       	andi	r18, 0x7F	; 127
    12b6:	22 2e       	mov	r2, r18
    12b8:	17 c0       	rjmp	.+46     	; 0x12e8 <vfprintf+0x170>
    12ba:	38 01       	movw	r6, r16
    12bc:	f2 e0       	ldi	r31, 0x02	; 2
    12be:	6f 0e       	add	r6, r31
    12c0:	71 1c       	adc	r7, r1
    12c2:	f8 01       	movw	r30, r16
    12c4:	a0 80       	ld	r10, Z
    12c6:	b1 80       	ldd	r11, Z+1	; 0x01
    12c8:	26 ff       	sbrs	r18, 6
    12ca:	03 c0       	rjmp	.+6      	; 0x12d2 <vfprintf+0x15a>
    12cc:	65 2d       	mov	r22, r5
    12ce:	70 e0       	ldi	r23, 0x00	; 0
    12d0:	02 c0       	rjmp	.+4      	; 0x12d6 <vfprintf+0x15e>
    12d2:	6f ef       	ldi	r22, 0xFF	; 255
    12d4:	7f ef       	ldi	r23, 0xFF	; 255
    12d6:	c5 01       	movw	r24, r10
    12d8:	2c 87       	std	Y+12, r18	; 0x0c
    12da:	0e 94 8e 0a 	call	0x151c	; 0x151c <strnlen_P>
    12de:	2c 01       	movw	r4, r24
    12e0:	2c 85       	ldd	r18, Y+12	; 0x0c
    12e2:	20 68       	ori	r18, 0x80	; 128
    12e4:	22 2e       	mov	r2, r18
    12e6:	83 01       	movw	r16, r6
    12e8:	23 fc       	sbrc	r2, 3
    12ea:	1b c0       	rjmp	.+54     	; 0x1322 <vfprintf+0x1aa>
    12ec:	83 2d       	mov	r24, r3
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	48 16       	cp	r4, r24
    12f2:	59 06       	cpc	r5, r25
    12f4:	b0 f4       	brcc	.+44     	; 0x1322 <vfprintf+0x1aa>
    12f6:	b7 01       	movw	r22, r14
    12f8:	80 e2       	ldi	r24, 0x20	; 32
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	0e 94 49 08 	call	0x1092	; 0x1092 <fputc>
    1300:	3a 94       	dec	r3
    1302:	f4 cf       	rjmp	.-24     	; 0x12ec <vfprintf+0x174>
    1304:	f5 01       	movw	r30, r10
    1306:	27 fc       	sbrc	r2, 7
    1308:	85 91       	lpm	r24, Z+
    130a:	27 fe       	sbrs	r2, 7
    130c:	81 91       	ld	r24, Z+
    130e:	5f 01       	movw	r10, r30
    1310:	b7 01       	movw	r22, r14
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	0e 94 49 08 	call	0x1092	; 0x1092 <fputc>
    1318:	31 10       	cpse	r3, r1
    131a:	3a 94       	dec	r3
    131c:	f1 e0       	ldi	r31, 0x01	; 1
    131e:	4f 1a       	sub	r4, r31
    1320:	51 08       	sbc	r5, r1
    1322:	41 14       	cp	r4, r1
    1324:	51 04       	cpc	r5, r1
    1326:	71 f7       	brne	.-36     	; 0x1304 <vfprintf+0x18c>
    1328:	e5 c0       	rjmp	.+458    	; 0x14f4 <vfprintf+0x37c>
    132a:	84 36       	cpi	r24, 0x64	; 100
    132c:	11 f0       	breq	.+4      	; 0x1332 <vfprintf+0x1ba>
    132e:	89 36       	cpi	r24, 0x69	; 105
    1330:	39 f5       	brne	.+78     	; 0x1380 <vfprintf+0x208>
    1332:	f8 01       	movw	r30, r16
    1334:	27 ff       	sbrs	r18, 7
    1336:	07 c0       	rjmp	.+14     	; 0x1346 <vfprintf+0x1ce>
    1338:	60 81       	ld	r22, Z
    133a:	71 81       	ldd	r23, Z+1	; 0x01
    133c:	82 81       	ldd	r24, Z+2	; 0x02
    133e:	93 81       	ldd	r25, Z+3	; 0x03
    1340:	0c 5f       	subi	r16, 0xFC	; 252
    1342:	1f 4f       	sbci	r17, 0xFF	; 255
    1344:	08 c0       	rjmp	.+16     	; 0x1356 <vfprintf+0x1de>
    1346:	60 81       	ld	r22, Z
    1348:	71 81       	ldd	r23, Z+1	; 0x01
    134a:	88 27       	eor	r24, r24
    134c:	77 fd       	sbrc	r23, 7
    134e:	80 95       	com	r24
    1350:	98 2f       	mov	r25, r24
    1352:	0e 5f       	subi	r16, 0xFE	; 254
    1354:	1f 4f       	sbci	r17, 0xFF	; 255
    1356:	2f 76       	andi	r18, 0x6F	; 111
    1358:	b2 2e       	mov	r11, r18
    135a:	97 ff       	sbrs	r25, 7
    135c:	09 c0       	rjmp	.+18     	; 0x1370 <vfprintf+0x1f8>
    135e:	90 95       	com	r25
    1360:	80 95       	com	r24
    1362:	70 95       	com	r23
    1364:	61 95       	neg	r22
    1366:	7f 4f       	sbci	r23, 0xFF	; 255
    1368:	8f 4f       	sbci	r24, 0xFF	; 255
    136a:	9f 4f       	sbci	r25, 0xFF	; 255
    136c:	20 68       	ori	r18, 0x80	; 128
    136e:	b2 2e       	mov	r11, r18
    1370:	2a e0       	ldi	r18, 0x0A	; 10
    1372:	30 e0       	ldi	r19, 0x00	; 0
    1374:	a4 01       	movw	r20, r8
    1376:	0e 94 a4 0a 	call	0x1548	; 0x1548 <__ultoa_invert>
    137a:	a8 2e       	mov	r10, r24
    137c:	a8 18       	sub	r10, r8
    137e:	44 c0       	rjmp	.+136    	; 0x1408 <vfprintf+0x290>
    1380:	85 37       	cpi	r24, 0x75	; 117
    1382:	29 f4       	brne	.+10     	; 0x138e <vfprintf+0x216>
    1384:	2f 7e       	andi	r18, 0xEF	; 239
    1386:	b2 2e       	mov	r11, r18
    1388:	2a e0       	ldi	r18, 0x0A	; 10
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	25 c0       	rjmp	.+74     	; 0x13d8 <vfprintf+0x260>
    138e:	f2 2f       	mov	r31, r18
    1390:	f9 7f       	andi	r31, 0xF9	; 249
    1392:	bf 2e       	mov	r11, r31
    1394:	8f 36       	cpi	r24, 0x6F	; 111
    1396:	c1 f0       	breq	.+48     	; 0x13c8 <vfprintf+0x250>
    1398:	18 f4       	brcc	.+6      	; 0x13a0 <vfprintf+0x228>
    139a:	88 35       	cpi	r24, 0x58	; 88
    139c:	79 f0       	breq	.+30     	; 0x13bc <vfprintf+0x244>
    139e:	b4 c0       	rjmp	.+360    	; 0x1508 <vfprintf+0x390>
    13a0:	80 37       	cpi	r24, 0x70	; 112
    13a2:	19 f0       	breq	.+6      	; 0x13aa <vfprintf+0x232>
    13a4:	88 37       	cpi	r24, 0x78	; 120
    13a6:	21 f0       	breq	.+8      	; 0x13b0 <vfprintf+0x238>
    13a8:	af c0       	rjmp	.+350    	; 0x1508 <vfprintf+0x390>
    13aa:	2f 2f       	mov	r18, r31
    13ac:	20 61       	ori	r18, 0x10	; 16
    13ae:	b2 2e       	mov	r11, r18
    13b0:	b4 fe       	sbrs	r11, 4
    13b2:	0d c0       	rjmp	.+26     	; 0x13ce <vfprintf+0x256>
    13b4:	8b 2d       	mov	r24, r11
    13b6:	84 60       	ori	r24, 0x04	; 4
    13b8:	b8 2e       	mov	r11, r24
    13ba:	09 c0       	rjmp	.+18     	; 0x13ce <vfprintf+0x256>
    13bc:	24 ff       	sbrs	r18, 4
    13be:	0a c0       	rjmp	.+20     	; 0x13d4 <vfprintf+0x25c>
    13c0:	9f 2f       	mov	r25, r31
    13c2:	96 60       	ori	r25, 0x06	; 6
    13c4:	b9 2e       	mov	r11, r25
    13c6:	06 c0       	rjmp	.+12     	; 0x13d4 <vfprintf+0x25c>
    13c8:	28 e0       	ldi	r18, 0x08	; 8
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	05 c0       	rjmp	.+10     	; 0x13d8 <vfprintf+0x260>
    13ce:	20 e1       	ldi	r18, 0x10	; 16
    13d0:	30 e0       	ldi	r19, 0x00	; 0
    13d2:	02 c0       	rjmp	.+4      	; 0x13d8 <vfprintf+0x260>
    13d4:	20 e1       	ldi	r18, 0x10	; 16
    13d6:	32 e0       	ldi	r19, 0x02	; 2
    13d8:	f8 01       	movw	r30, r16
    13da:	b7 fe       	sbrs	r11, 7
    13dc:	07 c0       	rjmp	.+14     	; 0x13ec <vfprintf+0x274>
    13de:	60 81       	ld	r22, Z
    13e0:	71 81       	ldd	r23, Z+1	; 0x01
    13e2:	82 81       	ldd	r24, Z+2	; 0x02
    13e4:	93 81       	ldd	r25, Z+3	; 0x03
    13e6:	0c 5f       	subi	r16, 0xFC	; 252
    13e8:	1f 4f       	sbci	r17, 0xFF	; 255
    13ea:	06 c0       	rjmp	.+12     	; 0x13f8 <vfprintf+0x280>
    13ec:	60 81       	ld	r22, Z
    13ee:	71 81       	ldd	r23, Z+1	; 0x01
    13f0:	80 e0       	ldi	r24, 0x00	; 0
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	0e 5f       	subi	r16, 0xFE	; 254
    13f6:	1f 4f       	sbci	r17, 0xFF	; 255
    13f8:	a4 01       	movw	r20, r8
    13fa:	0e 94 a4 0a 	call	0x1548	; 0x1548 <__ultoa_invert>
    13fe:	a8 2e       	mov	r10, r24
    1400:	a8 18       	sub	r10, r8
    1402:	fb 2d       	mov	r31, r11
    1404:	ff 77       	andi	r31, 0x7F	; 127
    1406:	bf 2e       	mov	r11, r31
    1408:	b6 fe       	sbrs	r11, 6
    140a:	0b c0       	rjmp	.+22     	; 0x1422 <vfprintf+0x2aa>
    140c:	2b 2d       	mov	r18, r11
    140e:	2e 7f       	andi	r18, 0xFE	; 254
    1410:	a5 14       	cp	r10, r5
    1412:	50 f4       	brcc	.+20     	; 0x1428 <vfprintf+0x2b0>
    1414:	b4 fe       	sbrs	r11, 4
    1416:	0a c0       	rjmp	.+20     	; 0x142c <vfprintf+0x2b4>
    1418:	b2 fc       	sbrc	r11, 2
    141a:	08 c0       	rjmp	.+16     	; 0x142c <vfprintf+0x2b4>
    141c:	2b 2d       	mov	r18, r11
    141e:	2e 7e       	andi	r18, 0xEE	; 238
    1420:	05 c0       	rjmp	.+10     	; 0x142c <vfprintf+0x2b4>
    1422:	7a 2c       	mov	r7, r10
    1424:	2b 2d       	mov	r18, r11
    1426:	03 c0       	rjmp	.+6      	; 0x142e <vfprintf+0x2b6>
    1428:	7a 2c       	mov	r7, r10
    142a:	01 c0       	rjmp	.+2      	; 0x142e <vfprintf+0x2b6>
    142c:	75 2c       	mov	r7, r5
    142e:	24 ff       	sbrs	r18, 4
    1430:	0d c0       	rjmp	.+26     	; 0x144c <vfprintf+0x2d4>
    1432:	fe 01       	movw	r30, r28
    1434:	ea 0d       	add	r30, r10
    1436:	f1 1d       	adc	r31, r1
    1438:	80 81       	ld	r24, Z
    143a:	80 33       	cpi	r24, 0x30	; 48
    143c:	11 f4       	brne	.+4      	; 0x1442 <vfprintf+0x2ca>
    143e:	29 7e       	andi	r18, 0xE9	; 233
    1440:	09 c0       	rjmp	.+18     	; 0x1454 <vfprintf+0x2dc>
    1442:	22 ff       	sbrs	r18, 2
    1444:	06 c0       	rjmp	.+12     	; 0x1452 <vfprintf+0x2da>
    1446:	73 94       	inc	r7
    1448:	73 94       	inc	r7
    144a:	04 c0       	rjmp	.+8      	; 0x1454 <vfprintf+0x2dc>
    144c:	82 2f       	mov	r24, r18
    144e:	86 78       	andi	r24, 0x86	; 134
    1450:	09 f0       	breq	.+2      	; 0x1454 <vfprintf+0x2dc>
    1452:	73 94       	inc	r7
    1454:	23 fd       	sbrc	r18, 3
    1456:	13 c0       	rjmp	.+38     	; 0x147e <vfprintf+0x306>
    1458:	20 ff       	sbrs	r18, 0
    145a:	06 c0       	rjmp	.+12     	; 0x1468 <vfprintf+0x2f0>
    145c:	5a 2c       	mov	r5, r10
    145e:	73 14       	cp	r7, r3
    1460:	18 f4       	brcc	.+6      	; 0x1468 <vfprintf+0x2f0>
    1462:	53 0c       	add	r5, r3
    1464:	57 18       	sub	r5, r7
    1466:	73 2c       	mov	r7, r3
    1468:	73 14       	cp	r7, r3
    146a:	68 f4       	brcc	.+26     	; 0x1486 <vfprintf+0x30e>
    146c:	b7 01       	movw	r22, r14
    146e:	80 e2       	ldi	r24, 0x20	; 32
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	2c 87       	std	Y+12, r18	; 0x0c
    1474:	0e 94 49 08 	call	0x1092	; 0x1092 <fputc>
    1478:	73 94       	inc	r7
    147a:	2c 85       	ldd	r18, Y+12	; 0x0c
    147c:	f5 cf       	rjmp	.-22     	; 0x1468 <vfprintf+0x2f0>
    147e:	73 14       	cp	r7, r3
    1480:	10 f4       	brcc	.+4      	; 0x1486 <vfprintf+0x30e>
    1482:	37 18       	sub	r3, r7
    1484:	01 c0       	rjmp	.+2      	; 0x1488 <vfprintf+0x310>
    1486:	31 2c       	mov	r3, r1
    1488:	24 ff       	sbrs	r18, 4
    148a:	12 c0       	rjmp	.+36     	; 0x14b0 <vfprintf+0x338>
    148c:	b7 01       	movw	r22, r14
    148e:	80 e3       	ldi	r24, 0x30	; 48
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	2c 87       	std	Y+12, r18	; 0x0c
    1494:	0e 94 49 08 	call	0x1092	; 0x1092 <fputc>
    1498:	2c 85       	ldd	r18, Y+12	; 0x0c
    149a:	22 ff       	sbrs	r18, 2
    149c:	17 c0       	rjmp	.+46     	; 0x14cc <vfprintf+0x354>
    149e:	21 ff       	sbrs	r18, 1
    14a0:	03 c0       	rjmp	.+6      	; 0x14a8 <vfprintf+0x330>
    14a2:	88 e5       	ldi	r24, 0x58	; 88
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	02 c0       	rjmp	.+4      	; 0x14ac <vfprintf+0x334>
    14a8:	88 e7       	ldi	r24, 0x78	; 120
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	b7 01       	movw	r22, r14
    14ae:	0c c0       	rjmp	.+24     	; 0x14c8 <vfprintf+0x350>
    14b0:	82 2f       	mov	r24, r18
    14b2:	86 78       	andi	r24, 0x86	; 134
    14b4:	59 f0       	breq	.+22     	; 0x14cc <vfprintf+0x354>
    14b6:	21 fd       	sbrc	r18, 1
    14b8:	02 c0       	rjmp	.+4      	; 0x14be <vfprintf+0x346>
    14ba:	80 e2       	ldi	r24, 0x20	; 32
    14bc:	01 c0       	rjmp	.+2      	; 0x14c0 <vfprintf+0x348>
    14be:	8b e2       	ldi	r24, 0x2B	; 43
    14c0:	27 fd       	sbrc	r18, 7
    14c2:	8d e2       	ldi	r24, 0x2D	; 45
    14c4:	b7 01       	movw	r22, r14
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	0e 94 49 08 	call	0x1092	; 0x1092 <fputc>
    14cc:	a5 14       	cp	r10, r5
    14ce:	38 f4       	brcc	.+14     	; 0x14de <vfprintf+0x366>
    14d0:	b7 01       	movw	r22, r14
    14d2:	80 e3       	ldi	r24, 0x30	; 48
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	0e 94 49 08 	call	0x1092	; 0x1092 <fputc>
    14da:	5a 94       	dec	r5
    14dc:	f7 cf       	rjmp	.-18     	; 0x14cc <vfprintf+0x354>
    14de:	aa 94       	dec	r10
    14e0:	f4 01       	movw	r30, r8
    14e2:	ea 0d       	add	r30, r10
    14e4:	f1 1d       	adc	r31, r1
    14e6:	80 81       	ld	r24, Z
    14e8:	b7 01       	movw	r22, r14
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	0e 94 49 08 	call	0x1092	; 0x1092 <fputc>
    14f0:	a1 10       	cpse	r10, r1
    14f2:	f5 cf       	rjmp	.-22     	; 0x14de <vfprintf+0x366>
    14f4:	33 20       	and	r3, r3
    14f6:	09 f4       	brne	.+2      	; 0x14fa <vfprintf+0x382>
    14f8:	51 ce       	rjmp	.-862    	; 0x119c <vfprintf+0x24>
    14fa:	b7 01       	movw	r22, r14
    14fc:	80 e2       	ldi	r24, 0x20	; 32
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	0e 94 49 08 	call	0x1092	; 0x1092 <fputc>
    1504:	3a 94       	dec	r3
    1506:	f6 cf       	rjmp	.-20     	; 0x14f4 <vfprintf+0x37c>
    1508:	f7 01       	movw	r30, r14
    150a:	86 81       	ldd	r24, Z+6	; 0x06
    150c:	97 81       	ldd	r25, Z+7	; 0x07
    150e:	02 c0       	rjmp	.+4      	; 0x1514 <vfprintf+0x39c>
    1510:	8f ef       	ldi	r24, 0xFF	; 255
    1512:	9f ef       	ldi	r25, 0xFF	; 255
    1514:	2c 96       	adiw	r28, 0x0c	; 12
    1516:	e2 e1       	ldi	r30, 0x12	; 18
    1518:	0c 94 1e 0b 	jmp	0x163c	; 0x163c <__epilogue_restores__>

0000151c <strnlen_P>:
    151c:	fc 01       	movw	r30, r24
    151e:	05 90       	lpm	r0, Z+
    1520:	61 50       	subi	r22, 0x01	; 1
    1522:	70 40       	sbci	r23, 0x00	; 0
    1524:	01 10       	cpse	r0, r1
    1526:	d8 f7       	brcc	.-10     	; 0x151e <strnlen_P+0x2>
    1528:	80 95       	com	r24
    152a:	90 95       	com	r25
    152c:	8e 0f       	add	r24, r30
    152e:	9f 1f       	adc	r25, r31
    1530:	08 95       	ret

00001532 <strnlen>:
    1532:	fc 01       	movw	r30, r24
    1534:	61 50       	subi	r22, 0x01	; 1
    1536:	70 40       	sbci	r23, 0x00	; 0
    1538:	01 90       	ld	r0, Z+
    153a:	01 10       	cpse	r0, r1
    153c:	d8 f7       	brcc	.-10     	; 0x1534 <strnlen+0x2>
    153e:	80 95       	com	r24
    1540:	90 95       	com	r25
    1542:	8e 0f       	add	r24, r30
    1544:	9f 1f       	adc	r25, r31
    1546:	08 95       	ret

00001548 <__ultoa_invert>:
    1548:	fa 01       	movw	r30, r20
    154a:	aa 27       	eor	r26, r26
    154c:	28 30       	cpi	r18, 0x08	; 8
    154e:	51 f1       	breq	.+84     	; 0x15a4 <__ultoa_invert+0x5c>
    1550:	20 31       	cpi	r18, 0x10	; 16
    1552:	81 f1       	breq	.+96     	; 0x15b4 <__ultoa_invert+0x6c>
    1554:	e8 94       	clt
    1556:	6f 93       	push	r22
    1558:	6e 7f       	andi	r22, 0xFE	; 254
    155a:	6e 5f       	subi	r22, 0xFE	; 254
    155c:	7f 4f       	sbci	r23, 0xFF	; 255
    155e:	8f 4f       	sbci	r24, 0xFF	; 255
    1560:	9f 4f       	sbci	r25, 0xFF	; 255
    1562:	af 4f       	sbci	r26, 0xFF	; 255
    1564:	b1 e0       	ldi	r27, 0x01	; 1
    1566:	3e d0       	rcall	.+124    	; 0x15e4 <__ultoa_invert+0x9c>
    1568:	b4 e0       	ldi	r27, 0x04	; 4
    156a:	3c d0       	rcall	.+120    	; 0x15e4 <__ultoa_invert+0x9c>
    156c:	67 0f       	add	r22, r23
    156e:	78 1f       	adc	r23, r24
    1570:	89 1f       	adc	r24, r25
    1572:	9a 1f       	adc	r25, r26
    1574:	a1 1d       	adc	r26, r1
    1576:	68 0f       	add	r22, r24
    1578:	79 1f       	adc	r23, r25
    157a:	8a 1f       	adc	r24, r26
    157c:	91 1d       	adc	r25, r1
    157e:	a1 1d       	adc	r26, r1
    1580:	6a 0f       	add	r22, r26
    1582:	71 1d       	adc	r23, r1
    1584:	81 1d       	adc	r24, r1
    1586:	91 1d       	adc	r25, r1
    1588:	a1 1d       	adc	r26, r1
    158a:	20 d0       	rcall	.+64     	; 0x15cc <__ultoa_invert+0x84>
    158c:	09 f4       	brne	.+2      	; 0x1590 <__ultoa_invert+0x48>
    158e:	68 94       	set
    1590:	3f 91       	pop	r19
    1592:	2a e0       	ldi	r18, 0x0A	; 10
    1594:	26 9f       	mul	r18, r22
    1596:	11 24       	eor	r1, r1
    1598:	30 19       	sub	r19, r0
    159a:	30 5d       	subi	r19, 0xD0	; 208
    159c:	31 93       	st	Z+, r19
    159e:	de f6       	brtc	.-74     	; 0x1556 <__ultoa_invert+0xe>
    15a0:	cf 01       	movw	r24, r30
    15a2:	08 95       	ret
    15a4:	46 2f       	mov	r20, r22
    15a6:	47 70       	andi	r20, 0x07	; 7
    15a8:	40 5d       	subi	r20, 0xD0	; 208
    15aa:	41 93       	st	Z+, r20
    15ac:	b3 e0       	ldi	r27, 0x03	; 3
    15ae:	0f d0       	rcall	.+30     	; 0x15ce <__ultoa_invert+0x86>
    15b0:	c9 f7       	brne	.-14     	; 0x15a4 <__ultoa_invert+0x5c>
    15b2:	f6 cf       	rjmp	.-20     	; 0x15a0 <__ultoa_invert+0x58>
    15b4:	46 2f       	mov	r20, r22
    15b6:	4f 70       	andi	r20, 0x0F	; 15
    15b8:	40 5d       	subi	r20, 0xD0	; 208
    15ba:	4a 33       	cpi	r20, 0x3A	; 58
    15bc:	18 f0       	brcs	.+6      	; 0x15c4 <__ultoa_invert+0x7c>
    15be:	49 5d       	subi	r20, 0xD9	; 217
    15c0:	31 fd       	sbrc	r19, 1
    15c2:	40 52       	subi	r20, 0x20	; 32
    15c4:	41 93       	st	Z+, r20
    15c6:	02 d0       	rcall	.+4      	; 0x15cc <__ultoa_invert+0x84>
    15c8:	a9 f7       	brne	.-22     	; 0x15b4 <__ultoa_invert+0x6c>
    15ca:	ea cf       	rjmp	.-44     	; 0x15a0 <__ultoa_invert+0x58>
    15cc:	b4 e0       	ldi	r27, 0x04	; 4
    15ce:	a6 95       	lsr	r26
    15d0:	97 95       	ror	r25
    15d2:	87 95       	ror	r24
    15d4:	77 95       	ror	r23
    15d6:	67 95       	ror	r22
    15d8:	ba 95       	dec	r27
    15da:	c9 f7       	brne	.-14     	; 0x15ce <__ultoa_invert+0x86>
    15dc:	00 97       	sbiw	r24, 0x00	; 0
    15de:	61 05       	cpc	r22, r1
    15e0:	71 05       	cpc	r23, r1
    15e2:	08 95       	ret
    15e4:	9b 01       	movw	r18, r22
    15e6:	ac 01       	movw	r20, r24
    15e8:	0a 2e       	mov	r0, r26
    15ea:	06 94       	lsr	r0
    15ec:	57 95       	ror	r21
    15ee:	47 95       	ror	r20
    15f0:	37 95       	ror	r19
    15f2:	27 95       	ror	r18
    15f4:	ba 95       	dec	r27
    15f6:	c9 f7       	brne	.-14     	; 0x15ea <__ultoa_invert+0xa2>
    15f8:	62 0f       	add	r22, r18
    15fa:	73 1f       	adc	r23, r19
    15fc:	84 1f       	adc	r24, r20
    15fe:	95 1f       	adc	r25, r21
    1600:	a0 1d       	adc	r26, r0
    1602:	08 95       	ret

00001604 <__prologue_saves__>:
    1604:	2f 92       	push	r2
    1606:	3f 92       	push	r3
    1608:	4f 92       	push	r4
    160a:	5f 92       	push	r5
    160c:	6f 92       	push	r6
    160e:	7f 92       	push	r7
    1610:	8f 92       	push	r8
    1612:	9f 92       	push	r9
    1614:	af 92       	push	r10
    1616:	bf 92       	push	r11
    1618:	cf 92       	push	r12
    161a:	df 92       	push	r13
    161c:	ef 92       	push	r14
    161e:	ff 92       	push	r15
    1620:	0f 93       	push	r16
    1622:	1f 93       	push	r17
    1624:	cf 93       	push	r28
    1626:	df 93       	push	r29
    1628:	cd b7       	in	r28, 0x3d	; 61
    162a:	de b7       	in	r29, 0x3e	; 62
    162c:	ca 1b       	sub	r28, r26
    162e:	db 0b       	sbc	r29, r27
    1630:	0f b6       	in	r0, 0x3f	; 63
    1632:	f8 94       	cli
    1634:	de bf       	out	0x3e, r29	; 62
    1636:	0f be       	out	0x3f, r0	; 63
    1638:	cd bf       	out	0x3d, r28	; 61
    163a:	09 94       	ijmp

0000163c <__epilogue_restores__>:
    163c:	2a 88       	ldd	r2, Y+18	; 0x12
    163e:	39 88       	ldd	r3, Y+17	; 0x11
    1640:	48 88       	ldd	r4, Y+16	; 0x10
    1642:	5f 84       	ldd	r5, Y+15	; 0x0f
    1644:	6e 84       	ldd	r6, Y+14	; 0x0e
    1646:	7d 84       	ldd	r7, Y+13	; 0x0d
    1648:	8c 84       	ldd	r8, Y+12	; 0x0c
    164a:	9b 84       	ldd	r9, Y+11	; 0x0b
    164c:	aa 84       	ldd	r10, Y+10	; 0x0a
    164e:	b9 84       	ldd	r11, Y+9	; 0x09
    1650:	c8 84       	ldd	r12, Y+8	; 0x08
    1652:	df 80       	ldd	r13, Y+7	; 0x07
    1654:	ee 80       	ldd	r14, Y+6	; 0x06
    1656:	fd 80       	ldd	r15, Y+5	; 0x05
    1658:	0c 81       	ldd	r16, Y+4	; 0x04
    165a:	1b 81       	ldd	r17, Y+3	; 0x03
    165c:	aa 81       	ldd	r26, Y+2	; 0x02
    165e:	b9 81       	ldd	r27, Y+1	; 0x01
    1660:	ce 0f       	add	r28, r30
    1662:	d1 1d       	adc	r29, r1
    1664:	0f b6       	in	r0, 0x3f	; 63
    1666:	f8 94       	cli
    1668:	de bf       	out	0x3e, r29	; 62
    166a:	0f be       	out	0x3f, r0	; 63
    166c:	cd bf       	out	0x3d, r28	; 61
    166e:	ed 01       	movw	r28, r26
    1670:	08 95       	ret

00001672 <_exit>:
    1672:	f8 94       	cli

00001674 <__stop_program>:
    1674:	ff cf       	rjmp	.-2      	; 0x1674 <__stop_program>
