
wipro.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000003c4  00800200  00001986  00001a1a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001986  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001c1  008005c4  008005c4  00001dde  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001dde  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000530  00000000  00000000  00001e3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000059fb  00000000  00000000  0000236a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000017a4  00000000  00000000  00007d65  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001e91  00000000  00000000  00009509  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00001028  00000000  00000000  0000b39c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000dc3  00000000  00000000  0000c3c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000032d0  00000000  00000000  0000d187  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000480  00000000  00000000  00010457  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#include <util/delay.h>
#include "FPGA.h"

void SPI_FPGA_Init(void)
{
	FPGA_CS_DDR |= (1<<FPGA_SPI_CS);
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
	FPGA_CS_PORT |= (1<<FPGA_SPI_CS);
	
	WR_DDR |= 1<<FPGAWR;
       4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
       8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
       c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
	WR_PORT &= ~(1<<FPGAWR);
      10:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      14:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
	SPI_FPGA_Write(FPGA_Disable);
      18:	0c 94 2c 02 	jmp	0x458	; 0x458 <__vector_6>
      1c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
}

void setAtTiny2313()
{
	char shiftTempBuff[5] = {0x00, 0x1F, 0xF7, 0xD0, 0x00};
	SetShiftRegData(LOGIC, shiftTempBuff);
      20:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      24:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      28:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
	//Modify Values and shift again 
	shiftTempBuff[0] = 0x00;
      2c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
	shiftTempBuff[1] = 0x00;
	shiftTempBuff[2] = 0x00; //setting GND to ZIF19
      30:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
	shiftTempBuff[3] = 0x00;
	shiftTempBuff[4] = 0x00;
      34:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
	SetShiftRegData(PULL_DOWN, shiftTempBuff);
      38:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      3c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      40:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
	shiftTempBuff[0] = 0x00;
	shiftTempBuff[1] = 0x00;
      44:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
	shiftTempBuff[2] = 0x08; //setting GND to ZIF19
      48:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
	shiftTempBuff[3] = 0x00;
	shiftTempBuff[4] = 0x00;
      4c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
	SetShiftRegData(GROUND, shiftTempBuff);
      50:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__vector_20>
      54:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      58:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
	shiftTempBuff[0] = 0x00;
	shiftTempBuff[1] = 0x00;
      5c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
	shiftTempBuff[2] = 0x00;
	shiftTempBuff[3] = 0x00;
      60:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
	shiftTempBuff[4] = 0x00;
	SetShiftRegData(PULL_UP, shiftTempBuff);
      64:	0c 94 1a 08 	jmp	0x1034	; 0x1034 <__vector_25>
      68:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      6c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
	shiftTempBuff[0] = 0x00;
      70:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
	shiftTempBuff[1] = 0x20; //Setting VCC to ZIF29
      74:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
	shiftTempBuff[2] = 0x00;
	shiftTempBuff[3] = 0x00;
      78:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
	shiftTempBuff[4] = 0x00;
	SetShiftRegData(VCC, shiftTempBuff);
      7c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      80:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      84:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
	shiftTempBuff[0] = 0x00;
      88:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
	shiftTempBuff[1] = 0x00;
	shiftTempBuff[2] = 0x00;
      8c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
	shiftTempBuff[3] = 0x04; //Setting VPP to ZIF10
      90:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
	shiftTempBuff[4] = 0x00;
	SetShiftRegData(VPP, shiftTempBuff);
      94:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      98:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      9c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
	
	WriteShiftRegData();
      a0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
}
      a4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      a8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      ac:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      b0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      b4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
	_delay_us(25);
	CONTROL_PORT &= ~(1<<XTAL1);
	_delay_us(100);
	
	//Read data
	DATA_DDR = 0;
      b8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
	WR_PORT |= (1<<FPGAWR);
      bc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      c0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
	CONTROL_PORT &= ~(1<<OE);
	CONTROL_PORT &= ~(1<<BS1_PAGEL);
      c4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      c8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      cc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      d0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
	_delay_us(500);
	SignatureBytes[1] = DATA_PIN;
      d4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      d8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
	printf("0x%02X ", SignatureBytes[1]);
      dc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      e0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
	CONTROL_PORT |= 1<<OE;
      ea:	d1 e2       	ldi	r29, 0x21	; 33
	WR_PORT &= ~(1<<FPGAWR);
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
      f0:	15 e0       	ldi	r17, 0x05	; 5
      f2:	a0 e0       	ldi	r26, 0x00	; 0
      f4:	b2 e0       	ldi	r27, 0x02	; 2
	DATA_DDR = 0xFF;
      f6:	e6 e8       	ldi	r30, 0x86	; 134
      f8:	f9 e1       	ldi	r31, 0x19	; 25
      fa:	02 c0       	rjmp	.+4      	; 0x100 <__do_copy_data+0x10>
      fc:	05 90       	lpm	r0, Z+
      fe:	0d 92       	st	X+, r0
     100:	a4 3c       	cpi	r26, 0xC4	; 196
     102:	b1 07       	cpc	r27, r17
     104:	d9 f7       	brne	.-10     	; 0xfc <__do_copy_data+0xc>

00000106 <__do_clear_bss>:
     106:	27 e0       	ldi	r18, 0x07	; 7
	_delay_us(100);
	
	//Load Address Low Byte
	CONTROL_PORT &= ~(1<<XA1_BS2);
     108:	a4 ec       	ldi	r26, 0xC4	; 196
	CONTROL_PORT &= ~(1<<XA0);
     10a:	b5 e0       	ldi	r27, 0x05	; 5
	CONTROL_PORT &= ~(1<<BS1_PAGEL);
     10c:	01 c0       	rjmp	.+2      	; 0x110 <.do_clear_bss_start>

0000010e <.do_clear_bss_loop>:
	DATA_PORT = 0x02;
     10e:	1d 92       	st	X+, r1

00000110 <.do_clear_bss_start>:
     110:	a5 38       	cpi	r26, 0x85	; 133
     112:	b2 07       	cpc	r27, r18
     114:	e1 f7       	brne	.-8      	; 0x10e <.do_clear_bss_loop>
     116:	0e 94 95 09 	call	0x132a	; 0x132a <main>
     11a:	0c 94 c1 0c 	jmp	0x1982	; 0x1982 <_exit>

0000011e <__bad_interrupt>:
     11e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000122 <flagInit>:
     122:	10 92 28 06 	sts	0x0628, r1
     126:	10 92 29 06 	sts	0x0629, r1
	_delay_us(100);
	CONTROL_PORT |= 1<<XTAL1;
	_delay_us(25);
	CONTROL_PORT &= ~(1<<XTAL1);
     12a:	10 92 2a 06 	sts	0x062A, r1
     12e:	10 92 2b 06 	sts	0x062B, r1
     132:	10 92 2c 06 	sts	0x062C, r1
     136:	08 95       	ret

00000138 <pollingInit>:
	_delay_us(100);
	
	//Read data
	DATA_DDR = 0;
     138:	e1 e8       	ldi	r30, 0x81	; 129
     13a:	f0 e0       	ldi	r31, 0x00	; 0
	WR_PORT |= (1<<FPGAWR);
     13c:	80 81       	ld	r24, Z
     13e:	84 60       	ori	r24, 0x04	; 4
     140:	80 83       	st	Z, r24
	CONTROL_PORT &= ~(1<<OE);
     142:	10 92 84 00 	sts	0x0084, r1
     146:	10 92 85 00 	sts	0x0085, r1
     14a:	81 e0       	ldi	r24, 0x01	; 1
     14c:	80 93 6f 00 	sts	0x006F, r24
     150:	08 95       	ret

00000152 <ethernetPlugInit>:
	CONTROL_PORT &= ~(1<<BS1_PAGEL);
	_delay_us(500);
	SignatureBytes[2] = DATA_PIN;
     152:	80 e2       	ldi	r24, 0x20	; 32
     154:	8d bb       	out	0x1d, r24	; 29
     156:	84 e0       	ldi	r24, 0x04	; 4
     158:	80 93 6a 00 	sts	0x006A, r24
	printf("0x%02X ", SignatureBytes[2]);
     15c:	08 95       	ret

0000015e <checkWifiStatus>:
     15e:	0e 94 b5 05 	call	0xb6a	; 0xb6a <networkTest>
     162:	80 93 29 06 	sts	0x0629, r24
     166:	81 e0       	ldi	r24, 0x01	; 1
     168:	90 e0       	ldi	r25, 0x00	; 0
	CONTROL_PORT |= 1<<OE;
     16a:	08 95       	ret

0000016c <connectionInit>:
	WR_PORT &= ~(1<<FPGAWR);
     16c:	0e 94 b8 04 	call	0x970	; 0x970 <uart2_init>
     170:	0e 94 7e 06 	call	0xcfc	; 0xcfc <uart_init>
     174:	0e 94 71 05 	call	0xae2	; 0xae2 <SPI_Init>
	DATA_DDR = 0xFF;
     178:	0e 94 91 00 	call	0x122	; 0x122 <flagInit>
	DATA_PORT = 0x00;
     17c:	0e 94 a9 00 	call	0x152	; 0x152 <ethernetPlugInit>
	
	return SignatureBytes;
     180:	0e 94 af 00 	call	0x15e	; 0x15e <checkWifiStatus>
     184:	08 95       	ret

00000186 <clearFlags>:
     186:	cf 93       	push	r28
     188:	df 93       	push	r29
     18a:	80 91 28 06 	lds	r24, 0x0628
     18e:	88 23       	and	r24, r24
}
     190:	89 f1       	breq	.+98     	; 0x1f4 <clearFlags+0x6e>
     192:	61 e0       	ldi	r22, 0x01	; 1
     194:	70 e0       	ldi	r23, 0x00	; 0

int clearFlags()
{
	if(Flags[ETHERNET])
	{
		strcpy(filepath, GET);
     196:	84 ec       	ldi	r24, 0xC4	; 196
     198:	95 e0       	ldi	r25, 0x05	; 5
     19a:	0e 94 c3 09 	call	0x1386	; 0x1386 <strcpy>
		strcat(filepath, URL);
     19e:	c4 ec       	ldi	r28, 0xC4	; 196
     1a0:	d5 e0       	ldi	r29, 0x05	; 5
     1a2:	de 01       	movw	r26, r28
     1a4:	0d 90       	ld	r0, X+
     1a6:	00 20       	and	r0, r0
     1a8:	e9 f7       	brne	.-6      	; 0x1a4 <clearFlags+0x1e>
     1aa:	11 97       	sbiw	r26, 0x01	; 1
     1ac:	85 e1       	ldi	r24, 0x15	; 21
     1ae:	e6 e1       	ldi	r30, 0x16	; 22
     1b0:	f2 e0       	ldi	r31, 0x02	; 2
     1b2:	01 90       	ld	r0, Z+
     1b4:	0d 92       	st	X+, r0
     1b6:	8a 95       	dec	r24
     1b8:	e1 f7       	brne	.-8      	; 0x1b2 <clearFlags+0x2c>
		strcat(filepath, CLEAR_FLAG);
     1ba:	de 01       	movw	r26, r28
     1bc:	0d 90       	ld	r0, X+
     1be:	00 20       	and	r0, r0
     1c0:	e9 f7       	brne	.-6      	; 0x1bc <clearFlags+0x36>
     1c2:	11 97       	sbiw	r26, 0x01	; 1
     1c4:	82 e1       	ldi	r24, 0x12	; 18
     1c6:	eb e2       	ldi	r30, 0x2B	; 43
     1c8:	f2 e0       	ldi	r31, 0x02	; 2
     1ca:	01 90       	ld	r0, Z+
     1cc:	0d 92       	st	X+, r0
     1ce:	8a 95       	dec	r24
     1d0:	e1 f7       	brne	.-8      	; 0x1ca <clearFlags+0x44>
		strcat(filepath, WIPRO_ID);
     1d2:	09 90       	ld	r0, Y+
     1d4:	00 20       	and	r0, r0
     1d6:	e9 f7       	brne	.-6      	; 0x1d2 <clearFlags+0x4c>
     1d8:	de 01       	movw	r26, r28
     1da:	11 97       	sbiw	r26, 0x01	; 1
     1dc:	83 e1       	ldi	r24, 0x13	; 19
     1de:	ed e3       	ldi	r30, 0x3D	; 61
     1e0:	f2 e0       	ldi	r31, 0x02	; 2
     1e2:	01 90       	ld	r0, Z+
     1e4:	0d 92       	st	X+, r0
     1e6:	8a 95       	dec	r24
     1e8:	e1 f7       	brne	.-8      	; 0x1e2 <clearFlags+0x5c>
		//printf("Clear: %s\n", filepath);
		updateFileEthernet(filepath);
     1ea:	84 ec       	ldi	r24, 0xC4	; 196
     1ec:	95 e0       	ldi	r25, 0x05	; 5
     1ee:	0e 94 62 02 	call	0x4c4	; 0x4c4 <updateFileEthernet>
     1f2:	36 c0       	rjmp	.+108    	; 0x260 <clearFlags+0xda>
	}
	else if(Flags[WIFI])
     1f4:	80 91 29 06 	lds	r24, 0x0629
     1f8:	88 23       	and	r24, r24
     1fa:	91 f1       	breq	.+100    	; 0x260 <clearFlags+0xda>
	{
		strcpy(filepath, HTTP_GET);
     1fc:	c4 ec       	ldi	r28, 0xC4	; 196
     1fe:	d5 e0       	ldi	r29, 0x05	; 5
     200:	8a e0       	ldi	r24, 0x0A	; 10
     202:	e0 e5       	ldi	r30, 0x50	; 80
     204:	f2 e0       	ldi	r31, 0x02	; 2
     206:	de 01       	movw	r26, r28
     208:	01 90       	ld	r0, Z+
     20a:	0d 92       	st	X+, r0
     20c:	8a 95       	dec	r24
     20e:	e1 f7       	brne	.-8      	; 0x208 <clearFlags+0x82>
		strcat(filepath, URL); 
     210:	de 01       	movw	r26, r28
     212:	0d 90       	ld	r0, X+
     214:	00 20       	and	r0, r0
     216:	e9 f7       	brne	.-6      	; 0x212 <clearFlags+0x8c>
     218:	11 97       	sbiw	r26, 0x01	; 1
     21a:	85 e1       	ldi	r24, 0x15	; 21
     21c:	e6 e1       	ldi	r30, 0x16	; 22
     21e:	f2 e0       	ldi	r31, 0x02	; 2
     220:	01 90       	ld	r0, Z+
     222:	0d 92       	st	X+, r0
     224:	8a 95       	dec	r24
     226:	e1 f7       	brne	.-8      	; 0x220 <clearFlags+0x9a>
		strcat(filepath, CLEAR_FLAG);
     228:	de 01       	movw	r26, r28
     22a:	0d 90       	ld	r0, X+
     22c:	00 20       	and	r0, r0
     22e:	e9 f7       	brne	.-6      	; 0x22a <clearFlags+0xa4>
     230:	11 97       	sbiw	r26, 0x01	; 1
     232:	82 e1       	ldi	r24, 0x12	; 18
     234:	eb e2       	ldi	r30, 0x2B	; 43
     236:	f2 e0       	ldi	r31, 0x02	; 2
     238:	01 90       	ld	r0, Z+
     23a:	0d 92       	st	X+, r0
     23c:	8a 95       	dec	r24
     23e:	e1 f7       	brne	.-8      	; 0x238 <clearFlags+0xb2>
		strcat(filepath, WIPRO_ID);
     240:	09 90       	ld	r0, Y+
     242:	00 20       	and	r0, r0
     244:	e9 f7       	brne	.-6      	; 0x240 <clearFlags+0xba>
     246:	de 01       	movw	r26, r28
     248:	11 97       	sbiw	r26, 0x01	; 1
     24a:	83 e1       	ldi	r24, 0x13	; 19
     24c:	ed e3       	ldi	r30, 0x3D	; 61
     24e:	f2 e0       	ldi	r31, 0x02	; 2
     250:	01 90       	ld	r0, Z+
     252:	0d 92       	st	X+, r0
     254:	8a 95       	dec	r24
     256:	e1 f7       	brne	.-8      	; 0x250 <clearFlags+0xca>
		updateFileWifi(filepath);	
     258:	84 ec       	ldi	r24, 0xC4	; 196
     25a:	95 e0       	ldi	r25, 0x05	; 5
     25c:	0e 94 61 06 	call	0xcc2	; 0xcc2 <updateFileWifi>
	}
	
	memset(filepath, 0x00, 100);
     260:	84 e6       	ldi	r24, 0x64	; 100
     262:	e4 ec       	ldi	r30, 0xC4	; 196
     264:	f5 e0       	ldi	r31, 0x05	; 5
     266:	df 01       	movw	r26, r30
     268:	1d 92       	st	X+, r1
     26a:	8a 95       	dec	r24
     26c:	e9 f7       	brne	.-6      	; 0x268 <clearFlags+0xe2>
	return 1; 
}
     26e:	81 e0       	ldi	r24, 0x01	; 1
     270:	90 e0       	ldi	r25, 0x00	; 0
     272:	df 91       	pop	r29
     274:	cf 91       	pop	r28
     276:	08 95       	ret

00000278 <getHexFile>:
	memset(filepath, 0x00, 100);
	printf("Sent!");
}

int getHexFile()
{
     278:	0f 93       	push	r16
     27a:	1f 93       	push	r17
	//Flags[WIFI] = 1; 
	if(Flags[WIFI])
     27c:	80 91 29 06 	lds	r24, 0x0629
     280:	88 23       	and	r24, r24
     282:	b9 f1       	breq	.+110    	; 0x2f2 <getHexFile+0x7a>
	{
		strcpy(filepath, URL);
     284:	85 e1       	ldi	r24, 0x15	; 21
     286:	e6 e1       	ldi	r30, 0x16	; 22
     288:	f2 e0       	ldi	r31, 0x02	; 2
     28a:	a4 ec       	ldi	r26, 0xC4	; 196
     28c:	b5 e0       	ldi	r27, 0x05	; 5
     28e:	01 90       	ld	r0, Z+
     290:	0d 92       	st	X+, r0
     292:	8a 95       	dec	r24
     294:	e1 f7       	brne	.-8      	; 0x28e <getHexFile+0x16>
		strcat(filepath, HEX_FILE);
     296:	a4 ec       	ldi	r26, 0xC4	; 196
     298:	b5 e0       	ldi	r27, 0x05	; 5
     29a:	0d 90       	ld	r0, X+
     29c:	00 20       	and	r0, r0
     29e:	e9 f7       	brne	.-6      	; 0x29a <getHexFile+0x22>
     2a0:	11 97       	sbiw	r26, 0x01	; 1
     2a2:	84 e2       	ldi	r24, 0x24	; 36
     2a4:	e8 e9       	ldi	r30, 0x98	; 152
     2a6:	f2 e0       	ldi	r31, 0x02	; 2
     2a8:	01 90       	ld	r0, Z+
     2aa:	0d 92       	st	X+, r0
     2ac:	8a 95       	dec	r24
     2ae:	e1 f7       	brne	.-8      	; 0x2a8 <getHexFile+0x30>
		//setTestPrint(1);
		printf("Compress Flag Set!");
     2b0:	8c eb       	ldi	r24, 0xBC	; 188
     2b2:	92 e0       	ldi	r25, 0x02	; 2
     2b4:	9f 93       	push	r25
     2b6:	8f 93       	push	r24
     2b8:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <printf>
		setCompressFlag(1);
     2bc:	81 e0       	ldi	r24, 0x01	; 1
     2be:	0e 94 76 06 	call	0xcec	; 0xcec <setCompressFlag>
		getFileWifi(filepath, 1, HEX_FILE_ADDRESS, 1);
     2c2:	01 e0       	ldi	r16, 0x01	; 1
     2c4:	10 e0       	ldi	r17, 0x00	; 0
     2c6:	20 e0       	ldi	r18, 0x00	; 0
     2c8:	30 e0       	ldi	r19, 0x00	; 0
     2ca:	a9 01       	movw	r20, r18
     2cc:	61 e0       	ldi	r22, 0x01	; 1
     2ce:	70 e0       	ldi	r23, 0x00	; 0
     2d0:	84 ec       	ldi	r24, 0xC4	; 196
     2d2:	95 e0       	ldi	r25, 0x05	; 5
     2d4:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getFileWifi>
		compressFile(getTransmissionLength()); 
     2d8:	0e 94 75 07 	call	0xeea	; 0xeea <getTransmissionLength>
     2dc:	0e 94 4c 09 	call	0x1298	; 0x1298 <compressFile>
		//setCompressFlag(0); 
		RAMPrint(HEX_FILE_ADDRESS, 1045);
     2e0:	45 e1       	ldi	r20, 0x15	; 21
     2e2:	54 e0       	ldi	r21, 0x04	; 4
     2e4:	60 e0       	ldi	r22, 0x00	; 0
     2e6:	70 e0       	ldi	r23, 0x00	; 0
     2e8:	cb 01       	movw	r24, r22
     2ea:	0e 94 11 05 	call	0xa22	; 0xa22 <RAMPrint>
     2ee:	0f 90       	pop	r0
     2f0:	0f 90       	pop	r0
		//printf("Hex File Downloaded!\n");
	}
	
	return 1; 
}
     2f2:	81 e0       	ldi	r24, 0x01	; 1
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	1f 91       	pop	r17
     2f8:	0f 91       	pop	r16
     2fa:	08 95       	ret

000002fc <getFlagStatus>:

int getFlagStatus()
{
     2fc:	0f 93       	push	r16
     2fe:	1f 93       	push	r17
	TIMSK1 &= ~(1 << TOIE1);
     300:	ef e6       	ldi	r30, 0x6F	; 111
     302:	f0 e0       	ldi	r31, 0x00	; 0
     304:	80 81       	ld	r24, Z
     306:	8e 7f       	andi	r24, 0xFE	; 254
     308:	80 83       	st	Z, r24
		Flags[PROGRAM] = (RAMReadByte(STATUS_FLAG_ADDRESS) & 0x0F);
		Flags[NETWORK_SCAN] = (RAMReadByte(STATUS_FLAG_ADDRESS + 1) & 0x0F);
		Flags[NETWORK_CONNECT] = (RAMReadByte(STATUS_FLAG_ADDRESS + 2) & 0x0F); 
		//printf("Flag Status: %s\n", flags);  
	}
	else if(Flags[WIFI]){
     30a:	80 91 29 06 	lds	r24, 0x0629
     30e:	88 23       	and	r24, r24
     310:	09 f4       	brne	.+2      	; 0x314 <getFlagStatus+0x18>
     312:	51 c0       	rjmp	.+162    	; 0x3b6 <getFlagStatus+0xba>
		strcpy(filepath, URL);
     314:	85 e1       	ldi	r24, 0x15	; 21
     316:	e6 e1       	ldi	r30, 0x16	; 22
     318:	f2 e0       	ldi	r31, 0x02	; 2
     31a:	a4 ec       	ldi	r26, 0xC4	; 196
     31c:	b5 e0       	ldi	r27, 0x05	; 5
     31e:	01 90       	ld	r0, Z+
     320:	0d 92       	st	X+, r0
     322:	8a 95       	dec	r24
     324:	e1 f7       	brne	.-8      	; 0x31e <getFlagStatus+0x22>
		strcat(filepath, FLAG_FILE); 
     326:	a4 ec       	ldi	r26, 0xC4	; 196
     328:	b5 e0       	ldi	r27, 0x05	; 5
     32a:	0d 90       	ld	r0, X+
     32c:	00 20       	and	r0, r0
     32e:	e9 f7       	brne	.-6      	; 0x32a <getFlagStatus+0x2e>
     330:	11 97       	sbiw	r26, 0x01	; 1
     332:	85 e2       	ldi	r24, 0x25	; 37
     334:	ef ec       	ldi	r30, 0xCF	; 207
     336:	f2 e0       	ldi	r31, 0x02	; 2
     338:	01 90       	ld	r0, Z+
     33a:	0d 92       	st	X+, r0
     33c:	8a 95       	dec	r24
     33e:	e1 f7       	brne	.-8      	; 0x338 <getFlagStatus+0x3c>
		//setTestPrint(1);
		getFileWifi(filepath, 1, STATUS_FLAG_ADDRESS, 0); 
     340:	00 e0       	ldi	r16, 0x00	; 0
     342:	10 e0       	ldi	r17, 0x00	; 0
     344:	20 e0       	ldi	r18, 0x00	; 0
     346:	30 e3       	ldi	r19, 0x30	; 48
     348:	40 e0       	ldi	r20, 0x00	; 0
     34a:	50 e0       	ldi	r21, 0x00	; 0
     34c:	61 e0       	ldi	r22, 0x01	; 1
     34e:	70 e0       	ldi	r23, 0x00	; 0
     350:	84 ec       	ldi	r24, 0xC4	; 196
     352:	95 e0       	ldi	r25, 0x05	; 5
     354:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getFileWifi>
		printf("Ram Print: ");
     358:	84 ef       	ldi	r24, 0xF4	; 244
     35a:	92 e0       	ldi	r25, 0x02	; 2
     35c:	9f 93       	push	r25
     35e:	8f 93       	push	r24
     360:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <printf>
		RAMPrint(STATUS_FLAG_ADDRESS, 3);
     364:	43 e0       	ldi	r20, 0x03	; 3
     366:	50 e0       	ldi	r21, 0x00	; 0
     368:	60 e0       	ldi	r22, 0x00	; 0
     36a:	70 e3       	ldi	r23, 0x30	; 48
     36c:	80 e0       	ldi	r24, 0x00	; 0
     36e:	90 e0       	ldi	r25, 0x00	; 0
     370:	0e 94 11 05 	call	0xa22	; 0xa22 <RAMPrint>
		printf("\n");
     374:	8a e0       	ldi	r24, 0x0A	; 10
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	0e 94 10 0a 	call	0x1420	; 0x1420 <putchar>
		Flags[PROGRAM] = (RAMReadByte(STATUS_FLAG_ADDRESS) & 0x0F);
     37c:	60 e0       	ldi	r22, 0x00	; 0
     37e:	70 e3       	ldi	r23, 0x30	; 48
     380:	80 e0       	ldi	r24, 0x00	; 0
     382:	90 e0       	ldi	r25, 0x00	; 0
     384:	0e 94 7e 05 	call	0xafc	; 0xafc <RAMReadByte>
     388:	8f 70       	andi	r24, 0x0F	; 15
     38a:	80 93 2a 06 	sts	0x062A, r24
		Flags[NETWORK_SCAN] = (RAMReadByte(STATUS_FLAG_ADDRESS + 1) & 0x0F);
     38e:	61 e0       	ldi	r22, 0x01	; 1
     390:	70 e3       	ldi	r23, 0x30	; 48
     392:	80 e0       	ldi	r24, 0x00	; 0
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	0e 94 7e 05 	call	0xafc	; 0xafc <RAMReadByte>
     39a:	8f 70       	andi	r24, 0x0F	; 15
     39c:	80 93 2b 06 	sts	0x062B, r24
		Flags[NETWORK_CONNECT] = (RAMReadByte(STATUS_FLAG_ADDRESS + 2) & 0x0F);
     3a0:	62 e0       	ldi	r22, 0x02	; 2
     3a2:	70 e3       	ldi	r23, 0x30	; 48
     3a4:	80 e0       	ldi	r24, 0x00	; 0
     3a6:	90 e0       	ldi	r25, 0x00	; 0
     3a8:	0e 94 7e 05 	call	0xafc	; 0xafc <RAMReadByte>
     3ac:	8f 70       	andi	r24, 0x0F	; 15
     3ae:	80 93 2c 06 	sts	0x062C, r24
     3b2:	0f 90       	pop	r0
     3b4:	0f 90       	pop	r0
		
	}
	memset(filepath, 0x00, 100); 
     3b6:	84 e6       	ldi	r24, 0x64	; 100
     3b8:	e4 ec       	ldi	r30, 0xC4	; 196
     3ba:	f5 e0       	ldi	r31, 0x05	; 5
     3bc:	df 01       	movw	r26, r30
     3be:	1d 92       	st	X+, r1
     3c0:	8a 95       	dec	r24
     3c2:	e9 f7       	brne	.-6      	; 0x3be <getFlagStatus+0xc2>
	//Perform actions based on flags 
	if(Flags[PROGRAM] == 0x01)
     3c4:	80 91 2a 06 	lds	r24, 0x062A
     3c8:	81 30       	cpi	r24, 0x01	; 1
     3ca:	11 f4       	brne	.+4      	; 0x3d0 <getFlagStatus+0xd4>
		//printf("Program!\n");
		//PORTD &= ~(1<<CTS);
		//wifiDriverInit(); 
		//PORTD |= (1<<CTS); 
		//_delay_ms(2000); 
		getHexFile();
     3cc:	0e 94 3c 01 	call	0x278	; 0x278 <getHexFile>
		//printf("Network Connect!\n");
		//networkConnect("Wi-Pro", "brightshoe902"); 
		//getFileEthernet()
	}
	//_delay_ms(500);
	clearFlags(); 
     3d0:	0e 94 c3 00 	call	0x186	; 0x186 <clearFlags>
	TIMSK1 |= (1 << TOIE1);
     3d4:	ef e6       	ldi	r30, 0x6F	; 111
     3d6:	f0 e0       	ldi	r31, 0x00	; 0
     3d8:	80 81       	ld	r24, Z
     3da:	81 60       	ori	r24, 0x01	; 1
     3dc:	80 83       	st	Z, r24
	return 1; 
}
     3de:	81 e0       	ldi	r24, 0x01	; 1
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	1f 91       	pop	r17
     3e4:	0f 91       	pop	r16
     3e6:	08 95       	ret

000003e8 <__vector_20>:

//Timer overflow vector for polling 
ISR(TIMER1_OVF_vect)
{
     3e8:	1f 92       	push	r1
     3ea:	0f 92       	push	r0
     3ec:	0f b6       	in	r0, 0x3f	; 63
     3ee:	0f 92       	push	r0
     3f0:	11 24       	eor	r1, r1
     3f2:	2f 93       	push	r18
     3f4:	3f 93       	push	r19
     3f6:	4f 93       	push	r20
     3f8:	5f 93       	push	r21
     3fa:	6f 93       	push	r22
     3fc:	7f 93       	push	r23
     3fe:	8f 93       	push	r24
     400:	9f 93       	push	r25
     402:	af 93       	push	r26
     404:	bf 93       	push	r27
     406:	cf 93       	push	r28
     408:	df 93       	push	r29
     40a:	ef 93       	push	r30
     40c:	ff 93       	push	r31
	//cli(); 
	TIMSK1 &= ~(1 << TOIE1);
     40e:	cf e6       	ldi	r28, 0x6F	; 111
     410:	d0 e0       	ldi	r29, 0x00	; 0
     412:	88 81       	ld	r24, Y
     414:	8e 7f       	andi	r24, 0xFE	; 254
     416:	88 83       	st	Y, r24
	printf("Flag Status\n");
     418:	80 e0       	ldi	r24, 0x00	; 0
     41a:	93 e0       	ldi	r25, 0x03	; 3
     41c:	0e 94 17 0a 	call	0x142e	; 0x142e <puts>
	getFlagStatus(); 
     420:	0e 94 7e 01 	call	0x2fc	; 0x2fc <getFlagStatus>
	TCNT1L = 0x00;
     424:	10 92 84 00 	sts	0x0084, r1
	TCNT1H = 0x00;
     428:	10 92 85 00 	sts	0x0085, r1
	TIMSK1 |= (1 << TOIE1);
     42c:	88 81       	ld	r24, Y
     42e:	81 60       	ori	r24, 0x01	; 1
     430:	88 83       	st	Y, r24
	//sei();  
}
     432:	ff 91       	pop	r31
     434:	ef 91       	pop	r30
     436:	df 91       	pop	r29
     438:	cf 91       	pop	r28
     43a:	bf 91       	pop	r27
     43c:	af 91       	pop	r26
     43e:	9f 91       	pop	r25
     440:	8f 91       	pop	r24
     442:	7f 91       	pop	r23
     444:	6f 91       	pop	r22
     446:	5f 91       	pop	r21
     448:	4f 91       	pop	r20
     44a:	3f 91       	pop	r19
     44c:	2f 91       	pop	r18
     44e:	0f 90       	pop	r0
     450:	0f be       	out	0x3f, r0	; 63
     452:	0f 90       	pop	r0
     454:	1f 90       	pop	r1
     456:	18 95       	reti

00000458 <__vector_6>:

ISR(INT5_vect)
{
     458:	1f 92       	push	r1
     45a:	0f 92       	push	r0
     45c:	0f b6       	in	r0, 0x3f	; 63
     45e:	0f 92       	push	r0
     460:	11 24       	eor	r1, r1
     462:	2f 93       	push	r18
     464:	3f 93       	push	r19
     466:	4f 93       	push	r20
     468:	5f 93       	push	r21
     46a:	6f 93       	push	r22
     46c:	7f 93       	push	r23
     46e:	8f 93       	push	r24
     470:	9f 93       	push	r25
     472:	af 93       	push	r26
     474:	bf 93       	push	r27
     476:	ef 93       	push	r30
     478:	ff 93       	push	r31
	cli();
     47a:	f8 94       	cli
	if(PINE & (1<<INT5))
     47c:	65 9b       	sbis	0x0c, 5	; 12
     47e:	09 c0       	rjmp	.+18     	; 0x492 <__vector_6+0x3a>
	{
		Flags[ETHERNET] = 0; 
     480:	10 92 28 06 	sts	0x0628, r1
		checkWifiStatus(); 
     484:	0e 94 af 00 	call	0x15e	; 0x15e <checkWifiStatus>
		printf("Rising Edge!\n");
     488:	8c e0       	ldi	r24, 0x0C	; 12
     48a:	93 e0       	ldi	r25, 0x03	; 3
     48c:	0e 94 17 0a 	call	0x142e	; 0x142e <puts>
     490:	07 c0       	rjmp	.+14     	; 0x4a0 <__vector_6+0x48>
	}
	else
	{
		Flags[ETHERNET] = 1; 
     492:	81 e0       	ldi	r24, 0x01	; 1
     494:	80 93 28 06 	sts	0x0628, r24
		printf("Falling Edge!\n");
     498:	89 e1       	ldi	r24, 0x19	; 25
     49a:	93 e0       	ldi	r25, 0x03	; 3
     49c:	0e 94 17 0a 	call	0x142e	; 0x142e <puts>
	}
	sei();
     4a0:	78 94       	sei
}
     4a2:	ff 91       	pop	r31
     4a4:	ef 91       	pop	r30
     4a6:	bf 91       	pop	r27
     4a8:	af 91       	pop	r26
     4aa:	9f 91       	pop	r25
     4ac:	8f 91       	pop	r24
     4ae:	7f 91       	pop	r23
     4b0:	6f 91       	pop	r22
     4b2:	5f 91       	pop	r21
     4b4:	4f 91       	pop	r20
     4b6:	3f 91       	pop	r19
     4b8:	2f 91       	pop	r18
     4ba:	0f 90       	pop	r0
     4bc:	0f be       	out	0x3f, r0	; 63
     4be:	0f 90       	pop	r0
     4c0:	1f 90       	pop	r1
     4c2:	18 95       	reti

000004c4 <updateFileEthernet>:
	memset(httpBuff, 0x00, 100); 
	return receiveData; 
}

void updateFileEthernet(char* filepath)
{
     4c4:	cf 93       	push	r28
     4c6:	df 93       	push	r29
	//strncpy(httpBuff, "GET ", 4); 
	strcpy(httpBuff, filepath); 
     4c8:	bc 01       	movw	r22, r24
     4ca:	8d e2       	ldi	r24, 0x2D	; 45
     4cc:	96 e0       	ldi	r25, 0x06	; 6
     4ce:	0e 94 c3 09 	call	0x1386	; 0x1386 <strcpy>
	strncat(httpBuff, " HTTP/1.1 \nHost: www.wi-pro.us \n\n", 40); 
     4d2:	cd e2       	ldi	r28, 0x2D	; 45
     4d4:	d6 e0       	ldi	r29, 0x06	; 6
     4d6:	de 01       	movw	r26, r28
     4d8:	0d 90       	ld	r0, X+
     4da:	00 20       	and	r0, r0
     4dc:	e9 f7       	brne	.-6      	; 0x4d8 <updateFileEthernet+0x14>
     4de:	11 97       	sbiw	r26, 0x01	; 1
     4e0:	82 e2       	ldi	r24, 0x22	; 34
     4e2:	e7 e2       	ldi	r30, 0x27	; 39
     4e4:	f3 e0       	ldi	r31, 0x03	; 3
     4e6:	01 90       	ld	r0, Z+
     4e8:	0d 92       	st	X+, r0
     4ea:	8a 95       	dec	r24
     4ec:	e1 f7       	brne	.-8      	; 0x4e6 <updateFileEthernet+0x22>
	printf("%s", httpBuff); 
     4ee:	df 93       	push	r29
     4f0:	cf 93       	push	r28
     4f2:	8f e8       	ldi	r24, 0x8F	; 143
     4f4:	92 e0       	ldi	r25, 0x02	; 2
     4f6:	9f 93       	push	r25
     4f8:	8f 93       	push	r24
     4fa:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <printf>
	SendData(httpBuff, strlen(httpBuff), 0);
     4fe:	fe 01       	movw	r30, r28
     500:	01 90       	ld	r0, Z+
     502:	00 20       	and	r0, r0
     504:	e9 f7       	brne	.-6      	; 0x500 <updateFileEthernet+0x3c>
     506:	31 97       	sbiw	r30, 0x01	; 1
     508:	bf 01       	movw	r22, r30
     50a:	6d 52       	subi	r22, 0x2D	; 45
     50c:	76 40       	sbci	r23, 0x06	; 6
     50e:	40 e0       	ldi	r20, 0x00	; 0
     510:	50 e0       	ldi	r21, 0x00	; 0
     512:	ce 01       	movw	r24, r28
     514:	0e 94 76 03 	call	0x6ec	; 0x6ec <SendData>
	memset(httpBuff, 0x00, 100); 
     518:	84 e6       	ldi	r24, 0x64	; 100
     51a:	fe 01       	movw	r30, r28
     51c:	11 92       	st	Z+, r1
     51e:	8a 95       	dec	r24
     520:	e9 f7       	brne	.-6      	; 0x51c <updateFileEthernet+0x58>
     522:	0f 90       	pop	r0
     524:	0f 90       	pop	r0
     526:	0f 90       	pop	r0
     528:	0f 90       	pop	r0
}
     52a:	df 91       	pop	r29
     52c:	cf 91       	pop	r28
     52e:	08 95       	ret

00000530 <SPI_EthernetWrite>:
//}

void SPI_EthernetWrite(unsigned int addr,unsigned char data)
{
	// Activate the CS pin
	CS_PORT &= ~(1<<ETH_CS);
     530:	74 98       	cbi	0x0e, 4	; 14
	// Start Wiznet W5100 Write OpCode transmission
	SPDR = WIZNET_WRITE_OPCODE;
     532:	20 ef       	ldi	r18, 0xF0	; 240
     534:	2e bd       	out	0x2e, r18	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     536:	0d b4       	in	r0, 0x2d	; 45
     538:	07 fe       	sbrs	r0, 7
     53a:	fd cf       	rjmp	.-6      	; 0x536 <SPI_EthernetWrite+0x6>
	// Start Wiznet W5100 Address High Bytes transmission
	SPDR = (addr & 0xFF00) >> 8;
     53c:	9e bd       	out	0x2e, r25	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     53e:	0d b4       	in	r0, 0x2d	; 45
     540:	07 fe       	sbrs	r0, 7
     542:	fd cf       	rjmp	.-6      	; 0x53e <SPI_EthernetWrite+0xe>
	// Start Wiznet W5100 Address Low Bytes transmission
	SPDR = addr & 0x00FF;
     544:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     546:	0d b4       	in	r0, 0x2d	; 45
     548:	07 fe       	sbrs	r0, 7
     54a:	fd cf       	rjmp	.-6      	; 0x546 <SPI_EthernetWrite+0x16>

	// Start Data transmission
	SPDR = data;
     54c:	6e bd       	out	0x2e, r22	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     54e:	0d b4       	in	r0, 0x2d	; 45
     550:	07 fe       	sbrs	r0, 7
     552:	fd cf       	rjmp	.-6      	; 0x54e <SPI_EthernetWrite+0x1e>
	// CS pin is not active
	CS_PORT |= (1<<ETH_CS);
     554:	74 9a       	sbi	0x0e, 4	; 14
     556:	08 95       	ret

00000558 <SPI_EthernetRead>:
}

unsigned char SPI_EthernetRead(unsigned int addr)
{
	// Activate the CS pin
	CS_PORT &= ~(1<<ETH_CS);
     558:	74 98       	cbi	0x0e, 4	; 14
	// Start Wiznet W5100 Read OpCode transmission
	SPDR = WIZNET_READ_OPCODE;
     55a:	2f e0       	ldi	r18, 0x0F	; 15
     55c:	2e bd       	out	0x2e, r18	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     55e:	0d b4       	in	r0, 0x2d	; 45
     560:	07 fe       	sbrs	r0, 7
     562:	fd cf       	rjmp	.-6      	; 0x55e <SPI_EthernetRead+0x6>
	// Start Wiznet W5100 Address High Bytes transmission
	SPDR = (addr & 0xFF00) >> 8;
     564:	9e bd       	out	0x2e, r25	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     566:	0d b4       	in	r0, 0x2d	; 45
     568:	07 fe       	sbrs	r0, 7
     56a:	fd cf       	rjmp	.-6      	; 0x566 <SPI_EthernetRead+0xe>
	// Start Wiznet W5100 Address Low Bytes transmission
	SPDR = addr & 0x00FF;
     56c:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     56e:	0d b4       	in	r0, 0x2d	; 45
     570:	07 fe       	sbrs	r0, 7
     572:	fd cf       	rjmp	.-6      	; 0x56e <SPI_EthernetRead+0x16>

	// Send Dummy transmission for reading the data
	SPDR = 0x00;
     574:	1e bc       	out	0x2e, r1	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     576:	0d b4       	in	r0, 0x2d	; 45
     578:	07 fe       	sbrs	r0, 7
     57a:	fd cf       	rjmp	.-6      	; 0x576 <SPI_EthernetRead+0x1e>

	// CS pin is not active
	CS_PORT |= (1<<ETH_CS);
     57c:	74 9a       	sbi	0x0e, 4	; 14
	return(SPDR);
     57e:	8e b5       	in	r24, 0x2e	; 46
}
     580:	08 95       	ret

00000582 <Server_Connect>:
	//printf("Done Wiznet W5100 Initialized!\n");
	//Memory_Init(); 
}

int Server_Connect(uint8_t socketMode, uint8_t *server_ip_addr, uint8_t *server_port, uint8_t *source_port)
{
     582:	df 92       	push	r13
     584:	ef 92       	push	r14
     586:	ff 92       	push	r15
     588:	0f 93       	push	r16
     58a:	1f 93       	push	r17
     58c:	cf 93       	push	r28
     58e:	df 93       	push	r29
     590:	d8 2e       	mov	r13, r24
     592:	8b 01       	movw	r16, r22
     594:	7a 01       	movw	r14, r20
     596:	e9 01       	movw	r28, r18
	do 
	{
		//printf("SPI SR Status: %d\n", SPI_EthernetRead(S0_SR));
		SPI_EthernetWrite(S0_CR, CLOSE);
     598:	60 e1       	ldi	r22, 0x10	; 16
     59a:	81 e0       	ldi	r24, 0x01	; 1
     59c:	94 e0       	ldi	r25, 0x04	; 4
     59e:	0e 94 98 02 	call	0x530	; 0x530 <SPI_EthernetWrite>
		//SPI_Write(S0_MR, TCP_MODE);
		SPI_EthernetWrite(S0_MR, socketMode);
     5a2:	6d 2d       	mov	r22, r13
     5a4:	80 e0       	ldi	r24, 0x00	; 0
     5a6:	94 e0       	ldi	r25, 0x04	; 4
     5a8:	0e 94 98 02 	call	0x530	; 0x530 <SPI_EthernetWrite>
		//printf("Setting Source Port on Socket 0 %d%d\n",source_port[0],source_port[1]);
		SPI_EthernetWrite(S0_SPORT + 0, source_port[0]);
     5ac:	68 81       	ld	r22, Y
     5ae:	84 e0       	ldi	r24, 0x04	; 4
     5b0:	94 e0       	ldi	r25, 0x04	; 4
     5b2:	0e 94 98 02 	call	0x530	; 0x530 <SPI_EthernetWrite>
		SPI_EthernetWrite(S0_SPORT + 1, source_port[1]);
     5b6:	69 81       	ldd	r22, Y+1	; 0x01
     5b8:	85 e0       	ldi	r24, 0x05	; 5
     5ba:	94 e0       	ldi	r25, 0x04	; 4
     5bc:	0e 94 98 02 	call	0x530	; 0x530 <SPI_EthernetWrite>
		//printf("Reading Source Port on Socket 0 %d%d\n\n",SPI_EthernetRead(S0_SPORT),SPI_EthernetRead(S0_SPORT + 1));
		
		//printf("Setting Socket 0 to Open\n\n");
		SPI_EthernetWrite(S0_CR, OPEN);
     5c0:	61 e0       	ldi	r22, 0x01	; 1
     5c2:	81 e0       	ldi	r24, 0x01	; 1
     5c4:	94 e0       	ldi	r25, 0x04	; 4
     5c6:	0e 94 98 02 	call	0x530	; 0x530 <SPI_EthernetWrite>
		//printf("SPI SR Status: %d\n", SPI_EthernetRead(S0_SR));
		
	} while (SPI_EthernetRead(S0_SR) != SOCK_INIT);
     5ca:	83 e0       	ldi	r24, 0x03	; 3
     5cc:	94 e0       	ldi	r25, 0x04	; 4
     5ce:	0e 94 ac 02 	call	0x558	; 0x558 <SPI_EthernetRead>
     5d2:	83 31       	cpi	r24, 0x13	; 19
     5d4:	09 f7       	brne	.-62     	; 0x598 <Server_Connect+0x16>
	
	//Write Server IP to Socket 0 IP Register
	//printf("Setting Server IP Address %d.%d.%d.%d\n",server_ip_addr[0],server_ip_addr[1],\
	server_ip_addr[2],server_ip_addr[3]); 
	SPI_EthernetWrite(S0_DIPR + 0,server_ip_addr[0]);
     5d6:	f8 01       	movw	r30, r16
     5d8:	60 81       	ld	r22, Z
     5da:	8c e0       	ldi	r24, 0x0C	; 12
     5dc:	94 e0       	ldi	r25, 0x04	; 4
     5de:	0e 94 98 02 	call	0x530	; 0x530 <SPI_EthernetWrite>
	SPI_EthernetWrite(S0_DIPR + 1, server_ip_addr[1]);
     5e2:	f8 01       	movw	r30, r16
     5e4:	61 81       	ldd	r22, Z+1	; 0x01
     5e6:	8d e0       	ldi	r24, 0x0D	; 13
     5e8:	94 e0       	ldi	r25, 0x04	; 4
     5ea:	0e 94 98 02 	call	0x530	; 0x530 <SPI_EthernetWrite>
	SPI_EthernetWrite(S0_DIPR + 2,server_ip_addr[2]);
     5ee:	f8 01       	movw	r30, r16
     5f0:	62 81       	ldd	r22, Z+2	; 0x02
     5f2:	8e e0       	ldi	r24, 0x0E	; 14
     5f4:	94 e0       	ldi	r25, 0x04	; 4
     5f6:	0e 94 98 02 	call	0x530	; 0x530 <SPI_EthernetWrite>
	SPI_EthernetWrite(S0_DIPR + 3, server_ip_addr[3]);
     5fa:	f8 01       	movw	r30, r16
     5fc:	63 81       	ldd	r22, Z+3	; 0x03
     5fe:	8f e0       	ldi	r24, 0x0F	; 15
     600:	94 e0       	ldi	r25, 0x04	; 4
     602:	0e 94 98 02 	call	0x530	; 0x530 <SPI_EthernetWrite>
	SPI_EthernetRead(S0_DIPR + 2),SPI_EthernetRead(S0_DIPR + 3));
	//printf("SPI SR Status: 0x%02x\n", SPI_EthernetRead(S0_SR));
	
	//Write Server Port to Socket 0 IP Register 
	//printf("Setting Server Port\n");
	SPI_EthernetWrite(S0_DPORT + 0, server_port[0]); 
     606:	f7 01       	movw	r30, r14
     608:	60 81       	ld	r22, Z
     60a:	80 e1       	ldi	r24, 0x10	; 16
     60c:	94 e0       	ldi	r25, 0x04	; 4
     60e:	0e 94 98 02 	call	0x530	; 0x530 <SPI_EthernetWrite>
	SPI_EthernetWrite(S0_DPORT + 1, server_port[1]);
     612:	f7 01       	movw	r30, r14
     614:	61 81       	ldd	r22, Z+1	; 0x01
     616:	81 e1       	ldi	r24, 0x11	; 17
     618:	94 e0       	ldi	r25, 0x04	; 4
     61a:	0e 94 98 02 	call	0x530	; 0x530 <SPI_EthernetWrite>
	//printf("Reading S0_DPORT: %d%d\n\n",SPI_EthernetRead(S0_DPORT + 0),SPI_EthernetRead(S0_DPORT + 1)); 
	//printf("SPI SR Status: 0x%02x\n", SPI_EthernetRead(S0_SR));
	
	//Try to connect 
	SPI_EthernetWrite(S0_CR, CONNECT);
     61e:	64 e0       	ldi	r22, 0x04	; 4
     620:	81 e0       	ldi	r24, 0x01	; 1
     622:	94 e0       	ldi	r25, 0x04	; 4
     624:	0e 94 98 02 	call	0x530	; 0x530 <SPI_EthernetWrite>
	//while((SPI_EthernetRead(S0_IR) & 0x1F) != 0); 
	//while((SPI_EthernetRead(S0_SR) != SOCK_ESTABLISHED)); 

	//Check to see if connection has been established 
	unsigned int delayCount = 0; 
     628:	c0 e0       	ldi	r28, 0x00	; 0
     62a:	d0 e0       	ldi	r29, 0x00	; 0
	while(SPI_EthernetRead(S0_SR) != SOCK_ESTABLISHED)
	{
		_delay_us(300); 
		delayCount += 1; 
		//Every 3 seconds
		if(delayCount%10000 == 0)
     62c:	00 e1       	ldi	r16, 0x10	; 16
     62e:	17 e2       	ldi	r17, 0x27	; 39
	//while((SPI_EthernetRead(S0_IR) & 0x1F) != 0); 
	//while((SPI_EthernetRead(S0_SR) != SOCK_ESTABLISHED)); 

	//Check to see if connection has been established 
	unsigned int delayCount = 0; 
	while(SPI_EthernetRead(S0_SR) != SOCK_ESTABLISHED)
     630:	36 c0       	rjmp	.+108    	; 0x69e <Server_Connect+0x11c>
     632:	87 e5       	ldi	r24, 0x57	; 87
     634:	92 e0       	ldi	r25, 0x02	; 2
     636:	01 97       	sbiw	r24, 0x01	; 1
     638:	f1 f7       	brne	.-4      	; 0x636 <Server_Connect+0xb4>
     63a:	00 c0       	rjmp	.+0      	; 0x63c <Server_Connect+0xba>
     63c:	00 00       	nop
	{
		_delay_us(300); 
		delayCount += 1; 
     63e:	21 96       	adiw	r28, 0x01	; 1
		//Every 3 seconds
		if(delayCount%10000 == 0)
     640:	9e 01       	movw	r18, r28
     642:	32 95       	swap	r19
     644:	22 95       	swap	r18
     646:	2f 70       	andi	r18, 0x0F	; 15
     648:	23 27       	eor	r18, r19
     64a:	3f 70       	andi	r19, 0x0F	; 15
     64c:	23 27       	eor	r18, r19
     64e:	a7 e4       	ldi	r26, 0x47	; 71
     650:	b3 e0       	ldi	r27, 0x03	; 3
     652:	0e 94 a9 09 	call	0x1352	; 0x1352 <__umulhisi3>
     656:	96 95       	lsr	r25
     658:	87 95       	ror	r24
     65a:	96 95       	lsr	r25
     65c:	87 95       	ror	r24
     65e:	96 95       	lsr	r25
     660:	87 95       	ror	r24
     662:	80 9f       	mul	r24, r16
     664:	90 01       	movw	r18, r0
     666:	81 9f       	mul	r24, r17
     668:	30 0d       	add	r19, r0
     66a:	90 9f       	mul	r25, r16
     66c:	30 0d       	add	r19, r0
     66e:	11 24       	eor	r1, r1
     670:	c2 17       	cp	r28, r18
     672:	d3 07       	cpc	r29, r19
     674:	a1 f4       	brne	.+40     	; 0x69e <Server_Connect+0x11c>
		{
			printf("Trying to Establish Connection...\n");
     676:	83 e5       	ldi	r24, 0x53	; 83
     678:	93 e0       	ldi	r25, 0x03	; 3
     67a:	0e 94 17 0a 	call	0x142e	; 0x142e <puts>
			//delayCount = 0; 
			//15 seconds
			if(delayCount > 50000)
     67e:	c1 35       	cpi	r28, 0x51	; 81
     680:	93 ec       	ldi	r25, 0xC3	; 195
     682:	d9 07       	cpc	r29, r25
     684:	60 f0       	brcs	.+24     	; 0x69e <Server_Connect+0x11c>
			{
				printf("Timeout, disconnecting!\n"); 
     686:	85 e7       	ldi	r24, 0x75	; 117
     688:	93 e0       	ldi	r25, 0x03	; 3
     68a:	0e 94 17 0a 	call	0x142e	; 0x142e <puts>
				SPI_EthernetWrite(S0_CR, CLOSE); 
     68e:	60 e1       	ldi	r22, 0x10	; 16
     690:	81 e0       	ldi	r24, 0x01	; 1
     692:	94 e0       	ldi	r25, 0x04	; 4
     694:	0e 94 98 02 	call	0x530	; 0x530 <SPI_EthernetWrite>
				return 0; 
     698:	80 e0       	ldi	r24, 0x00	; 0
     69a:	90 e0       	ldi	r25, 0x00	; 0
     69c:	19 c0       	rjmp	.+50     	; 0x6d0 <Server_Connect+0x14e>
	//while((SPI_EthernetRead(S0_IR) & 0x1F) != 0); 
	//while((SPI_EthernetRead(S0_SR) != SOCK_ESTABLISHED)); 

	//Check to see if connection has been established 
	unsigned int delayCount = 0; 
	while(SPI_EthernetRead(S0_SR) != SOCK_ESTABLISHED)
     69e:	83 e0       	ldi	r24, 0x03	; 3
     6a0:	94 e0       	ldi	r25, 0x04	; 4
     6a2:	0e 94 ac 02 	call	0x558	; 0x558 <SPI_EthernetRead>
     6a6:	87 31       	cpi	r24, 0x17	; 23
     6a8:	21 f6       	brne	.-120    	; 0x632 <Server_Connect+0xb0>
				return 0; 
			}
		}
	}
	
	uint8_t sr_status = SPI_EthernetRead(S0_SR);
     6aa:	83 e0       	ldi	r24, 0x03	; 3
     6ac:	94 e0       	ldi	r25, 0x04	; 4
     6ae:	0e 94 ac 02 	call	0x558	; 0x558 <SPI_EthernetRead>
	if(sr_status == SOCK_ESTABLISHED)
     6b2:	87 31       	cpi	r24, 0x17	; 23
     6b4:	39 f4       	brne	.+14     	; 0x6c4 <Server_Connect+0x142>
	{
		//printf("SPI SR Status: 0x%02x\n", sr_status);
		printf("Connection Succeeded!\n\n");
     6b6:	8d e8       	ldi	r24, 0x8D	; 141
     6b8:	93 e0       	ldi	r25, 0x03	; 3
     6ba:	0e 94 17 0a 	call	0x142e	; 0x142e <puts>
		return 1; 
     6be:	81 e0       	ldi	r24, 0x01	; 1
     6c0:	90 e0       	ldi	r25, 0x00	; 0
     6c2:	06 c0       	rjmp	.+12     	; 0x6d0 <Server_Connect+0x14e>
	}
	//Connection Failed 
	else
	{
		//printf("SPI SR Status: 0x%02x\n", sr_status);
		printf("Could not connect. Exiting...\n\n");
     6c4:	84 ea       	ldi	r24, 0xA4	; 164
     6c6:	93 e0       	ldi	r25, 0x03	; 3
     6c8:	0e 94 17 0a 	call	0x142e	; 0x142e <puts>
		return 0; 
     6cc:	80 e0       	ldi	r24, 0x00	; 0
     6ce:	90 e0       	ldi	r25, 0x00	; 0
	}
}
     6d0:	df 91       	pop	r29
     6d2:	cf 91       	pop	r28
     6d4:	1f 91       	pop	r17
     6d6:	0f 91       	pop	r16
     6d8:	ff 90       	pop	r15
     6da:	ef 90       	pop	r14
     6dc:	df 90       	pop	r13
     6de:	08 95       	ret

000006e0 <SocketCommand>:
	return ((SPI_EthernetRead(S0_RX_RSR) & 0x00FF) << 8 ) + SPI_EthernetRead(S0_RX_RSR + 1);
}

void SocketCommand(uint8_t command) 
{
	SPI_EthernetWrite(S0_CR, command);
     6e0:	68 2f       	mov	r22, r24
     6e2:	81 e0       	ldi	r24, 0x01	; 1
     6e4:	94 e0       	ldi	r25, 0x04	; 4
     6e6:	0e 94 98 02 	call	0x530	; 0x530 <SPI_EthernetWrite>
     6ea:	08 95       	ret

000006ec <SendData>:
	S0_RX_MASK = 0x1FFF;
	S0_RX_BASE = 0x6000;
}

int SendData(const uint8_t *buffer,uint16_t bufferLength, int externRAM)
{
     6ec:	4f 92       	push	r4
     6ee:	5f 92       	push	r5
     6f0:	6f 92       	push	r6
     6f2:	7f 92       	push	r7
     6f4:	8f 92       	push	r8
     6f6:	9f 92       	push	r9
     6f8:	af 92       	push	r10
     6fa:	bf 92       	push	r11
     6fc:	cf 92       	push	r12
     6fe:	df 92       	push	r13
     700:	ef 92       	push	r14
     702:	ff 92       	push	r15
     704:	0f 93       	push	r16
     706:	1f 93       	push	r17
     708:	cf 93       	push	r28
     70a:	df 93       	push	r29
     70c:	7c 01       	movw	r14, r24
     70e:	6b 01       	movw	r12, r22
     710:	3a 01       	movw	r6, r20
		
	uint16_t ptr,offaddr,realaddr,txsize,timeout,i,data;
	printf("SR: 0x%02x\n", SPI_EthernetRead(S0_SR));
     712:	83 e0       	ldi	r24, 0x03	; 3
     714:	94 e0       	ldi	r25, 0x04	; 4
     716:	0e 94 ac 02 	call	0x558	; 0x558 <SPI_EthernetRead>
     71a:	1f 92       	push	r1
     71c:	8f 93       	push	r24
     71e:	83 ec       	ldi	r24, 0xC3	; 195
     720:	93 e0       	ldi	r25, 0x03	; 3
     722:	9f 93       	push	r25
     724:	8f 93       	push	r24
     726:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <printf>
	if(SPI_EthernetRead(S0_SR) != SOCK_ESTABLISHED){
     72a:	83 e0       	ldi	r24, 0x03	; 3
     72c:	94 e0       	ldi	r25, 0x04	; 4
     72e:	0e 94 ac 02 	call	0x558	; 0x558 <SPI_EthernetRead>
     732:	0f 90       	pop	r0
     734:	0f 90       	pop	r0
     736:	0f 90       	pop	r0
     738:	0f 90       	pop	r0
     73a:	87 31       	cpi	r24, 0x17	; 23
     73c:	59 f0       	breq	.+22     	; 0x754 <SendData+0x68>
		while(!Server_Connect(TCP_MODE, gl_server_ip_addr, gl_server_port, gl_source_port));
     73e:	20 e0       	ldi	r18, 0x00	; 0
     740:	32 e0       	ldi	r19, 0x02	; 2
     742:	42 e0       	ldi	r20, 0x02	; 2
     744:	52 e0       	ldi	r21, 0x02	; 2
     746:	64 e0       	ldi	r22, 0x04	; 4
     748:	72 e0       	ldi	r23, 0x02	; 2
     74a:	81 e0       	ldi	r24, 0x01	; 1
     74c:	0e 94 c1 02 	call	0x582	; 0x582 <Server_Connect>
     750:	89 2b       	or	r24, r25
     752:	a9 f3       	breq	.-22     	; 0x73e <SendData+0x52>
	}
	//#if _DEBUG_MODE
	//printf("Send Size: %d\n",bufferLength);
	//#endif
	// Make sure the TX Free Size Register is available
	txsize = SPI_EthernetRead(S0_TX_FSR);
     754:	80 e2       	ldi	r24, 0x20	; 32
     756:	94 e0       	ldi	r25, 0x04	; 4
     758:	0e 94 ac 02 	call	0x558	; 0x558 <SPI_EthernetRead>
     75c:	c8 2f       	mov	r28, r24
     75e:	d0 e0       	ldi	r29, 0x00	; 0
	txsize = (((txsize & 0x00FF) << 8 ) + SPI_EthernetRead(S0_TX_FSR + 1));
     760:	dc 2f       	mov	r29, r28
     762:	cc 27       	eor	r28, r28
     764:	81 e2       	ldi	r24, 0x21	; 33
     766:	94 e0       	ldi	r25, 0x04	; 4
     768:	0e 94 ac 02 	call	0x558	; 0x558 <SPI_EthernetRead>
     76c:	c8 0f       	add	r28, r24
     76e:	d1 1d       	adc	r29, r1
	//#if _DEBUG_MODE
	//printf("TX Free Size: %d\n",txsize);
	//#endif
	timeout = 0;
	//Writing our buffer to the transmit buffer
	while (txsize < bufferLength) {
     770:	cc 15       	cp	r28, r12
     772:	dd 05       	cpc	r29, r13
     774:	08 f4       	brcc	.+2      	; 0x778 <SendData+0x8c>
     776:	a0 c0       	rjmp	.+320    	; 0x8b8 <SendData+0x1cc>
     778:	30 c0       	rjmp	.+96     	; 0x7da <SendData+0xee>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     77a:	8f ec       	ldi	r24, 0xCF	; 207
     77c:	97 e0       	ldi	r25, 0x07	; 7
     77e:	01 97       	sbiw	r24, 0x01	; 1
     780:	f1 f7       	brne	.-4      	; 0x77e <SendData+0x92>
     782:	00 c0       	rjmp	.+0      	; 0x784 <SendData+0x98>
     784:	00 00       	nop
		_delay_ms(1);
		txsize = SPI_EthernetRead(S0_TX_FSR);
     786:	80 e2       	ldi	r24, 0x20	; 32
     788:	94 e0       	ldi	r25, 0x04	; 4
     78a:	0e 94 ac 02 	call	0x558	; 0x558 <SPI_EthernetRead>
     78e:	c8 2f       	mov	r28, r24
     790:	d0 e0       	ldi	r29, 0x00	; 0
		txsize = (((txsize & 0x00FF) << 8 ) + SPI_EthernetRead(S0_TX_FSR + 1));
     792:	dc 2f       	mov	r29, r28
     794:	cc 27       	eor	r28, r28
     796:	81 e2       	ldi	r24, 0x21	; 33
     798:	94 e0       	ldi	r25, 0x04	; 4
     79a:	0e 94 ac 02 	call	0x558	; 0x558 <SPI_EthernetRead>
     79e:	c8 0f       	add	r28, r24
     7a0:	d1 1d       	adc	r29, r1
		printf("TX Size: %d", txsize);
     7a2:	df 93       	push	r29
     7a4:	cf 93       	push	r28
     7a6:	9f 92       	push	r9
     7a8:	8f 92       	push	r8
     7aa:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <printf>
     7ae:	01 50       	subi	r16, 0x01	; 1
     7b0:	11 09       	sbc	r17, r1
		// Timeout for approx 1000 ms
		if (timeout++ > 1000) {
     7b2:	0f 90       	pop	r0
     7b4:	0f 90       	pop	r0
     7b6:	0f 90       	pop	r0
     7b8:	0f 90       	pop	r0
     7ba:	01 15       	cp	r16, r1
     7bc:	11 05       	cpc	r17, r1
     7be:	51 f4       	brne	.+20     	; 0x7d4 <SendData+0xe8>
			//#if _DEBUG_MODE
			//printf("TX Free Size Error!\n");
			//#endif
			// Disconnect the connection
			SocketCommand(DISCON);
     7c0:	88 e0       	ldi	r24, 0x08	; 8
     7c2:	0e 94 70 03 	call	0x6e0	; 0x6e0 <SocketCommand>
			while(SPI_EthernetRead(S0_CR));
     7c6:	81 e0       	ldi	r24, 0x01	; 1
     7c8:	94 e0       	ldi	r25, 0x04	; 4
     7ca:	0e 94 ac 02 	call	0x558	; 0x558 <SPI_EthernetRead>
     7ce:	81 11       	cpse	r24, r1
     7d0:	fa cf       	rjmp	.-12     	; 0x7c6 <SendData+0xda>
     7d2:	6c c0       	rjmp	.+216    	; 0x8ac <SendData+0x1c0>
	//#if _DEBUG_MODE
	//printf("TX Free Size: %d\n",txsize);
	//#endif
	timeout = 0;
	//Writing our buffer to the transmit buffer
	while (txsize < bufferLength) {
     7d4:	cc 15       	cp	r28, r12
     7d6:	dd 05       	cpc	r29, r13
     7d8:	80 f2       	brcs	.-96     	; 0x77a <SendData+0x8e>
			return 0;
		}
	}

	// Read the Tx Write Pointer
	ptr = SPI_EthernetRead(S0_TX_WR);
     7da:	84 e2       	ldi	r24, 0x24	; 36
     7dc:	94 e0       	ldi	r25, 0x04	; 4
     7de:	0e 94 ac 02 	call	0x558	; 0x558 <SPI_EthernetRead>
     7e2:	48 2e       	mov	r4, r24
	offaddr = (((ptr & 0x00FF) << 8 ) + SPI_EthernetRead(S0_TX_WR + 1));
     7e4:	85 e2       	ldi	r24, 0x25	; 37
     7e6:	94 e0       	ldi	r25, 0x04	; 4
     7e8:	0e 94 ac 02 	call	0x558	; 0x558 <SPI_EthernetRead>
			return 0;
		}
	}

	// Read the Tx Write Pointer
	ptr = SPI_EthernetRead(S0_TX_WR);
     7ec:	51 2c       	mov	r5, r1
	offaddr = (((ptr & 0x00FF) << 8 ) + SPI_EthernetRead(S0_TX_WR + 1));
     7ee:	54 2c       	mov	r5, r4
     7f0:	44 24       	eor	r4, r4
     7f2:	48 0e       	add	r4, r24
     7f4:	51 1c       	adc	r5, r1
	unsigned int startaddr = (((SPI_EthernetRead(S0_TX_RR) << 8) + SPI_EthernetRead(S0_TX_RR + 1)));
     7f6:	82 e2       	ldi	r24, 0x22	; 34
     7f8:	94 e0       	ldi	r25, 0x04	; 4
     7fa:	0e 94 ac 02 	call	0x558	; 0x558 <SPI_EthernetRead>
     7fe:	83 e2       	ldi	r24, 0x23	; 35
     800:	94 e0       	ldi	r25, 0x04	; 4
     802:	0e 94 ac 02 	call	0x558	; 0x558 <SPI_EthernetRead>
	//printf("Real WR: %d\n", realWR);
	//printf("Real RR: %d\n", realRR); 
	//#endif 
	i = 0; 
	data = 0; 
	printf("Sending...\n\n");
     806:	8b ed       	ldi	r24, 0xDB	; 219
     808:	93 e0       	ldi	r25, 0x03	; 3
     80a:	0e 94 17 0a 	call	0x142e	; 0x142e <puts>
	while(i < bufferLength) {
     80e:	c1 14       	cp	r12, r1
     810:	d1 04       	cpc	r13, r1
     812:	79 f1       	breq	.+94     	; 0x872 <SendData+0x186>
     814:	47 01       	movw	r8, r14
     816:	8c 0c       	add	r8, r12
     818:	9d 1c       	adc	r9, r13
		}
	}

	// Read the Tx Write Pointer
	ptr = SPI_EthernetRead(S0_TX_WR);
	offaddr = (((ptr & 0x00FF) << 8 ) + SPI_EthernetRead(S0_TX_WR + 1));
     81a:	82 01       	movw	r16, r4
	//printf("Real RR: %d\n", realRR); 
	//#endif 
	i = 0; 
	data = 0; 
	printf("Sending...\n\n");
	while(i < bufferLength) {
     81c:	c0 e0       	ldi	r28, 0x00	; 0
     81e:	d4 e0       	ldi	r29, 0x04	; 4

		// Calculate the real W5100 physical Tx Buffer Address
		realaddr = S0_TX_BASE + (offaddr & S0_TX_MASK);
     820:	a0 90 c3 06 	lds	r10, 0x06C3
     824:	b0 90 c4 06 	lds	r11, 0x06C4
     828:	a0 22       	and	r10, r16
     82a:	b1 22       	and	r11, r17
     82c:	80 91 c5 06 	lds	r24, 0x06C5
     830:	90 91 c6 06 	lds	r25, 0x06C6
     834:	a8 0e       	add	r10, r24
     836:	b9 1e       	adc	r11, r25
		//printf("TX Real Address: %d\n", realaddr);
		// Copy the application data to the W5100 Tx Buffer
		if(externRAM)
     838:	61 14       	cp	r6, r1
     83a:	71 04       	cpc	r7, r1
     83c:	51 f0       	breq	.+20     	; 0x852 <SendData+0x166>
		{
			//Grab the byte from external RAM and write it to the Wiznet TX Buffer 
			data = RAMReadByte(WIFI_QSTRING_ADDRESS + i);
     83e:	be 01       	movw	r22, r28
     840:	80 e0       	ldi	r24, 0x00	; 0
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	0e 94 7e 05 	call	0xafc	; 0xafc <RAMReadByte>
			//_delay_us(10);
			//printf("%c", data);
			SPI_EthernetWrite(realaddr, data);
     848:	68 2f       	mov	r22, r24
     84a:	c5 01       	movw	r24, r10
     84c:	0e 94 98 02 	call	0x530	; 0x530 <SPI_EthernetWrite>
     850:	05 c0       	rjmp	.+10     	; 0x85c <SendData+0x170>
			//_delay_us(10);
		}
		else
		{
			//printf("%c", *buffer);
			SPI_EthernetWrite(realaddr,*buffer);	
     852:	f7 01       	movw	r30, r14
     854:	60 81       	ld	r22, Z
     856:	c5 01       	movw	r24, r10
     858:	0e 94 98 02 	call	0x530	; 0x530 <SPI_EthernetWrite>
		}
		offaddr++;
     85c:	0f 5f       	subi	r16, 0xFF	; 255
     85e:	1f 4f       	sbci	r17, 0xFF	; 255
		buffer++;
     860:	ff ef       	ldi	r31, 0xFF	; 255
     862:	ef 1a       	sub	r14, r31
     864:	ff 0a       	sbc	r15, r31
     866:	21 96       	adiw	r28, 0x01	; 1
	//printf("Real RR: %d\n", realRR); 
	//#endif 
	i = 0; 
	data = 0; 
	printf("Sending...\n\n");
	while(i < bufferLength) {
     868:	e8 14       	cp	r14, r8
     86a:	f9 04       	cpc	r15, r9
     86c:	c9 f6       	brne	.-78     	; 0x820 <SendData+0x134>
     86e:	4c 0c       	add	r4, r12
     870:	5d 1c       	adc	r5, r13
		}
		offaddr++;
		buffer++;
		i++; 
	}
		SPI_EthernetWrite(realaddr + 1, 0x00);
     872:	60 e0       	ldi	r22, 0x00	; 0
     874:	c5 01       	movw	r24, r10
     876:	01 96       	adiw	r24, 0x01	; 1
     878:	0e 94 98 02 	call	0x530	; 0x530 <SPI_EthernetWrite>

	// Increase the S0_TX_WR value, so it points to the next transmit
	//printf("Offset After: %d\n", offaddr);
	ptr = SPI_EthernetRead(S0_TX_WR);
     87c:	84 e2       	ldi	r24, 0x24	; 36
     87e:	94 e0       	ldi	r25, 0x04	; 4
     880:	0e 94 ac 02 	call	0x558	; 0x558 <SPI_EthernetRead>
	//realWR = S0_TX_BASE + (offaddr & S0_TX_MASK);
	//printf("Real WR: %d\n", realWR);
	//printf("%d\n", (offaddr & 0xFF00) >> 8);
	//printf("%d\n", (offaddr & 0x00FF));
	//SPI_Write(S0_TX_WR,(offaddr & 0xFF00) >> 8 );
	SPI_EthernetWrite(S0_TX_WR, 0xFF);
     884:	6f ef       	ldi	r22, 0xFF	; 255
     886:	84 e2       	ldi	r24, 0x24	; 36
     888:	94 e0       	ldi	r25, 0x04	; 4
     88a:	0e 94 98 02 	call	0x530	; 0x530 <SPI_EthernetWrite>
	SPI_EthernetWrite(S0_TX_WR + 1,(offaddr & 0x00FF));
     88e:	64 2d       	mov	r22, r4
     890:	85 e2       	ldi	r24, 0x25	; 37
     892:	94 e0       	ldi	r25, 0x04	; 4
     894:	0e 94 98 02 	call	0x530	; 0x530 <SPI_EthernetWrite>
	//realRR = S0_TX_BASE + (startaddr & S0_TX_MASK);
	//printf("Real WR: %d\n", realWR);
	//printf("Real RR: %d\n", realRR);
	
	// Now Send the SEND command
	SocketCommand(SEND);
     898:	80 e2       	ldi	r24, 0x20	; 32
     89a:	0e 94 70 03 	call	0x6e0	; 0x6e0 <SocketCommand>
	//printf("WR Low: %d\n", SPI_Read(S0_TX_WR));
	//printf("WR High: %d\n", SPI_Read(S0_TX_WR + 1));
	// Wait for Sending Process
	while(SPI_EthernetRead(S0_CR));
     89e:	81 e0       	ldi	r24, 0x01	; 1
     8a0:	94 e0       	ldi	r25, 0x04	; 4
     8a2:	0e 94 ac 02 	call	0x558	; 0x558 <SPI_EthernetRead>
     8a6:	81 11       	cpse	r24, r1
     8a8:	fa cf       	rjmp	.-12     	; 0x89e <SendData+0x1b2>
     8aa:	03 c0       	rjmp	.+6      	; 0x8b2 <SendData+0x1c6>
			//printf("TX Free Size Error!\n");
			//#endif
			// Disconnect the connection
			SocketCommand(DISCON);
			while(SPI_EthernetRead(S0_CR));
			return 0;
     8ac:	80 e0       	ldi	r24, 0x00	; 0
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	2c c0       	rjmp	.+88     	; 0x90a <SendData+0x21e>
	//printf("WR Low: %d\n", SPI_Read(S0_TX_WR));
	//printf("WR High: %d\n", SPI_Read(S0_TX_WR + 1));
	// Wait for Sending Process
	while(SPI_EthernetRead(S0_CR));
	//while(!(SPI_EthernetRead(S0_IR) & (1<<SIR_SEND_OK))); 
	return 1;
     8b2:	81 e0       	ldi	r24, 0x01	; 1
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	29 c0       	rjmp	.+82     	; 0x90a <SendData+0x21e>
     8b8:	8f ec       	ldi	r24, 0xCF	; 207
     8ba:	97 e0       	ldi	r25, 0x07	; 7
     8bc:	01 97       	sbiw	r24, 0x01	; 1
     8be:	f1 f7       	brne	.-4      	; 0x8bc <SendData+0x1d0>
     8c0:	00 c0       	rjmp	.+0      	; 0x8c2 <SendData+0x1d6>
     8c2:	00 00       	nop
	//#endif
	timeout = 0;
	//Writing our buffer to the transmit buffer
	while (txsize < bufferLength) {
		_delay_ms(1);
		txsize = SPI_EthernetRead(S0_TX_FSR);
     8c4:	80 e2       	ldi	r24, 0x20	; 32
     8c6:	94 e0       	ldi	r25, 0x04	; 4
     8c8:	0e 94 ac 02 	call	0x558	; 0x558 <SPI_EthernetRead>
     8cc:	c8 2f       	mov	r28, r24
     8ce:	d0 e0       	ldi	r29, 0x00	; 0
		txsize = (((txsize & 0x00FF) << 8 ) + SPI_EthernetRead(S0_TX_FSR + 1));
     8d0:	dc 2f       	mov	r29, r28
     8d2:	cc 27       	eor	r28, r28
     8d4:	81 e2       	ldi	r24, 0x21	; 33
     8d6:	94 e0       	ldi	r25, 0x04	; 4
     8d8:	0e 94 ac 02 	call	0x558	; 0x558 <SPI_EthernetRead>
     8dc:	c8 0f       	add	r28, r24
     8de:	d1 1d       	adc	r29, r1
		printf("TX Size: %d", txsize);
     8e0:	df 93       	push	r29
     8e2:	cf 93       	push	r28
     8e4:	8f ec       	ldi	r24, 0xCF	; 207
     8e6:	93 e0       	ldi	r25, 0x03	; 3
     8e8:	9f 93       	push	r25
     8ea:	8f 93       	push	r24
     8ec:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <printf>
     8f0:	0f 90       	pop	r0
     8f2:	0f 90       	pop	r0
     8f4:	0f 90       	pop	r0
     8f6:	0f 90       	pop	r0
     8f8:	09 ee       	ldi	r16, 0xE9	; 233
     8fa:	13 e0       	ldi	r17, 0x03	; 3
     8fc:	0f 2e       	mov	r0, r31
     8fe:	ff ec       	ldi	r31, 0xCF	; 207
     900:	8f 2e       	mov	r8, r31
     902:	f3 e0       	ldi	r31, 0x03	; 3
     904:	9f 2e       	mov	r9, r31
     906:	f0 2d       	mov	r31, r0
     908:	65 cf       	rjmp	.-310    	; 0x7d4 <SendData+0xe8>
	//printf("WR High: %d\n", SPI_Read(S0_TX_WR + 1));
	// Wait for Sending Process
	while(SPI_EthernetRead(S0_CR));
	//while(!(SPI_EthernetRead(S0_IR) & (1<<SIR_SEND_OK))); 
	return 1;
}
     90a:	df 91       	pop	r29
     90c:	cf 91       	pop	r28
     90e:	1f 91       	pop	r17
     910:	0f 91       	pop	r16
     912:	ff 90       	pop	r15
     914:	ef 90       	pop	r14
     916:	df 90       	pop	r13
     918:	cf 90       	pop	r12
     91a:	bf 90       	pop	r11
     91c:	af 90       	pop	r10
     91e:	9f 90       	pop	r9
     920:	8f 90       	pop	r8
     922:	7f 90       	pop	r7
     924:	6f 90       	pop	r6
     926:	5f 90       	pop	r5
     928:	4f 90       	pop	r4
     92a:	08 95       	ret

0000092c <uart_sendStream>:
	putchar('m');
}


int uart_sendStream(char ch,FILE *stream)
{
     92c:	cf 93       	push	r28
     92e:	c8 2f       	mov	r28, r24
	if (ch == '\n')
     930:	8a 30       	cpi	r24, 0x0A	; 10
     932:	19 f4       	brne	.+6      	; 0x93a <uart_sendStream+0xe>
	uart_sendStream('\r', stream);
     934:	8d e0       	ldi	r24, 0x0D	; 13
     936:	0e 94 96 04 	call	0x92c	; 0x92c <uart_sendStream>
	while (!(UCSR2A & (1<<UDRE2)));
     93a:	e0 ed       	ldi	r30, 0xD0	; 208
     93c:	f0 e0       	ldi	r31, 0x00	; 0
     93e:	90 81       	ld	r25, Z
     940:	95 ff       	sbrs	r25, 5
     942:	fd cf       	rjmp	.-6      	; 0x93e <uart_sendStream+0x12>
	UDR2=ch;
     944:	c0 93 d6 00 	sts	0x00D6, r28
	return 0;
}
     948:	80 e0       	ldi	r24, 0x00	; 0
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	cf 91       	pop	r28
     94e:	08 95       	ret

00000950 <uart_receiveStream>:

int uart_receiveStream(FILE *stream)
{
     950:	cf 93       	push	r28
     952:	bc 01       	movw	r22, r24
	unsigned char ch;
	while (!(UCSR2A & (1<<RXC2)));
     954:	e0 ed       	ldi	r30, 0xD0	; 208
     956:	f0 e0       	ldi	r31, 0x00	; 0
     958:	80 81       	ld	r24, Z
     95a:	88 23       	and	r24, r24
     95c:	ec f7       	brge	.-6      	; 0x958 <uart_receiveStream+0x8>
	ch=UDR2;
     95e:	c0 91 d6 00 	lds	r28, 0x00D6

	/* Echo the Output Back to terminal */
	uart_sendStream(ch,stream);
     962:	8c 2f       	mov	r24, r28
     964:	0e 94 96 04 	call	0x92c	; 0x92c <uart_sendStream>

	return ch;
}
     968:	8c 2f       	mov	r24, r28
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	cf 91       	pop	r28
     96e:	08 95       	ret

00000970 <uart2_init>:

FILE uart_stream = FDEV_SETUP_STREAM(uart_sendStream, uart_receiveStream, _FDEV_SETUP_RW);

void uart2_init()
{
	UBRR2H = (((F_CPU/BAUD_RATE)/16)-1)>>8;	// set baud rate
     970:	10 92 d5 00 	sts	0x00D5, r1
	UBRR2L = (((F_CPU/BAUD_RATE)/16)-1);
     974:	83 e3       	ldi	r24, 0x33	; 51
     976:	80 93 d4 00 	sts	0x00D4, r24
	UCSR2B = (1<<RXEN2)|(1<<TXEN2); 		// enable Rx & Tx
     97a:	88 e1       	ldi	r24, 0x18	; 24
     97c:	80 93 d1 00 	sts	0x00D1, r24
	UCSR2C=  (1<<UCSZ21)|(1<<UCSZ20);  	       // config USART; 8N1
     980:	86 e0       	ldi	r24, 0x06	; 6
     982:	80 93 d2 00 	sts	0x00D2, r24
	//DDRD |= (1<<PORTD1)|(1<<PORTD0);
	// Define Output/Input Stream
	stdout = stdin = &uart_stream;
     986:	88 e0       	ldi	r24, 0x08	; 8
     988:	92 e0       	ldi	r25, 0x02	; 2
     98a:	90 93 80 07 	sts	0x0780, r25
     98e:	80 93 7f 07 	sts	0x077F, r24
     992:	90 93 82 07 	sts	0x0782, r25
     996:	80 93 81 07 	sts	0x0781, r24
     99a:	08 95       	ret

0000099c <setRAMStatus>:
}

void setRAMStatus(char mode)
{
	// Activate the CS pin
	RAM_PORT &= ~(1<<RAM_CS);
     99c:	a3 98       	cbi	0x14, 3	; 20
	SPDR = WRSR;
     99e:	91 e0       	ldi	r25, 0x01	; 1
     9a0:	9e bd       	out	0x2e, r25	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     9a2:	0d b4       	in	r0, 0x2d	; 45
     9a4:	07 fe       	sbrs	r0, 7
     9a6:	fd cf       	rjmp	.-6      	; 0x9a2 <setRAMStatus+0x6>
	// Start Data transmission
	SPDR = mode;
     9a8:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     9aa:	0d b4       	in	r0, 0x2d	; 45
     9ac:	07 fe       	sbrs	r0, 7
     9ae:	fd cf       	rjmp	.-6      	; 0x9aa <setRAMStatus+0xe>
	// CS pin is not active
	RAM_PORT |= (1<<RAM_CS);
     9b0:	a3 9a       	sbi	0x14, 3	; 20
     9b2:	08 95       	ret

000009b4 <SPI_WriteAddress>:
}

void SPI_WriteAddress(uint32_t address)
{
     9b4:	26 2f       	mov	r18, r22
     9b6:	97 2f       	mov	r25, r23
     9b8:	48 2f       	mov	r20, r24
	SPDR = WRITE;
     9ba:	82 e0       	ldi	r24, 0x02	; 2
     9bc:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     9be:	0d b4       	in	r0, 0x2d	; 45
     9c0:	07 fe       	sbrs	r0, 7
     9c2:	fd cf       	rjmp	.-6      	; 0x9be <SPI_WriteAddress+0xa>
	// Start Wiznet W5100 Address High Bytes transmission
	SPDR = (address & 0xFF0000) >> 16;
     9c4:	4e bd       	out	0x2e, r20	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     9c6:	0d b4       	in	r0, 0x2d	; 45
     9c8:	07 fe       	sbrs	r0, 7
     9ca:	fd cf       	rjmp	.-6      	; 0x9c6 <SPI_WriteAddress+0x12>
	// Start Wiznet W5100 Address Low Bytes transmission
	SPDR = (address & 0x00FF00) >> 8;
     9cc:	89 2f       	mov	r24, r25
     9ce:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     9d0:	0d b4       	in	r0, 0x2d	; 45
     9d2:	07 fe       	sbrs	r0, 7
     9d4:	fd cf       	rjmp	.-6      	; 0x9d0 <SPI_WriteAddress+0x1c>
	SPDR = (address & 0x0000FF);
     9d6:	2e bd       	out	0x2e, r18	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     9d8:	0d b4       	in	r0, 0x2d	; 45
     9da:	07 fe       	sbrs	r0, 7
     9dc:	fd cf       	rjmp	.-6      	; 0x9d8 <SPI_WriteAddress+0x24>
}
     9de:	08 95       	ret

000009e0 <SPI_WriteData>:

void SPI_WriteData(char data)
{
	// Start Data transmission
	SPDR = data;
     9e0:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     9e2:	0d b4       	in	r0, 0x2d	; 45
     9e4:	07 fe       	sbrs	r0, 7
     9e6:	fd cf       	rjmp	.-6      	; 0x9e2 <SPI_WriteData+0x2>
}
     9e8:	08 95       	ret

000009ea <SPI_ReadAddress>:

void SPI_ReadAddress(uint32_t address)
{
     9ea:	26 2f       	mov	r18, r22
     9ec:	97 2f       	mov	r25, r23
     9ee:	48 2f       	mov	r20, r24
	SPDR = READ;
     9f0:	83 e0       	ldi	r24, 0x03	; 3
     9f2:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     9f4:	0d b4       	in	r0, 0x2d	; 45
     9f6:	07 fe       	sbrs	r0, 7
     9f8:	fd cf       	rjmp	.-6      	; 0x9f4 <SPI_ReadAddress+0xa>
	SPDR = (address & 0xFF0000) >> 16;
     9fa:	4e bd       	out	0x2e, r20	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     9fc:	0d b4       	in	r0, 0x2d	; 45
     9fe:	07 fe       	sbrs	r0, 7
     a00:	fd cf       	rjmp	.-6      	; 0x9fc <SPI_ReadAddress+0x12>
	// Start Wiznet W5100 Address Low Bytes transmission
	SPDR = (address & 0x00FF00) >> 8;
     a02:	89 2f       	mov	r24, r25
     a04:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     a06:	0d b4       	in	r0, 0x2d	; 45
     a08:	07 fe       	sbrs	r0, 7
     a0a:	fd cf       	rjmp	.-6      	; 0xa06 <SPI_ReadAddress+0x1c>
	SPDR = (address & 0x0000FF);
     a0c:	2e bd       	out	0x2e, r18	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     a0e:	0d b4       	in	r0, 0x2d	; 45
     a10:	07 fe       	sbrs	r0, 7
     a12:	fd cf       	rjmp	.-6      	; 0xa0e <SPI_ReadAddress+0x24>
}
     a14:	08 95       	ret

00000a16 <SPI_ReadData>:

char SPI_ReadData()
{
	// Send Dummy transmission for reading the data
	SPDR = 0x00;
     a16:	1e bc       	out	0x2e, r1	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     a18:	0d b4       	in	r0, 0x2d	; 45
     a1a:	07 fe       	sbrs	r0, 7
     a1c:	fd cf       	rjmp	.-6      	; 0xa18 <SPI_ReadData+0x2>
	return(SPDR);
     a1e:	8e b5       	in	r24, 0x2e	; 46
}
     a20:	08 95       	ret

00000a22 <RAMPrint>:
	//printf("%d\n", buffer);
	return buffer; 
}

void RAMPrint(uint32_t startAddress, uint16_t length)
{
     a22:	ef 92       	push	r14
     a24:	ff 92       	push	r15
     a26:	0f 93       	push	r16
     a28:	1f 93       	push	r17
     a2a:	cf 93       	push	r28
     a2c:	df 93       	push	r29
     a2e:	c6 2f       	mov	r28, r22
     a30:	d7 2f       	mov	r29, r23
     a32:	18 2f       	mov	r17, r24
     a34:	09 2f       	mov	r16, r25
     a36:	7a 01       	movw	r14, r20
	//char* data = ""; 
	setRAMStatus(SEQ);
     a38:	80 e4       	ldi	r24, 0x40	; 64
     a3a:	0e 94 ce 04 	call	0x99c	; 0x99c <setRAMStatus>
	RAM_PORT &= ~(1<<RAM_CS);
     a3e:	a3 98       	cbi	0x14, 3	; 20
	SPI_ReadAddress(startAddress);
     a40:	6c 2f       	mov	r22, r28
     a42:	7d 2f       	mov	r23, r29
     a44:	81 2f       	mov	r24, r17
     a46:	90 2f       	mov	r25, r16
     a48:	0e 94 f5 04 	call	0x9ea	; 0x9ea <SPI_ReadAddress>
	printf("Address: 0x%06x\n", startAddress);
     a4c:	0f 93       	push	r16
     a4e:	1f 93       	push	r17
     a50:	df 93       	push	r29
     a52:	cf 93       	push	r28
     a54:	88 e1       	ldi	r24, 0x18	; 24
     a56:	94 e0       	ldi	r25, 0x04	; 4
     a58:	9f 93       	push	r25
     a5a:	8f 93       	push	r24
     a5c:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <printf>
	int i; 
	for(i=0; i<length; i++)
     a60:	0f 90       	pop	r0
     a62:	0f 90       	pop	r0
     a64:	0f 90       	pop	r0
     a66:	0f 90       	pop	r0
     a68:	0f 90       	pop	r0
     a6a:	0f 90       	pop	r0
     a6c:	e1 14       	cp	r14, r1
     a6e:	f1 04       	cpc	r15, r1
     a70:	a9 f0       	breq	.+42     	; 0xa9c <RAMPrint+0x7a>
     a72:	c0 e0       	ldi	r28, 0x00	; 0
     a74:	d0 e0       	ldi	r29, 0x00	; 0
	{
		printf("0x%02X ", SPI_ReadData());
     a76:	09 e2       	ldi	r16, 0x29	; 41
     a78:	14 e0       	ldi	r17, 0x04	; 4
     a7a:	0e 94 0b 05 	call	0xa16	; 0xa16 <SPI_ReadData>
     a7e:	1f 92       	push	r1
     a80:	8f 93       	push	r24
     a82:	1f 93       	push	r17
     a84:	0f 93       	push	r16
     a86:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <printf>
	setRAMStatus(SEQ);
	RAM_PORT &= ~(1<<RAM_CS);
	SPI_ReadAddress(startAddress);
	printf("Address: 0x%06x\n", startAddress);
	int i; 
	for(i=0; i<length; i++)
     a8a:	21 96       	adiw	r28, 0x01	; 1
     a8c:	0f 90       	pop	r0
     a8e:	0f 90       	pop	r0
     a90:	0f 90       	pop	r0
     a92:	0f 90       	pop	r0
     a94:	ce 15       	cp	r28, r14
     a96:	df 05       	cpc	r29, r15
     a98:	81 f7       	brne	.-32     	; 0xa7a <RAMPrint+0x58>
     a9a:	02 c0       	rjmp	.+4      	; 0xaa0 <RAMPrint+0x7e>
     a9c:	e1 2c       	mov	r14, r1
     a9e:	f1 2c       	mov	r15, r1
	{
		printf("0x%02X ", SPI_ReadData());
	}
	RAM_PORT |= (1<<RAM_CS); 
     aa0:	a3 9a       	sbi	0x14, 3	; 20
	printf("\nSize: %d\n", i); 
     aa2:	ff 92       	push	r15
     aa4:	ef 92       	push	r14
     aa6:	81 e3       	ldi	r24, 0x31	; 49
     aa8:	94 e0       	ldi	r25, 0x04	; 4
     aaa:	9f 93       	push	r25
     aac:	8f 93       	push	r24
     aae:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <printf>
     ab2:	0f 90       	pop	r0
     ab4:	0f 90       	pop	r0
     ab6:	0f 90       	pop	r0
     ab8:	0f 90       	pop	r0
}
     aba:	df 91       	pop	r29
     abc:	cf 91       	pop	r28
     abe:	1f 91       	pop	r17
     ac0:	0f 91       	pop	r16
     ac2:	ff 90       	pop	r15
     ac4:	ef 90       	pop	r14
     ac6:	08 95       	ret

00000ac8 <RAMWriteByte>:

void RAMWriteByte(char data, uint32_t address)
{
     ac8:	cf 93       	push	r28
     aca:	c8 2f       	mov	r28, r24
	RAM_PORT &= ~(1<<RAM_CS);
     acc:	a3 98       	cbi	0x14, 3	; 20
	SPI_WriteAddress(address);
     ace:	cb 01       	movw	r24, r22
     ad0:	ba 01       	movw	r22, r20
     ad2:	0e 94 da 04 	call	0x9b4	; 0x9b4 <SPI_WriteAddress>
	SPI_WriteData(data);
     ad6:	8c 2f       	mov	r24, r28
     ad8:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <SPI_WriteData>
	RAM_PORT |= (1<<RAM_CS);
     adc:	a3 9a       	sbi	0x14, 3	; 20
}
     ade:	cf 91       	pop	r28
     ae0:	08 95       	ret

00000ae2 <SPI_Init>:


void SPI_Init()
{
	// Set MOSI ,SCK, and SS as output, others as input
	SPI_DDR = (1<<MOSI)|(1<<SCK)|(1<<SS);
     ae2:	87 e0       	ldi	r24, 0x07	; 7
     ae4:	84 b9       	out	0x04, r24	; 4
	// CS pin is not active
	RAM_DDR |= (1<<RAM_CS);
     ae6:	9b 9a       	sbi	0x13, 3	; 19
	RAM_PORT |= (1<<RAM_CS);
     ae8:	a3 9a       	sbi	0x14, 3	; 20
	
	// Enable SPI, Master Mode 0, set the clock rate fck/16
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
     aea:	81 e5       	ldi	r24, 0x51	; 81
     aec:	8c bd       	out	0x2c, r24	; 44
	RAMWriteByte(0x32, 0000);
     aee:	40 e0       	ldi	r20, 0x00	; 0
     af0:	50 e0       	ldi	r21, 0x00	; 0
     af2:	ba 01       	movw	r22, r20
     af4:	82 e3       	ldi	r24, 0x32	; 50
     af6:	0e 94 64 05 	call	0xac8	; 0xac8 <RAMWriteByte>
     afa:	08 95       	ret

00000afc <RAMReadByte>:
	RAM_PORT |= (1<<RAM_CS);
}

char RAMReadByte(uint32_t address)
{
	RAM_PORT &= ~(1<<RAM_CS);
     afc:	a3 98       	cbi	0x14, 3	; 20
	SPI_ReadAddress(address);
     afe:	0e 94 f5 04 	call	0x9ea	; 0x9ea <SPI_ReadAddress>
	char data = SPI_ReadData();
     b02:	0e 94 0b 05 	call	0xa16	; 0xa16 <SPI_ReadData>
	RAM_PORT |= (1<<RAM_CS);
     b06:	a3 9a       	sbi	0x14, 3	; 20
	return data; 
}
     b08:	08 95       	ret

00000b0a <networkConnect>:
	//printf("\n");
	return ""; 
}

int networkConnect(char* SSID, char* password)
{
     b0a:	cf 93       	push	r28
     b0c:	df 93       	push	r29
     b0e:	eb 01       	movw	r28, r22
	//printf("Begin Network Connection.\n");
	sendCommand(SET, WLAN_SSID, SSID);
     b10:	ac 01       	movw	r20, r24
     b12:	61 ea       	ldi	r22, 0xA1	; 161
     b14:	74 e0       	ldi	r23, 0x04	; 4
     b16:	82 e0       	ldi	r24, 0x02	; 2
     b18:	0e 94 9b 07 	call	0xf36	; 0xf36 <sendCommand>
	//printf("Set Password\n");
	sendCommand(SET, WLAN_PWD, password);
     b1c:	ae 01       	movw	r20, r28
     b1e:	6b ea       	ldi	r22, 0xAB	; 171
     b20:	74 e0       	ldi	r23, 0x04	; 4
     b22:	82 e0       	ldi	r24, 0x02	; 2
     b24:	0e 94 9b 07 	call	0xf36	; 0xf36 <sendCommand>
	sendCommand(NOPREFIX, HTTP_GET, "www.wi-pro.us"); 
     b28:	4d e1       	ldi	r20, 0x1D	; 29
     b2a:	52 e0       	ldi	r21, 0x02	; 2
     b2c:	60 e5       	ldi	r22, 0x50	; 80
     b2e:	72 e0       	ldi	r23, 0x02	; 2
     b30:	8f ef       	ldi	r24, 0xFF	; 255
     b32:	0e 94 9b 07 	call	0xf36	; 0xf36 <sendCommand>
	if(errorCheck()){
     b36:	0e 94 7d 07 	call	0xefa	; 0xefa <errorCheck>
     b3a:	89 2b       	or	r24, r25
     b3c:	51 f0       	breq	.+20     	; 0xb52 <networkConnect+0x48>
		sendCommand(NOPREFIX, STREAM_CLOSE, NOVAL);
     b3e:	48 e4       	ldi	r20, 0x48	; 72
     b40:	53 e0       	ldi	r21, 0x03	; 3
     b42:	68 eb       	ldi	r22, 0xB8	; 184
     b44:	74 e0       	ldi	r23, 0x04	; 4
     b46:	8f ef       	ldi	r24, 0xFF	; 255
     b48:	0e 94 9b 07 	call	0xf36	; 0xf36 <sendCommand>
		return 0;
     b4c:	80 e0       	ldi	r24, 0x00	; 0
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	09 c0       	rjmp	.+18     	; 0xb64 <networkConnect+0x5a>
	}

	else{
		sendCommand(NOPREFIX, STREAM_CLOSE, NOVAL);
     b52:	48 e4       	ldi	r20, 0x48	; 72
     b54:	53 e0       	ldi	r21, 0x03	; 3
     b56:	68 eb       	ldi	r22, 0xB8	; 184
     b58:	74 e0       	ldi	r23, 0x04	; 4
     b5a:	8f ef       	ldi	r24, 0xFF	; 255
     b5c:	0e 94 9b 07 	call	0xf36	; 0xf36 <sendCommand>
		return 1;
     b60:	81 e0       	ldi	r24, 0x01	; 1
     b62:	90 e0       	ldi	r25, 0x00	; 0
	}

}
     b64:	df 91       	pop	r29
     b66:	cf 91       	pop	r28
     b68:	08 95       	ret

00000b6a <networkTest>:

int networkTest()
{
	enableReceiveINT();
     b6a:	0e 94 c2 06 	call	0xd84	; 0xd84 <enableReceiveINT>
	sendCommand(NOPREFIX, HTTP_GET, "wwww.wi-pro.us");
     b6e:	49 ec       	ldi	r20, 0xC9	; 201
     b70:	54 e0       	ldi	r21, 0x04	; 4
     b72:	60 e5       	ldi	r22, 0x50	; 80
     b74:	72 e0       	ldi	r23, 0x02	; 2
     b76:	8f ef       	ldi	r24, 0xFF	; 255
     b78:	0e 94 9b 07 	call	0xf36	; 0xf36 <sendCommand>
	receiveStatus(); 
     b7c:	0e 94 d3 06 	call	0xda6	; 0xda6 <receiveStatus>
	if(errorCheck()){
     b80:	0e 94 7d 07 	call	0xefa	; 0xefa <errorCheck>
     b84:	89 2b       	or	r24, r25
     b86:	51 f0       	breq	.+20     	; 0xb9c <networkTest+0x32>
		sendCommand(NOPREFIX, STREAM_CLOSE, NOVAL);
     b88:	48 e4       	ldi	r20, 0x48	; 72
     b8a:	53 e0       	ldi	r21, 0x03	; 3
     b8c:	68 eb       	ldi	r22, 0xB8	; 184
     b8e:	74 e0       	ldi	r23, 0x04	; 4
     b90:	8f ef       	ldi	r24, 0xFF	; 255
     b92:	0e 94 9b 07 	call	0xf36	; 0xf36 <sendCommand>
		return 0;
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	08 95       	ret
	}

	else{
		sendCommand(NOPREFIX, STREAM_CLOSE, NOVAL);
     b9c:	48 e4       	ldi	r20, 0x48	; 72
     b9e:	53 e0       	ldi	r21, 0x03	; 3
     ba0:	68 eb       	ldi	r22, 0xB8	; 184
     ba2:	74 e0       	ldi	r23, 0x04	; 4
     ba4:	8f ef       	ldi	r24, 0xFF	; 255
     ba6:	0e 94 9b 07 	call	0xf36	; 0xf36 <sendCommand>
		return 1;
     baa:	81 e0       	ldi	r24, 0x01	; 1
     bac:	90 e0       	ldi	r25, 0x00	; 0
	}
}
     bae:	08 95       	ret

00000bb0 <getFileWifi>:
	j+=strlen(footer)-1; 
	return j; 
}

char* getFileWifi(char* filepath, int externRAM, uint32_t RAMAddress, int multiReceive)
{ 
     bb0:	2f 92       	push	r2
     bb2:	3f 92       	push	r3
     bb4:	4f 92       	push	r4
     bb6:	5f 92       	push	r5
     bb8:	6f 92       	push	r6
     bba:	7f 92       	push	r7
     bbc:	8f 92       	push	r8
     bbe:	9f 92       	push	r9
     bc0:	af 92       	push	r10
     bc2:	bf 92       	push	r11
     bc4:	cf 92       	push	r12
     bc6:	df 92       	push	r13
     bc8:	ef 92       	push	r14
     bca:	ff 92       	push	r15
     bcc:	0f 93       	push	r16
     bce:	1f 93       	push	r17
     bd0:	cf 93       	push	r28
     bd2:	df 93       	push	r29
     bd4:	ec 01       	movw	r28, r24
     bd6:	6b 01       	movw	r12, r22
     bd8:	49 01       	movw	r8, r18
     bda:	5a 01       	movw	r10, r20
	//printf("Filepath: %s\n", filepath);
	//enableReceiveINT();
	//setTestPrint(1); 
	enableReceiveINT();   
     bdc:	0e 94 c2 06 	call	0xd84	; 0xd84 <enableReceiveINT>
	PORTD &= ~(1<<CTS);
     be0:	5c 98       	cbi	0x0b, 4	; 11
	setReceiveCounter(0);
     be2:	80 e0       	ldi	r24, 0x00	; 0
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	0e 94 79 06 	call	0xcf2	; 0xcf2 <setReceiveCounter>
	uint16_t i = 0; 
	char* receiveHeader; 
	//setCompressFlag(1);
	PORTD |= (1<<CTS);
     bea:	5c 9a       	sbi	0x0b, 4	; 11
	sendCommand(NOPREFIX, HTTP_GET, filepath);
     bec:	ae 01       	movw	r20, r28
     bee:	60 e5       	ldi	r22, 0x50	; 80
     bf0:	72 e0       	ldi	r23, 0x02	; 2
     bf2:	8f ef       	ldi	r24, 0xFF	; 255
     bf4:	0e 94 9b 07 	call	0xf36	; 0xf36 <sendCommand>
	receiveStatus();
     bf8:	0e 94 d3 06 	call	0xda6	; 0xda6 <receiveStatus>
	//enableReceiveINT();
	//setTestPrint(1); 
	enableReceiveINT();   
	PORTD &= ~(1<<CTS);
	setReceiveCounter(0);
	uint16_t i = 0; 
     bfc:	e1 2c       	mov	r14, r1
     bfe:	f1 2c       	mov	r15, r1
			printf("RAM Address: %d\n", RAMAddress+i); 
		}
		sendCommand(NOPREFIX, STREAM_READ, "0 10000");
		receiveStatus();
		receiveHeader = getMessageHeader(); 
		printf("Tran Length: %d\n", receiveHeader); 
     c00:	0f 2e       	mov	r0, r31
     c02:	fa e5       	ldi	r31, 0x5A	; 90
     c04:	2f 2e       	mov	r2, r31
     c06:	f2 e0       	ldi	r31, 0x02	; 2
     c08:	3f 2e       	mov	r3, r31
     c0a:	f0 2d       	mov	r31, r0
	PORTD |= (1<<CTS);
	sendCommand(NOPREFIX, HTTP_GET, filepath);
	receiveStatus();
	do 
	{
		if(externRAM){
     c0c:	c1 14       	cp	r12, r1
     c0e:	d1 04       	cpc	r13, r1
     c10:	d1 f0       	breq	.+52     	; 0xc46 <getFileWifi+0x96>
			updateRAMAddress(RAMAddress + i);
     c12:	24 01       	movw	r4, r8
     c14:	35 01       	movw	r6, r10
     c16:	4e 0c       	add	r4, r14
     c18:	5f 1c       	adc	r5, r15
     c1a:	61 1c       	adc	r6, r1
     c1c:	71 1c       	adc	r7, r1
     c1e:	c3 01       	movw	r24, r6
     c20:	b2 01       	movw	r22, r4
     c22:	0e 94 92 07 	call	0xf24	; 0xf24 <updateRAMAddress>
			printf("RAM Address: %d\n", RAMAddress+i); 
     c26:	7f 92       	push	r7
     c28:	6f 92       	push	r6
     c2a:	5f 92       	push	r5
     c2c:	4f 92       	push	r4
     c2e:	a3 e0       	ldi	r26, 0x03	; 3
     c30:	b5 e0       	ldi	r27, 0x05	; 5
     c32:	bf 93       	push	r27
     c34:	af 93       	push	r26
     c36:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <printf>
     c3a:	0f 90       	pop	r0
     c3c:	0f 90       	pop	r0
     c3e:	0f 90       	pop	r0
     c40:	0f 90       	pop	r0
     c42:	0f 90       	pop	r0
     c44:	0f 90       	pop	r0
		}
		sendCommand(NOPREFIX, STREAM_READ, "0 10000");
     c46:	44 e1       	ldi	r20, 0x14	; 20
     c48:	55 e0       	ldi	r21, 0x05	; 5
     c4a:	6c e1       	ldi	r22, 0x1C	; 28
     c4c:	75 e0       	ldi	r23, 0x05	; 5
     c4e:	8f ef       	ldi	r24, 0xFF	; 255
     c50:	0e 94 9b 07 	call	0xf36	; 0xf36 <sendCommand>
		receiveStatus();
     c54:	0e 94 d3 06 	call	0xda6	; 0xda6 <receiveStatus>
		receiveHeader = getMessageHeader(); 
     c58:	0e 94 7a 07 	call	0xef4	; 0xef4 <getMessageHeader>
     c5c:	ec 01       	movw	r28, r24
		printf("Tran Length: %d\n", receiveHeader); 
     c5e:	df 93       	push	r29
     c60:	cf 93       	push	r28
     c62:	3f 92       	push	r3
     c64:	2f 92       	push	r2
     c66:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <printf>
		if(receiveHeader[errorCode] == '1'){
     c6a:	0f 90       	pop	r0
     c6c:	0f 90       	pop	r0
     c6e:	0f 90       	pop	r0
     c70:	0f 90       	pop	r0
     c72:	89 81       	ldd	r24, Y+1	; 0x01
     c74:	81 33       	cpi	r24, 0x31	; 49
     c76:	39 f0       	breq	.+14     	; 0xc86 <getFileWifi+0xd6>
			break; 
		}
		i += getTransmissionLength(); 
     c78:	0e 94 75 07 	call	0xeea	; 0xeea <getTransmissionLength>
     c7c:	e8 0e       	add	r14, r24
     c7e:	f9 1e       	adc	r15, r25
	} while (multiReceive);
     c80:	01 15       	cp	r16, r1
     c82:	11 05       	cpc	r17, r1
     c84:	19 f6       	brne	.-122    	; 0xc0c <getFileWifi+0x5c>
	
	disableReceiveINT(); 
     c86:	0e 94 cb 06 	call	0xd96	; 0xd96 <disableReceiveINT>
	//_delay_ms(3000);  
	sendCommand(NOPREFIX, STREAM_CLOSE, NOVAL);
     c8a:	48 e4       	ldi	r20, 0x48	; 72
     c8c:	53 e0       	ldi	r21, 0x03	; 3
     c8e:	68 eb       	ldi	r22, 0xB8	; 184
     c90:	74 e0       	ldi	r23, 0x04	; 4
     c92:	8f ef       	ldi	r24, 0xFF	; 255
     c94:	0e 94 9b 07 	call	0xf36	; 0xf36 <sendCommand>
	//receiveStatus(); 
	return 1; 
}
     c98:	81 e0       	ldi	r24, 0x01	; 1
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	df 91       	pop	r29
     c9e:	cf 91       	pop	r28
     ca0:	1f 91       	pop	r17
     ca2:	0f 91       	pop	r16
     ca4:	ff 90       	pop	r15
     ca6:	ef 90       	pop	r14
     ca8:	df 90       	pop	r13
     caa:	cf 90       	pop	r12
     cac:	bf 90       	pop	r11
     cae:	af 90       	pop	r10
     cb0:	9f 90       	pop	r9
     cb2:	8f 90       	pop	r8
     cb4:	7f 90       	pop	r7
     cb6:	6f 90       	pop	r6
     cb8:	5f 90       	pop	r5
     cba:	4f 90       	pop	r4
     cbc:	3f 90       	pop	r3
     cbe:	2f 90       	pop	r2
     cc0:	08 95       	ret

00000cc2 <updateFileWifi>:

void updateFileWifi(char* filepath)
{
     cc2:	cf 93       	push	r28
     cc4:	df 93       	push	r29
     cc6:	ec 01       	movw	r28, r24
	disableReceiveINT(); 
     cc8:	0e 94 cb 06 	call	0xd96	; 0xd96 <disableReceiveINT>
	sendCommand(NOPREFIX, filepath, NOVAL);
     ccc:	48 e4       	ldi	r20, 0x48	; 72
     cce:	53 e0       	ldi	r21, 0x03	; 3
     cd0:	be 01       	movw	r22, r28
     cd2:	8f ef       	ldi	r24, 0xFF	; 255
     cd4:	0e 94 9b 07 	call	0xf36	; 0xf36 <sendCommand>
	sendCommand(NOPREFIX, STREAM_CLOSE, NOVAL); 	
     cd8:	48 e4       	ldi	r20, 0x48	; 72
     cda:	53 e0       	ldi	r21, 0x03	; 3
     cdc:	68 eb       	ldi	r22, 0xB8	; 184
     cde:	74 e0       	ldi	r23, 0x04	; 4
     ce0:	8f ef       	ldi	r24, 0xFF	; 255
     ce2:	0e 94 9b 07 	call	0xf36	; 0xf36 <sendCommand>
}
     ce6:	df 91       	pop	r29
     ce8:	cf 91       	pop	r28
     cea:	08 95       	ret

00000cec <setCompressFlag>:
}

void setCompressFlag(uint8_t compress)
{
	//PORTD &= ~(1<<CTS); 
	compressFlag = compress;
     cec:	80 93 dd 06 	sts	0x06DD, r24
     cf0:	08 95       	ret

00000cf2 <setReceiveCounter>:
	//PORTD |= (1<<CTS); 
}

void setReceiveCounter(int val)
{
	i = val; 
     cf2:	90 93 db 06 	sts	0x06DB, r25
     cf6:	80 93 da 06 	sts	0x06DA, r24
     cfa:	08 95       	ret

00000cfc <uart_init>:
	multiReceiveFlag = receiveFlag; 
}

void uart_init()
{
	UBRR0H = (((F_CPU/BAUD_RATE)/16)-1)>>8;	// set baud rate
     cfc:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (((F_CPU/BAUD_RATE)/16)-1);
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0B = (1<<RXEN0)|(1<<TXEN0); // enable Rx & Tx
     d06:	e1 ec       	ldi	r30, 0xC1	; 193
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	88 e1       	ldi	r24, 0x18	; 24
     d0c:	80 83       	st	Z, r24
	UCSR0C =  (1<<UCSZ01)|(1<<UCSZ00); // config USART; 8N1
     d0e:	86 e0       	ldi	r24, 0x06	; 6
     d10:	80 93 c2 00 	sts	0x00C2, r24
	UCSR0B |= (1<<RXCIE0);	//Enable Receive Interrupt 
     d14:	80 81       	ld	r24, Z
     d16:	80 68       	ori	r24, 0x80	; 128
     d18:	80 83       	st	Z, r24
     d1a:	08 95       	ret

00000d1c <uart_send>:
	}
	return count; 
}

int uart_send(char* data, unsigned int length)
{
     d1c:	cf 93       	push	r28
     d1e:	df 93       	push	r29
	//printf("Uart Send Function: %s\nAddress: %p", data, data);
	uint8_t i = 0;
	//UCSR1B |= (1<<RXCIE1);
	receiveWifiFlag = 0;
     d20:	10 92 e6 06 	sts	0x06E6, r1
	memset(headerBuffer, 0x00, endHeader);
     d24:	29 e0       	ldi	r18, 0x09	; 9
     d26:	ed ec       	ldi	r30, 0xCD	; 205
     d28:	f6 e0       	ldi	r31, 0x06	; 6
     d2a:	df 01       	movw	r26, r30
     d2c:	1d 92       	st	X+, r1
     d2e:	2a 95       	dec	r18
     d30:	e9 f7       	brne	.-6      	; 0xd2c <uart_send+0x10>
	//PORTD |= (1<<RTS);
	//while(!(PIND & (1<<CTS))){
		//_delay_us(100);
		//printf("Waiting..\n");
	//} 
	while(i < length){
     d32:	61 15       	cp	r22, r1
     d34:	71 05       	cpc	r23, r1
     d36:	a9 f0       	breq	.+42     	; 0xd62 <uart_send+0x46>
     d38:	20 e0       	ldi	r18, 0x00	; 0
     d3a:	30 e0       	ldi	r19, 0x00	; 0
}

int uart_send(char* data, unsigned int length)
{
	//printf("Uart Send Function: %s\nAddress: %p", data, data);
	uint8_t i = 0;
     d3c:	50 e0       	ldi	r21, 0x00	; 0
	//while(!(PIND & (1<<CTS))){
		//_delay_us(100);
		//printf("Waiting..\n");
	//} 
	while(i < length){
		while(!(UCSR0A & (1<<UDRE0)));
     d3e:	e0 ec       	ldi	r30, 0xC0	; 192
     d40:	f0 e0       	ldi	r31, 0x00	; 0
		UDR0 = data[i];
     d42:	a6 ec       	ldi	r26, 0xC6	; 198
     d44:	b0 e0       	ldi	r27, 0x00	; 0
	//while(!(PIND & (1<<CTS))){
		//_delay_us(100);
		//printf("Waiting..\n");
	//} 
	while(i < length){
		while(!(UCSR0A & (1<<UDRE0)));
     d46:	40 81       	ld	r20, Z
     d48:	45 ff       	sbrs	r20, 5
     d4a:	fd cf       	rjmp	.-6      	; 0xd46 <uart_send+0x2a>
		UDR0 = data[i];
     d4c:	ec 01       	movw	r28, r24
     d4e:	c2 0f       	add	r28, r18
     d50:	d3 1f       	adc	r29, r19
     d52:	28 81       	ld	r18, Y
     d54:	2c 93       	st	X, r18
		i++;
     d56:	5f 5f       	subi	r21, 0xFF	; 255
	//PORTD |= (1<<RTS);
	//while(!(PIND & (1<<CTS))){
		//_delay_us(100);
		//printf("Waiting..\n");
	//} 
	while(i < length){
     d58:	25 2f       	mov	r18, r21
     d5a:	30 e0       	ldi	r19, 0x00	; 0
     d5c:	26 17       	cp	r18, r22
     d5e:	37 07       	cpc	r19, r23
     d60:	90 f3       	brcs	.-28     	; 0xd46 <uart_send+0x2a>
		while(!(UCSR0A & (1<<UDRE0)));
		UDR0 = data[i];
		i++;
	}
	//while(!(PIND & (1<<CTS))){_delay_us(100);}
	printf("Sent!\n");
     d62:	82 e9       	ldi	r24, 0x92	; 146
     d64:	92 e0       	ldi	r25, 0x02	; 2
     d66:	0e 94 17 0a 	call	0x142e	; 0x142e <puts>
	return 0;
}
     d6a:	80 e0       	ldi	r24, 0x00	; 0
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	df 91       	pop	r29
     d70:	cf 91       	pop	r28
     d72:	08 95       	ret

00000d74 <uart_receiveChar>:
}

unsigned char uart_receiveChar()
{
	//printf("Receiving...\n");
	while (!(UCSR0A & (1<<RXC0)));
     d74:	e0 ec       	ldi	r30, 0xC0	; 192
     d76:	f0 e0       	ldi	r31, 0x00	; 0
     d78:	80 81       	ld	r24, Z
     d7a:	88 23       	and	r24, r24
     d7c:	ec f7       	brge	.-6      	; 0xd78 <uart_receiveChar+0x4>
	return UDR0; 
     d7e:	80 91 c6 00 	lds	r24, 0x00C6
}
     d82:	08 95       	ret

00000d84 <enableReceiveINT>:

int enableReceiveINT()
{
	UCSR0B |= (1<<RXCIE0);
     d84:	e1 ec       	ldi	r30, 0xC1	; 193
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	80 81       	ld	r24, Z
     d8a:	80 68       	ori	r24, 0x80	; 128
     d8c:	80 83       	st	Z, r24
	sei(); 
     d8e:	78 94       	sei
	return 1; 
}
     d90:	81 e0       	ldi	r24, 0x01	; 1
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	08 95       	ret

00000d96 <disableReceiveINT>:

int disableReceiveINT()
{
	UCSR0B &= ~(1<<RXCIE0);
     d96:	e1 ec       	ldi	r30, 0xC1	; 193
     d98:	f0 e0       	ldi	r31, 0x00	; 0
     d9a:	80 81       	ld	r24, Z
     d9c:	8f 77       	andi	r24, 0x7F	; 127
     d9e:	80 83       	st	Z, r24
	return 1; 
}
     da0:	81 e0       	ldi	r24, 0x01	; 1
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	08 95       	ret

00000da6 <receiveStatus>:
	return ""; 
}

int receiveStatus()
{
	while(receiveWifiFlag == 0)
     da6:	80 91 e6 06 	lds	r24, 0x06E6
     daa:	81 11       	cpse	r24, r1
     dac:	08 c0       	rjmp	.+16     	; 0xdbe <receiveStatus+0x18>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     dae:	81 e2       	ldi	r24, 0x21	; 33
     db0:	8a 95       	dec	r24
     db2:	f1 f7       	brne	.-4      	; 0xdb0 <receiveStatus+0xa>
     db4:	00 00       	nop
     db6:	80 91 e6 06 	lds	r24, 0x06E6
     dba:	88 23       	and	r24, r24
     dbc:	c1 f3       	breq	.-16     	; 0xdae <receiveStatus+0x8>
		//printf("Receive Flag: %d\n", receiveWifiFlag);
		//printf("Loooop\n");
	}
	
	return 1; 
}
     dbe:	81 e0       	ldi	r24, 0x01	; 1
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	08 95       	ret

00000dc4 <buildTransmissionLength>:

unsigned int buildTransmissionLength()
{
     dc4:	0f 93       	push	r16
     dc6:	1f 93       	push	r17
     dc8:	cf 93       	push	r28
     dca:	df 93       	push	r29
	if(testPrint)
     dcc:	80 91 d8 06 	lds	r24, 0x06D8
     dd0:	90 91 d9 06 	lds	r25, 0x06D9
     dd4:	89 2b       	or	r24, r25
     dd6:	f1 f0       	breq	.+60     	; 0xe14 <buildTransmissionLength+0x50>
     dd8:	c0 e0       	ldi	r28, 0x00	; 0
     dda:	d0 e0       	ldi	r29, 0x00	; 0
	{
		//printf("Header: ");
		for(int i = 0; i < endHeader; i++)
		{
			printf("Value: 0x%02x, Address: %p\n", headerBuffer[i], headerBuffer + i);
     ddc:	08 e2       	ldi	r16, 0x28	; 40
     dde:	15 e0       	ldi	r17, 0x05	; 5
     de0:	fe 01       	movw	r30, r28
     de2:	e3 53       	subi	r30, 0x33	; 51
     de4:	f9 4f       	sbci	r31, 0xF9	; 249
     de6:	80 81       	ld	r24, Z
     de8:	ff 93       	push	r31
     dea:	ef 93       	push	r30
     dec:	1f 92       	push	r1
     dee:	8f 93       	push	r24
     df0:	1f 93       	push	r17
     df2:	0f 93       	push	r16
     df4:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <printf>
unsigned int buildTransmissionLength()
{
	if(testPrint)
	{
		//printf("Header: ");
		for(int i = 0; i < endHeader; i++)
     df8:	21 96       	adiw	r28, 0x01	; 1
     dfa:	0f 90       	pop	r0
     dfc:	0f 90       	pop	r0
     dfe:	0f 90       	pop	r0
     e00:	0f 90       	pop	r0
     e02:	0f 90       	pop	r0
     e04:	0f 90       	pop	r0
     e06:	c9 30       	cpi	r28, 0x09	; 9
     e08:	d1 05       	cpc	r29, r1
     e0a:	51 f7       	brne	.-44     	; 0xde0 <buildTransmissionLength+0x1c>
		{
			printf("Value: 0x%02x, Address: %p\n", headerBuffer[i], headerBuffer + i);
			//printf("0x%02x ", receiveBuffer[i]);
		}
		printf("\n");
     e0c:	8a e0       	ldi	r24, 0x0A	; 10
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	0e 94 10 0a 	call	0x1420	; 0x1420 <putchar>
	}
	transLength = 0; 
     e14:	10 92 df 06 	sts	0x06DF, r1
     e18:	10 92 de 06 	sts	0x06DE, r1
	transLength += (headerBuffer[ones] & 0x0F);
     e1c:	20 91 d3 06 	lds	r18, 0x06D3
     e20:	80 91 de 06 	lds	r24, 0x06DE
     e24:	90 91 df 06 	lds	r25, 0x06DF
     e28:	2f 70       	andi	r18, 0x0F	; 15
     e2a:	82 0f       	add	r24, r18
     e2c:	91 1d       	adc	r25, r1
     e2e:	90 93 df 06 	sts	0x06DF, r25
     e32:	80 93 de 06 	sts	0x06DE, r24
	transLength += (headerBuffer[tens] & 0x0F) * 10; 
     e36:	80 91 d2 06 	lds	r24, 0x06D2
     e3a:	20 91 de 06 	lds	r18, 0x06DE
     e3e:	30 91 df 06 	lds	r19, 0x06DF
     e42:	8f 70       	andi	r24, 0x0F	; 15
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	ac 01       	movw	r20, r24
     e48:	44 0f       	add	r20, r20
     e4a:	55 1f       	adc	r21, r21
     e4c:	88 0f       	add	r24, r24
     e4e:	99 1f       	adc	r25, r25
     e50:	88 0f       	add	r24, r24
     e52:	99 1f       	adc	r25, r25
     e54:	88 0f       	add	r24, r24
     e56:	99 1f       	adc	r25, r25
     e58:	84 0f       	add	r24, r20
     e5a:	95 1f       	adc	r25, r21
     e5c:	82 0f       	add	r24, r18
     e5e:	93 1f       	adc	r25, r19
     e60:	90 93 df 06 	sts	0x06DF, r25
     e64:	80 93 de 06 	sts	0x06DE, r24
	transLength += (headerBuffer[hundreds] & 0x0F) * 100; 
     e68:	20 91 d1 06 	lds	r18, 0x06D1
     e6c:	80 91 de 06 	lds	r24, 0x06DE
     e70:	90 91 df 06 	lds	r25, 0x06DF
     e74:	2f 70       	andi	r18, 0x0F	; 15
     e76:	34 e6       	ldi	r19, 0x64	; 100
     e78:	23 9f       	mul	r18, r19
     e7a:	80 0d       	add	r24, r0
     e7c:	91 1d       	adc	r25, r1
     e7e:	11 24       	eor	r1, r1
     e80:	90 93 df 06 	sts	0x06DF, r25
     e84:	80 93 de 06 	sts	0x06DE, r24
	transLength += (headerBuffer[thousands] & 0x0F) * 1000; 
     e88:	60 91 d0 06 	lds	r22, 0x06D0
     e8c:	80 91 de 06 	lds	r24, 0x06DE
     e90:	90 91 df 06 	lds	r25, 0x06DF
     e94:	6f 70       	andi	r22, 0x0F	; 15
     e96:	48 ee       	ldi	r20, 0xE8	; 232
     e98:	53 e0       	ldi	r21, 0x03	; 3
     e9a:	64 9f       	mul	r22, r20
     e9c:	90 01       	movw	r18, r0
     e9e:	65 9f       	mul	r22, r21
     ea0:	30 0d       	add	r19, r0
     ea2:	11 24       	eor	r1, r1
     ea4:	82 0f       	add	r24, r18
     ea6:	93 1f       	adc	r25, r19
     ea8:	90 93 df 06 	sts	0x06DF, r25
     eac:	80 93 de 06 	sts	0x06DE, r24
	transLength += (headerBuffer[tenThousands] & 0x0F) * 10000; 
     eb0:	60 91 cf 06 	lds	r22, 0x06CF
     eb4:	80 91 de 06 	lds	r24, 0x06DE
     eb8:	90 91 df 06 	lds	r25, 0x06DF
     ebc:	6f 70       	andi	r22, 0x0F	; 15
     ebe:	40 e1       	ldi	r20, 0x10	; 16
     ec0:	57 e2       	ldi	r21, 0x27	; 39
     ec2:	64 9f       	mul	r22, r20
     ec4:	90 01       	movw	r18, r0
     ec6:	65 9f       	mul	r22, r21
     ec8:	30 0d       	add	r19, r0
     eca:	11 24       	eor	r1, r1
     ecc:	82 0f       	add	r24, r18
     ece:	93 1f       	adc	r25, r19
     ed0:	90 93 df 06 	sts	0x06DF, r25
     ed4:	80 93 de 06 	sts	0x06DE, r24
	//if(transLength < MaxRecSize)
	return transLength; 
     ed8:	80 91 de 06 	lds	r24, 0x06DE
     edc:	90 91 df 06 	lds	r25, 0x06DF
	//else
		////8 is the length of the header 
		//return MaxRecSize - 8; 
}
     ee0:	df 91       	pop	r29
     ee2:	cf 91       	pop	r28
     ee4:	1f 91       	pop	r17
     ee6:	0f 91       	pop	r16
     ee8:	08 95       	ret

00000eea <getTransmissionLength>:

uint16_t getTransmissionLength()
{
	return transLength; 
     eea:	80 91 de 06 	lds	r24, 0x06DE
     eee:	90 91 df 06 	lds	r25, 0x06DF
}
     ef2:	08 95       	ret

00000ef4 <getMessageHeader>:

char* getMessageHeader()
{
	return headerBuffer; 
}
     ef4:	8d ec       	ldi	r24, 0xCD	; 205
     ef6:	96 e0       	ldi	r25, 0x06	; 6
     ef8:	08 95       	ret

00000efa <errorCheck>:

int errorCheck() 
{
	while(!receiveWifiFlag & 1)
     efa:	80 91 e6 06 	lds	r24, 0x06E6
     efe:	81 11       	cpse	r24, r1
     f00:	08 c0       	rjmp	.+16     	; 0xf12 <errorCheck+0x18>
     f02:	81 e2       	ldi	r24, 0x21	; 33
     f04:	8a 95       	dec	r24
     f06:	f1 f7       	brne	.-4      	; 0xf04 <errorCheck+0xa>
     f08:	00 00       	nop
     f0a:	80 91 e6 06 	lds	r24, 0x06E6
     f0e:	88 23       	and	r24, r24
     f10:	c1 f3       	breq	.-16     	; 0xf02 <errorCheck+0x8>
		_delay_us(100);
	}
	
	char* header = getMessageHeader();
	//0 denotes a successful command 
	if(header[errorCode] != '0')
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	20 91 ce 06 	lds	r18, 0x06CE
     f1a:	20 33       	cpi	r18, 0x30	; 48
     f1c:	11 f4       	brne	.+4      	; 0xf22 <errorCheck+0x28>
     f1e:	80 e0       	ldi	r24, 0x00	; 0
     f20:	90 e0       	ldi	r25, 0x00	; 0
		return 1; 
	else 
		return 0; 
}
     f22:	08 95       	ret

00000f24 <updateRAMAddress>:

void updateRAMAddress(uint32_t address)
{
	RAMAddress = address; 
     f24:	60 93 e0 06 	sts	0x06E0, r22
     f28:	70 93 e1 06 	sts	0x06E1, r23
     f2c:	80 93 e2 06 	sts	0x06E2, r24
     f30:	90 93 e3 06 	sts	0x06E3, r25
     f34:	08 95       	ret

00000f36 <sendCommand>:
}

unsigned int sendCommand(int8_t prefix, char* command, char* value)
{
     f36:	0f 93       	push	r16
     f38:	1f 93       	push	r17
     f3a:	cf 93       	push	r28
     f3c:	df 93       	push	r29
     f3e:	ea 01       	movw	r28, r20
	//char* fullCommand = (char *)malloc(MaxSendSize);
	switch(prefix)
     f40:	81 30       	cpi	r24, 0x01	; 1
     f42:	31 f0       	breq	.+12     	; 0xf50 <sendCommand+0x1a>
     f44:	82 30       	cpi	r24, 0x02	; 2
     f46:	71 f0       	breq	.+28     	; 0xf64 <sendCommand+0x2e>
     f48:	8f 3f       	cpi	r24, 0xFF	; 255
     f4a:	09 f0       	breq	.+2      	; 0xf4e <sendCommand+0x18>
     f4c:	6c c0       	rjmp	.+216    	; 0x1026 <sendCommand+0xf0>
     f4e:	17 c0       	rjmp	.+46     	; 0xf7e <sendCommand+0x48>
	{
		case NOPREFIX: 
			break; 
		case GET:
			strcpy(fullCommand, "get "); 
     f50:	85 e0       	ldi	r24, 0x05	; 5
     f52:	e5 e5       	ldi	r30, 0x55	; 85
     f54:	f2 e0       	ldi	r31, 0x02	; 2
     f56:	a7 ee       	ldi	r26, 0xE7	; 231
     f58:	b6 e0       	ldi	r27, 0x06	; 6
     f5a:	01 90       	ld	r0, Z+
     f5c:	0d 92       	st	X+, r0
     f5e:	8a 95       	dec	r24
     f60:	e1 f7       	brne	.-8      	; 0xf5a <sendCommand+0x24>
			//strcat(fullCommand, "get ");
			break; 
     f62:	0d c0       	rjmp	.+26     	; 0xf7e <sendCommand+0x48>
		case SET: 
			strcat(fullCommand, "set ");
     f64:	a7 ee       	ldi	r26, 0xE7	; 231
     f66:	b6 e0       	ldi	r27, 0x06	; 6
     f68:	0d 90       	ld	r0, X+
     f6a:	00 20       	and	r0, r0
     f6c:	e9 f7       	brne	.-6      	; 0xf68 <sendCommand+0x32>
     f6e:	11 97       	sbiw	r26, 0x01	; 1
     f70:	85 e0       	ldi	r24, 0x05	; 5
     f72:	e4 e4       	ldi	r30, 0x44	; 68
     f74:	f5 e0       	ldi	r31, 0x05	; 5
     f76:	01 90       	ld	r0, Z+
     f78:	0d 92       	st	X+, r0
     f7a:	8a 95       	dec	r24
     f7c:	e1 f7       	brne	.-8      	; 0xf76 <sendCommand+0x40>
			return 0; 
			break; 
	}
	//printf("Command: %s Length: %d, Address: %p\n", fullCommand, strlen(fullCommand), fullCommand);
	//printf("Command: %s Length: %d, Address: %p\n", command, strlen(command),  command);
	strcat(fullCommand, command);
     f7e:	87 ee       	ldi	r24, 0xE7	; 231
     f80:	96 e0       	ldi	r25, 0x06	; 6
     f82:	0e 94 b8 09 	call	0x1370	; 0x1370 <strcat>
	//printf("Full Command: %s", fullCommand);	
	if(value != NOVAL)
     f86:	83 e0       	ldi	r24, 0x03	; 3
     f88:	c8 34       	cpi	r28, 0x48	; 72
     f8a:	d8 07       	cpc	r29, r24
     f8c:	79 f0       	breq	.+30     	; 0xfac <sendCommand+0x76>
	{
		strcat(fullCommand, " ");
     f8e:	e7 ee       	ldi	r30, 0xE7	; 231
     f90:	f6 e0       	ldi	r31, 0x06	; 6
     f92:	01 90       	ld	r0, Z+
     f94:	00 20       	and	r0, r0
     f96:	e9 f7       	brne	.-6      	; 0xf92 <sendCommand+0x5c>
     f98:	31 97       	sbiw	r30, 0x01	; 1
     f9a:	80 e2       	ldi	r24, 0x20	; 32
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	91 83       	std	Z+1, r25	; 0x01
     fa0:	80 83       	st	Z, r24
		strcat(fullCommand, value);
     fa2:	be 01       	movw	r22, r28
     fa4:	87 ee       	ldi	r24, 0xE7	; 231
     fa6:	96 e0       	ldi	r25, 0x06	; 6
     fa8:	0e 94 b8 09 	call	0x1370	; 0x1370 <strcat>
	}
	
	//printf("fullCommand: %s\n", fullCommand);
	strcat(fullCommand, ENDCOMMAND);
     fac:	c7 ee       	ldi	r28, 0xE7	; 231
     fae:	d6 e0       	ldi	r29, 0x06	; 6
     fb0:	fe 01       	movw	r30, r28
     fb2:	01 90       	ld	r0, Z+
     fb4:	00 20       	and	r0, r0
     fb6:	e9 f7       	brne	.-6      	; 0xfb2 <sendCommand+0x7c>
     fb8:	31 97       	sbiw	r30, 0x01	; 1
     fba:	8d e0       	ldi	r24, 0x0D	; 13
     fbc:	9a e0       	ldi	r25, 0x0A	; 10
     fbe:	a0 e0       	ldi	r26, 0x00	; 0
     fc0:	80 83       	st	Z, r24
     fc2:	91 83       	std	Z+1, r25	; 0x01
     fc4:	a2 83       	std	Z+2, r26	; 0x02
	uint16_t length = strlen(fullCommand);
     fc6:	fe 01       	movw	r30, r28
     fc8:	01 90       	ld	r0, Z+
     fca:	00 20       	and	r0, r0
     fcc:	e9 f7       	brne	.-6      	; 0xfc8 <sendCommand+0x92>
     fce:	31 97       	sbiw	r30, 0x01	; 1
     fd0:	8f 01       	movw	r16, r30
     fd2:	07 5e       	subi	r16, 0xE7	; 231
     fd4:	16 40       	sbci	r17, 0x06	; 6
	printf("Command: %s Length: %d, Address: %p\n", fullCommand, length, fullCommand);
     fd6:	df 93       	push	r29
     fd8:	cf 93       	push	r28
     fda:	1f 93       	push	r17
     fdc:	0f 93       	push	r16
     fde:	df 93       	push	r29
     fe0:	cf 93       	push	r28
     fe2:	89 e4       	ldi	r24, 0x49	; 73
     fe4:	95 e0       	ldi	r25, 0x05	; 5
     fe6:	9f 93       	push	r25
     fe8:	8f 93       	push	r24
     fea:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <printf>
	uart_send(fullCommand, length);
     fee:	b8 01       	movw	r22, r16
     ff0:	ce 01       	movw	r24, r28
     ff2:	0e 94 8e 06 	call	0xd1c	; 0xd1c <uart_send>
	memset(fullCommand, 0x00, 100);
     ff6:	84 e6       	ldi	r24, 0x64	; 100
     ff8:	fe 01       	movw	r30, r28
     ffa:	11 92       	st	Z+, r1
     ffc:	8a 95       	dec	r24
     ffe:	e9 f7       	brne	.-6      	; 0xffa <sendCommand+0xc4>
	//PORTD |= (1<<RTS);
	printf("Freed!\n");
    1000:	8e e6       	ldi	r24, 0x6E	; 110
    1002:	95 e0       	ldi	r25, 0x05	; 5
    1004:	0e 94 17 0a 	call	0x142e	; 0x142e <puts>
	printf("Returning!\n");
    1008:	85 e7       	ldi	r24, 0x75	; 117
    100a:	95 e0       	ldi	r25, 0x05	; 5
    100c:	0e 94 17 0a 	call	0x142e	; 0x142e <puts>
	return 1; 
    1010:	8d b7       	in	r24, 0x3d	; 61
    1012:	9e b7       	in	r25, 0x3e	; 62
    1014:	08 96       	adiw	r24, 0x08	; 8
    1016:	0f b6       	in	r0, 0x3f	; 63
    1018:	f8 94       	cli
    101a:	9e bf       	out	0x3e, r25	; 62
    101c:	0f be       	out	0x3f, r0	; 63
    101e:	8d bf       	out	0x3d, r24	; 61
    1020:	81 e0       	ldi	r24, 0x01	; 1
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	02 c0       	rjmp	.+4      	; 0x102a <sendCommand+0xf4>
			break; 
		case SET: 
			strcat(fullCommand, "set ");
			break; 
		default:
			return 0; 
    1026:	80 e0       	ldi	r24, 0x00	; 0
    1028:	90 e0       	ldi	r25, 0x00	; 0
	memset(fullCommand, 0x00, 100);
	//PORTD |= (1<<RTS);
	printf("Freed!\n");
	printf("Returning!\n");
	return 1; 
}
    102a:	df 91       	pop	r29
    102c:	cf 91       	pop	r28
    102e:	1f 91       	pop	r17
    1030:	0f 91       	pop	r16
    1032:	08 95       	ret

00001034 <__vector_25>:
	//PORTD |= (1<<CTS);
	//sei();
//}

ISR(USART0_RX_vect)
{
    1034:	1f 92       	push	r1
    1036:	0f 92       	push	r0
    1038:	0f b6       	in	r0, 0x3f	; 63
    103a:	0f 92       	push	r0
    103c:	11 24       	eor	r1, r1
    103e:	2f 93       	push	r18
    1040:	3f 93       	push	r19
    1042:	4f 93       	push	r20
    1044:	5f 93       	push	r21
    1046:	6f 93       	push	r22
    1048:	7f 93       	push	r23
    104a:	8f 93       	push	r24
    104c:	9f 93       	push	r25
    104e:	af 93       	push	r26
    1050:	bf 93       	push	r27
    1052:	cf 93       	push	r28
    1054:	df 93       	push	r29
    1056:	ef 93       	push	r30
    1058:	ff 93       	push	r31
	cli();
    105a:	f8 94       	cli
	//if(testPrint)
		//printf("Interrupt!\n");
	if(!bufferStart)
    105c:	80 91 e4 06 	lds	r24, 0x06E4
    1060:	90 91 e5 06 	lds	r25, 0x06E5
    1064:	89 2b       	or	r24, r25
    1066:	e9 f4       	brne	.+58     	; 0x10a2 <__vector_25+0x6e>
	{
		buff = uart_receiveChar();
    1068:	0e 94 ba 06 	call	0xd74	; 0xd74 <uart_receiveChar>
    106c:	80 93 d6 06 	sts	0x06D6, r24
		//Header always begins with letter 'R'
		if(buff == headerStartVal)
    1070:	80 91 d6 06 	lds	r24, 0x06D6
    1074:	82 35       	cpi	r24, 0x52	; 82
    1076:	09 f0       	breq	.+2      	; 0x107a <__vector_25+0x46>
    1078:	e6 c0       	rjmp	.+460    	; 0x1246 <__vector_25+0x212>
		{
			//PORTD &= ~(1<<RTS);
			//if(testPrint)
				//printf("Beginning Found @ %d\n", i); 
				
			i = 0;
    107a:	10 92 db 06 	sts	0x06DB, r1
    107e:	10 92 da 06 	sts	0x06DA, r1
			headerBuffer[i] = buff; 
    1082:	e0 91 da 06 	lds	r30, 0x06DA
    1086:	f0 91 db 06 	lds	r31, 0x06DB
    108a:	80 91 d6 06 	lds	r24, 0x06D6
    108e:	e3 53       	subi	r30, 0x33	; 51
    1090:	f9 4f       	sbci	r31, 0xF9	; 249
    1092:	80 83       	st	Z, r24
			
				//if(testPrint)
					//printf("Header: %c @ address %p", headerBuffer[i], headerBuffer); 
					
			bufferStart = 1;
    1094:	81 e0       	ldi	r24, 0x01	; 1
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	90 93 e5 06 	sts	0x06E5, r25
    109c:	80 93 e4 06 	sts	0x06E4, r24
    10a0:	d2 c0       	rjmp	.+420    	; 0x1246 <__vector_25+0x212>
	
	else
	{
		//printf("Beginning of buffer.\n");
		//Grab Receive Header
		if(i < endHeader)
    10a2:	80 91 da 06 	lds	r24, 0x06DA
    10a6:	90 91 db 06 	lds	r25, 0x06DB
    10aa:	09 97       	sbiw	r24, 0x09	; 9
    10ac:	50 f4       	brcc	.+20     	; 0x10c2 <__vector_25+0x8e>
		{
			//PORTD &= ~(1<<RTS);
			headerBuffer[i] = uart_receiveChar();
    10ae:	c0 91 da 06 	lds	r28, 0x06DA
    10b2:	d0 91 db 06 	lds	r29, 0x06DB
    10b6:	0e 94 ba 06 	call	0xd74	; 0xd74 <uart_receiveChar>
    10ba:	c3 53       	subi	r28, 0x33	; 51
    10bc:	d9 4f       	sbci	r29, 0xF9	; 249
    10be:	88 83       	st	Y, r24
    10c0:	c2 c0       	rjmp	.+388    	; 0x1246 <__vector_25+0x212>
				//printf("Header: %c @ address %p\n", headerBuffer[i], headerBuffer + i);
			//i++; 
			//RAMWriteByte(uart_receiveChar(), i);
			//PORTD |= (1<<RTS); 
		}
		else if(i == endHeader)
    10c2:	80 91 da 06 	lds	r24, 0x06DA
    10c6:	90 91 db 06 	lds	r25, 0x06DB
    10ca:	09 97       	sbiw	r24, 0x09	; 9
    10cc:	39 f4       	brne	.+14     	; 0x10dc <__vector_25+0xa8>
		{
			transLength = buildTransmissionLength();
    10ce:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <buildTransmissionLength>
    10d2:	90 93 df 06 	sts	0x06DF, r25
    10d6:	80 93 de 06 	sts	0x06DE, r24
    10da:	b5 c0       	rjmp	.+362    	; 0x1246 <__vector_25+0x212>
			//if(testPrint)
				//printf("Transmission Length: %d\n", transLength);
		}
		else
		{
			if(i < transLength + endHeader)
    10dc:	20 91 de 06 	lds	r18, 0x06DE
    10e0:	30 91 df 06 	lds	r19, 0x06DF
    10e4:	80 91 da 06 	lds	r24, 0x06DA
    10e8:	90 91 db 06 	lds	r25, 0x06DB
    10ec:	27 5f       	subi	r18, 0xF7	; 247
    10ee:	3f 4f       	sbci	r19, 0xFF	; 255
    10f0:	82 17       	cp	r24, r18
    10f2:	93 07       	cpc	r25, r19
    10f4:	08 f0       	brcs	.+2      	; 0x10f8 <__vector_25+0xc4>
    10f6:	6d c0       	rjmp	.+218    	; 0x11d2 <__vector_25+0x19e>
			{
				//printf("Translength: %d", transLength);
				buff = uart_receiveChar();
    10f8:	0e 94 ba 06 	call	0xd74	; 0xd74 <uart_receiveChar>
    10fc:	80 93 d6 06 	sts	0x06D6, r24
				if(compressFlag == 1)
    1100:	80 91 dd 06 	lds	r24, 0x06DD
    1104:	81 30       	cpi	r24, 0x01	; 1
    1106:	09 f0       	breq	.+2      	; 0x110a <__vector_25+0xd6>
    1108:	4b c0       	rjmp	.+150    	; 0x11a0 <__vector_25+0x16c>
				{
					//printf("Compressing!\n");
					//PORTD &= ~(1<<CTS);
					if(buff == ':')
    110a:	80 91 d6 06 	lds	r24, 0x06D6
    110e:	8a 33       	cpi	r24, 0x3A	; 58
    1110:	c9 f4       	brne	.+50     	; 0x1144 <__vector_25+0x110>
					{
						//PORTD &= ~(1<<RTS);
						RAMWriteByte(buff, RAMAddress + i - endHeader -1);
    1112:	20 91 da 06 	lds	r18, 0x06DA
    1116:	30 91 db 06 	lds	r19, 0x06DB
    111a:	40 91 e0 06 	lds	r20, 0x06E0
    111e:	50 91 e1 06 	lds	r21, 0x06E1
    1122:	60 91 e2 06 	lds	r22, 0x06E2
    1126:	70 91 e3 06 	lds	r23, 0x06E3
    112a:	80 91 d6 06 	lds	r24, 0x06D6
    112e:	4a 50       	subi	r20, 0x0A	; 10
    1130:	51 09       	sbc	r21, r1
    1132:	61 09       	sbc	r22, r1
    1134:	71 09       	sbc	r23, r1
    1136:	42 0f       	add	r20, r18
    1138:	53 1f       	adc	r21, r19
    113a:	61 1d       	adc	r22, r1
    113c:	71 1d       	adc	r23, r1
    113e:	0e 94 64 05 	call	0xac8	; 0xac8 <RAMWriteByte>
    1142:	81 c0       	rjmp	.+258    	; 0x1246 <__vector_25+0x212>
					}
					else if(!secondNibble)
    1144:	80 91 dc 06 	lds	r24, 0x06DC
    1148:	81 11       	cpse	r24, r1
    114a:	0a c0       	rjmp	.+20     	; 0x1160 <__vector_25+0x12c>
					{
						//Mask the ASCII Nibble 
						compressBuff = (buff & 0x0F);
    114c:	80 91 d6 06 	lds	r24, 0x06D6
						//Shift it into the upper nibble  
						compressBuff <<= 4; 
    1150:	82 95       	swap	r24
    1152:	80 7f       	andi	r24, 0xF0	; 240
    1154:	80 93 d7 06 	sts	0x06D7, r24
						secondNibble =  1;
    1158:	81 e0       	ldi	r24, 0x01	; 1
    115a:	80 93 dc 06 	sts	0x06DC, r24
    115e:	73 c0       	rjmp	.+230    	; 0x1246 <__vector_25+0x212>
					}
					else
					{
						compressBuff |= buff; 
    1160:	90 91 d6 06 	lds	r25, 0x06D6
    1164:	80 91 d7 06 	lds	r24, 0x06D7
    1168:	89 2b       	or	r24, r25
    116a:	80 93 d7 06 	sts	0x06D7, r24
						RAMWriteByte(compressBuff, RAMAddress + i - endHeader -1);
    116e:	20 91 da 06 	lds	r18, 0x06DA
    1172:	30 91 db 06 	lds	r19, 0x06DB
    1176:	40 91 e0 06 	lds	r20, 0x06E0
    117a:	50 91 e1 06 	lds	r21, 0x06E1
    117e:	60 91 e2 06 	lds	r22, 0x06E2
    1182:	70 91 e3 06 	lds	r23, 0x06E3
    1186:	4a 50       	subi	r20, 0x0A	; 10
    1188:	51 09       	sbc	r21, r1
    118a:	61 09       	sbc	r22, r1
    118c:	71 09       	sbc	r23, r1
    118e:	42 0f       	add	r20, r18
    1190:	53 1f       	adc	r21, r19
    1192:	61 1d       	adc	r22, r1
    1194:	71 1d       	adc	r23, r1
    1196:	0e 94 64 05 	call	0xac8	; 0xac8 <RAMWriteByte>
						secondNibble = 0; 
    119a:	10 92 dc 06 	sts	0x06DC, r1
    119e:	53 c0       	rjmp	.+166    	; 0x1246 <__vector_25+0x212>
					}
				}
				else
				{
					RAMWriteByte(buff, RAMAddress + i - endHeader -1);	
    11a0:	20 91 da 06 	lds	r18, 0x06DA
    11a4:	30 91 db 06 	lds	r19, 0x06DB
    11a8:	40 91 e0 06 	lds	r20, 0x06E0
    11ac:	50 91 e1 06 	lds	r21, 0x06E1
    11b0:	60 91 e2 06 	lds	r22, 0x06E2
    11b4:	70 91 e3 06 	lds	r23, 0x06E3
    11b8:	80 91 d6 06 	lds	r24, 0x06D6
    11bc:	4a 50       	subi	r20, 0x0A	; 10
    11be:	51 09       	sbc	r21, r1
    11c0:	61 09       	sbc	r22, r1
    11c2:	71 09       	sbc	r23, r1
    11c4:	42 0f       	add	r20, r18
    11c6:	53 1f       	adc	r21, r19
    11c8:	61 1d       	adc	r22, r1
    11ca:	71 1d       	adc	r23, r1
    11cc:	0e 94 64 05 	call	0xac8	; 0xac8 <RAMWriteByte>
    11d0:	3a c0       	rjmp	.+116    	; 0x1246 <__vector_25+0x212>
			}

			else
			{
				//printf("End of String!\n");
				RAMWriteByte(0x00, RAMAddress + i - endHeader -1);
    11d2:	80 91 da 06 	lds	r24, 0x06DA
    11d6:	90 91 db 06 	lds	r25, 0x06DB
    11da:	40 91 e0 06 	lds	r20, 0x06E0
    11de:	50 91 e1 06 	lds	r21, 0x06E1
    11e2:	60 91 e2 06 	lds	r22, 0x06E2
    11e6:	70 91 e3 06 	lds	r23, 0x06E3
    11ea:	4a 50       	subi	r20, 0x0A	; 10
    11ec:	51 09       	sbc	r21, r1
    11ee:	61 09       	sbc	r22, r1
    11f0:	71 09       	sbc	r23, r1
    11f2:	48 0f       	add	r20, r24
    11f4:	59 1f       	adc	r21, r25
    11f6:	61 1d       	adc	r22, r1
    11f8:	71 1d       	adc	r23, r1
    11fa:	80 e0       	ldi	r24, 0x00	; 0
    11fc:	0e 94 64 05 	call	0xac8	; 0xac8 <RAMWriteByte>
				//cli();
				i = 0;
    1200:	10 92 db 06 	sts	0x06DB, r1
    1204:	10 92 da 06 	sts	0x06DA, r1
				bufferStart = 0;
    1208:	10 92 e5 06 	sts	0x06E5, r1
    120c:	10 92 e4 06 	sts	0x06E4, r1
				compressFlag = 0; 
    1210:	10 92 dd 06 	sts	0x06DD, r1
				secondNibble = 0; 
    1214:	10 92 dc 06 	sts	0x06DC, r1
				compressBuff = 0x00; 
    1218:	10 92 d7 06 	sts	0x06D7, r1
				//done receiving
				receiveWifiFlag = 1;
    121c:	81 e0       	ldi	r24, 0x01	; 1
    121e:	80 93 e6 06 	sts	0x06E6, r24
				printf("Transmission Length: %d\n", buildTransmissionLength());
    1222:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <buildTransmissionLength>
    1226:	9f 93       	push	r25
    1228:	8f 93       	push	r24
    122a:	80 e8       	ldi	r24, 0x80	; 128
    122c:	95 e0       	ldi	r25, 0x05	; 5
    122e:	9f 93       	push	r25
    1230:	8f 93       	push	r24
    1232:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <printf>
				printf("Done Receiving!\n");
    1236:	89 e9       	ldi	r24, 0x99	; 153
    1238:	95 e0       	ldi	r25, 0x05	; 5
    123a:	0e 94 17 0a 	call	0x142e	; 0x142e <puts>
    123e:	0f 90       	pop	r0
    1240:	0f 90       	pop	r0
    1242:	0f 90       	pop	r0
    1244:	0f 90       	pop	r0
		}
		//printf("%d\n", i); 
		//i++; 
	}
	//if(bufferStart && !receiveWifiFlag)
	i++; 
    1246:	80 91 da 06 	lds	r24, 0x06DA
    124a:	90 91 db 06 	lds	r25, 0x06DB
    124e:	01 96       	adiw	r24, 0x01	; 1
    1250:	90 93 db 06 	sts	0x06DB, r25
    1254:	80 93 da 06 	sts	0x06DA, r24
		
	//PORTD |= (1<<CTS); 
	sei(); 
    1258:	78 94       	sei
}
    125a:	ff 91       	pop	r31
    125c:	ef 91       	pop	r30
    125e:	df 91       	pop	r29
    1260:	cf 91       	pop	r28
    1262:	bf 91       	pop	r27
    1264:	af 91       	pop	r26
    1266:	9f 91       	pop	r25
    1268:	8f 91       	pop	r24
    126a:	7f 91       	pop	r23
    126c:	6f 91       	pop	r22
    126e:	5f 91       	pop	r21
    1270:	4f 91       	pop	r20
    1272:	3f 91       	pop	r19
    1274:	2f 91       	pop	r18
    1276:	0f 90       	pop	r0
    1278:	0f be       	out	0x3f, r0	; 63
    127a:	0f 90       	pop	r0
    127c:	1f 90       	pop	r1
    127e:	18 95       	reti

00001280 <hexInit>:
				   ':', 0x10, 0x00, 0x10, 0x00, 0x12, 0xC0, 0x11, 0xC0, 0x10, 0xC0, 0x0F, 0xC0, 0x0E, 0xC0, 0x0D, 0xC0, 0x0C, 0xC0, 0x0B, 0xC0, 0x6C,
				   ':', 0x00, 0x00, 0x00, 0x01, 0xFF};

void hexInit()
{
	RAMOffset = 0; 
    1280:	10 92 7e 07 	sts	0x077E, r1
    1284:	10 92 7d 07 	sts	0x077D, r1
	memset(hexRow, 0x00, 50); 
    1288:	82 e3       	ldi	r24, 0x32	; 50
    128a:	eb e4       	ldi	r30, 0x4B	; 75
    128c:	f7 e0       	ldi	r31, 0x07	; 7
    128e:	df 01       	movw	r26, r30
    1290:	1d 92       	st	X+, r1
    1292:	8a 95       	dec	r24
    1294:	e9 f7       	brne	.-6      	; 0x1290 <hexInit+0x10>
    1296:	08 95       	ret

00001298 <compressFile>:


//Converts ASCII to Hex in external RAM 
//Length should be the transmission length given from the Wi-Fi module 
int compressFile(uint16_t length)
{
    1298:	af 92       	push	r10
    129a:	bf 92       	push	r11
    129c:	cf 92       	push	r12
    129e:	df 92       	push	r13
    12a0:	ef 92       	push	r14
    12a2:	ff 92       	push	r15
    12a4:	0f 93       	push	r16
    12a6:	1f 93       	push	r17
    12a8:	cf 93       	push	r28
    12aa:	df 93       	push	r29
    12ac:	6c 01       	movw	r12, r24
	uint8_t upperNibble; 
	uint8_t lowerNibble; 
	uint8_t hexVal; 
	uint16_t j; 
	
	for(int i=0; i<length; i++)
    12ae:	00 97       	sbiw	r24, 0x00	; 0
    12b0:	79 f1       	breq	.+94     	; 0x1310 <compressFile+0x78>
    12b2:	01 e0       	ldi	r16, 0x01	; 1
    12b4:	10 e0       	ldi	r17, 0x00	; 0
    12b6:	c0 e0       	ldi	r28, 0x00	; 0
    12b8:	d0 e0       	ldi	r29, 0x00	; 0
    12ba:	78 01       	movw	r14, r16
    12bc:	81 e0       	ldi	r24, 0x01	; 1
    12be:	e8 1a       	sub	r14, r24
    12c0:	f1 08       	sbc	r15, r1
	{
		upperNibble = RAMReadByte(HEX_FILE_ADDRESS + i);
    12c2:	be 01       	movw	r22, r28
    12c4:	88 27       	eor	r24, r24
    12c6:	77 fd       	sbrc	r23, 7
    12c8:	80 95       	com	r24
    12ca:	98 2f       	mov	r25, r24
    12cc:	0e 94 7e 05 	call	0xafc	; 0xafc <RAMReadByte>
		//If it's a colon, leave it alone as it is the start code 
		if(upperNibble == ':'){
    12d0:	8a 33       	cpi	r24, 0x3A	; 58
    12d2:	c1 f0       	breq	.+48     	; 0x1304 <compressFile+0x6c>
			j++;
			continue;
		}
		
		upperNibble &= 0x0F;
    12d4:	8f 70       	andi	r24, 0x0F	; 15
		upperNibble <<= upperNibble;  
    12d6:	28 2f       	mov	r18, r24
    12d8:	30 e0       	ldi	r19, 0x00	; 0
    12da:	59 01       	movw	r10, r18
    12dc:	02 c0       	rjmp	.+4      	; 0x12e2 <compressFile+0x4a>
    12de:	aa 0c       	add	r10, r10
    12e0:	bb 1c       	adc	r11, r11
    12e2:	8a 95       	dec	r24
    12e4:	e2 f7       	brpl	.-8      	; 0x12de <compressFile+0x46>
		hexVal = upperNibble; 
		
		lowerNibble = RAMReadByte(HEX_FILE_ADDRESS + 1 + i);
    12e6:	21 96       	adiw	r28, 0x01	; 1
    12e8:	be 01       	movw	r22, r28
    12ea:	88 27       	eor	r24, r24
    12ec:	77 fd       	sbrc	r23, 7
    12ee:	80 95       	com	r24
    12f0:	98 2f       	mov	r25, r24
    12f2:	0e 94 7e 05 	call	0xafc	; 0xafc <RAMReadByte>
		lowerNibble &= 0x0F;
		hexVal |= lowerNibble; 
		
		//Backfill the already converted ASCII value's addresses with the new hex value 
		RAMWriteByte(hexVal, HEX_FILE_ADDRESS + j); 
    12f6:	a7 01       	movw	r20, r14
    12f8:	60 e0       	ldi	r22, 0x00	; 0
    12fa:	70 e0       	ldi	r23, 0x00	; 0
		upperNibble &= 0x0F;
		upperNibble <<= upperNibble;  
		hexVal = upperNibble; 
		
		lowerNibble = RAMReadByte(HEX_FILE_ADDRESS + 1 + i);
		lowerNibble &= 0x0F;
    12fc:	8f 70       	andi	r24, 0x0F	; 15
		hexVal |= lowerNibble; 
		
		//Backfill the already converted ASCII value's addresses with the new hex value 
		RAMWriteByte(hexVal, HEX_FILE_ADDRESS + j); 
    12fe:	8a 29       	or	r24, r10
    1300:	0e 94 64 05 	call	0xac8	; 0xac8 <RAMWriteByte>
	uint8_t upperNibble; 
	uint8_t lowerNibble; 
	uint8_t hexVal; 
	uint16_t j; 
	
	for(int i=0; i<length; i++)
    1304:	21 96       	adiw	r28, 0x01	; 1
    1306:	0f 5f       	subi	r16, 0xFF	; 255
    1308:	1f 4f       	sbci	r17, 0xFF	; 255
    130a:	cc 15       	cp	r28, r12
    130c:	dd 05       	cpc	r29, r13
    130e:	a8 f2       	brcs	.-86     	; 0x12ba <compressFile+0x22>
		//hence why the for loop does not have i+=2 
		i++;  
	}
	
	return 1; 
    1310:	81 e0       	ldi	r24, 0x01	; 1
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	df 91       	pop	r29
    1316:	cf 91       	pop	r28
    1318:	1f 91       	pop	r17
    131a:	0f 91       	pop	r16
    131c:	ff 90       	pop	r15
    131e:	ef 90       	pop	r14
    1320:	df 90       	pop	r13
    1322:	cf 90       	pop	r12
    1324:	bf 90       	pop	r11
    1326:	af 90       	pop	r10
    1328:	08 95       	ret

0000132a <main>:
#include "Program/AVR.h"

int main(void)
{
	//char* SignatureBytes;
	connectionInit(); 
    132a:	0e 94 b6 00 	call	0x16c	; 0x16c <connectionInit>
	hexInit();
    132e:	0e 94 40 09 	call	0x1280	; 0x1280 <hexInit>
	sei(); 
    1332:	78 94       	sei
	//Collecting garbage transmission on wi-fi module bootup 
	receiveStatus();
    1334:	0e 94 d3 06 	call	0xda6	; 0xda6 <receiveStatus>
	networkConnect("Wi-Pro", "brightshoe902");  
    1338:	69 ea       	ldi	r22, 0xA9	; 169
    133a:	75 e0       	ldi	r23, 0x05	; 5
    133c:	87 eb       	ldi	r24, 0xB7	; 183
    133e:	95 e0       	ldi	r25, 0x05	; 5
    1340:	0e 94 85 05 	call	0xb0a	; 0xb0a <networkConnect>
	pollingInit(); 
    1344:	0e 94 9c 00 	call	0x138	; 0x138 <pollingInit>
		//ReadFlash();
		//printf("\nDone!\n\n");
	//}
	//ExitParallelProgrammingMode();
	
	printf("Done!\n"); 
    1348:	8e eb       	ldi	r24, 0xBE	; 190
    134a:	95 e0       	ldi	r25, 0x05	; 5
    134c:	0e 94 17 0a 	call	0x142e	; 0x142e <puts>
    1350:	ff cf       	rjmp	.-2      	; 0x1350 <main+0x26>

00001352 <__umulhisi3>:
    1352:	a2 9f       	mul	r26, r18
    1354:	b0 01       	movw	r22, r0
    1356:	b3 9f       	mul	r27, r19
    1358:	c0 01       	movw	r24, r0
    135a:	a3 9f       	mul	r26, r19
    135c:	70 0d       	add	r23, r0
    135e:	81 1d       	adc	r24, r1
    1360:	11 24       	eor	r1, r1
    1362:	91 1d       	adc	r25, r1
    1364:	b2 9f       	mul	r27, r18
    1366:	70 0d       	add	r23, r0
    1368:	81 1d       	adc	r24, r1
    136a:	11 24       	eor	r1, r1
    136c:	91 1d       	adc	r25, r1
    136e:	08 95       	ret

00001370 <strcat>:
    1370:	fb 01       	movw	r30, r22
    1372:	dc 01       	movw	r26, r24
    1374:	0d 90       	ld	r0, X+
    1376:	00 20       	and	r0, r0
    1378:	e9 f7       	brne	.-6      	; 0x1374 <strcat+0x4>
    137a:	11 97       	sbiw	r26, 0x01	; 1
    137c:	01 90       	ld	r0, Z+
    137e:	0d 92       	st	X+, r0
    1380:	00 20       	and	r0, r0
    1382:	e1 f7       	brne	.-8      	; 0x137c <strcat+0xc>
    1384:	08 95       	ret

00001386 <strcpy>:
    1386:	fb 01       	movw	r30, r22
    1388:	dc 01       	movw	r26, r24
    138a:	01 90       	ld	r0, Z+
    138c:	0d 92       	st	X+, r0
    138e:	00 20       	and	r0, r0
    1390:	e1 f7       	brne	.-8      	; 0x138a <strcpy+0x4>
    1392:	08 95       	ret

00001394 <fputc>:
    1394:	0f 93       	push	r16
    1396:	1f 93       	push	r17
    1398:	cf 93       	push	r28
    139a:	df 93       	push	r29
    139c:	18 2f       	mov	r17, r24
    139e:	09 2f       	mov	r16, r25
    13a0:	eb 01       	movw	r28, r22
    13a2:	8b 81       	ldd	r24, Y+3	; 0x03
    13a4:	81 fd       	sbrc	r24, 1
    13a6:	03 c0       	rjmp	.+6      	; 0x13ae <fputc+0x1a>
    13a8:	8f ef       	ldi	r24, 0xFF	; 255
    13aa:	9f ef       	ldi	r25, 0xFF	; 255
    13ac:	20 c0       	rjmp	.+64     	; 0x13ee <fputc+0x5a>
    13ae:	82 ff       	sbrs	r24, 2
    13b0:	10 c0       	rjmp	.+32     	; 0x13d2 <fputc+0x3e>
    13b2:	4e 81       	ldd	r20, Y+6	; 0x06
    13b4:	5f 81       	ldd	r21, Y+7	; 0x07
    13b6:	2c 81       	ldd	r18, Y+4	; 0x04
    13b8:	3d 81       	ldd	r19, Y+5	; 0x05
    13ba:	42 17       	cp	r20, r18
    13bc:	53 07       	cpc	r21, r19
    13be:	7c f4       	brge	.+30     	; 0x13de <fputc+0x4a>
    13c0:	e8 81       	ld	r30, Y
    13c2:	f9 81       	ldd	r31, Y+1	; 0x01
    13c4:	9f 01       	movw	r18, r30
    13c6:	2f 5f       	subi	r18, 0xFF	; 255
    13c8:	3f 4f       	sbci	r19, 0xFF	; 255
    13ca:	39 83       	std	Y+1, r19	; 0x01
    13cc:	28 83       	st	Y, r18
    13ce:	10 83       	st	Z, r17
    13d0:	06 c0       	rjmp	.+12     	; 0x13de <fputc+0x4a>
    13d2:	e8 85       	ldd	r30, Y+8	; 0x08
    13d4:	f9 85       	ldd	r31, Y+9	; 0x09
    13d6:	81 2f       	mov	r24, r17
    13d8:	09 95       	icall
    13da:	89 2b       	or	r24, r25
    13dc:	29 f7       	brne	.-54     	; 0x13a8 <fputc+0x14>
    13de:	2e 81       	ldd	r18, Y+6	; 0x06
    13e0:	3f 81       	ldd	r19, Y+7	; 0x07
    13e2:	2f 5f       	subi	r18, 0xFF	; 255
    13e4:	3f 4f       	sbci	r19, 0xFF	; 255
    13e6:	3f 83       	std	Y+7, r19	; 0x07
    13e8:	2e 83       	std	Y+6, r18	; 0x06
    13ea:	81 2f       	mov	r24, r17
    13ec:	90 2f       	mov	r25, r16
    13ee:	df 91       	pop	r29
    13f0:	cf 91       	pop	r28
    13f2:	1f 91       	pop	r17
    13f4:	0f 91       	pop	r16
    13f6:	08 95       	ret

000013f8 <printf>:
    13f8:	a0 e0       	ldi	r26, 0x00	; 0
    13fa:	b0 e0       	ldi	r27, 0x00	; 0
    13fc:	e2 e0       	ldi	r30, 0x02	; 2
    13fe:	fa e0       	ldi	r31, 0x0A	; 10
    1400:	0c 94 9a 0c 	jmp	0x1934	; 0x1934 <__prologue_saves__+0x20>
    1404:	fe 01       	movw	r30, r28
    1406:	35 96       	adiw	r30, 0x05	; 5
    1408:	61 91       	ld	r22, Z+
    140a:	71 91       	ld	r23, Z+
    140c:	af 01       	movw	r20, r30
    140e:	80 91 81 07 	lds	r24, 0x0781
    1412:	90 91 82 07 	lds	r25, 0x0782
    1416:	0e 94 44 0a 	call	0x1488	; 0x1488 <vfprintf>
    141a:	e2 e0       	ldi	r30, 0x02	; 2
    141c:	0c 94 b6 0c 	jmp	0x196c	; 0x196c <__epilogue_restores__+0x20>

00001420 <putchar>:
    1420:	60 91 81 07 	lds	r22, 0x0781
    1424:	70 91 82 07 	lds	r23, 0x0782
    1428:	0e 94 ca 09 	call	0x1394	; 0x1394 <fputc>
    142c:	08 95       	ret

0000142e <puts>:
    142e:	0f 93       	push	r16
    1430:	1f 93       	push	r17
    1432:	cf 93       	push	r28
    1434:	df 93       	push	r29
    1436:	e0 91 81 07 	lds	r30, 0x0781
    143a:	f0 91 82 07 	lds	r31, 0x0782
    143e:	23 81       	ldd	r18, Z+3	; 0x03
    1440:	21 ff       	sbrs	r18, 1
    1442:	1b c0       	rjmp	.+54     	; 0x147a <puts+0x4c>
    1444:	ec 01       	movw	r28, r24
    1446:	00 e0       	ldi	r16, 0x00	; 0
    1448:	10 e0       	ldi	r17, 0x00	; 0
    144a:	89 91       	ld	r24, Y+
    144c:	60 91 81 07 	lds	r22, 0x0781
    1450:	70 91 82 07 	lds	r23, 0x0782
    1454:	db 01       	movw	r26, r22
    1456:	18 96       	adiw	r26, 0x08	; 8
    1458:	ed 91       	ld	r30, X+
    145a:	fc 91       	ld	r31, X
    145c:	19 97       	sbiw	r26, 0x09	; 9
    145e:	88 23       	and	r24, r24
    1460:	31 f0       	breq	.+12     	; 0x146e <puts+0x40>
    1462:	09 95       	icall
    1464:	89 2b       	or	r24, r25
    1466:	89 f3       	breq	.-30     	; 0x144a <puts+0x1c>
    1468:	0f ef       	ldi	r16, 0xFF	; 255
    146a:	1f ef       	ldi	r17, 0xFF	; 255
    146c:	ee cf       	rjmp	.-36     	; 0x144a <puts+0x1c>
    146e:	8a e0       	ldi	r24, 0x0A	; 10
    1470:	09 95       	icall
    1472:	89 2b       	or	r24, r25
    1474:	11 f4       	brne	.+4      	; 0x147a <puts+0x4c>
    1476:	c8 01       	movw	r24, r16
    1478:	02 c0       	rjmp	.+4      	; 0x147e <puts+0x50>
    147a:	8f ef       	ldi	r24, 0xFF	; 255
    147c:	9f ef       	ldi	r25, 0xFF	; 255
    147e:	df 91       	pop	r29
    1480:	cf 91       	pop	r28
    1482:	1f 91       	pop	r17
    1484:	0f 91       	pop	r16
    1486:	08 95       	ret

00001488 <vfprintf>:
    1488:	ac e0       	ldi	r26, 0x0C	; 12
    148a:	b0 e0       	ldi	r27, 0x00	; 0
    148c:	ea e4       	ldi	r30, 0x4A	; 74
    148e:	fa e0       	ldi	r31, 0x0A	; 10
    1490:	0c 94 8a 0c 	jmp	0x1914	; 0x1914 <__prologue_saves__>
    1494:	7c 01       	movw	r14, r24
    1496:	6b 01       	movw	r12, r22
    1498:	8a 01       	movw	r16, r20
    149a:	fc 01       	movw	r30, r24
    149c:	17 82       	std	Z+7, r1	; 0x07
    149e:	16 82       	std	Z+6, r1	; 0x06
    14a0:	83 81       	ldd	r24, Z+3	; 0x03
    14a2:	81 ff       	sbrs	r24, 1
    14a4:	bd c1       	rjmp	.+890    	; 0x1820 <vfprintf+0x398>
    14a6:	ce 01       	movw	r24, r28
    14a8:	01 96       	adiw	r24, 0x01	; 1
    14aa:	4c 01       	movw	r8, r24
    14ac:	f7 01       	movw	r30, r14
    14ae:	93 81       	ldd	r25, Z+3	; 0x03
    14b0:	f6 01       	movw	r30, r12
    14b2:	93 fd       	sbrc	r25, 3
    14b4:	85 91       	lpm	r24, Z+
    14b6:	93 ff       	sbrs	r25, 3
    14b8:	81 91       	ld	r24, Z+
    14ba:	6f 01       	movw	r12, r30
    14bc:	88 23       	and	r24, r24
    14be:	09 f4       	brne	.+2      	; 0x14c2 <vfprintf+0x3a>
    14c0:	ab c1       	rjmp	.+854    	; 0x1818 <vfprintf+0x390>
    14c2:	85 32       	cpi	r24, 0x25	; 37
    14c4:	39 f4       	brne	.+14     	; 0x14d4 <vfprintf+0x4c>
    14c6:	93 fd       	sbrc	r25, 3
    14c8:	85 91       	lpm	r24, Z+
    14ca:	93 ff       	sbrs	r25, 3
    14cc:	81 91       	ld	r24, Z+
    14ce:	6f 01       	movw	r12, r30
    14d0:	85 32       	cpi	r24, 0x25	; 37
    14d2:	29 f4       	brne	.+10     	; 0x14de <vfprintf+0x56>
    14d4:	b7 01       	movw	r22, r14
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	0e 94 ca 09 	call	0x1394	; 0x1394 <fputc>
    14dc:	e7 cf       	rjmp	.-50     	; 0x14ac <vfprintf+0x24>
    14de:	51 2c       	mov	r5, r1
    14e0:	31 2c       	mov	r3, r1
    14e2:	20 e0       	ldi	r18, 0x00	; 0
    14e4:	20 32       	cpi	r18, 0x20	; 32
    14e6:	a0 f4       	brcc	.+40     	; 0x1510 <vfprintf+0x88>
    14e8:	8b 32       	cpi	r24, 0x2B	; 43
    14ea:	69 f0       	breq	.+26     	; 0x1506 <vfprintf+0x7e>
    14ec:	30 f4       	brcc	.+12     	; 0x14fa <vfprintf+0x72>
    14ee:	80 32       	cpi	r24, 0x20	; 32
    14f0:	59 f0       	breq	.+22     	; 0x1508 <vfprintf+0x80>
    14f2:	83 32       	cpi	r24, 0x23	; 35
    14f4:	69 f4       	brne	.+26     	; 0x1510 <vfprintf+0x88>
    14f6:	20 61       	ori	r18, 0x10	; 16
    14f8:	2c c0       	rjmp	.+88     	; 0x1552 <vfprintf+0xca>
    14fa:	8d 32       	cpi	r24, 0x2D	; 45
    14fc:	39 f0       	breq	.+14     	; 0x150c <vfprintf+0x84>
    14fe:	80 33       	cpi	r24, 0x30	; 48
    1500:	39 f4       	brne	.+14     	; 0x1510 <vfprintf+0x88>
    1502:	21 60       	ori	r18, 0x01	; 1
    1504:	26 c0       	rjmp	.+76     	; 0x1552 <vfprintf+0xca>
    1506:	22 60       	ori	r18, 0x02	; 2
    1508:	24 60       	ori	r18, 0x04	; 4
    150a:	23 c0       	rjmp	.+70     	; 0x1552 <vfprintf+0xca>
    150c:	28 60       	ori	r18, 0x08	; 8
    150e:	21 c0       	rjmp	.+66     	; 0x1552 <vfprintf+0xca>
    1510:	27 fd       	sbrc	r18, 7
    1512:	27 c0       	rjmp	.+78     	; 0x1562 <vfprintf+0xda>
    1514:	30 ed       	ldi	r19, 0xD0	; 208
    1516:	38 0f       	add	r19, r24
    1518:	3a 30       	cpi	r19, 0x0A	; 10
    151a:	78 f4       	brcc	.+30     	; 0x153a <vfprintf+0xb2>
    151c:	26 ff       	sbrs	r18, 6
    151e:	06 c0       	rjmp	.+12     	; 0x152c <vfprintf+0xa4>
    1520:	fa e0       	ldi	r31, 0x0A	; 10
    1522:	5f 9e       	mul	r5, r31
    1524:	30 0d       	add	r19, r0
    1526:	11 24       	eor	r1, r1
    1528:	53 2e       	mov	r5, r19
    152a:	13 c0       	rjmp	.+38     	; 0x1552 <vfprintf+0xca>
    152c:	8a e0       	ldi	r24, 0x0A	; 10
    152e:	38 9e       	mul	r3, r24
    1530:	30 0d       	add	r19, r0
    1532:	11 24       	eor	r1, r1
    1534:	33 2e       	mov	r3, r19
    1536:	20 62       	ori	r18, 0x20	; 32
    1538:	0c c0       	rjmp	.+24     	; 0x1552 <vfprintf+0xca>
    153a:	8e 32       	cpi	r24, 0x2E	; 46
    153c:	21 f4       	brne	.+8      	; 0x1546 <vfprintf+0xbe>
    153e:	26 fd       	sbrc	r18, 6
    1540:	6b c1       	rjmp	.+726    	; 0x1818 <vfprintf+0x390>
    1542:	20 64       	ori	r18, 0x40	; 64
    1544:	06 c0       	rjmp	.+12     	; 0x1552 <vfprintf+0xca>
    1546:	8c 36       	cpi	r24, 0x6C	; 108
    1548:	11 f4       	brne	.+4      	; 0x154e <vfprintf+0xc6>
    154a:	20 68       	ori	r18, 0x80	; 128
    154c:	02 c0       	rjmp	.+4      	; 0x1552 <vfprintf+0xca>
    154e:	88 36       	cpi	r24, 0x68	; 104
    1550:	41 f4       	brne	.+16     	; 0x1562 <vfprintf+0xda>
    1552:	f6 01       	movw	r30, r12
    1554:	93 fd       	sbrc	r25, 3
    1556:	85 91       	lpm	r24, Z+
    1558:	93 ff       	sbrs	r25, 3
    155a:	81 91       	ld	r24, Z+
    155c:	6f 01       	movw	r12, r30
    155e:	81 11       	cpse	r24, r1
    1560:	c1 cf       	rjmp	.-126    	; 0x14e4 <vfprintf+0x5c>
    1562:	98 2f       	mov	r25, r24
    1564:	9f 7d       	andi	r25, 0xDF	; 223
    1566:	95 54       	subi	r25, 0x45	; 69
    1568:	93 30       	cpi	r25, 0x03	; 3
    156a:	28 f4       	brcc	.+10     	; 0x1576 <vfprintf+0xee>
    156c:	0c 5f       	subi	r16, 0xFC	; 252
    156e:	1f 4f       	sbci	r17, 0xFF	; 255
    1570:	ff e3       	ldi	r31, 0x3F	; 63
    1572:	f9 83       	std	Y+1, r31	; 0x01
    1574:	0d c0       	rjmp	.+26     	; 0x1590 <vfprintf+0x108>
    1576:	83 36       	cpi	r24, 0x63	; 99
    1578:	31 f0       	breq	.+12     	; 0x1586 <vfprintf+0xfe>
    157a:	83 37       	cpi	r24, 0x73	; 115
    157c:	71 f0       	breq	.+28     	; 0x159a <vfprintf+0x112>
    157e:	83 35       	cpi	r24, 0x53	; 83
    1580:	09 f0       	breq	.+2      	; 0x1584 <vfprintf+0xfc>
    1582:	5b c0       	rjmp	.+182    	; 0x163a <vfprintf+0x1b2>
    1584:	22 c0       	rjmp	.+68     	; 0x15ca <vfprintf+0x142>
    1586:	f8 01       	movw	r30, r16
    1588:	80 81       	ld	r24, Z
    158a:	89 83       	std	Y+1, r24	; 0x01
    158c:	0e 5f       	subi	r16, 0xFE	; 254
    158e:	1f 4f       	sbci	r17, 0xFF	; 255
    1590:	44 24       	eor	r4, r4
    1592:	43 94       	inc	r4
    1594:	51 2c       	mov	r5, r1
    1596:	54 01       	movw	r10, r8
    1598:	15 c0       	rjmp	.+42     	; 0x15c4 <vfprintf+0x13c>
    159a:	38 01       	movw	r6, r16
    159c:	f2 e0       	ldi	r31, 0x02	; 2
    159e:	6f 0e       	add	r6, r31
    15a0:	71 1c       	adc	r7, r1
    15a2:	f8 01       	movw	r30, r16
    15a4:	a0 80       	ld	r10, Z
    15a6:	b1 80       	ldd	r11, Z+1	; 0x01
    15a8:	26 ff       	sbrs	r18, 6
    15aa:	03 c0       	rjmp	.+6      	; 0x15b2 <vfprintf+0x12a>
    15ac:	65 2d       	mov	r22, r5
    15ae:	70 e0       	ldi	r23, 0x00	; 0
    15b0:	02 c0       	rjmp	.+4      	; 0x15b6 <vfprintf+0x12e>
    15b2:	6f ef       	ldi	r22, 0xFF	; 255
    15b4:	7f ef       	ldi	r23, 0xFF	; 255
    15b6:	c5 01       	movw	r24, r10
    15b8:	2c 87       	std	Y+12, r18	; 0x0c
    15ba:	0e 94 21 0c 	call	0x1842	; 0x1842 <strnlen>
    15be:	2c 01       	movw	r4, r24
    15c0:	83 01       	movw	r16, r6
    15c2:	2c 85       	ldd	r18, Y+12	; 0x0c
    15c4:	2f 77       	andi	r18, 0x7F	; 127
    15c6:	22 2e       	mov	r2, r18
    15c8:	17 c0       	rjmp	.+46     	; 0x15f8 <vfprintf+0x170>
    15ca:	38 01       	movw	r6, r16
    15cc:	f2 e0       	ldi	r31, 0x02	; 2
    15ce:	6f 0e       	add	r6, r31
    15d0:	71 1c       	adc	r7, r1
    15d2:	f8 01       	movw	r30, r16
    15d4:	a0 80       	ld	r10, Z
    15d6:	b1 80       	ldd	r11, Z+1	; 0x01
    15d8:	26 ff       	sbrs	r18, 6
    15da:	03 c0       	rjmp	.+6      	; 0x15e2 <vfprintf+0x15a>
    15dc:	65 2d       	mov	r22, r5
    15de:	70 e0       	ldi	r23, 0x00	; 0
    15e0:	02 c0       	rjmp	.+4      	; 0x15e6 <vfprintf+0x15e>
    15e2:	6f ef       	ldi	r22, 0xFF	; 255
    15e4:	7f ef       	ldi	r23, 0xFF	; 255
    15e6:	c5 01       	movw	r24, r10
    15e8:	2c 87       	std	Y+12, r18	; 0x0c
    15ea:	0e 94 16 0c 	call	0x182c	; 0x182c <strnlen_P>
    15ee:	2c 01       	movw	r4, r24
    15f0:	2c 85       	ldd	r18, Y+12	; 0x0c
    15f2:	20 68       	ori	r18, 0x80	; 128
    15f4:	22 2e       	mov	r2, r18
    15f6:	83 01       	movw	r16, r6
    15f8:	23 fc       	sbrc	r2, 3
    15fa:	1b c0       	rjmp	.+54     	; 0x1632 <vfprintf+0x1aa>
    15fc:	83 2d       	mov	r24, r3
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	48 16       	cp	r4, r24
    1602:	59 06       	cpc	r5, r25
    1604:	b0 f4       	brcc	.+44     	; 0x1632 <vfprintf+0x1aa>
    1606:	b7 01       	movw	r22, r14
    1608:	80 e2       	ldi	r24, 0x20	; 32
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	0e 94 ca 09 	call	0x1394	; 0x1394 <fputc>
    1610:	3a 94       	dec	r3
    1612:	f4 cf       	rjmp	.-24     	; 0x15fc <vfprintf+0x174>
    1614:	f5 01       	movw	r30, r10
    1616:	27 fc       	sbrc	r2, 7
    1618:	85 91       	lpm	r24, Z+
    161a:	27 fe       	sbrs	r2, 7
    161c:	81 91       	ld	r24, Z+
    161e:	5f 01       	movw	r10, r30
    1620:	b7 01       	movw	r22, r14
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	0e 94 ca 09 	call	0x1394	; 0x1394 <fputc>
    1628:	31 10       	cpse	r3, r1
    162a:	3a 94       	dec	r3
    162c:	f1 e0       	ldi	r31, 0x01	; 1
    162e:	4f 1a       	sub	r4, r31
    1630:	51 08       	sbc	r5, r1
    1632:	41 14       	cp	r4, r1
    1634:	51 04       	cpc	r5, r1
    1636:	71 f7       	brne	.-36     	; 0x1614 <vfprintf+0x18c>
    1638:	e5 c0       	rjmp	.+458    	; 0x1804 <vfprintf+0x37c>
    163a:	84 36       	cpi	r24, 0x64	; 100
    163c:	11 f0       	breq	.+4      	; 0x1642 <vfprintf+0x1ba>
    163e:	89 36       	cpi	r24, 0x69	; 105
    1640:	39 f5       	brne	.+78     	; 0x1690 <vfprintf+0x208>
    1642:	f8 01       	movw	r30, r16
    1644:	27 ff       	sbrs	r18, 7
    1646:	07 c0       	rjmp	.+14     	; 0x1656 <vfprintf+0x1ce>
    1648:	60 81       	ld	r22, Z
    164a:	71 81       	ldd	r23, Z+1	; 0x01
    164c:	82 81       	ldd	r24, Z+2	; 0x02
    164e:	93 81       	ldd	r25, Z+3	; 0x03
    1650:	0c 5f       	subi	r16, 0xFC	; 252
    1652:	1f 4f       	sbci	r17, 0xFF	; 255
    1654:	08 c0       	rjmp	.+16     	; 0x1666 <vfprintf+0x1de>
    1656:	60 81       	ld	r22, Z
    1658:	71 81       	ldd	r23, Z+1	; 0x01
    165a:	88 27       	eor	r24, r24
    165c:	77 fd       	sbrc	r23, 7
    165e:	80 95       	com	r24
    1660:	98 2f       	mov	r25, r24
    1662:	0e 5f       	subi	r16, 0xFE	; 254
    1664:	1f 4f       	sbci	r17, 0xFF	; 255
    1666:	2f 76       	andi	r18, 0x6F	; 111
    1668:	b2 2e       	mov	r11, r18
    166a:	97 ff       	sbrs	r25, 7
    166c:	09 c0       	rjmp	.+18     	; 0x1680 <vfprintf+0x1f8>
    166e:	90 95       	com	r25
    1670:	80 95       	com	r24
    1672:	70 95       	com	r23
    1674:	61 95       	neg	r22
    1676:	7f 4f       	sbci	r23, 0xFF	; 255
    1678:	8f 4f       	sbci	r24, 0xFF	; 255
    167a:	9f 4f       	sbci	r25, 0xFF	; 255
    167c:	20 68       	ori	r18, 0x80	; 128
    167e:	b2 2e       	mov	r11, r18
    1680:	2a e0       	ldi	r18, 0x0A	; 10
    1682:	30 e0       	ldi	r19, 0x00	; 0
    1684:	a4 01       	movw	r20, r8
    1686:	0e 94 2c 0c 	call	0x1858	; 0x1858 <__ultoa_invert>
    168a:	a8 2e       	mov	r10, r24
    168c:	a8 18       	sub	r10, r8
    168e:	44 c0       	rjmp	.+136    	; 0x1718 <vfprintf+0x290>
    1690:	85 37       	cpi	r24, 0x75	; 117
    1692:	29 f4       	brne	.+10     	; 0x169e <vfprintf+0x216>
    1694:	2f 7e       	andi	r18, 0xEF	; 239
    1696:	b2 2e       	mov	r11, r18
    1698:	2a e0       	ldi	r18, 0x0A	; 10
    169a:	30 e0       	ldi	r19, 0x00	; 0
    169c:	25 c0       	rjmp	.+74     	; 0x16e8 <vfprintf+0x260>
    169e:	f2 2f       	mov	r31, r18
    16a0:	f9 7f       	andi	r31, 0xF9	; 249
    16a2:	bf 2e       	mov	r11, r31
    16a4:	8f 36       	cpi	r24, 0x6F	; 111
    16a6:	c1 f0       	breq	.+48     	; 0x16d8 <vfprintf+0x250>
    16a8:	18 f4       	brcc	.+6      	; 0x16b0 <vfprintf+0x228>
    16aa:	88 35       	cpi	r24, 0x58	; 88
    16ac:	79 f0       	breq	.+30     	; 0x16cc <vfprintf+0x244>
    16ae:	b4 c0       	rjmp	.+360    	; 0x1818 <vfprintf+0x390>
    16b0:	80 37       	cpi	r24, 0x70	; 112
    16b2:	19 f0       	breq	.+6      	; 0x16ba <vfprintf+0x232>
    16b4:	88 37       	cpi	r24, 0x78	; 120
    16b6:	21 f0       	breq	.+8      	; 0x16c0 <vfprintf+0x238>
    16b8:	af c0       	rjmp	.+350    	; 0x1818 <vfprintf+0x390>
    16ba:	2f 2f       	mov	r18, r31
    16bc:	20 61       	ori	r18, 0x10	; 16
    16be:	b2 2e       	mov	r11, r18
    16c0:	b4 fe       	sbrs	r11, 4
    16c2:	0d c0       	rjmp	.+26     	; 0x16de <vfprintf+0x256>
    16c4:	8b 2d       	mov	r24, r11
    16c6:	84 60       	ori	r24, 0x04	; 4
    16c8:	b8 2e       	mov	r11, r24
    16ca:	09 c0       	rjmp	.+18     	; 0x16de <vfprintf+0x256>
    16cc:	24 ff       	sbrs	r18, 4
    16ce:	0a c0       	rjmp	.+20     	; 0x16e4 <vfprintf+0x25c>
    16d0:	9f 2f       	mov	r25, r31
    16d2:	96 60       	ori	r25, 0x06	; 6
    16d4:	b9 2e       	mov	r11, r25
    16d6:	06 c0       	rjmp	.+12     	; 0x16e4 <vfprintf+0x25c>
    16d8:	28 e0       	ldi	r18, 0x08	; 8
    16da:	30 e0       	ldi	r19, 0x00	; 0
    16dc:	05 c0       	rjmp	.+10     	; 0x16e8 <vfprintf+0x260>
    16de:	20 e1       	ldi	r18, 0x10	; 16
    16e0:	30 e0       	ldi	r19, 0x00	; 0
    16e2:	02 c0       	rjmp	.+4      	; 0x16e8 <vfprintf+0x260>
    16e4:	20 e1       	ldi	r18, 0x10	; 16
    16e6:	32 e0       	ldi	r19, 0x02	; 2
    16e8:	f8 01       	movw	r30, r16
    16ea:	b7 fe       	sbrs	r11, 7
    16ec:	07 c0       	rjmp	.+14     	; 0x16fc <vfprintf+0x274>
    16ee:	60 81       	ld	r22, Z
    16f0:	71 81       	ldd	r23, Z+1	; 0x01
    16f2:	82 81       	ldd	r24, Z+2	; 0x02
    16f4:	93 81       	ldd	r25, Z+3	; 0x03
    16f6:	0c 5f       	subi	r16, 0xFC	; 252
    16f8:	1f 4f       	sbci	r17, 0xFF	; 255
    16fa:	06 c0       	rjmp	.+12     	; 0x1708 <vfprintf+0x280>
    16fc:	60 81       	ld	r22, Z
    16fe:	71 81       	ldd	r23, Z+1	; 0x01
    1700:	80 e0       	ldi	r24, 0x00	; 0
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	0e 5f       	subi	r16, 0xFE	; 254
    1706:	1f 4f       	sbci	r17, 0xFF	; 255
    1708:	a4 01       	movw	r20, r8
    170a:	0e 94 2c 0c 	call	0x1858	; 0x1858 <__ultoa_invert>
    170e:	a8 2e       	mov	r10, r24
    1710:	a8 18       	sub	r10, r8
    1712:	fb 2d       	mov	r31, r11
    1714:	ff 77       	andi	r31, 0x7F	; 127
    1716:	bf 2e       	mov	r11, r31
    1718:	b6 fe       	sbrs	r11, 6
    171a:	0b c0       	rjmp	.+22     	; 0x1732 <vfprintf+0x2aa>
    171c:	2b 2d       	mov	r18, r11
    171e:	2e 7f       	andi	r18, 0xFE	; 254
    1720:	a5 14       	cp	r10, r5
    1722:	50 f4       	brcc	.+20     	; 0x1738 <vfprintf+0x2b0>
    1724:	b4 fe       	sbrs	r11, 4
    1726:	0a c0       	rjmp	.+20     	; 0x173c <vfprintf+0x2b4>
    1728:	b2 fc       	sbrc	r11, 2
    172a:	08 c0       	rjmp	.+16     	; 0x173c <vfprintf+0x2b4>
    172c:	2b 2d       	mov	r18, r11
    172e:	2e 7e       	andi	r18, 0xEE	; 238
    1730:	05 c0       	rjmp	.+10     	; 0x173c <vfprintf+0x2b4>
    1732:	7a 2c       	mov	r7, r10
    1734:	2b 2d       	mov	r18, r11
    1736:	03 c0       	rjmp	.+6      	; 0x173e <vfprintf+0x2b6>
    1738:	7a 2c       	mov	r7, r10
    173a:	01 c0       	rjmp	.+2      	; 0x173e <vfprintf+0x2b6>
    173c:	75 2c       	mov	r7, r5
    173e:	24 ff       	sbrs	r18, 4
    1740:	0d c0       	rjmp	.+26     	; 0x175c <vfprintf+0x2d4>
    1742:	fe 01       	movw	r30, r28
    1744:	ea 0d       	add	r30, r10
    1746:	f1 1d       	adc	r31, r1
    1748:	80 81       	ld	r24, Z
    174a:	80 33       	cpi	r24, 0x30	; 48
    174c:	11 f4       	brne	.+4      	; 0x1752 <vfprintf+0x2ca>
    174e:	29 7e       	andi	r18, 0xE9	; 233
    1750:	09 c0       	rjmp	.+18     	; 0x1764 <vfprintf+0x2dc>
    1752:	22 ff       	sbrs	r18, 2
    1754:	06 c0       	rjmp	.+12     	; 0x1762 <vfprintf+0x2da>
    1756:	73 94       	inc	r7
    1758:	73 94       	inc	r7
    175a:	04 c0       	rjmp	.+8      	; 0x1764 <vfprintf+0x2dc>
    175c:	82 2f       	mov	r24, r18
    175e:	86 78       	andi	r24, 0x86	; 134
    1760:	09 f0       	breq	.+2      	; 0x1764 <vfprintf+0x2dc>
    1762:	73 94       	inc	r7
    1764:	23 fd       	sbrc	r18, 3
    1766:	13 c0       	rjmp	.+38     	; 0x178e <vfprintf+0x306>
    1768:	20 ff       	sbrs	r18, 0
    176a:	06 c0       	rjmp	.+12     	; 0x1778 <vfprintf+0x2f0>
    176c:	5a 2c       	mov	r5, r10
    176e:	73 14       	cp	r7, r3
    1770:	18 f4       	brcc	.+6      	; 0x1778 <vfprintf+0x2f0>
    1772:	53 0c       	add	r5, r3
    1774:	57 18       	sub	r5, r7
    1776:	73 2c       	mov	r7, r3
    1778:	73 14       	cp	r7, r3
    177a:	68 f4       	brcc	.+26     	; 0x1796 <vfprintf+0x30e>
    177c:	b7 01       	movw	r22, r14
    177e:	80 e2       	ldi	r24, 0x20	; 32
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	2c 87       	std	Y+12, r18	; 0x0c
    1784:	0e 94 ca 09 	call	0x1394	; 0x1394 <fputc>
    1788:	73 94       	inc	r7
    178a:	2c 85       	ldd	r18, Y+12	; 0x0c
    178c:	f5 cf       	rjmp	.-22     	; 0x1778 <vfprintf+0x2f0>
    178e:	73 14       	cp	r7, r3
    1790:	10 f4       	brcc	.+4      	; 0x1796 <vfprintf+0x30e>
    1792:	37 18       	sub	r3, r7
    1794:	01 c0       	rjmp	.+2      	; 0x1798 <vfprintf+0x310>
    1796:	31 2c       	mov	r3, r1
    1798:	24 ff       	sbrs	r18, 4
    179a:	12 c0       	rjmp	.+36     	; 0x17c0 <vfprintf+0x338>
    179c:	b7 01       	movw	r22, r14
    179e:	80 e3       	ldi	r24, 0x30	; 48
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	2c 87       	std	Y+12, r18	; 0x0c
    17a4:	0e 94 ca 09 	call	0x1394	; 0x1394 <fputc>
    17a8:	2c 85       	ldd	r18, Y+12	; 0x0c
    17aa:	22 ff       	sbrs	r18, 2
    17ac:	17 c0       	rjmp	.+46     	; 0x17dc <vfprintf+0x354>
    17ae:	21 ff       	sbrs	r18, 1
    17b0:	03 c0       	rjmp	.+6      	; 0x17b8 <vfprintf+0x330>
    17b2:	88 e5       	ldi	r24, 0x58	; 88
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	02 c0       	rjmp	.+4      	; 0x17bc <vfprintf+0x334>
    17b8:	88 e7       	ldi	r24, 0x78	; 120
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	b7 01       	movw	r22, r14
    17be:	0c c0       	rjmp	.+24     	; 0x17d8 <vfprintf+0x350>
    17c0:	82 2f       	mov	r24, r18
    17c2:	86 78       	andi	r24, 0x86	; 134
    17c4:	59 f0       	breq	.+22     	; 0x17dc <vfprintf+0x354>
    17c6:	21 fd       	sbrc	r18, 1
    17c8:	02 c0       	rjmp	.+4      	; 0x17ce <vfprintf+0x346>
    17ca:	80 e2       	ldi	r24, 0x20	; 32
    17cc:	01 c0       	rjmp	.+2      	; 0x17d0 <vfprintf+0x348>
    17ce:	8b e2       	ldi	r24, 0x2B	; 43
    17d0:	27 fd       	sbrc	r18, 7
    17d2:	8d e2       	ldi	r24, 0x2D	; 45
    17d4:	b7 01       	movw	r22, r14
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	0e 94 ca 09 	call	0x1394	; 0x1394 <fputc>
    17dc:	a5 14       	cp	r10, r5
    17de:	38 f4       	brcc	.+14     	; 0x17ee <vfprintf+0x366>
    17e0:	b7 01       	movw	r22, r14
    17e2:	80 e3       	ldi	r24, 0x30	; 48
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	0e 94 ca 09 	call	0x1394	; 0x1394 <fputc>
    17ea:	5a 94       	dec	r5
    17ec:	f7 cf       	rjmp	.-18     	; 0x17dc <vfprintf+0x354>
    17ee:	aa 94       	dec	r10
    17f0:	f4 01       	movw	r30, r8
    17f2:	ea 0d       	add	r30, r10
    17f4:	f1 1d       	adc	r31, r1
    17f6:	80 81       	ld	r24, Z
    17f8:	b7 01       	movw	r22, r14
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	0e 94 ca 09 	call	0x1394	; 0x1394 <fputc>
    1800:	a1 10       	cpse	r10, r1
    1802:	f5 cf       	rjmp	.-22     	; 0x17ee <vfprintf+0x366>
    1804:	33 20       	and	r3, r3
    1806:	09 f4       	brne	.+2      	; 0x180a <vfprintf+0x382>
    1808:	51 ce       	rjmp	.-862    	; 0x14ac <vfprintf+0x24>
    180a:	b7 01       	movw	r22, r14
    180c:	80 e2       	ldi	r24, 0x20	; 32
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	0e 94 ca 09 	call	0x1394	; 0x1394 <fputc>
    1814:	3a 94       	dec	r3
    1816:	f6 cf       	rjmp	.-20     	; 0x1804 <vfprintf+0x37c>
    1818:	f7 01       	movw	r30, r14
    181a:	86 81       	ldd	r24, Z+6	; 0x06
    181c:	97 81       	ldd	r25, Z+7	; 0x07
    181e:	02 c0       	rjmp	.+4      	; 0x1824 <vfprintf+0x39c>
    1820:	8f ef       	ldi	r24, 0xFF	; 255
    1822:	9f ef       	ldi	r25, 0xFF	; 255
    1824:	2c 96       	adiw	r28, 0x0c	; 12
    1826:	e2 e1       	ldi	r30, 0x12	; 18
    1828:	0c 94 a6 0c 	jmp	0x194c	; 0x194c <__epilogue_restores__>

0000182c <strnlen_P>:
    182c:	fc 01       	movw	r30, r24
    182e:	05 90       	lpm	r0, Z+
    1830:	61 50       	subi	r22, 0x01	; 1
    1832:	70 40       	sbci	r23, 0x00	; 0
    1834:	01 10       	cpse	r0, r1
    1836:	d8 f7       	brcc	.-10     	; 0x182e <strnlen_P+0x2>
    1838:	80 95       	com	r24
    183a:	90 95       	com	r25
    183c:	8e 0f       	add	r24, r30
    183e:	9f 1f       	adc	r25, r31
    1840:	08 95       	ret

00001842 <strnlen>:
    1842:	fc 01       	movw	r30, r24
    1844:	61 50       	subi	r22, 0x01	; 1
    1846:	70 40       	sbci	r23, 0x00	; 0
    1848:	01 90       	ld	r0, Z+
    184a:	01 10       	cpse	r0, r1
    184c:	d8 f7       	brcc	.-10     	; 0x1844 <strnlen+0x2>
    184e:	80 95       	com	r24
    1850:	90 95       	com	r25
    1852:	8e 0f       	add	r24, r30
    1854:	9f 1f       	adc	r25, r31
    1856:	08 95       	ret

00001858 <__ultoa_invert>:
    1858:	fa 01       	movw	r30, r20
    185a:	aa 27       	eor	r26, r26
    185c:	28 30       	cpi	r18, 0x08	; 8
    185e:	51 f1       	breq	.+84     	; 0x18b4 <__ultoa_invert+0x5c>
    1860:	20 31       	cpi	r18, 0x10	; 16
    1862:	81 f1       	breq	.+96     	; 0x18c4 <__ultoa_invert+0x6c>
    1864:	e8 94       	clt
    1866:	6f 93       	push	r22
    1868:	6e 7f       	andi	r22, 0xFE	; 254
    186a:	6e 5f       	subi	r22, 0xFE	; 254
    186c:	7f 4f       	sbci	r23, 0xFF	; 255
    186e:	8f 4f       	sbci	r24, 0xFF	; 255
    1870:	9f 4f       	sbci	r25, 0xFF	; 255
    1872:	af 4f       	sbci	r26, 0xFF	; 255
    1874:	b1 e0       	ldi	r27, 0x01	; 1
    1876:	3e d0       	rcall	.+124    	; 0x18f4 <__ultoa_invert+0x9c>
    1878:	b4 e0       	ldi	r27, 0x04	; 4
    187a:	3c d0       	rcall	.+120    	; 0x18f4 <__ultoa_invert+0x9c>
    187c:	67 0f       	add	r22, r23
    187e:	78 1f       	adc	r23, r24
    1880:	89 1f       	adc	r24, r25
    1882:	9a 1f       	adc	r25, r26
    1884:	a1 1d       	adc	r26, r1
    1886:	68 0f       	add	r22, r24
    1888:	79 1f       	adc	r23, r25
    188a:	8a 1f       	adc	r24, r26
    188c:	91 1d       	adc	r25, r1
    188e:	a1 1d       	adc	r26, r1
    1890:	6a 0f       	add	r22, r26
    1892:	71 1d       	adc	r23, r1
    1894:	81 1d       	adc	r24, r1
    1896:	91 1d       	adc	r25, r1
    1898:	a1 1d       	adc	r26, r1
    189a:	20 d0       	rcall	.+64     	; 0x18dc <__ultoa_invert+0x84>
    189c:	09 f4       	brne	.+2      	; 0x18a0 <__ultoa_invert+0x48>
    189e:	68 94       	set
    18a0:	3f 91       	pop	r19
    18a2:	2a e0       	ldi	r18, 0x0A	; 10
    18a4:	26 9f       	mul	r18, r22
    18a6:	11 24       	eor	r1, r1
    18a8:	30 19       	sub	r19, r0
    18aa:	30 5d       	subi	r19, 0xD0	; 208
    18ac:	31 93       	st	Z+, r19
    18ae:	de f6       	brtc	.-74     	; 0x1866 <__ultoa_invert+0xe>
    18b0:	cf 01       	movw	r24, r30
    18b2:	08 95       	ret
    18b4:	46 2f       	mov	r20, r22
    18b6:	47 70       	andi	r20, 0x07	; 7
    18b8:	40 5d       	subi	r20, 0xD0	; 208
    18ba:	41 93       	st	Z+, r20
    18bc:	b3 e0       	ldi	r27, 0x03	; 3
    18be:	0f d0       	rcall	.+30     	; 0x18de <__ultoa_invert+0x86>
    18c0:	c9 f7       	brne	.-14     	; 0x18b4 <__ultoa_invert+0x5c>
    18c2:	f6 cf       	rjmp	.-20     	; 0x18b0 <__ultoa_invert+0x58>
    18c4:	46 2f       	mov	r20, r22
    18c6:	4f 70       	andi	r20, 0x0F	; 15
    18c8:	40 5d       	subi	r20, 0xD0	; 208
    18ca:	4a 33       	cpi	r20, 0x3A	; 58
    18cc:	18 f0       	brcs	.+6      	; 0x18d4 <__ultoa_invert+0x7c>
    18ce:	49 5d       	subi	r20, 0xD9	; 217
    18d0:	31 fd       	sbrc	r19, 1
    18d2:	40 52       	subi	r20, 0x20	; 32
    18d4:	41 93       	st	Z+, r20
    18d6:	02 d0       	rcall	.+4      	; 0x18dc <__ultoa_invert+0x84>
    18d8:	a9 f7       	brne	.-22     	; 0x18c4 <__ultoa_invert+0x6c>
    18da:	ea cf       	rjmp	.-44     	; 0x18b0 <__ultoa_invert+0x58>
    18dc:	b4 e0       	ldi	r27, 0x04	; 4
    18de:	a6 95       	lsr	r26
    18e0:	97 95       	ror	r25
    18e2:	87 95       	ror	r24
    18e4:	77 95       	ror	r23
    18e6:	67 95       	ror	r22
    18e8:	ba 95       	dec	r27
    18ea:	c9 f7       	brne	.-14     	; 0x18de <__ultoa_invert+0x86>
    18ec:	00 97       	sbiw	r24, 0x00	; 0
    18ee:	61 05       	cpc	r22, r1
    18f0:	71 05       	cpc	r23, r1
    18f2:	08 95       	ret
    18f4:	9b 01       	movw	r18, r22
    18f6:	ac 01       	movw	r20, r24
    18f8:	0a 2e       	mov	r0, r26
    18fa:	06 94       	lsr	r0
    18fc:	57 95       	ror	r21
    18fe:	47 95       	ror	r20
    1900:	37 95       	ror	r19
    1902:	27 95       	ror	r18
    1904:	ba 95       	dec	r27
    1906:	c9 f7       	brne	.-14     	; 0x18fa <__ultoa_invert+0xa2>
    1908:	62 0f       	add	r22, r18
    190a:	73 1f       	adc	r23, r19
    190c:	84 1f       	adc	r24, r20
    190e:	95 1f       	adc	r25, r21
    1910:	a0 1d       	adc	r26, r0
    1912:	08 95       	ret

00001914 <__prologue_saves__>:
    1914:	2f 92       	push	r2
    1916:	3f 92       	push	r3
    1918:	4f 92       	push	r4
    191a:	5f 92       	push	r5
    191c:	6f 92       	push	r6
    191e:	7f 92       	push	r7
    1920:	8f 92       	push	r8
    1922:	9f 92       	push	r9
    1924:	af 92       	push	r10
    1926:	bf 92       	push	r11
    1928:	cf 92       	push	r12
    192a:	df 92       	push	r13
    192c:	ef 92       	push	r14
    192e:	ff 92       	push	r15
    1930:	0f 93       	push	r16
    1932:	1f 93       	push	r17
    1934:	cf 93       	push	r28
    1936:	df 93       	push	r29
    1938:	cd b7       	in	r28, 0x3d	; 61
    193a:	de b7       	in	r29, 0x3e	; 62
    193c:	ca 1b       	sub	r28, r26
    193e:	db 0b       	sbc	r29, r27
    1940:	0f b6       	in	r0, 0x3f	; 63
    1942:	f8 94       	cli
    1944:	de bf       	out	0x3e, r29	; 62
    1946:	0f be       	out	0x3f, r0	; 63
    1948:	cd bf       	out	0x3d, r28	; 61
    194a:	09 94       	ijmp

0000194c <__epilogue_restores__>:
    194c:	2a 88       	ldd	r2, Y+18	; 0x12
    194e:	39 88       	ldd	r3, Y+17	; 0x11
    1950:	48 88       	ldd	r4, Y+16	; 0x10
    1952:	5f 84       	ldd	r5, Y+15	; 0x0f
    1954:	6e 84       	ldd	r6, Y+14	; 0x0e
    1956:	7d 84       	ldd	r7, Y+13	; 0x0d
    1958:	8c 84       	ldd	r8, Y+12	; 0x0c
    195a:	9b 84       	ldd	r9, Y+11	; 0x0b
    195c:	aa 84       	ldd	r10, Y+10	; 0x0a
    195e:	b9 84       	ldd	r11, Y+9	; 0x09
    1960:	c8 84       	ldd	r12, Y+8	; 0x08
    1962:	df 80       	ldd	r13, Y+7	; 0x07
    1964:	ee 80       	ldd	r14, Y+6	; 0x06
    1966:	fd 80       	ldd	r15, Y+5	; 0x05
    1968:	0c 81       	ldd	r16, Y+4	; 0x04
    196a:	1b 81       	ldd	r17, Y+3	; 0x03
    196c:	aa 81       	ldd	r26, Y+2	; 0x02
    196e:	b9 81       	ldd	r27, Y+1	; 0x01
    1970:	ce 0f       	add	r28, r30
    1972:	d1 1d       	adc	r29, r1
    1974:	0f b6       	in	r0, 0x3f	; 63
    1976:	f8 94       	cli
    1978:	de bf       	out	0x3e, r29	; 62
    197a:	0f be       	out	0x3f, r0	; 63
    197c:	cd bf       	out	0x3d, r28	; 61
    197e:	ed 01       	movw	r28, r26
    1980:	08 95       	ret

00001982 <_exit>:
    1982:	f8 94       	cli

00001984 <__stop_program>:
    1984:	ff cf       	rjmp	.-2      	; 0x1984 <__stop_program>
