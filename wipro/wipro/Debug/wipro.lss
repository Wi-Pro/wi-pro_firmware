
wipro.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000752  00800200  0000293e  000029d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000293e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001e7  00800952  00800952  00003124  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003124  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000560  00000000  00000000  00003180  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000063fe  00000000  00000000  000036e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000018e5  00000000  00000000  00009ade  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000037bb  00000000  00000000  0000b3c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00001280  00000000  00000000  0000eb80  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000eaa  00000000  00000000  0000fe00  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00003e4d  00000000  00000000  00010caa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000004e8  00000000  00000000  00014af7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
       6:	00 00       	nop
       8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
       a:	00 00       	nop
       c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
       e:	00 00       	nop
      10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
      12:	00 00       	nop
      14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
      16:	00 00       	nop
      18:	69 c2       	rjmp	.+1234   	; 0x4ec <__vector_6>
      1a:	00 00       	nop
      1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
      1e:	00 00       	nop
      20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
      22:	00 00       	nop
      24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
      26:	00 00       	nop
      28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
      2e:	00 00       	nop
      30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
      32:	00 00       	nop
      34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
      36:	00 00       	nop
      38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
      3e:	00 00       	nop
      40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
      42:	00 00       	nop
      44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
      46:	00 00       	nop
      48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
      4e:	00 00       	nop
      50:	12 c2       	rjmp	.+1060   	; 0x476 <__vector_20>
      52:	00 00       	nop
      54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
      56:	00 00       	nop
      58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
      5e:	00 00       	nop
      60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 95 0a 	jmp	0x152a	; 0x152a <__vector_25>
      68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
      6e:	00 00       	nop
      70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
      72:	00 00       	nop
      74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
      76:	00 00       	nop
      78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
      7e:	00 00       	nop
      80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
      82:	00 00       	nop
      84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
      86:	00 00       	nop
      88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
      8e:	00 00       	nop
      90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
      92:	00 00       	nop
      94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
      96:	00 00       	nop
      98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
      be:	00 00       	nop
      c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
      da:	00 00       	nop
      dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
      de:	00 00       	nop
      e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
      f0:	19 e0       	ldi	r17, 0x09	; 9
      f2:	a0 e0       	ldi	r26, 0x00	; 0
      f4:	b2 e0       	ldi	r27, 0x02	; 2
      f6:	ee e3       	ldi	r30, 0x3E	; 62
      f8:	f9 e2       	ldi	r31, 0x29	; 41
      fa:	00 e0       	ldi	r16, 0x00	; 0
      fc:	0b bf       	out	0x3b, r16	; 59
      fe:	02 c0       	rjmp	.+4      	; 0x104 <__do_copy_data+0x14>
     100:	07 90       	elpm	r0, Z+
     102:	0d 92       	st	X+, r0
     104:	a2 35       	cpi	r26, 0x52	; 82
     106:	b1 07       	cpc	r27, r17
     108:	d9 f7       	brne	.-10     	; 0x100 <__do_copy_data+0x10>

0000010a <__do_clear_bss>:
     10a:	2b e0       	ldi	r18, 0x0B	; 11
     10c:	a2 e5       	ldi	r26, 0x52	; 82
     10e:	b9 e0       	ldi	r27, 0x09	; 9
     110:	01 c0       	rjmp	.+2      	; 0x114 <.do_clear_bss_start>

00000112 <.do_clear_bss_loop>:
     112:	1d 92       	st	X+, r1

00000114 <.do_clear_bss_start>:
     114:	a9 33       	cpi	r26, 0x39	; 57
     116:	b2 07       	cpc	r27, r18
     118:	e1 f7       	brne	.-8      	; 0x112 <.do_clear_bss_loop>
     11a:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <main>
     11e:	0c 94 9d 14 	jmp	0x293a	; 0x293a <_exit>

00000122 <__bad_interrupt>:
     122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <flagInit>:
	RAMPrint(WIFI_QSTRING_ADDRESS, qLength);
	//RAMRead(WIFI_QSTRING_ADDRESS, qLength, buffer);
	SendData(WIFI_QSTRING_ADDRESS, qLength, 1);
	memset(filepath, 0x00, 100);
	printf("Sent!");
}
     124:	10 92 bd 09 	sts	0x09BD, r1
     128:	10 92 be 09 	sts	0x09BE, r1
     12c:	10 92 bf 09 	sts	0x09BF, r1
     130:	10 92 c0 09 	sts	0x09C0, r1
     134:	10 92 c1 09 	sts	0x09C1, r1
     138:	10 92 c2 09 	sts	0x09C2, r1
     13c:	65 99       	sbic	0x0c, 5	; 12
     13e:	08 c0       	rjmp	.+16     	; 0x150 <flagInit+0x2c>
     140:	85 e3       	ldi	r24, 0x35	; 53
     142:	92 e0       	ldi	r25, 0x02	; 2
     144:	0e 94 0e 12 	call	0x241c	; 0x241c <puts>
     148:	0a d2       	rcall	.+1044   	; 0x55e <ethernetInit>
     14a:	81 e0       	ldi	r24, 0x01	; 1
     14c:	80 93 bd 09 	sts	0x09BD, r24
     150:	08 95       	ret

00000152 <pollingInit>:
     152:	e1 e8       	ldi	r30, 0x81	; 129
     154:	f0 e0       	ldi	r31, 0x00	; 0
     156:	80 81       	ld	r24, Z
     158:	84 60       	ori	r24, 0x04	; 4
     15a:	80 83       	st	Z, r24
     15c:	10 92 84 00 	sts	0x0084, r1
     160:	10 92 85 00 	sts	0x0085, r1
     164:	81 e0       	ldi	r24, 0x01	; 1
     166:	80 93 6f 00 	sts	0x006F, r24
     16a:	08 95       	ret

0000016c <ethernetPlugInit>:
     16c:	80 e2       	ldi	r24, 0x20	; 32
     16e:	8d bb       	out	0x1d, r24	; 29
     170:	84 e0       	ldi	r24, 0x04	; 4
     172:	80 93 6a 00 	sts	0x006A, r24
     176:	08 95       	ret

00000178 <connectionInit>:
     178:	0c d6       	rcall	.+3096   	; 0xd92 <uart2_init>
     17a:	0e 94 14 09 	call	0x1228	; 0x1228 <uart_init>
     17e:	61 d6       	rcall	.+3266   	; 0xe42 <SPI_Init>
     180:	d1 df       	rcall	.-94     	; 0x124 <flagInit>
     182:	f4 df       	rcall	.-24     	; 0x16c <ethernetPlugInit>
     184:	84 e6       	ldi	r24, 0x64	; 100
     186:	e5 e5       	ldi	r30, 0x55	; 85
     188:	f9 e0       	ldi	r31, 0x09	; 9
     18a:	df 01       	movw	r26, r30
     18c:	1d 92       	st	X+, r1
     18e:	8a 95       	dec	r24
     190:	e9 f7       	brne	.-6      	; 0x18c <connectionInit+0x14>
     192:	81 e0       	ldi	r24, 0x01	; 1
     194:	80 93 be 09 	sts	0x09BE, r24
     198:	08 95       	ret

0000019a <clearFlags>:
     19a:	cf 93       	push	r28
     19c:	df 93       	push	r29
     19e:	80 91 bd 09 	lds	r24, 0x09BD
     1a2:	88 23       	and	r24, r24
     1a4:	b9 f1       	breq	.+110    	; 0x214 <clearFlags+0x7a>
     1a6:	c5 e5       	ldi	r28, 0x55	; 85
     1a8:	d9 e0       	ldi	r29, 0x09	; 9
     1aa:	84 e6       	ldi	r24, 0x64	; 100
     1ac:	de 01       	movw	r26, r28
     1ae:	1d 92       	st	X+, r1
     1b0:	8a 95       	dec	r24
     1b2:	e9 f7       	brne	.-6      	; 0x1ae <clearFlags+0x14>
     1b4:	85 e0       	ldi	r24, 0x05	; 5
     1b6:	e7 e4       	ldi	r30, 0x47	; 71
     1b8:	f2 e0       	ldi	r31, 0x02	; 2
     1ba:	de 01       	movw	r26, r28
     1bc:	01 90       	ld	r0, Z+
     1be:	0d 92       	st	X+, r0
     1c0:	8a 95       	dec	r24
     1c2:	e1 f7       	brne	.-8      	; 0x1bc <clearFlags+0x22>
     1c4:	de 01       	movw	r26, r28
     1c6:	0d 90       	ld	r0, X+
     1c8:	00 20       	and	r0, r0
     1ca:	e9 f7       	brne	.-6      	; 0x1c6 <clearFlags+0x2c>
     1cc:	11 97       	sbiw	r26, 0x01	; 1
     1ce:	85 e1       	ldi	r24, 0x15	; 21
     1d0:	ec e4       	ldi	r30, 0x4C	; 76
     1d2:	f2 e0       	ldi	r31, 0x02	; 2
     1d4:	01 90       	ld	r0, Z+
     1d6:	0d 92       	st	X+, r0
     1d8:	8a 95       	dec	r24
     1da:	e1 f7       	brne	.-8      	; 0x1d4 <clearFlags+0x3a>
     1dc:	de 01       	movw	r26, r28
     1de:	0d 90       	ld	r0, X+
     1e0:	00 20       	and	r0, r0
     1e2:	e9 f7       	brne	.-6      	; 0x1de <clearFlags+0x44>
     1e4:	11 97       	sbiw	r26, 0x01	; 1
     1e6:	82 e1       	ldi	r24, 0x12	; 18
     1e8:	e1 e6       	ldi	r30, 0x61	; 97
     1ea:	f2 e0       	ldi	r31, 0x02	; 2
     1ec:	01 90       	ld	r0, Z+
     1ee:	0d 92       	st	X+, r0
     1f0:	8a 95       	dec	r24
     1f2:	e1 f7       	brne	.-8      	; 0x1ec <clearFlags+0x52>
     1f4:	09 90       	ld	r0, Y+
     1f6:	00 20       	and	r0, r0
     1f8:	e9 f7       	brne	.-6      	; 0x1f4 <clearFlags+0x5a>
     1fa:	de 01       	movw	r26, r28
     1fc:	11 97       	sbiw	r26, 0x01	; 1
     1fe:	83 e1       	ldi	r24, 0x13	; 19
     200:	e3 e7       	ldi	r30, 0x73	; 115
     202:	f2 e0       	ldi	r31, 0x02	; 2
     204:	01 90       	ld	r0, Z+
     206:	0d 92       	st	X+, r0
     208:	8a 95       	dec	r24
     20a:	e1 f7       	brne	.-8      	; 0x204 <clearFlags+0x6a>
     20c:	85 e5       	ldi	r24, 0x55	; 85
     20e:	99 e0       	ldi	r25, 0x09	; 9
     210:	bb d1       	rcall	.+886    	; 0x588 <updateFileEthernet>
     212:	35 c0       	rjmp	.+106    	; 0x27e <clearFlags+0xe4>
     214:	80 91 be 09 	lds	r24, 0x09BE
     218:	88 23       	and	r24, r24
     21a:	89 f1       	breq	.+98     	; 0x27e <clearFlags+0xe4>
     21c:	c5 e5       	ldi	r28, 0x55	; 85
     21e:	d9 e0       	ldi	r29, 0x09	; 9
     220:	8a e0       	ldi	r24, 0x0A	; 10
     222:	e6 e8       	ldi	r30, 0x86	; 134
     224:	f2 e0       	ldi	r31, 0x02	; 2
     226:	de 01       	movw	r26, r28
     228:	01 90       	ld	r0, Z+
     22a:	0d 92       	st	X+, r0
     22c:	8a 95       	dec	r24
     22e:	e1 f7       	brne	.-8      	; 0x228 <clearFlags+0x8e>
     230:	de 01       	movw	r26, r28
     232:	0d 90       	ld	r0, X+
     234:	00 20       	and	r0, r0
     236:	e9 f7       	brne	.-6      	; 0x232 <clearFlags+0x98>
     238:	11 97       	sbiw	r26, 0x01	; 1
     23a:	85 e1       	ldi	r24, 0x15	; 21
     23c:	ec e4       	ldi	r30, 0x4C	; 76
     23e:	f2 e0       	ldi	r31, 0x02	; 2
     240:	01 90       	ld	r0, Z+
     242:	0d 92       	st	X+, r0
     244:	8a 95       	dec	r24
     246:	e1 f7       	brne	.-8      	; 0x240 <clearFlags+0xa6>
     248:	de 01       	movw	r26, r28
     24a:	0d 90       	ld	r0, X+
     24c:	00 20       	and	r0, r0
     24e:	e9 f7       	brne	.-6      	; 0x24a <clearFlags+0xb0>
     250:	11 97       	sbiw	r26, 0x01	; 1
     252:	82 e1       	ldi	r24, 0x12	; 18
     254:	e1 e6       	ldi	r30, 0x61	; 97
     256:	f2 e0       	ldi	r31, 0x02	; 2
     258:	01 90       	ld	r0, Z+
     25a:	0d 92       	st	X+, r0
     25c:	8a 95       	dec	r24
     25e:	e1 f7       	brne	.-8      	; 0x258 <clearFlags+0xbe>
     260:	09 90       	ld	r0, Y+
     262:	00 20       	and	r0, r0
     264:	e9 f7       	brne	.-6      	; 0x260 <clearFlags+0xc6>
     266:	de 01       	movw	r26, r28
     268:	11 97       	sbiw	r26, 0x01	; 1
     26a:	83 e1       	ldi	r24, 0x13	; 19
     26c:	e3 e7       	ldi	r30, 0x73	; 115
     26e:	f2 e0       	ldi	r31, 0x02	; 2
     270:	01 90       	ld	r0, Z+
     272:	0d 92       	st	X+, r0
     274:	8a 95       	dec	r24
     276:	e1 f7       	brne	.-8      	; 0x270 <clearFlags+0xd6>
     278:	85 e5       	ldi	r24, 0x55	; 85
     27a:	99 e0       	ldi	r25, 0x09	; 9
     27c:	be d7       	rcall	.+3964   	; 0x11fa <updateFileWifi>
     27e:	84 e6       	ldi	r24, 0x64	; 100
     280:	e5 e5       	ldi	r30, 0x55	; 85
     282:	f9 e0       	ldi	r31, 0x09	; 9
     284:	df 01       	movw	r26, r30
     286:	1d 92       	st	X+, r1
     288:	8a 95       	dec	r24
     28a:	e9 f7       	brne	.-6      	; 0x286 <clearFlags+0xec>
     28c:	81 e0       	ldi	r24, 0x01	; 1
     28e:	90 e0       	ldi	r25, 0x00	; 0
     290:	df 91       	pop	r29
     292:	cf 91       	pop	r28
     294:	08 95       	ret

00000296 <getHexFile>:

int getHexFile()
{
     296:	0f 93       	push	r16
     298:	1f 93       	push	r17
     29a:	cf 93       	push	r28
     29c:	df 93       	push	r29
	//Flags[WIFI] = 1;
	if(Flags[WIFI])
     29e:	80 91 be 09 	lds	r24, 0x09BE
     2a2:	88 23       	and	r24, r24
     2a4:	09 f4       	brne	.+2      	; 0x2a8 <getHexFile+0x12>
     2a6:	5d c0       	rjmp	.+186    	; 0x362 <getHexFile+0xcc>
	{
		uint16_t transLength; 
		strcpy(filepath, URL);
     2a8:	c5 e5       	ldi	r28, 0x55	; 85
     2aa:	d9 e0       	ldi	r29, 0x09	; 9
     2ac:	85 e1       	ldi	r24, 0x15	; 21
     2ae:	ec e4       	ldi	r30, 0x4C	; 76
     2b0:	f2 e0       	ldi	r31, 0x02	; 2
     2b2:	de 01       	movw	r26, r28
     2b4:	01 90       	ld	r0, Z+
     2b6:	0d 92       	st	X+, r0
     2b8:	8a 95       	dec	r24
     2ba:	e1 f7       	brne	.-8      	; 0x2b4 <getHexFile+0x1e>
		strcat(filepath, HEX_FILE);
     2bc:	de 01       	movw	r26, r28
     2be:	0d 90       	ld	r0, X+
     2c0:	00 20       	and	r0, r0
     2c2:	e9 f7       	brne	.-6      	; 0x2be <getHexFile+0x28>
     2c4:	11 97       	sbiw	r26, 0x01	; 1
     2c6:	84 e2       	ldi	r24, 0x24	; 36
     2c8:	ee ec       	ldi	r30, 0xCE	; 206
     2ca:	f2 e0       	ldi	r31, 0x02	; 2
     2cc:	01 90       	ld	r0, Z+
     2ce:	0d 92       	st	X+, r0
     2d0:	8a 95       	dec	r24
     2d2:	e1 f7       	brne	.-8      	; 0x2cc <getHexFile+0x36>
		//setTestPrint(1);
		//printf("Compress Flag Set!");
		//setCompressFlag(1);
		transLength = getFileWifi(filepath, 1, HEX_FILE_ADDRESS, 1);
     2d4:	01 e0       	ldi	r16, 0x01	; 1
     2d6:	10 e0       	ldi	r17, 0x00	; 0
     2d8:	20 e0       	ldi	r18, 0x00	; 0
     2da:	30 e0       	ldi	r19, 0x00	; 0
     2dc:	a9 01       	movw	r20, r18
     2de:	61 e0       	ldi	r22, 0x01	; 1
     2e0:	70 e0       	ldi	r23, 0x00	; 0
     2e2:	ce 01       	movw	r24, r28
     2e4:	02 d7       	rcall	.+3588   	; 0x10ea <getFileWifi>
     2e6:	08 2f       	mov	r16, r24
     2e8:	19 2f       	mov	r17, r25
		printf("WTF HELLO4!!!\n");
     2ea:	82 ef       	ldi	r24, 0xF2	; 242
     2ec:	92 e0       	ldi	r25, 0x02	; 2
     2ee:	0e 94 0e 12 	call	0x241c	; 0x241c <puts>
		printf("Uncompressed Trans Length: %d\n", transLength); 
     2f2:	1f 93       	push	r17
     2f4:	0f 93       	push	r16
     2f6:	20 e0       	ldi	r18, 0x00	; 0
     2f8:	33 e0       	ldi	r19, 0x03	; 3
     2fa:	3f 93       	push	r19
     2fc:	2f 93       	push	r18
     2fe:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <printf>
		//RAMPrint(HEX_FILE_ADDRESS, 100);
		compressFile(transLength); 
     302:	80 2f       	mov	r24, r16
     304:	91 2f       	mov	r25, r17
     306:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <compressFile>
		memset(filepath, 0x00, 100);
     30a:	84 e6       	ldi	r24, 0x64	; 100
     30c:	fe 01       	movw	r30, r28
     30e:	11 92       	st	Z+, r1
     310:	8a 95       	dec	r24
     312:	e9 f7       	brne	.-6      	; 0x30e <getHexFile+0x78>
		strcpy(filepath, URL);
     314:	85 e1       	ldi	r24, 0x15	; 21
     316:	ec e4       	ldi	r30, 0x4C	; 76
     318:	f2 e0       	ldi	r31, 0x02	; 2
     31a:	de 01       	movw	r26, r28
     31c:	01 90       	ld	r0, Z+
     31e:	0d 92       	st	X+, r0
     320:	8a 95       	dec	r24
     322:	e1 f7       	brne	.-8      	; 0x31c <getHexFile+0x86>
		strcat(filepath, DEVICE_FILE);
     324:	09 90       	ld	r0, Y+
     326:	00 20       	and	r0, r0
     328:	e9 f7       	brne	.-6      	; 0x324 <getHexFile+0x8e>
     32a:	de 01       	movw	r26, r28
     32c:	11 97       	sbiw	r26, 0x01	; 1
     32e:	87 e2       	ldi	r24, 0x27	; 39
     330:	ef e1       	ldi	r30, 0x1F	; 31
     332:	f3 e0       	ldi	r31, 0x03	; 3
     334:	01 90       	ld	r0, Z+
     336:	0d 92       	st	X+, r0
     338:	8a 95       	dec	r24
     33a:	e1 f7       	brne	.-8      	; 0x334 <getHexFile+0x9e>
		getFileWifi(filepath, 1, STATUS_FLAG_ADDRESS + DEVICE_ID, 1); 
     33c:	01 e0       	ldi	r16, 0x01	; 1
     33e:	10 e0       	ldi	r17, 0x00	; 0
     340:	25 e0       	ldi	r18, 0x05	; 5
     342:	30 e3       	ldi	r19, 0x30	; 48
     344:	40 e0       	ldi	r20, 0x00	; 0
     346:	50 e0       	ldi	r21, 0x00	; 0
     348:	61 e0       	ldi	r22, 0x01	; 1
     34a:	70 e0       	ldi	r23, 0x00	; 0
     34c:	85 e5       	ldi	r24, 0x55	; 85
     34e:	99 e0       	ldi	r25, 0x09	; 9
     350:	cc d6       	rcall	.+3480   	; 0x10ea <getFileWifi>
		//writeHexFileTest(); 
		printf("Compressed!\n"); 
     352:	86 e4       	ldi	r24, 0x46	; 70
     354:	93 e0       	ldi	r25, 0x03	; 3
     356:	0e 94 0e 12 	call	0x241c	; 0x241c <puts>
     35a:	0f 90       	pop	r0
     35c:	0f 90       	pop	r0
     35e:	0f 90       	pop	r0
     360:	0f 90       	pop	r0
		//Program(ATtiny2313); 
		//printf("Hex File Downloaded!\n");
	}
	
	return 1; 
}
     362:	81 e0       	ldi	r24, 0x01	; 1
     364:	90 e0       	ldi	r25, 0x00	; 0
     366:	df 91       	pop	r29
     368:	cf 91       	pop	r28
     36a:	1f 91       	pop	r17
     36c:	0f 91       	pop	r16
     36e:	08 95       	ret

00000370 <getFlagStatus>:

int getFlagStatus()
{
     370:	0f 93       	push	r16
     372:	1f 93       	push	r17
	TIMSK1 &= ~(1 << TOIE1);
     374:	ef e6       	ldi	r30, 0x6F	; 111
     376:	f0 e0       	ldi	r31, 0x00	; 0
     378:	80 81       	ld	r24, Z
     37a:	8e 7f       	andi	r24, 0xFE	; 254
     37c:	80 83       	st	Z, r24
		Flags[PROGRAM] = (RAMReadByte(STATUS_FLAG_ADDRESS) & 0x0F);
		Flags[NETWORK_SCAN] = (RAMReadByte(STATUS_FLAG_ADDRESS + 1) & 0x0F);
		Flags[NETWORK_CONNECT] = (RAMReadByte(STATUS_FLAG_ADDRESS + 2) & 0x0F); 
		//printf("Flag Status: %s\n", flags);  
	}
	else if(Flags[WIFI]){
     37e:	80 91 be 09 	lds	r24, 0x09BE
     382:	88 23       	and	r24, r24
     384:	c9 f1       	breq	.+114    	; 0x3f8 <getFlagStatus+0x88>
		strcpy(filepath, URL);
     386:	85 e1       	ldi	r24, 0x15	; 21
     388:	ec e4       	ldi	r30, 0x4C	; 76
     38a:	f2 e0       	ldi	r31, 0x02	; 2
     38c:	a5 e5       	ldi	r26, 0x55	; 85
     38e:	b9 e0       	ldi	r27, 0x09	; 9
     390:	01 90       	ld	r0, Z+
     392:	0d 92       	st	X+, r0
     394:	8a 95       	dec	r24
     396:	e1 f7       	brne	.-8      	; 0x390 <getFlagStatus+0x20>
		strcat(filepath, FLAG_FILE); 
     398:	a5 e5       	ldi	r26, 0x55	; 85
     39a:	b9 e0       	ldi	r27, 0x09	; 9
     39c:	0d 90       	ld	r0, X+
     39e:	00 20       	and	r0, r0
     3a0:	e9 f7       	brne	.-6      	; 0x39c <getFlagStatus+0x2c>
     3a2:	11 97       	sbiw	r26, 0x01	; 1
     3a4:	85 e2       	ldi	r24, 0x25	; 37
     3a6:	e2 e5       	ldi	r30, 0x52	; 82
     3a8:	f3 e0       	ldi	r31, 0x03	; 3
     3aa:	01 90       	ld	r0, Z+
     3ac:	0d 92       	st	X+, r0
     3ae:	8a 95       	dec	r24
     3b0:	e1 f7       	brne	.-8      	; 0x3aa <getFlagStatus+0x3a>
		//setTestPrint(1);
		getFileWifi(filepath, 1, STATUS_FLAG_ADDRESS, 0);
     3b2:	00 e0       	ldi	r16, 0x00	; 0
     3b4:	10 e0       	ldi	r17, 0x00	; 0
     3b6:	20 e0       	ldi	r18, 0x00	; 0
     3b8:	30 e3       	ldi	r19, 0x30	; 48
     3ba:	40 e0       	ldi	r20, 0x00	; 0
     3bc:	50 e0       	ldi	r21, 0x00	; 0
     3be:	61 e0       	ldi	r22, 0x01	; 1
     3c0:	70 e0       	ldi	r23, 0x00	; 0
     3c2:	85 e5       	ldi	r24, 0x55	; 85
     3c4:	99 e0       	ldi	r25, 0x09	; 9
     3c6:	91 d6       	rcall	.+3362   	; 0x10ea <getFileWifi>
		//printf("Ram Print: ");
		//RAMPrint(STATUS_FLAG_ADDRESS, 3);
		//printf("\n");
		Flags[PROGRAM] = (RAMReadByte(STATUS_FLAG_ADDRESS) & 0x0F);
     3c8:	60 e0       	ldi	r22, 0x00	; 0
     3ca:	70 e3       	ldi	r23, 0x30	; 48
     3cc:	80 e0       	ldi	r24, 0x00	; 0
     3ce:	90 e0       	ldi	r25, 0x00	; 0
     3d0:	48 d5       	rcall	.+2704   	; 0xe62 <RAMReadByte>
     3d2:	8f 70       	andi	r24, 0x0F	; 15
     3d4:	80 93 bf 09 	sts	0x09BF, r24
		Flags[NETWORK_SCAN] = (RAMReadByte(STATUS_FLAG_ADDRESS + 1) & 0x0F);
     3d8:	61 e0       	ldi	r22, 0x01	; 1
     3da:	70 e3       	ldi	r23, 0x30	; 48
     3dc:	80 e0       	ldi	r24, 0x00	; 0
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	40 d5       	rcall	.+2688   	; 0xe62 <RAMReadByte>
     3e2:	8f 70       	andi	r24, 0x0F	; 15
     3e4:	80 93 c0 09 	sts	0x09C0, r24
		Flags[NETWORK_CONNECT] = (RAMReadByte(STATUS_FLAG_ADDRESS + 2) & 0x0F);
     3e8:	62 e0       	ldi	r22, 0x02	; 2
     3ea:	70 e3       	ldi	r23, 0x30	; 48
     3ec:	80 e0       	ldi	r24, 0x00	; 0
     3ee:	90 e0       	ldi	r25, 0x00	; 0
     3f0:	38 d5       	rcall	.+2672   	; 0xe62 <RAMReadByte>
     3f2:	8f 70       	andi	r24, 0x0F	; 15
     3f4:	80 93 c1 09 	sts	0x09C1, r24
		
	}
	memset(filepath, 0x00, 100); 
     3f8:	84 e6       	ldi	r24, 0x64	; 100
     3fa:	e5 e5       	ldi	r30, 0x55	; 85
     3fc:	f9 e0       	ldi	r31, 0x09	; 9
     3fe:	df 01       	movw	r26, r30
     400:	1d 92       	st	X+, r1
     402:	8a 95       	dec	r24
     404:	e9 f7       	brne	.-6      	; 0x400 <getFlagStatus+0x90>
	//Perform actions based on flags 
	if(Flags[PROGRAM] == 0x01)
     406:	80 91 bf 09 	lds	r24, 0x09BF
     40a:	81 30       	cpi	r24, 0x01	; 1
     40c:	49 f5       	brne	.+82     	; 0x460 <getFlagStatus+0xf0>
	{
		//Program Function 
		printf("Program!\n");
     40e:	87 e7       	ldi	r24, 0x77	; 119
     410:	93 e0       	ldi	r25, 0x03	; 3
     412:	0e 94 0e 12 	call	0x241c	; 0x241c <puts>
		//PORTD &= ~(1<<CTS);
		//wifiDriverInit(); 
		//PORTD |= (1<<CTS); 
		//_delay_ms(2000);
		LED_PORT |= (1<<LED_Yellow);
     416:	a1 9a       	sbi	0x14, 1	; 20
		do 
		{
			getHexFile();
     418:	3e df       	rcall	.-388    	; 0x296 <getHexFile>
		} while (!checkSum());
     41a:	0e 94 81 0c 	call	0x1902	; 0x1902 <checkSum>
     41e:	89 2b       	or	r24, r25
     420:	d9 f3       	breq	.-10     	; 0x418 <getFlagStatus+0xa8>
		
		 
		Flags[DEVICE_ID] = (RAMReadByte(STATUS_FLAG_ADDRESS + DEVICE_ID) & 0x0F);
     422:	65 e0       	ldi	r22, 0x05	; 5
     424:	70 e3       	ldi	r23, 0x30	; 48
     426:	80 e0       	ldi	r24, 0x00	; 0
     428:	90 e0       	ldi	r25, 0x00	; 0
     42a:	1b d5       	rcall	.+2614   	; 0xe62 <RAMReadByte>
     42c:	8f 70       	andi	r24, 0x0F	; 15
     42e:	80 93 c2 09 	sts	0x09C2, r24
		//printf("Device ID: %d\n", Flags[DEVICE_ID]); 
		//printf("Signature Byte: 0x%08X\n", signatureBytes); 
		switch(Flags[DEVICE_ID])
     432:	82 30       	cpi	r24, 0x02	; 2
     434:	19 f0       	breq	.+6      	; 0x43c <getFlagStatus+0xcc>
     436:	83 30       	cpi	r24, 0x03	; 3
     438:	41 f0       	breq	.+16     	; 0x44a <getFlagStatus+0xda>
     43a:	0e c0       	rjmp	.+28     	; 0x458 <getFlagStatus+0xe8>
		{
			case ATtiny2313_ID:
				Program(ATtiny2313);
     43c:	6a e0       	ldi	r22, 0x0A	; 10
     43e:	71 e9       	ldi	r23, 0x91	; 145
     440:	8e e1       	ldi	r24, 0x1E	; 30
     442:	90 e0       	ldi	r25, 0x00	; 0
     444:	0e 94 1d 0c 	call	0x183a	; 0x183a <Program>
				break;
     448:	0b c0       	rjmp	.+22     	; 0x460 <getFlagStatus+0xf0>
			case ATmega324PA_ID: 
				Program(ATmega324PA);
     44a:	61 e1       	ldi	r22, 0x11	; 17
     44c:	75 e9       	ldi	r23, 0x95	; 149
     44e:	8e e1       	ldi	r24, 0x1E	; 30
     450:	90 e0       	ldi	r25, 0x00	; 0
     452:	0e 94 1d 0c 	call	0x183a	; 0x183a <Program>
				break;
     456:	04 c0       	rjmp	.+8      	; 0x460 <getFlagStatus+0xf0>
			default:
				printf("Error, bad device ID!\n");
     458:	80 e8       	ldi	r24, 0x80	; 128
     45a:	93 e0       	ldi	r25, 0x03	; 3
     45c:	0e 94 0e 12 	call	0x241c	; 0x241c <puts>
		//printf("Network Connect!\n");
		//networkConnect("Wi-Pro", "brightshoe902"); 
		//getFileEthernet()
	}
	//_delay_ms(500);
	clearFlags(); 
     460:	9c de       	rcall	.-712    	; 0x19a <clearFlags>
	TIMSK1 |= (1 << TOIE1);
     462:	ef e6       	ldi	r30, 0x6F	; 111
     464:	f0 e0       	ldi	r31, 0x00	; 0
     466:	80 81       	ld	r24, Z
     468:	81 60       	ori	r24, 0x01	; 1
     46a:	80 83       	st	Z, r24
	return 1; 
}
     46c:	81 e0       	ldi	r24, 0x01	; 1
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	1f 91       	pop	r17
     472:	0f 91       	pop	r16
     474:	08 95       	ret

00000476 <__vector_20>:

//Timer overflow vector for polling 
ISR(TIMER1_OVF_vect)
{
     476:	1f 92       	push	r1
     478:	0f 92       	push	r0
     47a:	0f b6       	in	r0, 0x3f	; 63
     47c:	0f 92       	push	r0
     47e:	11 24       	eor	r1, r1
     480:	0b b6       	in	r0, 0x3b	; 59
     482:	0f 92       	push	r0
     484:	2f 93       	push	r18
     486:	3f 93       	push	r19
     488:	4f 93       	push	r20
     48a:	5f 93       	push	r21
     48c:	6f 93       	push	r22
     48e:	7f 93       	push	r23
     490:	8f 93       	push	r24
     492:	9f 93       	push	r25
     494:	af 93       	push	r26
     496:	bf 93       	push	r27
     498:	cf 93       	push	r28
     49a:	df 93       	push	r29
     49c:	ef 93       	push	r30
     49e:	ff 93       	push	r31
	//cli(); 
	TIMSK1 &= ~(1 << TOIE1);
     4a0:	cf e6       	ldi	r28, 0x6F	; 111
     4a2:	d0 e0       	ldi	r29, 0x00	; 0
     4a4:	88 81       	ld	r24, Y
     4a6:	8e 7f       	andi	r24, 0xFE	; 254
     4a8:	88 83       	st	Y, r24
	printf("Flag Status\n");
     4aa:	86 e9       	ldi	r24, 0x96	; 150
     4ac:	93 e0       	ldi	r25, 0x03	; 3
     4ae:	0e 94 0e 12 	call	0x241c	; 0x241c <puts>
	getFlagStatus(); 
     4b2:	5e df       	rcall	.-324    	; 0x370 <getFlagStatus>
	TCNT1L = 0x00;
     4b4:	10 92 84 00 	sts	0x0084, r1
	TCNT1H = 0x00;
     4b8:	10 92 85 00 	sts	0x0085, r1
	TIMSK1 |= (1 << TOIE1);
     4bc:	88 81       	ld	r24, Y
     4be:	81 60       	ori	r24, 0x01	; 1
     4c0:	88 83       	st	Y, r24
	//sei();  
}
     4c2:	ff 91       	pop	r31
     4c4:	ef 91       	pop	r30
     4c6:	df 91       	pop	r29
     4c8:	cf 91       	pop	r28
     4ca:	bf 91       	pop	r27
     4cc:	af 91       	pop	r26
     4ce:	9f 91       	pop	r25
     4d0:	8f 91       	pop	r24
     4d2:	7f 91       	pop	r23
     4d4:	6f 91       	pop	r22
     4d6:	5f 91       	pop	r21
     4d8:	4f 91       	pop	r20
     4da:	3f 91       	pop	r19
     4dc:	2f 91       	pop	r18
     4de:	0f 90       	pop	r0
     4e0:	0b be       	out	0x3b, r0	; 59
     4e2:	0f 90       	pop	r0
     4e4:	0f be       	out	0x3f, r0	; 63
     4e6:	0f 90       	pop	r0
     4e8:	1f 90       	pop	r1
     4ea:	18 95       	reti

000004ec <__vector_6>:

ISR(INT5_vect)
{
     4ec:	1f 92       	push	r1
     4ee:	0f 92       	push	r0
     4f0:	0f b6       	in	r0, 0x3f	; 63
     4f2:	0f 92       	push	r0
     4f4:	11 24       	eor	r1, r1
     4f6:	0b b6       	in	r0, 0x3b	; 59
     4f8:	0f 92       	push	r0
     4fa:	2f 93       	push	r18
     4fc:	3f 93       	push	r19
     4fe:	4f 93       	push	r20
     500:	5f 93       	push	r21
     502:	6f 93       	push	r22
     504:	7f 93       	push	r23
     506:	8f 93       	push	r24
     508:	9f 93       	push	r25
     50a:	af 93       	push	r26
     50c:	bf 93       	push	r27
     50e:	ef 93       	push	r30
     510:	ff 93       	push	r31
	cli();
     512:	f8 94       	cli
	if(PINE & (1<<INT5))
     514:	65 9b       	sbis	0x0c, 5	; 12
     516:	07 c0       	rjmp	.+14     	; 0x526 <__vector_6+0x3a>
	{
		Flags[ETHERNET] = 0; 
     518:	10 92 bd 09 	sts	0x09BD, r1
		//checkWifiStatus(); 
		printf("Rising Edge!\n");
     51c:	82 ea       	ldi	r24, 0xA2	; 162
     51e:	93 e0       	ldi	r25, 0x03	; 3
     520:	0e 94 0e 12 	call	0x241c	; 0x241c <puts>
     524:	08 c0       	rjmp	.+16     	; 0x536 <__vector_6+0x4a>
	}
	else
	{
		Flags[ETHERNET] = 1; 
     526:	81 e0       	ldi	r24, 0x01	; 1
     528:	80 93 bd 09 	sts	0x09BD, r24
		ethernetInit();
     52c:	18 d0       	rcall	.+48     	; 0x55e <ethernetInit>
		printf("Falling Edge!\n");
     52e:	8f ea       	ldi	r24, 0xAF	; 175
     530:	93 e0       	ldi	r25, 0x03	; 3
     532:	0e 94 0e 12 	call	0x241c	; 0x241c <puts>
	}
	sei();
     536:	78 94       	sei
}
     538:	ff 91       	pop	r31
     53a:	ef 91       	pop	r30
     53c:	bf 91       	pop	r27
     53e:	af 91       	pop	r26
     540:	9f 91       	pop	r25
     542:	8f 91       	pop	r24
     544:	7f 91       	pop	r23
     546:	6f 91       	pop	r22
     548:	5f 91       	pop	r21
     54a:	4f 91       	pop	r20
     54c:	3f 91       	pop	r19
     54e:	2f 91       	pop	r18
     550:	0f 90       	pop	r0
     552:	0b be       	out	0x3b, r0	; 59
     554:	0f 90       	pop	r0
     556:	0f be       	out	0x3f, r0	; 63
     558:	0f 90       	pop	r0
     55a:	1f 90       	pop	r1
     55c:	18 95       	reti

0000055e <ethernetInit>:
	//EnableEthernetInterrupt(); 
	SendData(httpBuff, strlen(httpBuff), 0);
	ReceiveData(RAMAddress, receiveData, receiveLength, 1, externRAM);
	memset(httpBuff, 0x00, 100); 
	return receiveData; 
}
     55e:	28 e0       	ldi	r18, 0x08	; 8
     560:	32 e0       	ldi	r19, 0x02	; 2
     562:	4c e0       	ldi	r20, 0x0C	; 12
     564:	52 e0       	ldi	r21, 0x02	; 2
     566:	60 e1       	ldi	r22, 0x10	; 16
     568:	72 e0       	ldi	r23, 0x02	; 2
     56a:	84 e1       	ldi	r24, 0x14	; 20
     56c:	92 e0       	ldi	r25, 0x02	; 2
     56e:	6a d0       	rcall	.+212    	; 0x644 <NetworkSetup>
     570:	20 e0       	ldi	r18, 0x00	; 0
     572:	32 e0       	ldi	r19, 0x02	; 2
     574:	42 e0       	ldi	r20, 0x02	; 2
     576:	52 e0       	ldi	r21, 0x02	; 2
     578:	64 e0       	ldi	r22, 0x04	; 4
     57a:	72 e0       	ldi	r23, 0x02	; 2
     57c:	81 e0       	ldi	r24, 0x01	; 1
     57e:	f5 d1       	rcall	.+1002   	; 0x96a <Server_Connect>
     580:	89 2b       	or	r24, r25
     582:	b1 f3       	breq	.-20     	; 0x570 <ethernetInit+0x12>
     584:	91 c2       	rjmp	.+1314   	; 0xaa8 <MemoryInit>
     586:	08 95       	ret

00000588 <updateFileEthernet>:

void updateFileEthernet(char* filepath)
{
     588:	cf 93       	push	r28
     58a:	df 93       	push	r29
	//strncpy(httpBuff, "GET ", 4); 
	strcpy(httpBuff, filepath); 
     58c:	bc 01       	movw	r22, r24
     58e:	83 ec       	ldi	r24, 0xC3	; 195
     590:	99 e0       	ldi	r25, 0x09	; 9
     592:	0e 94 bf 11 	call	0x237e	; 0x237e <strcpy>
	strncat(httpBuff, " HTTP/1.1 \nHost: www.wi-pro.us \n\n", 40); 
     596:	c3 ec       	ldi	r28, 0xC3	; 195
     598:	d9 e0       	ldi	r29, 0x09	; 9
     59a:	de 01       	movw	r26, r28
     59c:	0d 90       	ld	r0, X+
     59e:	00 20       	and	r0, r0
     5a0:	e9 f7       	brne	.-6      	; 0x59c <updateFileEthernet+0x14>
     5a2:	11 97       	sbiw	r26, 0x01	; 1
     5a4:	82 e2       	ldi	r24, 0x22	; 34
     5a6:	ed eb       	ldi	r30, 0xBD	; 189
     5a8:	f3 e0       	ldi	r31, 0x03	; 3
     5aa:	01 90       	ld	r0, Z+
     5ac:	0d 92       	st	X+, r0
     5ae:	8a 95       	dec	r24
     5b0:	e1 f7       	brne	.-8      	; 0x5aa <updateFileEthernet+0x22>
	printf("%s", httpBuff); 
     5b2:	df 93       	push	r29
     5b4:	cf 93       	push	r28
     5b6:	85 ec       	ldi	r24, 0xC5	; 197
     5b8:	92 e0       	ldi	r25, 0x02	; 2
     5ba:	9f 93       	push	r25
     5bc:	8f 93       	push	r24
     5be:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <printf>
	SendData(httpBuff, strlen(httpBuff), 0);
     5c2:	fe 01       	movw	r30, r28
     5c4:	01 90       	ld	r0, Z+
     5c6:	00 20       	and	r0, r0
     5c8:	e9 f7       	brne	.-6      	; 0x5c4 <updateFileEthernet+0x3c>
     5ca:	31 97       	sbiw	r30, 0x01	; 1
     5cc:	bf 01       	movw	r22, r30
     5ce:	63 5c       	subi	r22, 0xC3	; 195
     5d0:	79 40       	sbci	r23, 0x09	; 9
     5d2:	40 e0       	ldi	r20, 0x00	; 0
     5d4:	50 e0       	ldi	r21, 0x00	; 0
     5d6:	ce 01       	movw	r24, r28
     5d8:	8b d2       	rcall	.+1302   	; 0xaf0 <SendData>
	memset(httpBuff, 0x00, 100); 
     5da:	84 e6       	ldi	r24, 0x64	; 100
     5dc:	fe 01       	movw	r30, r28
     5de:	11 92       	st	Z+, r1
     5e0:	8a 95       	dec	r24
     5e2:	e9 f7       	brne	.-6      	; 0x5de <updateFileEthernet+0x56>
     5e4:	0f 90       	pop	r0
     5e6:	0f 90       	pop	r0
     5e8:	0f 90       	pop	r0
     5ea:	0f 90       	pop	r0
}
     5ec:	df 91       	pop	r29
     5ee:	cf 91       	pop	r28
     5f0:	08 95       	ret

000005f2 <SPI_EthernetWrite>:
}

uint16_t ReceiveSize(void)
{
	return ((SPI_EthernetRead(S0_RX_RSR) & 0x00FF) << 8 ) + SPI_EthernetRead(S0_RX_RSR + 1);
}
     5f2:	74 98       	cbi	0x0e, 4	; 14
     5f4:	20 ef       	ldi	r18, 0xF0	; 240
     5f6:	2e bd       	out	0x2e, r18	; 46
     5f8:	0d b4       	in	r0, 0x2d	; 45
     5fa:	07 fe       	sbrs	r0, 7
     5fc:	fd cf       	rjmp	.-6      	; 0x5f8 <SPI_EthernetWrite+0x6>
     5fe:	9e bd       	out	0x2e, r25	; 46
     600:	0d b4       	in	r0, 0x2d	; 45
     602:	07 fe       	sbrs	r0, 7
     604:	fd cf       	rjmp	.-6      	; 0x600 <SPI_EthernetWrite+0xe>
     606:	8e bd       	out	0x2e, r24	; 46
     608:	0d b4       	in	r0, 0x2d	; 45
     60a:	07 fe       	sbrs	r0, 7
     60c:	fd cf       	rjmp	.-6      	; 0x608 <SPI_EthernetWrite+0x16>
     60e:	6e bd       	out	0x2e, r22	; 46
     610:	0d b4       	in	r0, 0x2d	; 45
     612:	07 fe       	sbrs	r0, 7
     614:	fd cf       	rjmp	.-6      	; 0x610 <SPI_EthernetWrite+0x1e>
     616:	74 9a       	sbi	0x0e, 4	; 14
     618:	08 95       	ret

0000061a <SPI_EthernetRead>:
     61a:	74 98       	cbi	0x0e, 4	; 14
     61c:	2f e0       	ldi	r18, 0x0F	; 15
     61e:	2e bd       	out	0x2e, r18	; 46
     620:	0d b4       	in	r0, 0x2d	; 45
     622:	07 fe       	sbrs	r0, 7
     624:	fd cf       	rjmp	.-6      	; 0x620 <SPI_EthernetRead+0x6>
     626:	9e bd       	out	0x2e, r25	; 46
     628:	0d b4       	in	r0, 0x2d	; 45
     62a:	07 fe       	sbrs	r0, 7
     62c:	fd cf       	rjmp	.-6      	; 0x628 <SPI_EthernetRead+0xe>
     62e:	8e bd       	out	0x2e, r24	; 46
     630:	0d b4       	in	r0, 0x2d	; 45
     632:	07 fe       	sbrs	r0, 7
     634:	fd cf       	rjmp	.-6      	; 0x630 <SPI_EthernetRead+0x16>
     636:	1e bc       	out	0x2e, r1	; 46
     638:	0d b4       	in	r0, 0x2d	; 45
     63a:	07 fe       	sbrs	r0, 7
     63c:	fd cf       	rjmp	.-6      	; 0x638 <SPI_EthernetRead+0x1e>
     63e:	74 9a       	sbi	0x0e, 4	; 14
     640:	8e b5       	in	r24, 0x2e	; 46
     642:	08 95       	ret

00000644 <NetworkSetup>:
     644:	bf 92       	push	r11
     646:	cf 92       	push	r12
     648:	df 92       	push	r13
     64a:	ef 92       	push	r14
     64c:	ff 92       	push	r15
     64e:	0f 93       	push	r16
     650:	1f 93       	push	r17
     652:	cf 93       	push	r28
     654:	df 93       	push	r29
     656:	ec 01       	movw	r28, r24
     658:	7b 01       	movw	r14, r22
     65a:	6a 01       	movw	r12, r20
     65c:	89 01       	movw	r16, r18
     65e:	6c 9a       	sbi	0x0d, 4	; 13
     660:	87 e0       	ldi	r24, 0x07	; 7
     662:	84 b9       	out	0x04, r24	; 4
     664:	74 9a       	sbi	0x0e, 4	; 14
     666:	80 e5       	ldi	r24, 0x50	; 80
     668:	8c bd       	out	0x2c, r24	; 44
     66a:	89 ee       	ldi	r24, 0xE9	; 233
     66c:	93 e0       	ldi	r25, 0x03	; 3
     66e:	0e 94 0e 12 	call	0x241c	; 0x241c <puts>
     672:	8b ef       	ldi	r24, 0xFB	; 251
     674:	93 e0       	ldi	r25, 0x03	; 3
     676:	0e 94 0e 12 	call	0x241c	; 0x241c <puts>
     67a:	60 e8       	ldi	r22, 0x80	; 128
     67c:	80 e0       	ldi	r24, 0x00	; 0
     67e:	90 e0       	ldi	r25, 0x00	; 0
     680:	b8 df       	rcall	.-144    	; 0x5f2 <SPI_EthernetWrite>
     682:	8f ec       	ldi	r24, 0xCF	; 207
     684:	97 e0       	ldi	r25, 0x07	; 7
     686:	01 97       	sbiw	r24, 0x01	; 1
     688:	f1 f7       	brne	.-4      	; 0x686 <NetworkSetup+0x42>
     68a:	00 c0       	rjmp	.+0      	; 0x68c <NetworkSetup+0x48>
     68c:	00 00       	nop
     68e:	80 e0       	ldi	r24, 0x00	; 0
     690:	90 e0       	ldi	r25, 0x00	; 0
     692:	c3 df       	rcall	.-122    	; 0x61a <SPI_EthernetRead>
     694:	1f 92       	push	r1
     696:	8f 93       	push	r24
     698:	84 e1       	ldi	r24, 0x14	; 20
     69a:	94 e0       	ldi	r25, 0x04	; 4
     69c:	9f 93       	push	r25
     69e:	8f 93       	push	r24
     6a0:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <printf>
     6a4:	f8 01       	movw	r30, r16
     6a6:	83 81       	ldd	r24, Z+3	; 0x03
     6a8:	1f 92       	push	r1
     6aa:	8f 93       	push	r24
     6ac:	82 81       	ldd	r24, Z+2	; 0x02
     6ae:	1f 92       	push	r1
     6b0:	8f 93       	push	r24
     6b2:	81 81       	ldd	r24, Z+1	; 0x01
     6b4:	1f 92       	push	r1
     6b6:	8f 93       	push	r24
     6b8:	80 81       	ld	r24, Z
     6ba:	1f 92       	push	r1
     6bc:	8f 93       	push	r24
     6be:	85 e2       	ldi	r24, 0x25	; 37
     6c0:	94 e0       	ldi	r25, 0x04	; 4
     6c2:	9f 93       	push	r25
     6c4:	8f 93       	push	r24
     6c6:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <printf>
     6ca:	f8 01       	movw	r30, r16
     6cc:	60 81       	ld	r22, Z
     6ce:	81 e0       	ldi	r24, 0x01	; 1
     6d0:	90 e0       	ldi	r25, 0x00	; 0
     6d2:	8f df       	rcall	.-226    	; 0x5f2 <SPI_EthernetWrite>
     6d4:	f8 01       	movw	r30, r16
     6d6:	61 81       	ldd	r22, Z+1	; 0x01
     6d8:	82 e0       	ldi	r24, 0x02	; 2
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	8a df       	rcall	.-236    	; 0x5f2 <SPI_EthernetWrite>
     6de:	f8 01       	movw	r30, r16
     6e0:	62 81       	ldd	r22, Z+2	; 0x02
     6e2:	83 e0       	ldi	r24, 0x03	; 3
     6e4:	90 e0       	ldi	r25, 0x00	; 0
     6e6:	85 df       	rcall	.-246    	; 0x5f2 <SPI_EthernetWrite>
     6e8:	f8 01       	movw	r30, r16
     6ea:	63 81       	ldd	r22, Z+3	; 0x03
     6ec:	84 e0       	ldi	r24, 0x04	; 4
     6ee:	90 e0       	ldi	r25, 0x00	; 0
     6f0:	80 df       	rcall	.-256    	; 0x5f2 <SPI_EthernetWrite>
     6f2:	8f ec       	ldi	r24, 0xCF	; 207
     6f4:	97 e0       	ldi	r25, 0x07	; 7
     6f6:	01 97       	sbiw	r24, 0x01	; 1
     6f8:	f1 f7       	brne	.-4      	; 0x6f6 <NetworkSetup+0xb2>
     6fa:	00 c0       	rjmp	.+0      	; 0x6fc <NetworkSetup+0xb8>
     6fc:	00 00       	nop
     6fe:	84 e0       	ldi	r24, 0x04	; 4
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	8b df       	rcall	.-234    	; 0x61a <SPI_EthernetRead>
     704:	b8 2e       	mov	r11, r24
     706:	83 e0       	ldi	r24, 0x03	; 3
     708:	90 e0       	ldi	r25, 0x00	; 0
     70a:	87 df       	rcall	.-242    	; 0x61a <SPI_EthernetRead>
     70c:	08 2f       	mov	r16, r24
     70e:	82 e0       	ldi	r24, 0x02	; 2
     710:	90 e0       	ldi	r25, 0x00	; 0
     712:	83 df       	rcall	.-250    	; 0x61a <SPI_EthernetRead>
     714:	18 2f       	mov	r17, r24
     716:	81 e0       	ldi	r24, 0x01	; 1
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	7f df       	rcall	.-258    	; 0x61a <SPI_EthernetRead>
     71c:	1f 92       	push	r1
     71e:	bf 92       	push	r11
     720:	1f 92       	push	r1
     722:	0f 93       	push	r16
     724:	1f 92       	push	r1
     726:	1f 93       	push	r17
     728:	1f 92       	push	r1
     72a:	8f 93       	push	r24
     72c:	8a e4       	ldi	r24, 0x4A	; 74
     72e:	94 e0       	ldi	r25, 0x04	; 4
     730:	9f 93       	push	r25
     732:	8f 93       	push	r24
     734:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <printf>
     738:	8d 81       	ldd	r24, Y+5	; 0x05
     73a:	1f 92       	push	r1
     73c:	8f 93       	push	r24
     73e:	8c 81       	ldd	r24, Y+4	; 0x04
     740:	1f 92       	push	r1
     742:	8f 93       	push	r24
     744:	8b 81       	ldd	r24, Y+3	; 0x03
     746:	1f 92       	push	r1
     748:	8f 93       	push	r24
     74a:	8a 81       	ldd	r24, Y+2	; 0x02
     74c:	1f 92       	push	r1
     74e:	8f 93       	push	r24
     750:	89 81       	ldd	r24, Y+1	; 0x01
     752:	1f 92       	push	r1
     754:	8f 93       	push	r24
     756:	88 81       	ld	r24, Y
     758:	1f 92       	push	r1
     75a:	8f 93       	push	r24
     75c:	85 e6       	ldi	r24, 0x65	; 101
     75e:	94 e0       	ldi	r25, 0x04	; 4
     760:	9f 93       	push	r25
     762:	8f 93       	push	r24
     764:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <printf>
     768:	ed b7       	in	r30, 0x3d	; 61
     76a:	fe b7       	in	r31, 0x3e	; 62
     76c:	b6 96       	adiw	r30, 0x26	; 38
     76e:	0f b6       	in	r0, 0x3f	; 63
     770:	f8 94       	cli
     772:	fe bf       	out	0x3e, r31	; 62
     774:	0f be       	out	0x3f, r0	; 63
     776:	ed bf       	out	0x3d, r30	; 61
     778:	68 81       	ld	r22, Y
     77a:	89 e0       	ldi	r24, 0x09	; 9
     77c:	90 e0       	ldi	r25, 0x00	; 0
     77e:	39 df       	rcall	.-398    	; 0x5f2 <SPI_EthernetWrite>
     780:	69 81       	ldd	r22, Y+1	; 0x01
     782:	8a e0       	ldi	r24, 0x0A	; 10
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	35 df       	rcall	.-406    	; 0x5f2 <SPI_EthernetWrite>
     788:	6a 81       	ldd	r22, Y+2	; 0x02
     78a:	8b e0       	ldi	r24, 0x0B	; 11
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	31 df       	rcall	.-414    	; 0x5f2 <SPI_EthernetWrite>
     790:	6b 81       	ldd	r22, Y+3	; 0x03
     792:	8c e0       	ldi	r24, 0x0C	; 12
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	2d df       	rcall	.-422    	; 0x5f2 <SPI_EthernetWrite>
     798:	6c 81       	ldd	r22, Y+4	; 0x04
     79a:	8d e0       	ldi	r24, 0x0D	; 13
     79c:	90 e0       	ldi	r25, 0x00	; 0
     79e:	29 df       	rcall	.-430    	; 0x5f2 <SPI_EthernetWrite>
     7a0:	6d 81       	ldd	r22, Y+5	; 0x05
     7a2:	8e e0       	ldi	r24, 0x0E	; 14
     7a4:	90 e0       	ldi	r25, 0x00	; 0
     7a6:	25 df       	rcall	.-438    	; 0x5f2 <SPI_EthernetWrite>
     7a8:	8f ec       	ldi	r24, 0xCF	; 207
     7aa:	97 e0       	ldi	r25, 0x07	; 7
     7ac:	01 97       	sbiw	r24, 0x01	; 1
     7ae:	f1 f7       	brne	.-4      	; 0x7ac <NetworkSetup+0x168>
     7b0:	00 c0       	rjmp	.+0      	; 0x7b2 <NetworkSetup+0x16e>
     7b2:	00 00       	nop
     7b4:	8e e0       	ldi	r24, 0x0E	; 14
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	30 df       	rcall	.-416    	; 0x61a <SPI_EthernetRead>
     7ba:	b8 2e       	mov	r11, r24
     7bc:	8d e0       	ldi	r24, 0x0D	; 13
     7be:	90 e0       	ldi	r25, 0x00	; 0
     7c0:	2c df       	rcall	.-424    	; 0x61a <SPI_EthernetRead>
     7c2:	08 2f       	mov	r16, r24
     7c4:	8c e0       	ldi	r24, 0x0C	; 12
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	28 df       	rcall	.-432    	; 0x61a <SPI_EthernetRead>
     7ca:	18 2f       	mov	r17, r24
     7cc:	8b e0       	ldi	r24, 0x0B	; 11
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	24 df       	rcall	.-440    	; 0x61a <SPI_EthernetRead>
     7d2:	d8 2f       	mov	r29, r24
     7d4:	8a e0       	ldi	r24, 0x0A	; 10
     7d6:	90 e0       	ldi	r25, 0x00	; 0
     7d8:	20 df       	rcall	.-448    	; 0x61a <SPI_EthernetRead>
     7da:	c8 2f       	mov	r28, r24
     7dc:	89 e0       	ldi	r24, 0x09	; 9
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	1c df       	rcall	.-456    	; 0x61a <SPI_EthernetRead>
     7e2:	1f 92       	push	r1
     7e4:	bf 92       	push	r11
     7e6:	1f 92       	push	r1
     7e8:	0f 93       	push	r16
     7ea:	1f 92       	push	r1
     7ec:	1f 93       	push	r17
     7ee:	1f 92       	push	r1
     7f0:	df 93       	push	r29
     7f2:	1f 92       	push	r1
     7f4:	cf 93       	push	r28
     7f6:	1f 92       	push	r1
     7f8:	8f 93       	push	r24
     7fa:	8b e9       	ldi	r24, 0x9B	; 155
     7fc:	94 e0       	ldi	r25, 0x04	; 4
     7fe:	9f 93       	push	r25
     800:	8f 93       	push	r24
     802:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <printf>
     806:	f6 01       	movw	r30, r12
     808:	83 81       	ldd	r24, Z+3	; 0x03
     80a:	1f 92       	push	r1
     80c:	8f 93       	push	r24
     80e:	82 81       	ldd	r24, Z+2	; 0x02
     810:	1f 92       	push	r1
     812:	8f 93       	push	r24
     814:	81 81       	ldd	r24, Z+1	; 0x01
     816:	1f 92       	push	r1
     818:	8f 93       	push	r24
     81a:	80 81       	ld	r24, Z
     81c:	1f 92       	push	r1
     81e:	8f 93       	push	r24
     820:	88 ec       	ldi	r24, 0xC8	; 200
     822:	94 e0       	ldi	r25, 0x04	; 4
     824:	9f 93       	push	r25
     826:	8f 93       	push	r24
     828:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <printf>
     82c:	f6 01       	movw	r30, r12
     82e:	60 81       	ld	r22, Z
     830:	85 e0       	ldi	r24, 0x05	; 5
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	de de       	rcall	.-580    	; 0x5f2 <SPI_EthernetWrite>
     836:	f6 01       	movw	r30, r12
     838:	61 81       	ldd	r22, Z+1	; 0x01
     83a:	86 e0       	ldi	r24, 0x06	; 6
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	d9 de       	rcall	.-590    	; 0x5f2 <SPI_EthernetWrite>
     840:	f6 01       	movw	r30, r12
     842:	62 81       	ldd	r22, Z+2	; 0x02
     844:	87 e0       	ldi	r24, 0x07	; 7
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	d4 de       	rcall	.-600    	; 0x5f2 <SPI_EthernetWrite>
     84a:	f6 01       	movw	r30, r12
     84c:	63 81       	ldd	r22, Z+3	; 0x03
     84e:	88 e0       	ldi	r24, 0x08	; 8
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	cf de       	rcall	.-610    	; 0x5f2 <SPI_EthernetWrite>
     854:	8f ec       	ldi	r24, 0xCF	; 207
     856:	97 e0       	ldi	r25, 0x07	; 7
     858:	01 97       	sbiw	r24, 0x01	; 1
     85a:	f1 f7       	brne	.-4      	; 0x858 <NetworkSetup+0x214>
     85c:	00 c0       	rjmp	.+0      	; 0x85e <NetworkSetup+0x21a>
     85e:	00 00       	nop
     860:	88 e0       	ldi	r24, 0x08	; 8
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	da de       	rcall	.-588    	; 0x61a <SPI_EthernetRead>
     866:	18 2f       	mov	r17, r24
     868:	87 e0       	ldi	r24, 0x07	; 7
     86a:	90 e0       	ldi	r25, 0x00	; 0
     86c:	d6 de       	rcall	.-596    	; 0x61a <SPI_EthernetRead>
     86e:	d8 2f       	mov	r29, r24
     870:	86 e0       	ldi	r24, 0x06	; 6
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	d2 de       	rcall	.-604    	; 0x61a <SPI_EthernetRead>
     876:	c8 2f       	mov	r28, r24
     878:	85 e0       	ldi	r24, 0x05	; 5
     87a:	90 e0       	ldi	r25, 0x00	; 0
     87c:	ce de       	rcall	.-612    	; 0x61a <SPI_EthernetRead>
     87e:	1f 92       	push	r1
     880:	1f 93       	push	r17
     882:	1f 92       	push	r1
     884:	df 93       	push	r29
     886:	1f 92       	push	r1
     888:	cf 93       	push	r28
     88a:	1f 92       	push	r1
     88c:	8f 93       	push	r24
     88e:	8e ee       	ldi	r24, 0xEE	; 238
     890:	94 e0       	ldi	r25, 0x04	; 4
     892:	9f 93       	push	r25
     894:	8f 93       	push	r24
     896:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <printf>
     89a:	ed b7       	in	r30, 0x3d	; 61
     89c:	fe b7       	in	r31, 0x3e	; 62
     89e:	b2 96       	adiw	r30, 0x22	; 34
     8a0:	0f b6       	in	r0, 0x3f	; 63
     8a2:	f8 94       	cli
     8a4:	fe bf       	out	0x3e, r31	; 62
     8a6:	0f be       	out	0x3f, r0	; 63
     8a8:	ed bf       	out	0x3d, r30	; 61
     8aa:	f7 01       	movw	r30, r14
     8ac:	83 81       	ldd	r24, Z+3	; 0x03
     8ae:	1f 92       	push	r1
     8b0:	8f 93       	push	r24
     8b2:	82 81       	ldd	r24, Z+2	; 0x02
     8b4:	1f 92       	push	r1
     8b6:	8f 93       	push	r24
     8b8:	81 81       	ldd	r24, Z+1	; 0x01
     8ba:	1f 92       	push	r1
     8bc:	8f 93       	push	r24
     8be:	80 81       	ld	r24, Z
     8c0:	1f 92       	push	r1
     8c2:	8f 93       	push	r24
     8c4:	8a e0       	ldi	r24, 0x0A	; 10
     8c6:	95 e0       	ldi	r25, 0x05	; 5
     8c8:	9f 93       	push	r25
     8ca:	8f 93       	push	r24
     8cc:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <printf>
     8d0:	f7 01       	movw	r30, r14
     8d2:	60 81       	ld	r22, Z
     8d4:	8f e0       	ldi	r24, 0x0F	; 15
     8d6:	90 e0       	ldi	r25, 0x00	; 0
     8d8:	8c de       	rcall	.-744    	; 0x5f2 <SPI_EthernetWrite>
     8da:	f7 01       	movw	r30, r14
     8dc:	61 81       	ldd	r22, Z+1	; 0x01
     8de:	80 e1       	ldi	r24, 0x10	; 16
     8e0:	90 e0       	ldi	r25, 0x00	; 0
     8e2:	87 de       	rcall	.-754    	; 0x5f2 <SPI_EthernetWrite>
     8e4:	f7 01       	movw	r30, r14
     8e6:	62 81       	ldd	r22, Z+2	; 0x02
     8e8:	81 e1       	ldi	r24, 0x11	; 17
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 de       	rcall	.-764    	; 0x5f2 <SPI_EthernetWrite>
     8ee:	f7 01       	movw	r30, r14
     8f0:	63 81       	ldd	r22, Z+3	; 0x03
     8f2:	82 e1       	ldi	r24, 0x12	; 18
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	7d de       	rcall	.-774    	; 0x5f2 <SPI_EthernetWrite>
     8f8:	8f ec       	ldi	r24, 0xCF	; 207
     8fa:	97 e0       	ldi	r25, 0x07	; 7
     8fc:	01 97       	sbiw	r24, 0x01	; 1
     8fe:	f1 f7       	brne	.-4      	; 0x8fc <NetworkSetup+0x2b8>
     900:	00 c0       	rjmp	.+0      	; 0x902 <NetworkSetup+0x2be>
     902:	00 00       	nop
     904:	82 e1       	ldi	r24, 0x12	; 18
     906:	90 e0       	ldi	r25, 0x00	; 0
     908:	88 de       	rcall	.-752    	; 0x61a <SPI_EthernetRead>
     90a:	18 2f       	mov	r17, r24
     90c:	81 e1       	ldi	r24, 0x11	; 17
     90e:	90 e0       	ldi	r25, 0x00	; 0
     910:	84 de       	rcall	.-760    	; 0x61a <SPI_EthernetRead>
     912:	d8 2f       	mov	r29, r24
     914:	80 e1       	ldi	r24, 0x10	; 16
     916:	90 e0       	ldi	r25, 0x00	; 0
     918:	80 de       	rcall	.-768    	; 0x61a <SPI_EthernetRead>
     91a:	c8 2f       	mov	r28, r24
     91c:	8f e0       	ldi	r24, 0x0F	; 15
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	7c de       	rcall	.-776    	; 0x61a <SPI_EthernetRead>
     922:	1f 92       	push	r1
     924:	1f 93       	push	r17
     926:	1f 92       	push	r1
     928:	df 93       	push	r29
     92a:	1f 92       	push	r1
     92c:	cf 93       	push	r28
     92e:	1f 92       	push	r1
     930:	8f 93       	push	r24
     932:	8a e2       	ldi	r24, 0x2A	; 42
     934:	95 e0       	ldi	r25, 0x05	; 5
     936:	9f 93       	push	r25
     938:	8f 93       	push	r24
     93a:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <printf>
     93e:	86 e4       	ldi	r24, 0x46	; 70
     940:	95 e0       	ldi	r25, 0x05	; 5
     942:	0e 94 0e 12 	call	0x241c	; 0x241c <puts>
     946:	ed b7       	in	r30, 0x3d	; 61
     948:	fe b7       	in	r31, 0x3e	; 62
     94a:	74 96       	adiw	r30, 0x14	; 20
     94c:	0f b6       	in	r0, 0x3f	; 63
     94e:	f8 94       	cli
     950:	fe bf       	out	0x3e, r31	; 62
     952:	0f be       	out	0x3f, r0	; 63
     954:	ed bf       	out	0x3d, r30	; 61
     956:	df 91       	pop	r29
     958:	cf 91       	pop	r28
     95a:	1f 91       	pop	r17
     95c:	0f 91       	pop	r16
     95e:	ff 90       	pop	r15
     960:	ef 90       	pop	r14
     962:	df 90       	pop	r13
     964:	cf 90       	pop	r12
     966:	bf 90       	pop	r11
     968:	08 95       	ret

0000096a <Server_Connect>:
     96a:	df 92       	push	r13
     96c:	ef 92       	push	r14
     96e:	ff 92       	push	r15
     970:	0f 93       	push	r16
     972:	1f 93       	push	r17
     974:	cf 93       	push	r28
     976:	df 93       	push	r29
     978:	d8 2e       	mov	r13, r24
     97a:	8b 01       	movw	r16, r22
     97c:	7a 01       	movw	r14, r20
     97e:	e9 01       	movw	r28, r18
     980:	60 e1       	ldi	r22, 0x10	; 16
     982:	81 e0       	ldi	r24, 0x01	; 1
     984:	94 e0       	ldi	r25, 0x04	; 4
     986:	35 de       	rcall	.-918    	; 0x5f2 <SPI_EthernetWrite>
     988:	6d 2d       	mov	r22, r13
     98a:	80 e0       	ldi	r24, 0x00	; 0
     98c:	94 e0       	ldi	r25, 0x04	; 4
     98e:	31 de       	rcall	.-926    	; 0x5f2 <SPI_EthernetWrite>
     990:	68 81       	ld	r22, Y
     992:	84 e0       	ldi	r24, 0x04	; 4
     994:	94 e0       	ldi	r25, 0x04	; 4
     996:	2d de       	rcall	.-934    	; 0x5f2 <SPI_EthernetWrite>
     998:	69 81       	ldd	r22, Y+1	; 0x01
     99a:	85 e0       	ldi	r24, 0x05	; 5
     99c:	94 e0       	ldi	r25, 0x04	; 4
     99e:	29 de       	rcall	.-942    	; 0x5f2 <SPI_EthernetWrite>
     9a0:	61 e0       	ldi	r22, 0x01	; 1
     9a2:	81 e0       	ldi	r24, 0x01	; 1
     9a4:	94 e0       	ldi	r25, 0x04	; 4
     9a6:	25 de       	rcall	.-950    	; 0x5f2 <SPI_EthernetWrite>
     9a8:	83 e0       	ldi	r24, 0x03	; 3
     9aa:	94 e0       	ldi	r25, 0x04	; 4
     9ac:	36 de       	rcall	.-916    	; 0x61a <SPI_EthernetRead>
     9ae:	83 31       	cpi	r24, 0x13	; 19
     9b0:	39 f7       	brne	.-50     	; 0x980 <Server_Connect+0x16>
     9b2:	f8 01       	movw	r30, r16
     9b4:	60 81       	ld	r22, Z
     9b6:	8c e0       	ldi	r24, 0x0C	; 12
     9b8:	94 e0       	ldi	r25, 0x04	; 4
     9ba:	1b de       	rcall	.-970    	; 0x5f2 <SPI_EthernetWrite>
     9bc:	f8 01       	movw	r30, r16
     9be:	61 81       	ldd	r22, Z+1	; 0x01
     9c0:	8d e0       	ldi	r24, 0x0D	; 13
     9c2:	94 e0       	ldi	r25, 0x04	; 4
     9c4:	16 de       	rcall	.-980    	; 0x5f2 <SPI_EthernetWrite>
     9c6:	f8 01       	movw	r30, r16
     9c8:	62 81       	ldd	r22, Z+2	; 0x02
     9ca:	8e e0       	ldi	r24, 0x0E	; 14
     9cc:	94 e0       	ldi	r25, 0x04	; 4
     9ce:	11 de       	rcall	.-990    	; 0x5f2 <SPI_EthernetWrite>
     9d0:	f8 01       	movw	r30, r16
     9d2:	63 81       	ldd	r22, Z+3	; 0x03
     9d4:	8f e0       	ldi	r24, 0x0F	; 15
     9d6:	94 e0       	ldi	r25, 0x04	; 4
     9d8:	0c de       	rcall	.-1000   	; 0x5f2 <SPI_EthernetWrite>
     9da:	f7 01       	movw	r30, r14
     9dc:	60 81       	ld	r22, Z
     9de:	80 e1       	ldi	r24, 0x10	; 16
     9e0:	94 e0       	ldi	r25, 0x04	; 4
     9e2:	07 de       	rcall	.-1010   	; 0x5f2 <SPI_EthernetWrite>
     9e4:	f7 01       	movw	r30, r14
     9e6:	61 81       	ldd	r22, Z+1	; 0x01
     9e8:	81 e1       	ldi	r24, 0x11	; 17
     9ea:	94 e0       	ldi	r25, 0x04	; 4
     9ec:	02 de       	rcall	.-1020   	; 0x5f2 <SPI_EthernetWrite>
     9ee:	64 e0       	ldi	r22, 0x04	; 4
     9f0:	81 e0       	ldi	r24, 0x01	; 1
     9f2:	94 e0       	ldi	r25, 0x04	; 4
     9f4:	fe dd       	rcall	.-1028   	; 0x5f2 <SPI_EthernetWrite>
     9f6:	c0 e0       	ldi	r28, 0x00	; 0
     9f8:	d0 e0       	ldi	r29, 0x00	; 0
     9fa:	00 e1       	ldi	r16, 0x10	; 16
     9fc:	17 e2       	ldi	r17, 0x27	; 39
     9fe:	35 c0       	rjmp	.+106    	; 0xa6a <Server_Connect+0x100>
     a00:	87 e5       	ldi	r24, 0x57	; 87
     a02:	92 e0       	ldi	r25, 0x02	; 2
     a04:	01 97       	sbiw	r24, 0x01	; 1
     a06:	f1 f7       	brne	.-4      	; 0xa04 <Server_Connect+0x9a>
     a08:	00 c0       	rjmp	.+0      	; 0xa0a <Server_Connect+0xa0>
     a0a:	00 00       	nop
     a0c:	21 96       	adiw	r28, 0x01	; 1
     a0e:	9e 01       	movw	r18, r28
     a10:	32 95       	swap	r19
     a12:	22 95       	swap	r18
     a14:	2f 70       	andi	r18, 0x0F	; 15
     a16:	23 27       	eor	r18, r19
     a18:	3f 70       	andi	r19, 0x0F	; 15
     a1a:	23 27       	eor	r18, r19
     a1c:	a7 e4       	ldi	r26, 0x47	; 71
     a1e:	b3 e0       	ldi	r27, 0x03	; 3
     a20:	0e 94 a5 11 	call	0x234a	; 0x234a <__umulhisi3>
     a24:	96 95       	lsr	r25
     a26:	87 95       	ror	r24
     a28:	96 95       	lsr	r25
     a2a:	87 95       	ror	r24
     a2c:	96 95       	lsr	r25
     a2e:	87 95       	ror	r24
     a30:	80 9f       	mul	r24, r16
     a32:	90 01       	movw	r18, r0
     a34:	81 9f       	mul	r24, r17
     a36:	30 0d       	add	r19, r0
     a38:	90 9f       	mul	r25, r16
     a3a:	30 0d       	add	r19, r0
     a3c:	11 24       	eor	r1, r1
     a3e:	c2 17       	cp	r28, r18
     a40:	d3 07       	cpc	r29, r19
     a42:	99 f4       	brne	.+38     	; 0xa6a <Server_Connect+0x100>
     a44:	85 e6       	ldi	r24, 0x65	; 101
     a46:	95 e0       	ldi	r25, 0x05	; 5
     a48:	0e 94 0e 12 	call	0x241c	; 0x241c <puts>
     a4c:	c1 35       	cpi	r28, 0x51	; 81
     a4e:	93 ec       	ldi	r25, 0xC3	; 195
     a50:	d9 07       	cpc	r29, r25
     a52:	58 f0       	brcs	.+22     	; 0xa6a <Server_Connect+0x100>
     a54:	87 e8       	ldi	r24, 0x87	; 135
     a56:	95 e0       	ldi	r25, 0x05	; 5
     a58:	0e 94 0e 12 	call	0x241c	; 0x241c <puts>
     a5c:	60 e1       	ldi	r22, 0x10	; 16
     a5e:	81 e0       	ldi	r24, 0x01	; 1
     a60:	94 e0       	ldi	r25, 0x04	; 4
     a62:	c7 dd       	rcall	.-1138   	; 0x5f2 <SPI_EthernetWrite>
     a64:	80 e0       	ldi	r24, 0x00	; 0
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	17 c0       	rjmp	.+46     	; 0xa98 <Server_Connect+0x12e>
     a6a:	83 e0       	ldi	r24, 0x03	; 3
     a6c:	94 e0       	ldi	r25, 0x04	; 4
     a6e:	d5 dd       	rcall	.-1110   	; 0x61a <SPI_EthernetRead>
     a70:	87 31       	cpi	r24, 0x17	; 23
     a72:	31 f6       	brne	.-116    	; 0xa00 <Server_Connect+0x96>
     a74:	83 e0       	ldi	r24, 0x03	; 3
     a76:	94 e0       	ldi	r25, 0x04	; 4
     a78:	d0 dd       	rcall	.-1120   	; 0x61a <SPI_EthernetRead>
     a7a:	87 31       	cpi	r24, 0x17	; 23
     a7c:	39 f4       	brne	.+14     	; 0xa8c <Server_Connect+0x122>
     a7e:	8f e9       	ldi	r24, 0x9F	; 159
     a80:	95 e0       	ldi	r25, 0x05	; 5
     a82:	0e 94 0e 12 	call	0x241c	; 0x241c <puts>
     a86:	81 e0       	ldi	r24, 0x01	; 1
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	06 c0       	rjmp	.+12     	; 0xa98 <Server_Connect+0x12e>
     a8c:	86 eb       	ldi	r24, 0xB6	; 182
     a8e:	95 e0       	ldi	r25, 0x05	; 5
     a90:	0e 94 0e 12 	call	0x241c	; 0x241c <puts>
     a94:	80 e0       	ldi	r24, 0x00	; 0
     a96:	90 e0       	ldi	r25, 0x00	; 0
     a98:	df 91       	pop	r29
     a9a:	cf 91       	pop	r28
     a9c:	1f 91       	pop	r17
     a9e:	0f 91       	pop	r16
     aa0:	ff 90       	pop	r15
     aa2:	ef 90       	pop	r14
     aa4:	df 90       	pop	r13
     aa6:	08 95       	ret

00000aa8 <MemoryInit>:
     aa8:	63 e0       	ldi	r22, 0x03	; 3
     aaa:	8a e1       	ldi	r24, 0x1A	; 26
     aac:	90 e0       	ldi	r25, 0x00	; 0
     aae:	a1 dd       	rcall	.-1214   	; 0x5f2 <SPI_EthernetWrite>
     ab0:	63 e0       	ldi	r22, 0x03	; 3
     ab2:	8b e1       	ldi	r24, 0x1B	; 27
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	9d dd       	rcall	.-1222   	; 0x5f2 <SPI_EthernetWrite>
     ab8:	8f ef       	ldi	r24, 0xFF	; 255
     aba:	9f e1       	ldi	r25, 0x1F	; 31
     abc:	90 93 5a 0a 	sts	0x0A5A, r25
     ac0:	80 93 59 0a 	sts	0x0A59, r24
     ac4:	20 e0       	ldi	r18, 0x00	; 0
     ac6:	30 e4       	ldi	r19, 0x40	; 64
     ac8:	30 93 5c 0a 	sts	0x0A5C, r19
     acc:	20 93 5b 0a 	sts	0x0A5B, r18
     ad0:	90 93 60 0a 	sts	0x0A60, r25
     ad4:	80 93 5f 0a 	sts	0x0A5F, r24
     ad8:	80 e0       	ldi	r24, 0x00	; 0
     ada:	90 e6       	ldi	r25, 0x60	; 96
     adc:	90 93 5e 0a 	sts	0x0A5E, r25
     ae0:	80 93 5d 0a 	sts	0x0A5D, r24
     ae4:	08 95       	ret

00000ae6 <SocketCommand>:

void SocketCommand(uint8_t command) 
{
	SPI_EthernetWrite(S0_CR, command);
     ae6:	68 2f       	mov	r22, r24
     ae8:	81 e0       	ldi	r24, 0x01	; 1
     aea:	94 e0       	ldi	r25, 0x04	; 4
     aec:	82 cd       	rjmp	.-1276   	; 0x5f2 <SPI_EthernetWrite>
     aee:	08 95       	ret

00000af0 <SendData>:
	S0_RX_MASK = 0x1FFF;
	S0_RX_BASE = 0x6000;
}

int SendData(const uint8_t *buffer,uint16_t bufferLength, int externRAM)
{
     af0:	4f 92       	push	r4
     af2:	5f 92       	push	r5
     af4:	6f 92       	push	r6
     af6:	7f 92       	push	r7
     af8:	8f 92       	push	r8
     afa:	9f 92       	push	r9
     afc:	af 92       	push	r10
     afe:	bf 92       	push	r11
     b00:	cf 92       	push	r12
     b02:	df 92       	push	r13
     b04:	ef 92       	push	r14
     b06:	ff 92       	push	r15
     b08:	0f 93       	push	r16
     b0a:	1f 93       	push	r17
     b0c:	cf 93       	push	r28
     b0e:	df 93       	push	r29
     b10:	7c 01       	movw	r14, r24
     b12:	6b 01       	movw	r12, r22
     b14:	3a 01       	movw	r6, r20
		
	uint16_t ptr,offaddr,realaddr,txsize,timeout,i,data;
	printf("SR: 0x%02x\n", SPI_EthernetRead(S0_SR));
     b16:	83 e0       	ldi	r24, 0x03	; 3
     b18:	94 e0       	ldi	r25, 0x04	; 4
     b1a:	7f dd       	rcall	.-1282   	; 0x61a <SPI_EthernetRead>
     b1c:	1f 92       	push	r1
     b1e:	8f 93       	push	r24
     b20:	85 ed       	ldi	r24, 0xD5	; 213
     b22:	95 e0       	ldi	r25, 0x05	; 5
     b24:	9f 93       	push	r25
     b26:	8f 93       	push	r24
     b28:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <printf>
	if(SPI_EthernetRead(S0_SR) != SOCK_ESTABLISHED){
     b2c:	83 e0       	ldi	r24, 0x03	; 3
     b2e:	94 e0       	ldi	r25, 0x04	; 4
     b30:	74 dd       	rcall	.-1304   	; 0x61a <SPI_EthernetRead>
     b32:	0f 90       	pop	r0
     b34:	0f 90       	pop	r0
     b36:	0f 90       	pop	r0
     b38:	0f 90       	pop	r0
     b3a:	87 31       	cpi	r24, 0x17	; 23
     b3c:	51 f0       	breq	.+20     	; 0xb52 <SendData+0x62>
		while(!Server_Connect(TCP_MODE, gl_server_ip_addr, gl_server_port, gl_source_port));
     b3e:	2a e1       	ldi	r18, 0x1A	; 26
     b40:	32 e0       	ldi	r19, 0x02	; 2
     b42:	4c e1       	ldi	r20, 0x1C	; 28
     b44:	52 e0       	ldi	r21, 0x02	; 2
     b46:	6e e1       	ldi	r22, 0x1E	; 30
     b48:	72 e0       	ldi	r23, 0x02	; 2
     b4a:	81 e0       	ldi	r24, 0x01	; 1
     b4c:	0e df       	rcall	.-484    	; 0x96a <Server_Connect>
     b4e:	89 2b       	or	r24, r25
     b50:	b1 f3       	breq	.-20     	; 0xb3e <SendData+0x4e>
	}
	//#if _DEBUG_MODE
	//printf("Send Size: %d\n",bufferLength);
	//#endif
	// Make sure the TX Free Size Register is available
	txsize = SPI_EthernetRead(S0_TX_FSR);
     b52:	80 e2       	ldi	r24, 0x20	; 32
     b54:	94 e0       	ldi	r25, 0x04	; 4
     b56:	61 dd       	rcall	.-1342   	; 0x61a <SPI_EthernetRead>
     b58:	c8 2f       	mov	r28, r24
     b5a:	d0 e0       	ldi	r29, 0x00	; 0
	txsize = (((txsize & 0x00FF) << 8 ) + SPI_EthernetRead(S0_TX_FSR + 1));
     b5c:	dc 2f       	mov	r29, r28
     b5e:	cc 27       	eor	r28, r28
     b60:	81 e2       	ldi	r24, 0x21	; 33
     b62:	94 e0       	ldi	r25, 0x04	; 4
     b64:	5a dd       	rcall	.-1356   	; 0x61a <SPI_EthernetRead>
     b66:	c8 0f       	add	r28, r24
     b68:	d1 1d       	adc	r29, r1
	//#if _DEBUG_MODE
	//printf("TX Free Size: %d\n",txsize);
	//#endif
	timeout = 0;
	//Writing our buffer to the transmit buffer
	while (txsize < bufferLength) {
     b6a:	cc 15       	cp	r28, r12
     b6c:	dd 05       	cpc	r29, r13
     b6e:	08 f4       	brcc	.+2      	; 0xb72 <SendData+0x82>
     b70:	8f c0       	rjmp	.+286    	; 0xc90 <SendData+0x1a0>
     b72:	2c c0       	rjmp	.+88     	; 0xbcc <SendData+0xdc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b74:	8f ec       	ldi	r24, 0xCF	; 207
     b76:	97 e0       	ldi	r25, 0x07	; 7
     b78:	01 97       	sbiw	r24, 0x01	; 1
     b7a:	f1 f7       	brne	.-4      	; 0xb78 <SendData+0x88>
     b7c:	00 c0       	rjmp	.+0      	; 0xb7e <SendData+0x8e>
     b7e:	00 00       	nop
		_delay_ms(1);
		txsize = SPI_EthernetRead(S0_TX_FSR);
     b80:	80 e2       	ldi	r24, 0x20	; 32
     b82:	94 e0       	ldi	r25, 0x04	; 4
     b84:	4a dd       	rcall	.-1388   	; 0x61a <SPI_EthernetRead>
     b86:	c8 2f       	mov	r28, r24
     b88:	d0 e0       	ldi	r29, 0x00	; 0
		txsize = (((txsize & 0x00FF) << 8 ) + SPI_EthernetRead(S0_TX_FSR + 1));
     b8a:	dc 2f       	mov	r29, r28
     b8c:	cc 27       	eor	r28, r28
     b8e:	81 e2       	ldi	r24, 0x21	; 33
     b90:	94 e0       	ldi	r25, 0x04	; 4
     b92:	43 dd       	rcall	.-1402   	; 0x61a <SPI_EthernetRead>
     b94:	c8 0f       	add	r28, r24
     b96:	d1 1d       	adc	r29, r1
		printf("TX Size: %d", txsize);
     b98:	df 93       	push	r29
     b9a:	cf 93       	push	r28
     b9c:	9f 92       	push	r9
     b9e:	8f 92       	push	r8
     ba0:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <printf>
     ba4:	01 50       	subi	r16, 0x01	; 1
     ba6:	11 09       	sbc	r17, r1
		// Timeout for approx 1000 ms
		if (timeout++ > 1000) {
     ba8:	0f 90       	pop	r0
     baa:	0f 90       	pop	r0
     bac:	0f 90       	pop	r0
     bae:	0f 90       	pop	r0
     bb0:	01 15       	cp	r16, r1
     bb2:	11 05       	cpc	r17, r1
     bb4:	41 f4       	brne	.+16     	; 0xbc6 <SendData+0xd6>
			//#if _DEBUG_MODE
			//printf("TX Free Size Error!\n");
			//#endif
			// Disconnect the connection
			SocketCommand(DISCON);
     bb6:	88 e0       	ldi	r24, 0x08	; 8
     bb8:	96 df       	rcall	.-212    	; 0xae6 <SocketCommand>
			while(SPI_EthernetRead(S0_CR));
     bba:	81 e0       	ldi	r24, 0x01	; 1
     bbc:	94 e0       	ldi	r25, 0x04	; 4
     bbe:	2d dd       	rcall	.-1446   	; 0x61a <SPI_EthernetRead>
     bc0:	81 11       	cpse	r24, r1
     bc2:	fb cf       	rjmp	.-10     	; 0xbba <SendData+0xca>
     bc4:	5f c0       	rjmp	.+190    	; 0xc84 <SendData+0x194>
	//#if _DEBUG_MODE
	//printf("TX Free Size: %d\n",txsize);
	//#endif
	timeout = 0;
	//Writing our buffer to the transmit buffer
	while (txsize < bufferLength) {
     bc6:	cc 15       	cp	r28, r12
     bc8:	dd 05       	cpc	r29, r13
     bca:	a0 f2       	brcs	.-88     	; 0xb74 <SendData+0x84>
			return 0;
		}
	}

	// Read the Tx Write Pointer
	ptr = SPI_EthernetRead(S0_TX_WR);
     bcc:	84 e2       	ldi	r24, 0x24	; 36
     bce:	94 e0       	ldi	r25, 0x04	; 4
     bd0:	24 dd       	rcall	.-1464   	; 0x61a <SPI_EthernetRead>
     bd2:	48 2e       	mov	r4, r24
	offaddr = (((ptr & 0x00FF) << 8 ) + SPI_EthernetRead(S0_TX_WR + 1));
     bd4:	85 e2       	ldi	r24, 0x25	; 37
     bd6:	94 e0       	ldi	r25, 0x04	; 4
     bd8:	20 dd       	rcall	.-1472   	; 0x61a <SPI_EthernetRead>
			return 0;
		}
	}

	// Read the Tx Write Pointer
	ptr = SPI_EthernetRead(S0_TX_WR);
     bda:	51 2c       	mov	r5, r1
	offaddr = (((ptr & 0x00FF) << 8 ) + SPI_EthernetRead(S0_TX_WR + 1));
     bdc:	54 2c       	mov	r5, r4
     bde:	44 24       	eor	r4, r4
     be0:	48 0e       	add	r4, r24
     be2:	51 1c       	adc	r5, r1
	unsigned int startaddr = (((SPI_EthernetRead(S0_TX_RR) << 8) + SPI_EthernetRead(S0_TX_RR + 1)));
     be4:	82 e2       	ldi	r24, 0x22	; 34
     be6:	94 e0       	ldi	r25, 0x04	; 4
     be8:	18 dd       	rcall	.-1488   	; 0x61a <SPI_EthernetRead>
     bea:	83 e2       	ldi	r24, 0x23	; 35
     bec:	94 e0       	ldi	r25, 0x04	; 4
     bee:	15 dd       	rcall	.-1494   	; 0x61a <SPI_EthernetRead>
	//printf("Real WR: %d\n", realWR);
	//printf("Real RR: %d\n", realRR); 
	//#endif 
	i = 0; 
	data = 0; 
	printf("Sending...\n\n");
     bf0:	8d ee       	ldi	r24, 0xED	; 237
     bf2:	95 e0       	ldi	r25, 0x05	; 5
     bf4:	0e 94 0e 12 	call	0x241c	; 0x241c <puts>
	while(i < bufferLength) {
     bf8:	c1 14       	cp	r12, r1
     bfa:	d1 04       	cpc	r13, r1
     bfc:	61 f1       	breq	.+88     	; 0xc56 <SendData+0x166>
     bfe:	47 01       	movw	r8, r14
     c00:	8c 0c       	add	r8, r12
     c02:	9d 1c       	adc	r9, r13
		}
	}

	// Read the Tx Write Pointer
	ptr = SPI_EthernetRead(S0_TX_WR);
	offaddr = (((ptr & 0x00FF) << 8 ) + SPI_EthernetRead(S0_TX_WR + 1));
     c04:	82 01       	movw	r16, r4
	//printf("Real RR: %d\n", realRR); 
	//#endif 
	i = 0; 
	data = 0; 
	printf("Sending...\n\n");
	while(i < bufferLength) {
     c06:	c0 e0       	ldi	r28, 0x00	; 0
     c08:	d4 e0       	ldi	r29, 0x04	; 4

		// Calculate the real W5100 physical Tx Buffer Address
		realaddr = S0_TX_BASE + (offaddr & S0_TX_MASK);
     c0a:	a0 90 59 0a 	lds	r10, 0x0A59
     c0e:	b0 90 5a 0a 	lds	r11, 0x0A5A
     c12:	a0 22       	and	r10, r16
     c14:	b1 22       	and	r11, r17
     c16:	80 91 5b 0a 	lds	r24, 0x0A5B
     c1a:	90 91 5c 0a 	lds	r25, 0x0A5C
     c1e:	a8 0e       	add	r10, r24
     c20:	b9 1e       	adc	r11, r25
		//printf("TX Real Address: %d\n", realaddr);
		// Copy the application data to the W5100 Tx Buffer
		if(externRAM)
     c22:	61 14       	cp	r6, r1
     c24:	71 04       	cpc	r7, r1
     c26:	41 f0       	breq	.+16     	; 0xc38 <SendData+0x148>
		{
			//Grab the byte from external RAM and write it to the Wiznet TX Buffer 
			data = RAMReadByte(WIFI_QSTRING_ADDRESS + i);
     c28:	be 01       	movw	r22, r28
     c2a:	80 e0       	ldi	r24, 0x00	; 0
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	19 d1       	rcall	.+562    	; 0xe62 <RAMReadByte>
			//_delay_us(10);
			//printf("%c", data);
			SPI_EthernetWrite(realaddr, data);
     c30:	68 2f       	mov	r22, r24
     c32:	c5 01       	movw	r24, r10
     c34:	de dc       	rcall	.-1604   	; 0x5f2 <SPI_EthernetWrite>
     c36:	04 c0       	rjmp	.+8      	; 0xc40 <SendData+0x150>
			//_delay_us(10);
		}
		else
		{
			//printf("%c", *buffer);
			SPI_EthernetWrite(realaddr,*buffer);	
     c38:	f7 01       	movw	r30, r14
     c3a:	60 81       	ld	r22, Z
     c3c:	c5 01       	movw	r24, r10
     c3e:	d9 dc       	rcall	.-1614   	; 0x5f2 <SPI_EthernetWrite>
		}
		offaddr++;
     c40:	0f 5f       	subi	r16, 0xFF	; 255
     c42:	1f 4f       	sbci	r17, 0xFF	; 255
		buffer++;
     c44:	ff ef       	ldi	r31, 0xFF	; 255
     c46:	ef 1a       	sub	r14, r31
     c48:	ff 0a       	sbc	r15, r31
     c4a:	21 96       	adiw	r28, 0x01	; 1
	//printf("Real RR: %d\n", realRR); 
	//#endif 
	i = 0; 
	data = 0; 
	printf("Sending...\n\n");
	while(i < bufferLength) {
     c4c:	e8 14       	cp	r14, r8
     c4e:	f9 04       	cpc	r15, r9
     c50:	e1 f6       	brne	.-72     	; 0xc0a <SendData+0x11a>
     c52:	4c 0c       	add	r4, r12
     c54:	5d 1c       	adc	r5, r13
		}
		offaddr++;
		buffer++;
		i++; 
	}
		SPI_EthernetWrite(realaddr + 1, 0x00);
     c56:	60 e0       	ldi	r22, 0x00	; 0
     c58:	c5 01       	movw	r24, r10
     c5a:	01 96       	adiw	r24, 0x01	; 1
     c5c:	ca dc       	rcall	.-1644   	; 0x5f2 <SPI_EthernetWrite>

	// Increase the S0_TX_WR value, so it points to the next transmit
	//printf("Offset After: %d\n", offaddr);
	ptr = SPI_EthernetRead(S0_TX_WR);
     c5e:	84 e2       	ldi	r24, 0x24	; 36
     c60:	94 e0       	ldi	r25, 0x04	; 4
     c62:	db dc       	rcall	.-1610   	; 0x61a <SPI_EthernetRead>
	//realWR = S0_TX_BASE + (offaddr & S0_TX_MASK);
	//printf("Real WR: %d\n", realWR);
	//printf("%d\n", (offaddr & 0xFF00) >> 8);
	//printf("%d\n", (offaddr & 0x00FF));
	//SPI_Write(S0_TX_WR,(offaddr & 0xFF00) >> 8 );
	SPI_EthernetWrite(S0_TX_WR, 0xFF);
     c64:	6f ef       	ldi	r22, 0xFF	; 255
     c66:	84 e2       	ldi	r24, 0x24	; 36
     c68:	94 e0       	ldi	r25, 0x04	; 4
     c6a:	c3 dc       	rcall	.-1658   	; 0x5f2 <SPI_EthernetWrite>
	SPI_EthernetWrite(S0_TX_WR + 1,(offaddr & 0x00FF));
     c6c:	64 2d       	mov	r22, r4
     c6e:	85 e2       	ldi	r24, 0x25	; 37
     c70:	94 e0       	ldi	r25, 0x04	; 4
     c72:	bf dc       	rcall	.-1666   	; 0x5f2 <SPI_EthernetWrite>
	//realRR = S0_TX_BASE + (startaddr & S0_TX_MASK);
	//printf("Real WR: %d\n", realWR);
	//printf("Real RR: %d\n", realRR);
	
	// Now Send the SEND command
	SocketCommand(SEND);
     c74:	80 e2       	ldi	r24, 0x20	; 32
     c76:	37 df       	rcall	.-402    	; 0xae6 <SocketCommand>
	//printf("WR Low: %d\n", SPI_Read(S0_TX_WR));
	//printf("WR High: %d\n", SPI_Read(S0_TX_WR + 1));
	// Wait for Sending Process
	while(SPI_EthernetRead(S0_CR));
     c78:	81 e0       	ldi	r24, 0x01	; 1
     c7a:	94 e0       	ldi	r25, 0x04	; 4
     c7c:	ce dc       	rcall	.-1636   	; 0x61a <SPI_EthernetRead>
     c7e:	81 11       	cpse	r24, r1
     c80:	fb cf       	rjmp	.-10     	; 0xc78 <SendData+0x188>
     c82:	03 c0       	rjmp	.+6      	; 0xc8a <SendData+0x19a>
			//printf("TX Free Size Error!\n");
			//#endif
			// Disconnect the connection
			SocketCommand(DISCON);
			while(SPI_EthernetRead(S0_CR));
			return 0;
     c84:	80 e0       	ldi	r24, 0x00	; 0
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	2a c0       	rjmp	.+84     	; 0xcde <SendData+0x1ee>
	//printf("WR Low: %d\n", SPI_Read(S0_TX_WR));
	//printf("WR High: %d\n", SPI_Read(S0_TX_WR + 1));
	// Wait for Sending Process
	while(SPI_EthernetRead(S0_CR));
	//while(!(SPI_EthernetRead(S0_IR) & (1<<SIR_SEND_OK))); 
	return 1;
     c8a:	81 e0       	ldi	r24, 0x01	; 1
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	27 c0       	rjmp	.+78     	; 0xcde <SendData+0x1ee>
     c90:	8f ec       	ldi	r24, 0xCF	; 207
     c92:	97 e0       	ldi	r25, 0x07	; 7
     c94:	01 97       	sbiw	r24, 0x01	; 1
     c96:	f1 f7       	brne	.-4      	; 0xc94 <SendData+0x1a4>
     c98:	00 c0       	rjmp	.+0      	; 0xc9a <SendData+0x1aa>
     c9a:	00 00       	nop
	//#endif
	timeout = 0;
	//Writing our buffer to the transmit buffer
	while (txsize < bufferLength) {
		_delay_ms(1);
		txsize = SPI_EthernetRead(S0_TX_FSR);
     c9c:	80 e2       	ldi	r24, 0x20	; 32
     c9e:	94 e0       	ldi	r25, 0x04	; 4
     ca0:	bc dc       	rcall	.-1672   	; 0x61a <SPI_EthernetRead>
     ca2:	c8 2f       	mov	r28, r24
     ca4:	d0 e0       	ldi	r29, 0x00	; 0
		txsize = (((txsize & 0x00FF) << 8 ) + SPI_EthernetRead(S0_TX_FSR + 1));
     ca6:	dc 2f       	mov	r29, r28
     ca8:	cc 27       	eor	r28, r28
     caa:	81 e2       	ldi	r24, 0x21	; 33
     cac:	94 e0       	ldi	r25, 0x04	; 4
     cae:	b5 dc       	rcall	.-1686   	; 0x61a <SPI_EthernetRead>
     cb0:	c8 0f       	add	r28, r24
     cb2:	d1 1d       	adc	r29, r1
		printf("TX Size: %d", txsize);
     cb4:	df 93       	push	r29
     cb6:	cf 93       	push	r28
     cb8:	81 ee       	ldi	r24, 0xE1	; 225
     cba:	95 e0       	ldi	r25, 0x05	; 5
     cbc:	9f 93       	push	r25
     cbe:	8f 93       	push	r24
     cc0:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <printf>
     cc4:	0f 90       	pop	r0
     cc6:	0f 90       	pop	r0
     cc8:	0f 90       	pop	r0
     cca:	0f 90       	pop	r0
     ccc:	09 ee       	ldi	r16, 0xE9	; 233
     cce:	13 e0       	ldi	r17, 0x03	; 3
     cd0:	0f 2e       	mov	r0, r31
     cd2:	f1 ee       	ldi	r31, 0xE1	; 225
     cd4:	8f 2e       	mov	r8, r31
     cd6:	f5 e0       	ldi	r31, 0x05	; 5
     cd8:	9f 2e       	mov	r9, r31
     cda:	f0 2d       	mov	r31, r0
     cdc:	74 cf       	rjmp	.-280    	; 0xbc6 <SendData+0xd6>
	//printf("WR High: %d\n", SPI_Read(S0_TX_WR + 1));
	// Wait for Sending Process
	while(SPI_EthernetRead(S0_CR));
	//while(!(SPI_EthernetRead(S0_IR) & (1<<SIR_SEND_OK))); 
	return 1;
}
     cde:	df 91       	pop	r29
     ce0:	cf 91       	pop	r28
     ce2:	1f 91       	pop	r17
     ce4:	0f 91       	pop	r16
     ce6:	ff 90       	pop	r15
     ce8:	ef 90       	pop	r14
     cea:	df 90       	pop	r13
     cec:	cf 90       	pop	r12
     cee:	bf 90       	pop	r11
     cf0:	af 90       	pop	r10
     cf2:	9f 90       	pop	r9
     cf4:	8f 90       	pop	r8
     cf6:	7f 90       	pop	r7
     cf8:	6f 90       	pop	r6
     cfa:	5f 90       	pop	r5
     cfc:	4f 90       	pop	r4
     cfe:	08 95       	ret

00000d00 <SPI_FPGA_Write>:
	}
}

void SPI_FPGA_Write(unsigned char SPI_Data)
{
	FPGA_CS_PORT &= ~(1<<FPGA_SPI_CS);
     d00:	a4 98       	cbi	0x14, 4	; 20
	// Start Write transmission
	SPDR = SPI_Data;
     d02:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     d04:	0d b4       	in	r0, 0x2d	; 45
     d06:	07 fe       	sbrs	r0, 7
     d08:	fd cf       	rjmp	.-6      	; 0xd04 <SPI_FPGA_Write+0x4>
	FPGA_CS_PORT |= (1<<FPGA_SPI_CS);
     d0a:	a4 9a       	sbi	0x14, 4	; 20
     d0c:	08 95       	ret

00000d0e <SPI_FPGA_Init>:
#include "FPGA.h"
#include "../../Program/AVR.h"

void SPI_FPGA_Init(void)
{
	FPGA_CS_DDR |= (1<<FPGA_SPI_CS);
     d0e:	9c 9a       	sbi	0x13, 4	; 19
	FPGA_CS_PORT |= (1<<FPGA_SPI_CS);
     d10:	a4 9a       	sbi	0x14, 4	; 20
	
	WR_DDR |= 1<<FPGAWR;
     d12:	e4 e0       	ldi	r30, 0x04	; 4
     d14:	f1 e0       	ldi	r31, 0x01	; 1
     d16:	80 81       	ld	r24, Z
     d18:	84 60       	ori	r24, 0x04	; 4
     d1a:	80 83       	st	Z, r24
	WR_PORT &= ~(1<<FPGAWR);
     d1c:	e5 e0       	ldi	r30, 0x05	; 5
     d1e:	f1 e0       	ldi	r31, 0x01	; 1
     d20:	80 81       	ld	r24, Z
     d22:	8b 7f       	andi	r24, 0xFB	; 251
     d24:	80 83       	st	Z, r24
	SPI_FPGA_Write(FPGA_Disable);
     d26:	80 e0       	ldi	r24, 0x00	; 0
     d28:	eb cf       	rjmp	.-42     	; 0xd00 <SPI_FPGA_Write>
     d2a:	08 95       	ret

00000d2c <FPGA_Write>:
}

void FPGA_Write(uint32_t TargetMicrocontroller)
{
	switch (TargetMicrocontroller)
     d2c:	6a 30       	cpi	r22, 0x0A	; 10
     d2e:	21 e9       	ldi	r18, 0x91	; 145
     d30:	72 07       	cpc	r23, r18
     d32:	2e e1       	ldi	r18, 0x1E	; 30
     d34:	82 07       	cpc	r24, r18
     d36:	91 05       	cpc	r25, r1
     d38:	31 f0       	breq	.+12     	; 0xd46 <FPGA_Write+0x1a>
     d3a:	61 31       	cpi	r22, 0x11	; 17
     d3c:	75 49       	sbci	r23, 0x95	; 149
     d3e:	8e 41       	sbci	r24, 0x1E	; 30
     d40:	91 05       	cpc	r25, r1
     d42:	21 f0       	breq	.+8      	; 0xd4c <FPGA_Write+0x20>
     d44:	08 95       	ret
	{
		case ATtiny2313 :
			SPI_FPGA_Write(FPGA_ATtiny2313_Mapping);
     d46:	81 e0       	ldi	r24, 0x01	; 1
     d48:	db cf       	rjmp	.-74     	; 0xd00 <SPI_FPGA_Write>
		break;
     d4a:	08 95       	ret
		case ATmega324PA :
			SPI_FPGA_Write(FPGA_ATmega324PA_Mapping);
     d4c:	82 e0       	ldi	r24, 0x02	; 2
     d4e:	d8 cf       	rjmp	.-80     	; 0xd00 <SPI_FPGA_Write>
     d50:	08 95       	ret

00000d52 <uart_sendStream>:
	// ANSI turn off all attribute: me=\E[0m
	putchar(27);
	putchar('[');
	putchar('0');
	putchar('m');
}
     d52:	cf 93       	push	r28
     d54:	c8 2f       	mov	r28, r24
     d56:	8a 30       	cpi	r24, 0x0A	; 10
     d58:	11 f4       	brne	.+4      	; 0xd5e <uart_sendStream+0xc>
     d5a:	8d e0       	ldi	r24, 0x0D	; 13
     d5c:	fa df       	rcall	.-12     	; 0xd52 <uart_sendStream>
     d5e:	e0 ed       	ldi	r30, 0xD0	; 208
     d60:	f0 e0       	ldi	r31, 0x00	; 0
     d62:	90 81       	ld	r25, Z
     d64:	95 ff       	sbrs	r25, 5
     d66:	fd cf       	rjmp	.-6      	; 0xd62 <uart_sendStream+0x10>
     d68:	c0 93 d6 00 	sts	0x00D6, r28
     d6c:	80 e0       	ldi	r24, 0x00	; 0
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	cf 91       	pop	r28
     d72:	08 95       	ret

00000d74 <uart_receiveStream>:
     d74:	cf 93       	push	r28
     d76:	bc 01       	movw	r22, r24
     d78:	e0 ed       	ldi	r30, 0xD0	; 208
     d7a:	f0 e0       	ldi	r31, 0x00	; 0
     d7c:	80 81       	ld	r24, Z
     d7e:	88 23       	and	r24, r24
     d80:	ec f7       	brge	.-6      	; 0xd7c <uart_receiveStream+0x8>
     d82:	c0 91 d6 00 	lds	r28, 0x00D6
     d86:	8c 2f       	mov	r24, r28
     d88:	e4 df       	rcall	.-56     	; 0xd52 <uart_sendStream>
     d8a:	8c 2f       	mov	r24, r28
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	cf 91       	pop	r28
     d90:	08 95       	ret

00000d92 <uart2_init>:

FILE uart_stream = FDEV_SETUP_STREAM(uart_sendStream, uart_receiveStream, _FDEV_SETUP_RW);

void uart2_init()
{
	UBRR2H = (((F_CPU/BAUD_RATE)/16)-1)>>8;	// set baud rate
     d92:	10 92 d5 00 	sts	0x00D5, r1
	UBRR2L = (((F_CPU/BAUD_RATE)/16)-1);
     d96:	87 e0       	ldi	r24, 0x07	; 7
     d98:	80 93 d4 00 	sts	0x00D4, r24
	UCSR2B = (1<<RXEN2)|(1<<TXEN2); 		// enable Rx & Tx
     d9c:	88 e1       	ldi	r24, 0x18	; 24
     d9e:	80 93 d1 00 	sts	0x00D1, r24
	UCSR2C=  (1<<UCSZ21)|(1<<UCSZ20);  	       // config USART; 8N1
     da2:	86 e0       	ldi	r24, 0x06	; 6
     da4:	80 93 d2 00 	sts	0x00D2, r24
	//DDRD |= (1<<PORTD1)|(1<<PORTD0);
	// Define Output/Input Stream
	stdout = stdin = &uart_stream;
     da8:	82 e2       	ldi	r24, 0x22	; 34
     daa:	92 e0       	ldi	r25, 0x02	; 2
     dac:	90 93 34 0b 	sts	0x0B34, r25
     db0:	80 93 33 0b 	sts	0x0B33, r24
     db4:	90 93 36 0b 	sts	0x0B36, r25
     db8:	80 93 35 0b 	sts	0x0B35, r24
     dbc:	08 95       	ret

00000dbe <SPI_WriteAddress>:
	{
		printf("0x%02X ", SPI_ReadData());
	}
	RAM_PORT |= (1<<RAM_CS); 
	printf("\nSize: %d\n", i); 
}
     dbe:	26 2f       	mov	r18, r22
     dc0:	97 2f       	mov	r25, r23
     dc2:	48 2f       	mov	r20, r24
     dc4:	82 e0       	ldi	r24, 0x02	; 2
     dc6:	8e bd       	out	0x2e, r24	; 46
     dc8:	0d b4       	in	r0, 0x2d	; 45
     dca:	07 fe       	sbrs	r0, 7
     dcc:	fd cf       	rjmp	.-6      	; 0xdc8 <SPI_WriteAddress+0xa>
     dce:	4e bd       	out	0x2e, r20	; 46
     dd0:	0d b4       	in	r0, 0x2d	; 45
     dd2:	07 fe       	sbrs	r0, 7
     dd4:	fd cf       	rjmp	.-6      	; 0xdd0 <SPI_WriteAddress+0x12>
     dd6:	89 2f       	mov	r24, r25
     dd8:	8e bd       	out	0x2e, r24	; 46
     dda:	0d b4       	in	r0, 0x2d	; 45
     ddc:	07 fe       	sbrs	r0, 7
     dde:	fd cf       	rjmp	.-6      	; 0xdda <SPI_WriteAddress+0x1c>
     de0:	2e bd       	out	0x2e, r18	; 46
     de2:	0d b4       	in	r0, 0x2d	; 45
     de4:	07 fe       	sbrs	r0, 7
     de6:	fd cf       	rjmp	.-6      	; 0xde2 <SPI_WriteAddress+0x24>
     de8:	08 95       	ret

00000dea <SPI_WriteData>:
     dea:	8e bd       	out	0x2e, r24	; 46
     dec:	0d b4       	in	r0, 0x2d	; 45
     dee:	07 fe       	sbrs	r0, 7
     df0:	fd cf       	rjmp	.-6      	; 0xdec <SPI_WriteData+0x2>
     df2:	08 95       	ret

00000df4 <SPI_ReadAddress>:
     df4:	26 2f       	mov	r18, r22
     df6:	97 2f       	mov	r25, r23
     df8:	48 2f       	mov	r20, r24
     dfa:	83 e0       	ldi	r24, 0x03	; 3
     dfc:	8e bd       	out	0x2e, r24	; 46
     dfe:	0d b4       	in	r0, 0x2d	; 45
     e00:	07 fe       	sbrs	r0, 7
     e02:	fd cf       	rjmp	.-6      	; 0xdfe <SPI_ReadAddress+0xa>
     e04:	4e bd       	out	0x2e, r20	; 46
     e06:	0d b4       	in	r0, 0x2d	; 45
     e08:	07 fe       	sbrs	r0, 7
     e0a:	fd cf       	rjmp	.-6      	; 0xe06 <SPI_ReadAddress+0x12>
     e0c:	89 2f       	mov	r24, r25
     e0e:	8e bd       	out	0x2e, r24	; 46
     e10:	0d b4       	in	r0, 0x2d	; 45
     e12:	07 fe       	sbrs	r0, 7
     e14:	fd cf       	rjmp	.-6      	; 0xe10 <SPI_ReadAddress+0x1c>
     e16:	2e bd       	out	0x2e, r18	; 46
     e18:	0d b4       	in	r0, 0x2d	; 45
     e1a:	07 fe       	sbrs	r0, 7
     e1c:	fd cf       	rjmp	.-6      	; 0xe18 <SPI_ReadAddress+0x24>
     e1e:	08 95       	ret

00000e20 <SPI_ReadData>:
     e20:	1e bc       	out	0x2e, r1	; 46
     e22:	0d b4       	in	r0, 0x2d	; 45
     e24:	07 fe       	sbrs	r0, 7
     e26:	fd cf       	rjmp	.-6      	; 0xe22 <SPI_ReadData+0x2>
     e28:	8e b5       	in	r24, 0x2e	; 46
     e2a:	08 95       	ret

00000e2c <RAMWriteByte>:

void RAMWriteByte(char data, uint32_t address)
{
     e2c:	cf 93       	push	r28
     e2e:	c8 2f       	mov	r28, r24
	RAM_PORT &= ~(1<<RAM_CS);
     e30:	a3 98       	cbi	0x14, 3	; 20
	SPI_WriteAddress(address);
     e32:	cb 01       	movw	r24, r22
     e34:	ba 01       	movw	r22, r20
     e36:	c3 df       	rcall	.-122    	; 0xdbe <SPI_WriteAddress>
	SPI_WriteData(data);
     e38:	8c 2f       	mov	r24, r28
     e3a:	d7 df       	rcall	.-82     	; 0xdea <SPI_WriteData>
	RAM_PORT |= (1<<RAM_CS);
     e3c:	a3 9a       	sbi	0x14, 3	; 20
}
     e3e:	cf 91       	pop	r28
     e40:	08 95       	ret

00000e42 <SPI_Init>:


void SPI_Init()
{
	// Set MOSI ,SCK, and SS as output, others as input
	SPI_DDR |= (1<<MOSI)|(1<<SCK)|(1<<SS)|(1<<HOLD);
     e42:	84 b1       	in	r24, 0x04	; 4
     e44:	87 68       	ori	r24, 0x87	; 135
     e46:	84 b9       	out	0x04, r24	; 4
	//Set MISO as Input
	//SPI_DDR &= ~(1<<MISO);
	
	SPI_PORT |= (1<<HOLD);
     e48:	2f 9a       	sbi	0x05, 7	; 5
	// CS pin is not active
	RAM_DDR |= (1<<RAM_CS);
     e4a:	9b 9a       	sbi	0x13, 3	; 19
	RAM_PORT |= (1<<RAM_CS);
     e4c:	a3 9a       	sbi	0x14, 3	; 20
	// Enable SPI, Master Mode 0, set the clock rate fck/8
	SPCR = (1<<SPE)|(1<<MSTR);
     e4e:	80 e5       	ldi	r24, 0x50	; 80
     e50:	8c bd       	out	0x2c, r24	; 44
	SPSR = (1<<SPI2X); 
     e52:	81 e0       	ldi	r24, 0x01	; 1
     e54:	8d bd       	out	0x2d, r24	; 45
	RAMWriteByte(0x32, 0000);
     e56:	40 e0       	ldi	r20, 0x00	; 0
     e58:	50 e0       	ldi	r21, 0x00	; 0
     e5a:	ba 01       	movw	r22, r20
     e5c:	82 e3       	ldi	r24, 0x32	; 50
     e5e:	e6 cf       	rjmp	.-52     	; 0xe2c <RAMWriteByte>
     e60:	08 95       	ret

00000e62 <RAMReadByte>:
	RAM_PORT |= (1<<RAM_CS);
}

char RAMReadByte(uint32_t address)
{
	RAM_PORT &= ~(1<<RAM_CS);
     e62:	a3 98       	cbi	0x14, 3	; 20
	SPI_ReadAddress(address);
     e64:	c7 df       	rcall	.-114    	; 0xdf4 <SPI_ReadAddress>
	char data = SPI_ReadData();
     e66:	dc df       	rcall	.-72     	; 0xe20 <SPI_ReadData>
	RAM_PORT |= (1<<RAM_CS);
     e68:	a3 9a       	sbi	0x14, 3	; 20
	return data; 
}
     e6a:	08 95       	ret

00000e6c <SPI_Switching_Circuitry_Init>:
		for(int j=0; j<SOCKET_SIZE/8; j++)
		{
			ShiftRegData[i][j] = 0x00; 
		}
	}
}
     e6c:	e4 e0       	ldi	r30, 0x04	; 4
     e6e:	f1 e0       	ldi	r31, 0x01	; 1
     e70:	80 81       	ld	r24, Z
     e72:	88 63       	ori	r24, 0x38	; 56
     e74:	80 83       	st	Z, r24
     e76:	e5 e0       	ldi	r30, 0x05	; 5
     e78:	f1 e0       	ldi	r31, 0x01	; 1
     e7a:	80 81       	ld	r24, Z
     e7c:	80 62       	ori	r24, 0x20	; 32
     e7e:	80 83       	st	Z, r24
     e80:	80 81       	ld	r24, Z
     e82:	87 7e       	andi	r24, 0xE7	; 231
     e84:	80 83       	st	Z, r24
     e86:	08 95       	ret

00000e88 <SPI_Switching_Circuitry_Write>:
     e88:	8e bd       	out	0x2e, r24	; 46
     e8a:	0d b4       	in	r0, 0x2d	; 45
     e8c:	07 fe       	sbrs	r0, 7
     e8e:	fd cf       	rjmp	.-6      	; 0xe8a <SPI_Switching_Circuitry_Write+0x2>
     e90:	08 95       	ret

00000e92 <SetShiftRegData>:


void SetShiftRegData(uint8_t pinType, char data[SOCKET_SIZE/8])
{
     e92:	db 01       	movw	r26, r22
	//MSB gets shifted out first 
	for(int i=0; i<SOCKET_SIZE/8; i++)
	{
		ShiftRegData[pinType][i] = *(data + i); 
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	fc 01       	movw	r30, r24
     e98:	ee 0f       	add	r30, r30
     e9a:	ff 1f       	adc	r31, r31
     e9c:	ee 0f       	add	r30, r30
     e9e:	ff 1f       	adc	r31, r31
     ea0:	e8 0f       	add	r30, r24
     ea2:	f9 1f       	adc	r31, r25
     ea4:	ef 59       	subi	r30, 0x9F	; 159
     ea6:	f5 4f       	sbci	r31, 0xF5	; 245


void SetShiftRegData(uint8_t pinType, char data[SOCKET_SIZE/8])
{
	//MSB gets shifted out first 
	for(int i=0; i<SOCKET_SIZE/8; i++)
     ea8:	80 e0       	ldi	r24, 0x00	; 0
     eaa:	90 e0       	ldi	r25, 0x00	; 0
	{
		ShiftRegData[pinType][i] = *(data + i); 
     eac:	2d 91       	ld	r18, X+
     eae:	21 93       	st	Z+, r18


void SetShiftRegData(uint8_t pinType, char data[SOCKET_SIZE/8])
{
	//MSB gets shifted out first 
	for(int i=0; i<SOCKET_SIZE/8; i++)
     eb0:	01 96       	adiw	r24, 0x01	; 1
     eb2:	85 30       	cpi	r24, 0x05	; 5
     eb4:	91 05       	cpc	r25, r1
     eb6:	d1 f7       	brne	.-12     	; 0xeac <SetShiftRegData+0x1a>
	{
		ShiftRegData[pinType][i] = *(data + i); 
	}
}
     eb8:	08 95       	ret

00000eba <WriteShiftRegData>:

void WriteShiftRegData()
{
     eba:	af 92       	push	r10
     ebc:	bf 92       	push	r11
     ebe:	cf 92       	push	r12
     ec0:	df 92       	push	r13
     ec2:	ef 92       	push	r14
     ec4:	ff 92       	push	r15
     ec6:	0f 93       	push	r16
     ec8:	1f 93       	push	r17
     eca:	cf 93       	push	r28
     ecc:	df 93       	push	r29
     ece:	0f 2e       	mov	r0, r31
     ed0:	f6 e6       	ldi	r31, 0x66	; 102
     ed2:	ef 2e       	mov	r14, r31
     ed4:	fa e0       	ldi	r31, 0x0A	; 10
     ed6:	ff 2e       	mov	r15, r31
     ed8:	f0 2d       	mov	r31, r0
     eda:	0f 2e       	mov	r0, r31
     edc:	ff e7       	ldi	r31, 0x7F	; 127
     ede:	cf 2e       	mov	r12, r31
     ee0:	fa e0       	ldi	r31, 0x0A	; 10
     ee2:	df 2e       	mov	r13, r31
     ee4:	f0 2d       	mov	r31, r0
     ee6:	a1 2c       	mov	r10, r1
     ee8:	b1 2c       	mov	r11, r1
     eea:	0e c0       	rjmp	.+28     	; 0xf08 <WriteShiftRegData+0x4e>
	
	for(int i=1; i<(PIN_TYPES); i++)
	{
		for(int j=0; j<SOCKET_SIZE/8; j++)
		{
			SPI_Switching_Circuitry_Write(ShiftRegData[i][j]); 
     eec:	f8 01       	movw	r30, r16
     eee:	81 91       	ld	r24, Z+
     ef0:	8f 01       	movw	r16, r30
     ef2:	ca df       	rcall	.-108    	; 0xe88 <SPI_Switching_Circuitry_Write>
	//}
	//SR_CNTRL_PORT |= (1<<MAXCS);
	
	for(int i=1; i<(PIN_TYPES); i++)
	{
		for(int j=0; j<SOCKET_SIZE/8; j++)
     ef4:	21 96       	adiw	r28, 0x01	; 1
     ef6:	c5 30       	cpi	r28, 0x05	; 5
     ef8:	d1 05       	cpc	r29, r1
     efa:	c1 f7       	brne	.-16     	; 0xeec <WriteShiftRegData+0x32>
     efc:	f5 e0       	ldi	r31, 0x05	; 5
     efe:	ef 0e       	add	r14, r31
     f00:	f1 1c       	adc	r15, r1
	//{
		//SPI_Switching_Circuitry_Write(ShiftRegData[i][j]);
	//}
	//SR_CNTRL_PORT |= (1<<MAXCS);
	
	for(int i=1; i<(PIN_TYPES); i++)
     f02:	ec 14       	cp	r14, r12
     f04:	fd 04       	cpc	r15, r13
     f06:	21 f0       	breq	.+8      	; 0xf10 <WriteShiftRegData+0x56>
		ShiftRegData[pinType][i] = *(data + i); 
	}
}

void WriteShiftRegData()
{
     f08:	87 01       	movw	r16, r14
     f0a:	ca 2d       	mov	r28, r10
     f0c:	db 2d       	mov	r29, r11
     f0e:	ee cf       	rjmp	.-36     	; 0xeec <WriteShiftRegData+0x32>
		{
			SPI_Switching_Circuitry_Write(ShiftRegData[i][j]); 
		}
	}
	
	SR_CNTRL_PORT |= (1<<SRCS);
     f10:	e5 e0       	ldi	r30, 0x05	; 5
     f12:	f1 e0       	ldi	r31, 0x01	; 1
     f14:	80 81       	ld	r24, Z
     f16:	80 61       	ori	r24, 0x10	; 16
     f18:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f1a:	f5 e3       	ldi	r31, 0x35	; 53
     f1c:	fa 95       	dec	r31
     f1e:	f1 f7       	brne	.-4      	; 0xf1c <WriteShiftRegData+0x62>
     f20:	00 00       	nop
	_delay_us(20);
	SR_CNTRL_PORT &= ~(1<<SRCS);
     f22:	e5 e0       	ldi	r30, 0x05	; 5
     f24:	f1 e0       	ldi	r31, 0x01	; 1
     f26:	80 81       	ld	r24, Z
     f28:	8f 7e       	andi	r24, 0xEF	; 239
     f2a:	80 83       	st	Z, r24
}
     f2c:	df 91       	pop	r29
     f2e:	cf 91       	pop	r28
     f30:	1f 91       	pop	r17
     f32:	0f 91       	pop	r16
     f34:	ff 90       	pop	r15
     f36:	ef 90       	pop	r14
     f38:	df 90       	pop	r13
     f3a:	cf 90       	pop	r12
     f3c:	bf 90       	pop	r11
     f3e:	af 90       	pop	r10
     f40:	08 95       	ret

00000f42 <setAtTiny2313>:

void setAtTiny2313()
{
     f42:	cf 93       	push	r28
     f44:	df 93       	push	r29
     f46:	00 d0       	rcall	.+0      	; 0xf48 <setAtTiny2313+0x6>
     f48:	00 d0       	rcall	.+0      	; 0xf4a <setAtTiny2313+0x8>
     f4a:	1f 92       	push	r1
     f4c:	cd b7       	in	r28, 0x3d	; 61
     f4e:	de b7       	in	r29, 0x3e	; 62
	//char shiftTempBuff[5] = {0x00, 0x1F, 0xF7, 0xD0, 0xFF};
	char shiftTempBuff[5] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
     f50:	85 e0       	ldi	r24, 0x05	; 5
     f52:	e0 e3       	ldi	r30, 0x30	; 48
     f54:	f2 e0       	ldi	r31, 0x02	; 2
     f56:	de 01       	movw	r26, r28
     f58:	11 96       	adiw	r26, 0x01	; 1
     f5a:	01 90       	ld	r0, Z+
     f5c:	0d 92       	st	X+, r0
     f5e:	8a 95       	dec	r24
     f60:	e1 f7       	brne	.-8      	; 0xf5a <setAtTiny2313+0x18>
	SetShiftRegData(PULL_DOWN, shiftTempBuff);
     f62:	be 01       	movw	r22, r28
     f64:	6f 5f       	subi	r22, 0xFF	; 255
     f66:	7f 4f       	sbci	r23, 0xFF	; 255
     f68:	81 e0       	ldi	r24, 0x01	; 1
     f6a:	93 df       	rcall	.-218    	; 0xe92 <SetShiftRegData>
	//Modify Values and shift again
	shiftTempBuff[0] = 0x00;
     f6c:	19 82       	std	Y+1, r1	; 0x01
	shiftTempBuff[1] = 0x00;
     f6e:	1a 82       	std	Y+2, r1	; 0x02
	shiftTempBuff[2] = 0x08; //setting GND to ZIF19
     f70:	88 e0       	ldi	r24, 0x08	; 8
     f72:	8b 83       	std	Y+3, r24	; 0x03
	shiftTempBuff[3] = 0x00;
     f74:	1c 82       	std	Y+4, r1	; 0x04
	shiftTempBuff[4] = 0x00;
     f76:	1d 82       	std	Y+5, r1	; 0x05
	SetShiftRegData(GROUND, shiftTempBuff);
     f78:	be 01       	movw	r22, r28
     f7a:	6f 5f       	subi	r22, 0xFF	; 255
     f7c:	7f 4f       	sbci	r23, 0xFF	; 255
     f7e:	82 e0       	ldi	r24, 0x02	; 2
     f80:	88 df       	rcall	.-240    	; 0xe92 <SetShiftRegData>
	shiftTempBuff[0] = 0x00;
     f82:	19 82       	std	Y+1, r1	; 0x01
	shiftTempBuff[1] = 0x00;
     f84:	1a 82       	std	Y+2, r1	; 0x02
	shiftTempBuff[2] = 0x00;
     f86:	1b 82       	std	Y+3, r1	; 0x03
	shiftTempBuff[3] = 0x00;
     f88:	1c 82       	std	Y+4, r1	; 0x04
	shiftTempBuff[4] = 0x00;
     f8a:	1d 82       	std	Y+5, r1	; 0x05
	SetShiftRegData(PULL_UP, shiftTempBuff);
     f8c:	be 01       	movw	r22, r28
     f8e:	6f 5f       	subi	r22, 0xFF	; 255
     f90:	7f 4f       	sbci	r23, 0xFF	; 255
     f92:	83 e0       	ldi	r24, 0x03	; 3
     f94:	7e df       	rcall	.-260    	; 0xe92 <SetShiftRegData>
	shiftTempBuff[0] = 0x00;
     f96:	19 82       	std	Y+1, r1	; 0x01
	shiftTempBuff[1] = 0x20; //Setting VCC to ZIF29
     f98:	80 e2       	ldi	r24, 0x20	; 32
     f9a:	8a 83       	std	Y+2, r24	; 0x02
	shiftTempBuff[2] = 0x00;
     f9c:	1b 82       	std	Y+3, r1	; 0x03
	shiftTempBuff[3] = 0x00;
     f9e:	1c 82       	std	Y+4, r1	; 0x04
	shiftTempBuff[4] = 0x00;
     fa0:	1d 82       	std	Y+5, r1	; 0x05
	SetShiftRegData(VCC, shiftTempBuff);
     fa2:	be 01       	movw	r22, r28
     fa4:	6f 5f       	subi	r22, 0xFF	; 255
     fa6:	7f 4f       	sbci	r23, 0xFF	; 255
     fa8:	84 e0       	ldi	r24, 0x04	; 4
     faa:	73 df       	rcall	.-282    	; 0xe92 <SetShiftRegData>
	shiftTempBuff[0] = 0x00;
     fac:	19 82       	std	Y+1, r1	; 0x01
	shiftTempBuff[1] = 0x00;
     fae:	1a 82       	std	Y+2, r1	; 0x02
	shiftTempBuff[2] = 0x00;
     fb0:	1b 82       	std	Y+3, r1	; 0x03
	shiftTempBuff[3] = 0x04; //Setting VPP to ZIF10
     fb2:	84 e0       	ldi	r24, 0x04	; 4
     fb4:	8c 83       	std	Y+4, r24	; 0x04
	shiftTempBuff[4] = 0x00;
     fb6:	1d 82       	std	Y+5, r1	; 0x05
	SetShiftRegData(VPP, shiftTempBuff);
     fb8:	be 01       	movw	r22, r28
     fba:	6f 5f       	subi	r22, 0xFF	; 255
     fbc:	7f 4f       	sbci	r23, 0xFF	; 255
     fbe:	85 e0       	ldi	r24, 0x05	; 5
     fc0:	68 df       	rcall	.-304    	; 0xe92 <SetShiftRegData>
	//shiftTempBuff[2] = 0xF7;
	//shiftTempBuff[3] = 0xD0; //Setting up Logic
	//shiftTempBuff[4] = 0x00;
	//SetShiftRegData(LOGIC, shiftTempBuff);
	
	WriteShiftRegData();
     fc2:	7b df       	rcall	.-266    	; 0xeba <WriteShiftRegData>
}
     fc4:	0f 90       	pop	r0
     fc6:	0f 90       	pop	r0
     fc8:	0f 90       	pop	r0
     fca:	0f 90       	pop	r0
     fcc:	0f 90       	pop	r0
     fce:	df 91       	pop	r29
     fd0:	cf 91       	pop	r28
     fd2:	08 95       	ret

00000fd4 <setAtMega324PA>:

void setAtMega324PA()
{
     fd4:	cf 93       	push	r28
     fd6:	df 93       	push	r29
     fd8:	00 d0       	rcall	.+0      	; 0xfda <setAtMega324PA+0x6>
     fda:	00 d0       	rcall	.+0      	; 0xfdc <setAtMega324PA+0x8>
     fdc:	1f 92       	push	r1
     fde:	cd b7       	in	r28, 0x3d	; 61
     fe0:	de b7       	in	r29, 0x3e	; 62
	char shiftTempBuff[5] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
     fe2:	85 e0       	ldi	r24, 0x05	; 5
     fe4:	e0 e3       	ldi	r30, 0x30	; 48
     fe6:	f2 e0       	ldi	r31, 0x02	; 2
     fe8:	de 01       	movw	r26, r28
     fea:	11 96       	adiw	r26, 0x01	; 1
     fec:	01 90       	ld	r0, Z+
     fee:	0d 92       	st	X+, r0
     ff0:	8a 95       	dec	r24
     ff2:	e1 f7       	brne	.-8      	; 0xfec <setAtMega324PA+0x18>
	SetShiftRegData(PULL_DOWN, shiftTempBuff);
     ff4:	be 01       	movw	r22, r28
     ff6:	6f 5f       	subi	r22, 0xFF	; 255
     ff8:	7f 4f       	sbci	r23, 0xFF	; 255
     ffa:	81 e0       	ldi	r24, 0x01	; 1
     ffc:	4a df       	rcall	.-364    	; 0xe92 <SetShiftRegData>
	//Modify Values and shift again
	shiftTempBuff[0] = 0x00;
     ffe:	19 82       	std	Y+1, r1	; 0x01
	shiftTempBuff[1] = 0x40;
    1000:	80 e4       	ldi	r24, 0x40	; 64
    1002:	8a 83       	std	Y+2, r24	; 0x02
	shiftTempBuff[2] = 0x00; //setting GND to ZIF19
    1004:	1b 82       	std	Y+3, r1	; 0x03
	shiftTempBuff[3] = 0x04;
    1006:	84 e0       	ldi	r24, 0x04	; 4
    1008:	8c 83       	std	Y+4, r24	; 0x04
	shiftTempBuff[4] = 0x00;
    100a:	1d 82       	std	Y+5, r1	; 0x05
	SetShiftRegData(GROUND, shiftTempBuff);
    100c:	be 01       	movw	r22, r28
    100e:	6f 5f       	subi	r22, 0xFF	; 255
    1010:	7f 4f       	sbci	r23, 0xFF	; 255
    1012:	82 e0       	ldi	r24, 0x02	; 2
    1014:	3e df       	rcall	.-388    	; 0xe92 <SetShiftRegData>
	shiftTempBuff[0] = 0x00;
    1016:	19 82       	std	Y+1, r1	; 0x01
	shiftTempBuff[1] = 0x00;
    1018:	1a 82       	std	Y+2, r1	; 0x02
	shiftTempBuff[2] = 0x00;
    101a:	1b 82       	std	Y+3, r1	; 0x03
	shiftTempBuff[3] = 0x00;
    101c:	1c 82       	std	Y+4, r1	; 0x04
	shiftTempBuff[4] = 0x00;
    101e:	1d 82       	std	Y+5, r1	; 0x05
	SetShiftRegData(PULL_UP, shiftTempBuff);
    1020:	be 01       	movw	r22, r28
    1022:	6f 5f       	subi	r22, 0xFF	; 255
    1024:	7f 4f       	sbci	r23, 0xFF	; 255
    1026:	83 e0       	ldi	r24, 0x03	; 3
    1028:	34 df       	rcall	.-408    	; 0xe92 <SetShiftRegData>
	shiftTempBuff[0] = 0x00;
    102a:	19 82       	std	Y+1, r1	; 0x01
	shiftTempBuff[1] = 0x20; //Setting VCC to ZIF29
    102c:	80 e2       	ldi	r24, 0x20	; 32
    102e:	8a 83       	std	Y+2, r24	; 0x02
	shiftTempBuff[2] = 0x00;
    1030:	1b 82       	std	Y+3, r1	; 0x03
	shiftTempBuff[3] = 0x02;
    1032:	82 e0       	ldi	r24, 0x02	; 2
    1034:	8c 83       	std	Y+4, r24	; 0x04
	shiftTempBuff[4] = 0x00;
    1036:	1d 82       	std	Y+5, r1	; 0x05
	SetShiftRegData(VCC, shiftTempBuff);
    1038:	be 01       	movw	r22, r28
    103a:	6f 5f       	subi	r22, 0xFF	; 255
    103c:	7f 4f       	sbci	r23, 0xFF	; 255
    103e:	84 e0       	ldi	r24, 0x04	; 4
    1040:	28 df       	rcall	.-432    	; 0xe92 <SetShiftRegData>
	shiftTempBuff[0] = 0x00;
    1042:	19 82       	std	Y+1, r1	; 0x01
	shiftTempBuff[1] = 0x00;
    1044:	1a 82       	std	Y+2, r1	; 0x02
	shiftTempBuff[2] = 0x00;
    1046:	1b 82       	std	Y+3, r1	; 0x03
	shiftTempBuff[3] = 0x01; //Setting VPP to ZIF10
    1048:	81 e0       	ldi	r24, 0x01	; 1
    104a:	8c 83       	std	Y+4, r24	; 0x04
	shiftTempBuff[4] = 0x00;
    104c:	1d 82       	std	Y+5, r1	; 0x05
	SetShiftRegData(VPP, shiftTempBuff);
    104e:	be 01       	movw	r22, r28
    1050:	6f 5f       	subi	r22, 0xFF	; 255
    1052:	7f 4f       	sbci	r23, 0xFF	; 255
    1054:	85 e0       	ldi	r24, 0x05	; 5
    1056:	1d df       	rcall	.-454    	; 0xe92 <SetShiftRegData>
	
	WriteShiftRegData();
    1058:	30 df       	rcall	.-416    	; 0xeba <WriteShiftRegData>
}
    105a:	0f 90       	pop	r0
    105c:	0f 90       	pop	r0
    105e:	0f 90       	pop	r0
    1060:	0f 90       	pop	r0
    1062:	0f 90       	pop	r0
    1064:	df 91       	pop	r29
    1066:	cf 91       	pop	r28
    1068:	08 95       	ret

0000106a <voltageControlInit>:
	VCNTRL_PORT &= ~((1<<VPP_9V) | (1<<VPP_12V) | (1<VPP_13V));
}

void voltageControlInit()
{
	VCNTRL_DDR = 0xFF;
    106a:	8f ef       	ldi	r24, 0xFF	; 255
    106c:	80 bb       	out	0x10, r24	; 16
	VCNTRL_PORT = 0x00;
    106e:	11 ba       	out	0x11, r1	; 17
	
	VEN_DDR |= ((1<<VPPENABLE) | (1<<VCCENABLE) | (1<<VLENABLE));
    1070:	84 b1       	in	r24, 0x04	; 4
    1072:	80 67       	ori	r24, 0x70	; 112
    1074:	84 b9       	out	0x04, r24	; 4
	VEN_PORT &= ~((1<<VPPENABLE) | (1<<VCCENABLE) | (1<<VLENABLE));
    1076:	85 b1       	in	r24, 0x05	; 5
    1078:	8f 78       	andi	r24, 0x8F	; 143
    107a:	85 b9       	out	0x05, r24	; 5
    107c:	08 95       	ret

0000107e <enableVppRegulator>:
}

void enableVppRegulator()
{
	VEN_PORT |= (1<<VPPENABLE); 
    107e:	2c 9a       	sbi	0x05, 4	; 5
    1080:	08 95       	ret

00001082 <disableVppRegulator>:
}

void disableVppRegulator()
{
	VEN_PORT &= ~((1<<VPPENABLE));
    1082:	2c 98       	cbi	0x05, 4	; 5
    1084:	08 95       	ret

00001086 <enableVccRegulator>:
	VCNTRL_PORT &= ~((1<<VCC_3_3V) | (1<<VCC_5V) | (1<<VCC_6_5V));
}

void enableVccRegulator() 
{
	VEN_PORT |= (1<<VCCENABLE);
    1086:	2d 9a       	sbi	0x05, 5	; 5
    1088:	08 95       	ret

0000108a <disableVccRegulator>:
}

void disableVccRegulator()
{
	VEN_PORT &= ~(1<<VCCENABLE);
    108a:	2d 98       	cbi	0x05, 5	; 5
    108c:	08 95       	ret

0000108e <setVcc>:
	//prevents accidental triggering of the wrong regulator 
	//if(voltageLevel != (VCC_3_3V || VCC_5V || VCC_6_5V))
	//	return 0; 
	//else
	//{
		VCNTRL_PORT |= (1<<voltageLevel);
    108e:	41 b3       	in	r20, 0x11	; 17
    1090:	21 e0       	ldi	r18, 0x01	; 1
    1092:	30 e0       	ldi	r19, 0x00	; 0
    1094:	b9 01       	movw	r22, r18
    1096:	02 c0       	rjmp	.+4      	; 0x109c <setVcc+0xe>
    1098:	66 0f       	add	r22, r22
    109a:	77 1f       	adc	r23, r23
    109c:	8a 95       	dec	r24
    109e:	e2 f7       	brpl	.-8      	; 0x1098 <setVcc+0xa>
    10a0:	cb 01       	movw	r24, r22
    10a2:	84 2b       	or	r24, r20
    10a4:	81 bb       	out	0x11, r24	; 17
		return 1; 
	//}
}
    10a6:	81 e0       	ldi	r24, 0x01	; 1
    10a8:	08 95       	ret

000010aa <setVpp>:
	//prevents accidental triggering of the wrong regulator 
	//if(voltageLevel != (VPP_9V || VPP_12V || VPP_13V))
		//return 0; 
	//else
	//{
		VCNTRL_PORT |= (1<<voltageLevel);
    10aa:	41 b3       	in	r20, 0x11	; 17
    10ac:	21 e0       	ldi	r18, 0x01	; 1
    10ae:	30 e0       	ldi	r19, 0x00	; 0
    10b0:	b9 01       	movw	r22, r18
    10b2:	02 c0       	rjmp	.+4      	; 0x10b8 <setVpp+0xe>
    10b4:	66 0f       	add	r22, r22
    10b6:	77 1f       	adc	r23, r23
    10b8:	8a 95       	dec	r24
    10ba:	e2 f7       	brpl	.-8      	; 0x10b4 <setVpp+0xa>
    10bc:	cb 01       	movw	r24, r22
    10be:	84 2b       	or	r24, r20
    10c0:	81 bb       	out	0x11, r24	; 17
		return 1; 
	//}
}
    10c2:	81 e0       	ldi	r24, 0x01	; 1
    10c4:	08 95       	ret

000010c6 <enableVLogic>:
	VCNTRL_PORT &= ~((1<<VL_3_3V) | (1<<VL_5V));
}

void enableVLogic()
{
	VEN_PORT |= (1<<VLENABLE);
    10c6:	2e 9a       	sbi	0x05, 6	; 5
    10c8:	08 95       	ret

000010ca <disableVLogic>:
}

void disableVLogic()
{
	VEN_PORT &= ~(1<<VLENABLE);
    10ca:	2e 98       	cbi	0x05, 6	; 5
    10cc:	08 95       	ret

000010ce <setVLogic>:
	//prevents accidental triggering of the wrong regulator
	//if(voltageLevel != (VL_3_3V || VL_5V))
	//	return 0;
	//else
	//{
		VCNTRL_PORT |= (1<<voltageLevel);
    10ce:	41 b3       	in	r20, 0x11	; 17
    10d0:	21 e0       	ldi	r18, 0x01	; 1
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	b9 01       	movw	r22, r18
    10d6:	02 c0       	rjmp	.+4      	; 0x10dc <setVLogic+0xe>
    10d8:	66 0f       	add	r22, r22
    10da:	77 1f       	adc	r23, r23
    10dc:	8a 95       	dec	r24
    10de:	e2 f7       	brpl	.-8      	; 0x10d8 <setVLogic+0xa>
    10e0:	cb 01       	movw	r24, r22
    10e2:	84 2b       	or	r24, r20
    10e4:	81 bb       	out	0x11, r24	; 17
		return 1;
	//}
}
    10e6:	81 e0       	ldi	r24, 0x01	; 1
    10e8:	08 95       	ret

000010ea <getFileWifi>:
	j+=strlen(footer)-1; 
	return j; 
}

uint16_t getFileWifi(char* filepath, int externRAM, uint32_t RAMAddress, int multiReceive)
{ 
    10ea:	2f 92       	push	r2
    10ec:	3f 92       	push	r3
    10ee:	4f 92       	push	r4
    10f0:	5f 92       	push	r5
    10f2:	6f 92       	push	r6
    10f4:	7f 92       	push	r7
    10f6:	8f 92       	push	r8
    10f8:	9f 92       	push	r9
    10fa:	af 92       	push	r10
    10fc:	bf 92       	push	r11
    10fe:	cf 92       	push	r12
    1100:	df 92       	push	r13
    1102:	ef 92       	push	r14
    1104:	ff 92       	push	r15
    1106:	0f 93       	push	r16
    1108:	1f 93       	push	r17
    110a:	cf 93       	push	r28
    110c:	df 93       	push	r29
    110e:	ec 01       	movw	r28, r24
    1110:	6b 01       	movw	r12, r22
    1112:	49 01       	movw	r8, r18
    1114:	5a 01       	movw	r10, r20
	//printf("Filepath: %s\n", filepath);
	//enableReceiveINT();
	//setTestPrint(1); 
	enableReceiveINT();   
    1116:	cc d0       	rcall	.+408    	; 0x12b0 <enableReceiveINT>
	//PORTD &= ~(1<<CTS);
	setReceiveCounter(0);
    1118:	80 e0       	ldi	r24, 0x00	; 0
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	80 d0       	rcall	.+256    	; 0x121e <setReceiveCounter>
	uint16_t i = 0; 
	char* receiveHeader; 
	//setCompressFlag(1);
	//PORTD |= (1<<CTS);
	sendCommand(NOPREFIX, HTTP_GET, filepath);
    111e:	ae 01       	movw	r20, r28
    1120:	66 e8       	ldi	r22, 0x86	; 134
    1122:	72 e0       	ldi	r23, 0x02	; 2
    1124:	8f ef       	ldi	r24, 0xFF	; 255
    1126:	88 d1       	rcall	.+784    	; 0x1438 <sendCommand>
	receiveStatus();
    1128:	d4 d0       	rcall	.+424    	; 0x12d2 <receiveStatus>
	printf("WTF HELLO1!!!\n");
    112a:	82 ee       	ldi	r24, 0xE2	; 226
    112c:	96 e0       	ldi	r25, 0x06	; 6
    112e:	0e 94 0e 12 	call	0x241c	; 0x241c <puts>
	//enableReceiveINT();
	//setTestPrint(1); 
	enableReceiveINT();   
	//PORTD &= ~(1<<CTS);
	setReceiveCounter(0);
	uint16_t i = 0; 
    1132:	e1 2c       	mov	r14, r1
    1134:	f1 2c       	mov	r15, r1
			
		setReceiveCounter(0);
		sendCommand(NOPREFIX, STREAM_READ, "0 500");
		receiveStatus();
		receiveHeader = getMessageHeader(); 
		printf("Tran Length: %s\n", receiveHeader); 
    1136:	0f 2e       	mov	r0, r31
    1138:	f3 e1       	ldi	r31, 0x13	; 19
    113a:	2f 2e       	mov	r2, r31
    113c:	f7 e0       	ldi	r31, 0x07	; 7
    113e:	3f 2e       	mov	r3, r31
    1140:	f0 2d       	mov	r31, r0
	sendCommand(NOPREFIX, HTTP_GET, filepath);
	receiveStatus();
	printf("WTF HELLO1!!!\n");
	do 
	{
		if(externRAM){
    1142:	c1 14       	cp	r12, r1
    1144:	d1 04       	cpc	r13, r1
    1146:	c9 f0       	breq	.+50     	; 0x117a <getFileWifi+0x90>
			updateRAMAddress(RAMAddress + i);
    1148:	24 01       	movw	r4, r8
    114a:	35 01       	movw	r6, r10
    114c:	4e 0c       	add	r4, r14
    114e:	5f 1c       	adc	r5, r15
    1150:	61 1c       	adc	r6, r1
    1152:	71 1c       	adc	r7, r1
    1154:	c3 01       	movw	r24, r6
    1156:	b2 01       	movw	r22, r4
    1158:	66 d1       	rcall	.+716    	; 0x1426 <updateRAMAddress>
			printf("RAM Address: %d\n", RAMAddress+i); 
    115a:	7f 92       	push	r7
    115c:	6f 92       	push	r6
    115e:	5f 92       	push	r5
    1160:	4f 92       	push	r4
    1162:	a0 ef       	ldi	r26, 0xF0	; 240
    1164:	b6 e0       	ldi	r27, 0x06	; 6
    1166:	bf 93       	push	r27
    1168:	af 93       	push	r26
    116a:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <printf>
    116e:	0f 90       	pop	r0
    1170:	0f 90       	pop	r0
    1172:	0f 90       	pop	r0
    1174:	0f 90       	pop	r0
    1176:	0f 90       	pop	r0
    1178:	0f 90       	pop	r0
		}
		//if(RAMAddress == HEX_FILE_ADDRESS)
			//setTestPrint(1);
			
		setReceiveCounter(0);
    117a:	80 e0       	ldi	r24, 0x00	; 0
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	4f d0       	rcall	.+158    	; 0x121e <setReceiveCounter>
		sendCommand(NOPREFIX, STREAM_READ, "0 500");
    1180:	41 e0       	ldi	r20, 0x01	; 1
    1182:	57 e0       	ldi	r21, 0x07	; 7
    1184:	67 e0       	ldi	r22, 0x07	; 7
    1186:	77 e0       	ldi	r23, 0x07	; 7
    1188:	8f ef       	ldi	r24, 0xFF	; 255
    118a:	56 d1       	rcall	.+684    	; 0x1438 <sendCommand>
		receiveStatus();
    118c:	a2 d0       	rcall	.+324    	; 0x12d2 <receiveStatus>
		receiveHeader = getMessageHeader(); 
    118e:	48 d1       	rcall	.+656    	; 0x1420 <getMessageHeader>
    1190:	ec 01       	movw	r28, r24
		printf("Tran Length: %s\n", receiveHeader); 
    1192:	df 93       	push	r29
    1194:	cf 93       	push	r28
    1196:	3f 92       	push	r3
    1198:	2f 92       	push	r2
    119a:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <printf>
		if(receiveHeader[errorCode] == '1'){
    119e:	0f 90       	pop	r0
    11a0:	0f 90       	pop	r0
    11a2:	0f 90       	pop	r0
    11a4:	0f 90       	pop	r0
    11a6:	89 81       	ldd	r24, Y+1	; 0x01
    11a8:	81 33       	cpi	r24, 0x31	; 49
    11aa:	41 f0       	breq	.+16     	; 0x11bc <getFileWifi+0xd2>
			break; 
		}
		i += getTransmissionLength() - 2; 
    11ac:	34 d1       	rcall	.+616    	; 0x1416 <getTransmissionLength>
    11ae:	02 97       	sbiw	r24, 0x02	; 2
    11b0:	e8 0e       	add	r14, r24
    11b2:	f9 1e       	adc	r15, r25
	} while (multiReceive);
    11b4:	01 15       	cp	r16, r1
    11b6:	11 05       	cpc	r17, r1
    11b8:	09 f0       	breq	.+2      	; 0x11bc <getFileWifi+0xd2>
    11ba:	c3 cf       	rjmp	.-122    	; 0x1142 <getFileWifi+0x58>
	printf("WTF HELLO2!!!\n");
    11bc:	84 e2       	ldi	r24, 0x24	; 36
    11be:	97 e0       	ldi	r25, 0x07	; 7
    11c0:	0e 94 0e 12 	call	0x241c	; 0x241c <puts>
	disableReceiveINT(); 
    11c4:	7e d0       	rcall	.+252    	; 0x12c2 <disableReceiveINT>
	//_delay_ms(3000);  
	sendCommand(NOPREFIX, STREAM_CLOSE, NOVAL);
    11c6:	4e ed       	ldi	r20, 0xDE	; 222
    11c8:	53 e0       	ldi	r21, 0x03	; 3
    11ca:	66 ea       	ldi	r22, 0xA6	; 166
    11cc:	76 e0       	ldi	r23, 0x06	; 6
    11ce:	8f ef       	ldi	r24, 0xFF	; 255
    11d0:	33 d1       	rcall	.+614    	; 0x1438 <sendCommand>
	//receiveStatus(); 
	return i; 
}
    11d2:	c7 01       	movw	r24, r14
    11d4:	df 91       	pop	r29
    11d6:	cf 91       	pop	r28
    11d8:	1f 91       	pop	r17
    11da:	0f 91       	pop	r16
    11dc:	ff 90       	pop	r15
    11de:	ef 90       	pop	r14
    11e0:	df 90       	pop	r13
    11e2:	cf 90       	pop	r12
    11e4:	bf 90       	pop	r11
    11e6:	af 90       	pop	r10
    11e8:	9f 90       	pop	r9
    11ea:	8f 90       	pop	r8
    11ec:	7f 90       	pop	r7
    11ee:	6f 90       	pop	r6
    11f0:	5f 90       	pop	r5
    11f2:	4f 90       	pop	r4
    11f4:	3f 90       	pop	r3
    11f6:	2f 90       	pop	r2
    11f8:	08 95       	ret

000011fa <updateFileWifi>:

void updateFileWifi(char* filepath)
{
    11fa:	cf 93       	push	r28
    11fc:	df 93       	push	r29
    11fe:	ec 01       	movw	r28, r24
	disableReceiveINT(); 
    1200:	60 d0       	rcall	.+192    	; 0x12c2 <disableReceiveINT>
	sendCommand(NOPREFIX, filepath, NOVAL);
    1202:	4e ed       	ldi	r20, 0xDE	; 222
    1204:	53 e0       	ldi	r21, 0x03	; 3
    1206:	be 01       	movw	r22, r28
    1208:	8f ef       	ldi	r24, 0xFF	; 255
    120a:	16 d1       	rcall	.+556    	; 0x1438 <sendCommand>
	sendCommand(NOPREFIX, STREAM_CLOSE, NOVAL); 	
    120c:	4e ed       	ldi	r20, 0xDE	; 222
    120e:	53 e0       	ldi	r21, 0x03	; 3
    1210:	66 ea       	ldi	r22, 0xA6	; 166
    1212:	76 e0       	ldi	r23, 0x06	; 6
    1214:	8f ef       	ldi	r24, 0xFF	; 255
    1216:	10 d1       	rcall	.+544    	; 0x1438 <sendCommand>
}
    1218:	df 91       	pop	r29
    121a:	cf 91       	pop	r28
    121c:	08 95       	ret

0000121e <setReceiveCounter>:
	//0 denotes a successful command 
	if(header[errorCode] != '0')
		return 1; 
	else 
		return 0; 
}
    121e:	90 93 8f 0a 	sts	0x0A8F, r25
    1222:	80 93 8e 0a 	sts	0x0A8E, r24
    1226:	08 95       	ret

00001228 <uart_init>:
    1228:	10 92 c5 00 	sts	0x00C5, r1
    122c:	83 e3       	ldi	r24, 0x33	; 51
    122e:	80 93 c4 00 	sts	0x00C4, r24
    1232:	e1 ec       	ldi	r30, 0xC1	; 193
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	88 e1       	ldi	r24, 0x18	; 24
    1238:	80 83       	st	Z, r24
    123a:	86 e0       	ldi	r24, 0x06	; 6
    123c:	80 93 c2 00 	sts	0x00C2, r24
    1240:	80 81       	ld	r24, Z
    1242:	80 68       	ori	r24, 0x80	; 128
    1244:	80 83       	st	Z, r24
    1246:	08 95       	ret

00001248 <uart_send>:
    1248:	cf 93       	push	r28
    124a:	df 93       	push	r29
    124c:	10 92 9a 0a 	sts	0x0A9A, r1
    1250:	29 e0       	ldi	r18, 0x09	; 9
    1252:	e1 e8       	ldi	r30, 0x81	; 129
    1254:	fa e0       	ldi	r31, 0x0A	; 10
    1256:	df 01       	movw	r26, r30
    1258:	1d 92       	st	X+, r1
    125a:	2a 95       	dec	r18
    125c:	e9 f7       	brne	.-6      	; 0x1258 <uart_send+0x10>
    125e:	61 15       	cp	r22, r1
    1260:	71 05       	cpc	r23, r1
    1262:	a9 f0       	breq	.+42     	; 0x128e <uart_send+0x46>
    1264:	20 e0       	ldi	r18, 0x00	; 0
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	50 e0       	ldi	r21, 0x00	; 0
    126a:	e0 ec       	ldi	r30, 0xC0	; 192
    126c:	f0 e0       	ldi	r31, 0x00	; 0
    126e:	a6 ec       	ldi	r26, 0xC6	; 198
    1270:	b0 e0       	ldi	r27, 0x00	; 0
    1272:	40 81       	ld	r20, Z
    1274:	45 ff       	sbrs	r20, 5
    1276:	fd cf       	rjmp	.-6      	; 0x1272 <uart_send+0x2a>
    1278:	ec 01       	movw	r28, r24
    127a:	c2 0f       	add	r28, r18
    127c:	d3 1f       	adc	r29, r19
    127e:	28 81       	ld	r18, Y
    1280:	2c 93       	st	X, r18
    1282:	5f 5f       	subi	r21, 0xFF	; 255
    1284:	25 2f       	mov	r18, r21
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	26 17       	cp	r18, r22
    128a:	37 07       	cpc	r19, r23
    128c:	90 f3       	brcs	.-28     	; 0x1272 <uart_send+0x2a>
    128e:	88 ec       	ldi	r24, 0xC8	; 200
    1290:	92 e0       	ldi	r25, 0x02	; 2
    1292:	0e 94 0e 12 	call	0x241c	; 0x241c <puts>
    1296:	80 e0       	ldi	r24, 0x00	; 0
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	df 91       	pop	r29
    129c:	cf 91       	pop	r28
    129e:	08 95       	ret

000012a0 <uart_receiveChar>:
    12a0:	e0 ec       	ldi	r30, 0xC0	; 192
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	80 81       	ld	r24, Z
    12a6:	88 23       	and	r24, r24
    12a8:	ec f7       	brge	.-6      	; 0x12a4 <uart_receiveChar+0x4>
    12aa:	80 91 c6 00 	lds	r24, 0x00C6
    12ae:	08 95       	ret

000012b0 <enableReceiveINT>:
    12b0:	e1 ec       	ldi	r30, 0xC1	; 193
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	80 81       	ld	r24, Z
    12b6:	80 68       	ori	r24, 0x80	; 128
    12b8:	80 83       	st	Z, r24
    12ba:	78 94       	sei
    12bc:	81 e0       	ldi	r24, 0x01	; 1
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	08 95       	ret

000012c2 <disableReceiveINT>:
    12c2:	e1 ec       	ldi	r30, 0xC1	; 193
    12c4:	f0 e0       	ldi	r31, 0x00	; 0
    12c6:	80 81       	ld	r24, Z
    12c8:	8f 77       	andi	r24, 0x7F	; 127
    12ca:	80 83       	st	Z, r24
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	08 95       	ret

000012d2 <receiveStatus>:
    12d2:	80 91 9a 0a 	lds	r24, 0x0A9A
    12d6:	81 11       	cpse	r24, r1
    12d8:	08 c0       	rjmp	.+16     	; 0x12ea <receiveStatus+0x18>
    12da:	81 e2       	ldi	r24, 0x21	; 33
    12dc:	8a 95       	dec	r24
    12de:	f1 f7       	brne	.-4      	; 0x12dc <receiveStatus+0xa>
    12e0:	00 00       	nop
    12e2:	80 91 9a 0a 	lds	r24, 0x0A9A
    12e6:	88 23       	and	r24, r24
    12e8:	c1 f3       	breq	.-16     	; 0x12da <receiveStatus+0x8>
    12ea:	81 e0       	ldi	r24, 0x01	; 1
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	08 95       	ret

000012f0 <buildTransmissionLength>:
    12f0:	0f 93       	push	r16
    12f2:	1f 93       	push	r17
    12f4:	cf 93       	push	r28
    12f6:	df 93       	push	r29
    12f8:	80 91 8c 0a 	lds	r24, 0x0A8C
    12fc:	90 91 8d 0a 	lds	r25, 0x0A8D
    1300:	89 2b       	or	r24, r25
    1302:	f1 f0       	breq	.+60     	; 0x1340 <buildTransmissionLength+0x50>
    1304:	c0 e0       	ldi	r28, 0x00	; 0
    1306:	d0 e0       	ldi	r29, 0x00	; 0
    1308:	02 e3       	ldi	r16, 0x32	; 50
    130a:	17 e0       	ldi	r17, 0x07	; 7
    130c:	fe 01       	movw	r30, r28
    130e:	ef 57       	subi	r30, 0x7F	; 127
    1310:	f5 4f       	sbci	r31, 0xF5	; 245
    1312:	80 81       	ld	r24, Z
    1314:	ff 93       	push	r31
    1316:	ef 93       	push	r30
    1318:	1f 92       	push	r1
    131a:	8f 93       	push	r24
    131c:	1f 93       	push	r17
    131e:	0f 93       	push	r16
    1320:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <printf>
    1324:	21 96       	adiw	r28, 0x01	; 1
    1326:	0f 90       	pop	r0
    1328:	0f 90       	pop	r0
    132a:	0f 90       	pop	r0
    132c:	0f 90       	pop	r0
    132e:	0f 90       	pop	r0
    1330:	0f 90       	pop	r0
    1332:	c9 30       	cpi	r28, 0x09	; 9
    1334:	d1 05       	cpc	r29, r1
    1336:	51 f7       	brne	.-44     	; 0x130c <buildTransmissionLength+0x1c>
    1338:	8a e0       	ldi	r24, 0x0A	; 10
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	0e 94 09 12 	call	0x2412	; 0x2412 <putchar>
    1340:	10 92 93 0a 	sts	0x0A93, r1
    1344:	10 92 92 0a 	sts	0x0A92, r1
    1348:	20 91 87 0a 	lds	r18, 0x0A87
    134c:	80 91 92 0a 	lds	r24, 0x0A92
    1350:	90 91 93 0a 	lds	r25, 0x0A93
    1354:	2f 70       	andi	r18, 0x0F	; 15
    1356:	82 0f       	add	r24, r18
    1358:	91 1d       	adc	r25, r1
    135a:	90 93 93 0a 	sts	0x0A93, r25
    135e:	80 93 92 0a 	sts	0x0A92, r24
    1362:	80 91 86 0a 	lds	r24, 0x0A86
    1366:	20 91 92 0a 	lds	r18, 0x0A92
    136a:	30 91 93 0a 	lds	r19, 0x0A93
    136e:	8f 70       	andi	r24, 0x0F	; 15
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	ac 01       	movw	r20, r24
    1374:	44 0f       	add	r20, r20
    1376:	55 1f       	adc	r21, r21
    1378:	88 0f       	add	r24, r24
    137a:	99 1f       	adc	r25, r25
    137c:	88 0f       	add	r24, r24
    137e:	99 1f       	adc	r25, r25
    1380:	88 0f       	add	r24, r24
    1382:	99 1f       	adc	r25, r25
    1384:	84 0f       	add	r24, r20
    1386:	95 1f       	adc	r25, r21
    1388:	82 0f       	add	r24, r18
    138a:	93 1f       	adc	r25, r19
    138c:	90 93 93 0a 	sts	0x0A93, r25
    1390:	80 93 92 0a 	sts	0x0A92, r24
    1394:	20 91 85 0a 	lds	r18, 0x0A85
    1398:	80 91 92 0a 	lds	r24, 0x0A92
    139c:	90 91 93 0a 	lds	r25, 0x0A93
    13a0:	2f 70       	andi	r18, 0x0F	; 15
    13a2:	34 e6       	ldi	r19, 0x64	; 100
    13a4:	23 9f       	mul	r18, r19
    13a6:	80 0d       	add	r24, r0
    13a8:	91 1d       	adc	r25, r1
    13aa:	11 24       	eor	r1, r1
    13ac:	90 93 93 0a 	sts	0x0A93, r25
    13b0:	80 93 92 0a 	sts	0x0A92, r24
    13b4:	60 91 84 0a 	lds	r22, 0x0A84
    13b8:	80 91 92 0a 	lds	r24, 0x0A92
    13bc:	90 91 93 0a 	lds	r25, 0x0A93
    13c0:	6f 70       	andi	r22, 0x0F	; 15
    13c2:	48 ee       	ldi	r20, 0xE8	; 232
    13c4:	53 e0       	ldi	r21, 0x03	; 3
    13c6:	64 9f       	mul	r22, r20
    13c8:	90 01       	movw	r18, r0
    13ca:	65 9f       	mul	r22, r21
    13cc:	30 0d       	add	r19, r0
    13ce:	11 24       	eor	r1, r1
    13d0:	82 0f       	add	r24, r18
    13d2:	93 1f       	adc	r25, r19
    13d4:	90 93 93 0a 	sts	0x0A93, r25
    13d8:	80 93 92 0a 	sts	0x0A92, r24
    13dc:	60 91 83 0a 	lds	r22, 0x0A83
    13e0:	80 91 92 0a 	lds	r24, 0x0A92
    13e4:	90 91 93 0a 	lds	r25, 0x0A93
    13e8:	6f 70       	andi	r22, 0x0F	; 15
    13ea:	40 e1       	ldi	r20, 0x10	; 16
    13ec:	57 e2       	ldi	r21, 0x27	; 39
    13ee:	64 9f       	mul	r22, r20
    13f0:	90 01       	movw	r18, r0
    13f2:	65 9f       	mul	r22, r21
    13f4:	30 0d       	add	r19, r0
    13f6:	11 24       	eor	r1, r1
    13f8:	82 0f       	add	r24, r18
    13fa:	93 1f       	adc	r25, r19
    13fc:	90 93 93 0a 	sts	0x0A93, r25
    1400:	80 93 92 0a 	sts	0x0A92, r24
    1404:	80 91 92 0a 	lds	r24, 0x0A92
    1408:	90 91 93 0a 	lds	r25, 0x0A93
    140c:	df 91       	pop	r29
    140e:	cf 91       	pop	r28
    1410:	1f 91       	pop	r17
    1412:	0f 91       	pop	r16
    1414:	08 95       	ret

00001416 <getTransmissionLength>:
    1416:	80 91 92 0a 	lds	r24, 0x0A92
    141a:	90 91 93 0a 	lds	r25, 0x0A93
    141e:	08 95       	ret

00001420 <getMessageHeader>:
    1420:	81 e8       	ldi	r24, 0x81	; 129
    1422:	9a e0       	ldi	r25, 0x0A	; 10
    1424:	08 95       	ret

00001426 <updateRAMAddress>:

void updateRAMAddress(uint32_t address)
{
	RAMAddress = address; 
    1426:	60 93 94 0a 	sts	0x0A94, r22
    142a:	70 93 95 0a 	sts	0x0A95, r23
    142e:	80 93 96 0a 	sts	0x0A96, r24
    1432:	90 93 97 0a 	sts	0x0A97, r25
    1436:	08 95       	ret

00001438 <sendCommand>:
}

unsigned int sendCommand(int8_t prefix, char* command, char* value)
{
    1438:	0f 93       	push	r16
    143a:	1f 93       	push	r17
    143c:	cf 93       	push	r28
    143e:	df 93       	push	r29
    1440:	ea 01       	movw	r28, r20
	//char* fullCommand = (char *)malloc(MaxSendSize);
	switch(prefix)
    1442:	81 30       	cpi	r24, 0x01	; 1
    1444:	31 f0       	breq	.+12     	; 0x1452 <sendCommand+0x1a>
    1446:	82 30       	cpi	r24, 0x02	; 2
    1448:	71 f0       	breq	.+28     	; 0x1466 <sendCommand+0x2e>
    144a:	8f 3f       	cpi	r24, 0xFF	; 255
    144c:	09 f0       	breq	.+2      	; 0x1450 <sendCommand+0x18>
    144e:	66 c0       	rjmp	.+204    	; 0x151c <sendCommand+0xe4>
    1450:	17 c0       	rjmp	.+46     	; 0x1480 <sendCommand+0x48>
	{
		case NOPREFIX: 
			break; 
		case GET:
			strcpy(fullCommand, "get "); 
    1452:	85 e0       	ldi	r24, 0x05	; 5
    1454:	eb e8       	ldi	r30, 0x8B	; 139
    1456:	f2 e0       	ldi	r31, 0x02	; 2
    1458:	ab e9       	ldi	r26, 0x9B	; 155
    145a:	ba e0       	ldi	r27, 0x0A	; 10
    145c:	01 90       	ld	r0, Z+
    145e:	0d 92       	st	X+, r0
    1460:	8a 95       	dec	r24
    1462:	e1 f7       	brne	.-8      	; 0x145c <sendCommand+0x24>
			//strcat(fullCommand, "get ");
			break; 
    1464:	0d c0       	rjmp	.+26     	; 0x1480 <sendCommand+0x48>
		case SET: 
			strcat(fullCommand, "set ");
    1466:	ab e9       	ldi	r26, 0x9B	; 155
    1468:	ba e0       	ldi	r27, 0x0A	; 10
    146a:	0d 90       	ld	r0, X+
    146c:	00 20       	and	r0, r0
    146e:	e9 f7       	brne	.-6      	; 0x146a <sendCommand+0x32>
    1470:	11 97       	sbiw	r26, 0x01	; 1
    1472:	85 e0       	ldi	r24, 0x05	; 5
    1474:	ee e4       	ldi	r30, 0x4E	; 78
    1476:	f7 e0       	ldi	r31, 0x07	; 7
    1478:	01 90       	ld	r0, Z+
    147a:	0d 92       	st	X+, r0
    147c:	8a 95       	dec	r24
    147e:	e1 f7       	brne	.-8      	; 0x1478 <sendCommand+0x40>
			return 0; 
			break; 
	}
	//printf("Command: %s Length: %d, Address: %p\n", fullCommand, strlen(fullCommand), fullCommand);
	//printf("Command: %s Length: %d, Address: %p\n", command, strlen(command),  command);
	strcat(fullCommand, command);
    1480:	8b e9       	ldi	r24, 0x9B	; 155
    1482:	9a e0       	ldi	r25, 0x0A	; 10
    1484:	71 d7       	rcall	.+3810   	; 0x2368 <strcat>
	//printf("Full Command: %s", fullCommand);	
	if(value != NOVAL)
    1486:	83 e0       	ldi	r24, 0x03	; 3
    1488:	ce 3d       	cpi	r28, 0xDE	; 222
    148a:	d8 07       	cpc	r29, r24
    148c:	71 f0       	breq	.+28     	; 0x14aa <sendCommand+0x72>
	{
		strcat(fullCommand, " ");
    148e:	eb e9       	ldi	r30, 0x9B	; 155
    1490:	fa e0       	ldi	r31, 0x0A	; 10
    1492:	01 90       	ld	r0, Z+
    1494:	00 20       	and	r0, r0
    1496:	e9 f7       	brne	.-6      	; 0x1492 <sendCommand+0x5a>
    1498:	31 97       	sbiw	r30, 0x01	; 1
    149a:	80 e2       	ldi	r24, 0x20	; 32
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	91 83       	std	Z+1, r25	; 0x01
    14a0:	80 83       	st	Z, r24
		strcat(fullCommand, value);
    14a2:	be 01       	movw	r22, r28
    14a4:	8b e9       	ldi	r24, 0x9B	; 155
    14a6:	9a e0       	ldi	r25, 0x0A	; 10
    14a8:	5f d7       	rcall	.+3774   	; 0x2368 <strcat>
	}
	
	//printf("fullCommand: %s\n", fullCommand);
	strcat(fullCommand, ENDCOMMAND);
    14aa:	cb e9       	ldi	r28, 0x9B	; 155
    14ac:	da e0       	ldi	r29, 0x0A	; 10
    14ae:	fe 01       	movw	r30, r28
    14b0:	01 90       	ld	r0, Z+
    14b2:	00 20       	and	r0, r0
    14b4:	e9 f7       	brne	.-6      	; 0x14b0 <sendCommand+0x78>
    14b6:	31 97       	sbiw	r30, 0x01	; 1
    14b8:	8d e0       	ldi	r24, 0x0D	; 13
    14ba:	9a e0       	ldi	r25, 0x0A	; 10
    14bc:	a0 e0       	ldi	r26, 0x00	; 0
    14be:	80 83       	st	Z, r24
    14c0:	91 83       	std	Z+1, r25	; 0x01
    14c2:	a2 83       	std	Z+2, r26	; 0x02
	uint16_t length = strlen(fullCommand);
    14c4:	fe 01       	movw	r30, r28
    14c6:	01 90       	ld	r0, Z+
    14c8:	00 20       	and	r0, r0
    14ca:	e9 f7       	brne	.-6      	; 0x14c6 <sendCommand+0x8e>
    14cc:	31 97       	sbiw	r30, 0x01	; 1
    14ce:	8f 01       	movw	r16, r30
    14d0:	0b 59       	subi	r16, 0x9B	; 155
    14d2:	1a 40       	sbci	r17, 0x0A	; 10
	printf("Command: %s Length: %d, Address: %p\n", fullCommand, length, fullCommand);
    14d4:	df 93       	push	r29
    14d6:	cf 93       	push	r28
    14d8:	1f 93       	push	r17
    14da:	0f 93       	push	r16
    14dc:	df 93       	push	r29
    14de:	cf 93       	push	r28
    14e0:	83 e5       	ldi	r24, 0x53	; 83
    14e2:	97 e0       	ldi	r25, 0x07	; 7
    14e4:	9f 93       	push	r25
    14e6:	8f 93       	push	r24
    14e8:	83 d7       	rcall	.+3846   	; 0x23f0 <printf>
	uart_send(fullCommand, length);
    14ea:	b8 01       	movw	r22, r16
    14ec:	ce 01       	movw	r24, r28
    14ee:	ac de       	rcall	.-680    	; 0x1248 <uart_send>
	memset(fullCommand, 0x00, 100);
    14f0:	84 e6       	ldi	r24, 0x64	; 100
    14f2:	fe 01       	movw	r30, r28
    14f4:	11 92       	st	Z+, r1
    14f6:	8a 95       	dec	r24
    14f8:	e9 f7       	brne	.-6      	; 0x14f4 <sendCommand+0xbc>
	//PORTD |= (1<<RTS);
	printf("Freed!\n");
    14fa:	88 e7       	ldi	r24, 0x78	; 120
    14fc:	97 e0       	ldi	r25, 0x07	; 7
    14fe:	8e d7       	rcall	.+3868   	; 0x241c <puts>
	printf("Returning!\n");
    1500:	8f e7       	ldi	r24, 0x7F	; 127
    1502:	97 e0       	ldi	r25, 0x07	; 7
    1504:	8b d7       	rcall	.+3862   	; 0x241c <puts>
	return 1; 
    1506:	8d b7       	in	r24, 0x3d	; 61
    1508:	9e b7       	in	r25, 0x3e	; 62
    150a:	08 96       	adiw	r24, 0x08	; 8
    150c:	0f b6       	in	r0, 0x3f	; 63
    150e:	f8 94       	cli
    1510:	9e bf       	out	0x3e, r25	; 62
    1512:	0f be       	out	0x3f, r0	; 63
    1514:	8d bf       	out	0x3d, r24	; 61
    1516:	81 e0       	ldi	r24, 0x01	; 1
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	02 c0       	rjmp	.+4      	; 0x1520 <sendCommand+0xe8>
			break; 
		case SET: 
			strcat(fullCommand, "set ");
			break; 
		default:
			return 0; 
    151c:	80 e0       	ldi	r24, 0x00	; 0
    151e:	90 e0       	ldi	r25, 0x00	; 0
	memset(fullCommand, 0x00, 100);
	//PORTD |= (1<<RTS);
	printf("Freed!\n");
	printf("Returning!\n");
	return 1; 
}
    1520:	df 91       	pop	r29
    1522:	cf 91       	pop	r28
    1524:	1f 91       	pop	r17
    1526:	0f 91       	pop	r16
    1528:	08 95       	ret

0000152a <__vector_25>:
	//PORTD |= (1<<CTS);
	//sei();
//}

ISR(USART0_RX_vect)
{
    152a:	1f 92       	push	r1
    152c:	0f 92       	push	r0
    152e:	0f b6       	in	r0, 0x3f	; 63
    1530:	0f 92       	push	r0
    1532:	11 24       	eor	r1, r1
    1534:	0b b6       	in	r0, 0x3b	; 59
    1536:	0f 92       	push	r0
    1538:	2f 93       	push	r18
    153a:	3f 93       	push	r19
    153c:	4f 93       	push	r20
    153e:	5f 93       	push	r21
    1540:	6f 93       	push	r22
    1542:	7f 93       	push	r23
    1544:	8f 93       	push	r24
    1546:	9f 93       	push	r25
    1548:	af 93       	push	r26
    154a:	bf 93       	push	r27
    154c:	cf 93       	push	r28
    154e:	df 93       	push	r29
    1550:	ef 93       	push	r30
    1552:	ff 93       	push	r31
	cli();
    1554:	f8 94       	cli
	//if(testPrint)
		//printf("Interrupt!\n");
	if(!bufferStart)
    1556:	80 91 98 0a 	lds	r24, 0x0A98
    155a:	90 91 99 0a 	lds	r25, 0x0A99
    155e:	89 2b       	or	r24, r25
    1560:	e1 f4       	brne	.+56     	; 0x159a <__vector_25+0x70>
	{
		buff = uart_receiveChar();
    1562:	9e de       	rcall	.-708    	; 0x12a0 <uart_receiveChar>
    1564:	80 93 8a 0a 	sts	0x0A8A, r24
		//Header always begins with letter 'R'
		if(buff == headerStartVal)
    1568:	80 91 8a 0a 	lds	r24, 0x0A8A
    156c:	82 35       	cpi	r24, 0x52	; 82
    156e:	09 f0       	breq	.+2      	; 0x1572 <__vector_25+0x48>
    1570:	95 c0       	rjmp	.+298    	; 0x169c <__vector_25+0x172>
		{
			//PORTD &= ~(1<<RTS);
			//if(testPrint)
				//printf("Beginning Found @ %d\n", i); 
				
			i = 0;
    1572:	10 92 8f 0a 	sts	0x0A8F, r1
    1576:	10 92 8e 0a 	sts	0x0A8E, r1
			headerBuffer[i] = buff; 
    157a:	e0 91 8e 0a 	lds	r30, 0x0A8E
    157e:	f0 91 8f 0a 	lds	r31, 0x0A8F
    1582:	80 91 8a 0a 	lds	r24, 0x0A8A
    1586:	ef 57       	subi	r30, 0x7F	; 127
    1588:	f5 4f       	sbci	r31, 0xF5	; 245
    158a:	80 83       	st	Z, r24
			
				//if(testPrint)
					//printf("Header: %c @ address %p", headerBuffer[i], headerBuffer); 
					
			bufferStart = 1;
    158c:	81 e0       	ldi	r24, 0x01	; 1
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	90 93 99 0a 	sts	0x0A99, r25
    1594:	80 93 98 0a 	sts	0x0A98, r24
    1598:	81 c0       	rjmp	.+258    	; 0x169c <__vector_25+0x172>
	
	else
	{
		//printf("Beginning of buffer.\n");
		//Grab Receive Header
		if(i < endHeader)
    159a:	80 91 8e 0a 	lds	r24, 0x0A8E
    159e:	90 91 8f 0a 	lds	r25, 0x0A8F
    15a2:	09 97       	sbiw	r24, 0x09	; 9
    15a4:	48 f4       	brcc	.+18     	; 0x15b8 <__vector_25+0x8e>
		{
			//PORTD &= ~(1<<RTS);
			headerBuffer[i] = uart_receiveChar();
    15a6:	c0 91 8e 0a 	lds	r28, 0x0A8E
    15aa:	d0 91 8f 0a 	lds	r29, 0x0A8F
    15ae:	78 de       	rcall	.-784    	; 0x12a0 <uart_receiveChar>
    15b0:	cf 57       	subi	r28, 0x7F	; 127
    15b2:	d5 4f       	sbci	r29, 0xF5	; 245
    15b4:	88 83       	st	Y, r24
    15b6:	72 c0       	rjmp	.+228    	; 0x169c <__vector_25+0x172>
				//printf("Header: %c @ address %p\n", headerBuffer[i], headerBuffer + i);
			//i++; 
			//RAMWriteByte(uart_receiveChar(), i);
			//PORTD |= (1<<RTS); 
		}
		else if(i == endHeader)
    15b8:	80 91 8e 0a 	lds	r24, 0x0A8E
    15bc:	90 91 8f 0a 	lds	r25, 0x0A8F
    15c0:	09 97       	sbiw	r24, 0x09	; 9
    15c2:	21 f5       	brne	.+72     	; 0x160c <__vector_25+0xe2>
		{
			transLength = buildTransmissionLength();
    15c4:	95 de       	rcall	.-726    	; 0x12f0 <buildTransmissionLength>
    15c6:	90 93 93 0a 	sts	0x0A93, r25
    15ca:	80 93 92 0a 	sts	0x0A92, r24
			//i++; 
			if(testPrint)
    15ce:	80 91 8c 0a 	lds	r24, 0x0A8C
    15d2:	90 91 8d 0a 	lds	r25, 0x0A8D
    15d6:	89 2b       	or	r24, r25
    15d8:	09 f4       	brne	.+2      	; 0x15dc <__vector_25+0xb2>
    15da:	60 c0       	rjmp	.+192    	; 0x169c <__vector_25+0x172>
				printf("Transmission Length: %d, i: %d\n", transLength, i);
    15dc:	20 91 8e 0a 	lds	r18, 0x0A8E
    15e0:	30 91 8f 0a 	lds	r19, 0x0A8F
    15e4:	80 91 92 0a 	lds	r24, 0x0A92
    15e8:	90 91 93 0a 	lds	r25, 0x0A93
    15ec:	3f 93       	push	r19
    15ee:	2f 93       	push	r18
    15f0:	9f 93       	push	r25
    15f2:	8f 93       	push	r24
    15f4:	8a e8       	ldi	r24, 0x8A	; 138
    15f6:	97 e0       	ldi	r25, 0x07	; 7
    15f8:	9f 93       	push	r25
    15fa:	8f 93       	push	r24
    15fc:	f9 d6       	rcall	.+3570   	; 0x23f0 <printf>
    15fe:	0f 90       	pop	r0
    1600:	0f 90       	pop	r0
    1602:	0f 90       	pop	r0
    1604:	0f 90       	pop	r0
    1606:	0f 90       	pop	r0
    1608:	0f 90       	pop	r0
    160a:	48 c0       	rjmp	.+144    	; 0x169c <__vector_25+0x172>
		}
		else
		{
			if(i < transLength + endHeader)
    160c:	20 91 92 0a 	lds	r18, 0x0A92
    1610:	30 91 93 0a 	lds	r19, 0x0A93
    1614:	80 91 8e 0a 	lds	r24, 0x0A8E
    1618:	90 91 8f 0a 	lds	r25, 0x0A8F
    161c:	27 5f       	subi	r18, 0xF7	; 247
    161e:	3f 4f       	sbci	r19, 0xFF	; 255
    1620:	82 17       	cp	r24, r18
    1622:	93 07       	cpc	r25, r19
    1624:	d8 f4       	brcc	.+54     	; 0x165c <__vector_25+0x132>
			{
				
				buff = uart_receiveChar();
    1626:	3c de       	rcall	.-904    	; 0x12a0 <uart_receiveChar>
    1628:	80 93 8a 0a 	sts	0x0A8A, r24
				RAMWriteByte(buff, RAMAddress + i - endHeader -1);	
    162c:	20 91 8e 0a 	lds	r18, 0x0A8E
    1630:	30 91 8f 0a 	lds	r19, 0x0A8F
    1634:	40 91 94 0a 	lds	r20, 0x0A94
    1638:	50 91 95 0a 	lds	r21, 0x0A95
    163c:	60 91 96 0a 	lds	r22, 0x0A96
    1640:	70 91 97 0a 	lds	r23, 0x0A97
    1644:	80 91 8a 0a 	lds	r24, 0x0A8A
    1648:	4a 50       	subi	r20, 0x0A	; 10
    164a:	51 09       	sbc	r21, r1
    164c:	61 09       	sbc	r22, r1
    164e:	71 09       	sbc	r23, r1
    1650:	42 0f       	add	r20, r18
    1652:	53 1f       	adc	r21, r19
    1654:	61 1d       	adc	r22, r1
    1656:	71 1d       	adc	r23, r1
    1658:	e9 db       	rcall	.-2094   	; 0xe2c <RAMWriteByte>
    165a:	20 c0       	rjmp	.+64     	; 0x169c <__vector_25+0x172>
			else
			{
				//printf("End of String!\n");
				//RAMWriteByte(0x00, RAMAddress + i - endHeader -1);
				//cli();
				i = 0;
    165c:	10 92 8f 0a 	sts	0x0A8F, r1
    1660:	10 92 8e 0a 	sts	0x0A8E, r1
				bufferStart = 0;
    1664:	10 92 99 0a 	sts	0x0A99, r1
    1668:	10 92 98 0a 	sts	0x0A98, r1
				compressFlag = 0; 
    166c:	10 92 91 0a 	sts	0x0A91, r1
				secondNibble = 0; 
    1670:	10 92 90 0a 	sts	0x0A90, r1
				compressBuff = 0x00; 
    1674:	10 92 8b 0a 	sts	0x0A8B, r1
				//done receiving
				receiveWifiFlag = 1;
    1678:	81 e0       	ldi	r24, 0x01	; 1
    167a:	80 93 9a 0a 	sts	0x0A9A, r24
				printf("Transmission Length: %d\n", buildTransmissionLength());
    167e:	38 de       	rcall	.-912    	; 0x12f0 <buildTransmissionLength>
    1680:	9f 93       	push	r25
    1682:	8f 93       	push	r24
    1684:	8a ea       	ldi	r24, 0xAA	; 170
    1686:	97 e0       	ldi	r25, 0x07	; 7
    1688:	9f 93       	push	r25
    168a:	8f 93       	push	r24
    168c:	b1 d6       	rcall	.+3426   	; 0x23f0 <printf>
				printf("Done Receiving!\n");
    168e:	83 ec       	ldi	r24, 0xC3	; 195
    1690:	97 e0       	ldi	r25, 0x07	; 7
    1692:	c4 d6       	rcall	.+3464   	; 0x241c <puts>
    1694:	0f 90       	pop	r0
    1696:	0f 90       	pop	r0
    1698:	0f 90       	pop	r0
    169a:	0f 90       	pop	r0
		}
		//printf("%d\n", i); 
		//i++; 
	}
	//if(bufferStart && !receiveWifiFlag)
	i++; 
    169c:	80 91 8e 0a 	lds	r24, 0x0A8E
    16a0:	90 91 8f 0a 	lds	r25, 0x0A8F
    16a4:	01 96       	adiw	r24, 0x01	; 1
    16a6:	90 93 8f 0a 	sts	0x0A8F, r25
    16aa:	80 93 8e 0a 	sts	0x0A8E, r24
		
	//PORTD |= (1<<CTS); 
	sei(); 
    16ae:	78 94       	sei
}
    16b0:	ff 91       	pop	r31
    16b2:	ef 91       	pop	r30
    16b4:	df 91       	pop	r29
    16b6:	cf 91       	pop	r28
    16b8:	bf 91       	pop	r27
    16ba:	af 91       	pop	r26
    16bc:	9f 91       	pop	r25
    16be:	8f 91       	pop	r24
    16c0:	7f 91       	pop	r23
    16c2:	6f 91       	pop	r22
    16c4:	5f 91       	pop	r21
    16c6:	4f 91       	pop	r20
    16c8:	3f 91       	pop	r19
    16ca:	2f 91       	pop	r18
    16cc:	0f 90       	pop	r0
    16ce:	0b be       	out	0x3b, r0	; 59
    16d0:	0f 90       	pop	r0
    16d2:	0f be       	out	0x3f, r0	; 63
    16d4:	0f 90       	pop	r0
    16d6:	1f 90       	pop	r1
    16d8:	18 95       	reti

000016da <hexInit>:
				   //':', 0x10, 0x00, 0x10, 0x00, 0x12, 0xC0, 0x11, 0xC0, 0x10, 0xC0, 0x0F, 0xC0, 0x0E, 0xC0, 0x0D, 0xC0, 0x0C, 0xC0, 0x0B, 0xC0, 0x6C,
				   //':', 0x00, 0x00, 0x00, 0x01, 0xFF};

void hexInit()
{
	RAMOffset = 0; 
    16da:	10 92 32 0b 	sts	0x0B32, r1
    16de:	10 92 31 0b 	sts	0x0B31, r1
	memset(hexRow, 0x00, 50); 
    16e2:	82 e3       	ldi	r24, 0x32	; 50
    16e4:	ef ef       	ldi	r30, 0xFF	; 255
    16e6:	fa e0       	ldi	r31, 0x0A	; 10
    16e8:	df 01       	movw	r26, r30
    16ea:	1d 92       	st	X+, r1
    16ec:	8a 95       	dec	r24
    16ee:	e9 f7       	brne	.-6      	; 0x16ea <hexInit+0x10>
    16f0:	08 95       	ret

000016f2 <resetRAMOffset>:
} 

void resetRAMOffset()
{
	RAMOffset = 0; 
    16f2:	10 92 32 0b 	sts	0x0B32, r1
    16f6:	10 92 31 0b 	sts	0x0B31, r1
    16fa:	08 95       	ret

000016fc <getHexRow>:
}

char* getHexRow()
{
    16fc:	0f 93       	push	r16
    16fe:	1f 93       	push	r17
    1700:	cf 93       	push	r28
    1702:	df 93       	push	r29
    1704:	cf ef       	ldi	r28, 0xFF	; 255
    1706:	da e0       	ldi	r29, 0x0A	; 10
    1708:	04 e0       	ldi	r16, 0x04	; 4
    170a:	1b e0       	ldi	r17, 0x0B	; 11
	int i=0; 
	//printf("Getting Row!\n"); 
	for(i=0; i<DATA_BEGIN; i++)
	{
		//Read the bytes from RAM and throw them into the buffer
		rowBuff = RAMReadByte(HEX_FILE_ADDRESS + RAMOffset);
    170c:	60 91 31 0b 	lds	r22, 0x0B31
    1710:	70 91 32 0b 	lds	r23, 0x0B32
    1714:	80 e0       	ldi	r24, 0x00	; 0
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	a4 db       	rcall	.-2232   	; 0xe62 <RAMReadByte>
		//printf("0x%02X ", rowBuff);
		hexRow[i] = rowBuff; 
    171a:	89 93       	st	Y+, r24
		RAMOffset++; 
    171c:	80 91 31 0b 	lds	r24, 0x0B31
    1720:	90 91 32 0b 	lds	r25, 0x0B32
    1724:	01 96       	adiw	r24, 0x01	; 1
    1726:	90 93 32 0b 	sts	0x0B32, r25
    172a:	80 93 31 0b 	sts	0x0B31, r24
char* getHexRow()
{
	char rowBuff; 
	int i=0; 
	//printf("Getting Row!\n"); 
	for(i=0; i<DATA_BEGIN; i++)
    172e:	c0 17       	cp	r28, r16
    1730:	d1 07       	cpc	r29, r17
    1732:	61 f7       	brne	.-40     	; 0x170c <getHexRow+0x10>
		//printf("0x%02X ", rowBuff);
		hexRow[i] = rowBuff; 
		RAMOffset++; 
	}
	
	uint8_t dataLength = hexRow[BYTE_COUNT];
    1734:	00 91 00 0b 	lds	r16, 0x0B00
    1738:	c4 e0       	ldi	r28, 0x04	; 4
    173a:	db e0       	ldi	r29, 0x0B	; 11
    173c:	10 e0       	ldi	r17, 0x00	; 0
    173e:	0b 5f       	subi	r16, 0xFB	; 251
    1740:	14 4f       	sbci	r17, 0xF4	; 244
	//printf("Data Length: %d\n", dataLength); 
	//Add 1 to dataLength to catch the checkSum 
	for(i=0;i<dataLength+1;i++)
	{
		rowBuff = RAMReadByte(HEX_FILE_ADDRESS + RAMOffset);
    1742:	60 91 31 0b 	lds	r22, 0x0B31
    1746:	70 91 32 0b 	lds	r23, 0x0B32
    174a:	80 e0       	ldi	r24, 0x00	; 0
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	89 db       	rcall	.-2286   	; 0xe62 <RAMReadByte>
		//printf("0x%02X ",rowBuff);
		hexRow[DATA_BEGIN + i] = RAMReadByte(HEX_FILE_ADDRESS + RAMOffset);
    1750:	60 91 31 0b 	lds	r22, 0x0B31
    1754:	70 91 32 0b 	lds	r23, 0x0B32
    1758:	80 e0       	ldi	r24, 0x00	; 0
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	82 db       	rcall	.-2300   	; 0xe62 <RAMReadByte>
    175e:	89 93       	st	Y+, r24
		RAMOffset++; 
    1760:	80 91 31 0b 	lds	r24, 0x0B31
    1764:	90 91 32 0b 	lds	r25, 0x0B32
    1768:	01 96       	adiw	r24, 0x01	; 1
    176a:	90 93 32 0b 	sts	0x0B32, r25
    176e:	80 93 31 0b 	sts	0x0B31, r24
	}
	
	uint8_t dataLength = hexRow[BYTE_COUNT];
	//printf("Data Length: %d\n", dataLength); 
	//Add 1 to dataLength to catch the checkSum 
	for(i=0;i<dataLength+1;i++)
    1772:	c0 17       	cp	r28, r16
    1774:	d1 07       	cpc	r29, r17
    1776:	29 f7       	brne	.-54     	; 0x1742 <getHexRow+0x46>
		hexRow[DATA_BEGIN + i] = RAMReadByte(HEX_FILE_ADDRESS + RAMOffset);
		RAMOffset++; 
	}
	
	return hexRow; 
}
    1778:	8f ef       	ldi	r24, 0xFF	; 255
    177a:	9a e0       	ldi	r25, 0x0A	; 10
    177c:	df 91       	pop	r29
    177e:	cf 91       	pop	r28
    1780:	1f 91       	pop	r17
    1782:	0f 91       	pop	r16
    1784:	08 95       	ret

00001786 <verifySignature>:
		case ATmega324PA_ID: 
			return 0x001E9511; 
		default:
			return -1; 
	}
}
    1786:	cf 92       	push	r12
    1788:	df 92       	push	r13
    178a:	ef 92       	push	r14
    178c:	ff 92       	push	r15
    178e:	0f 93       	push	r16
    1790:	1f 93       	push	r17
    1792:	cf 93       	push	r28
    1794:	df 93       	push	r29
    1796:	6b 01       	movw	r12, r22
    1798:	7c 01       	movw	r14, r24
    179a:	b6 d2       	rcall	.+1388   	; 0x1d08 <ReadSignatureBytes>
    179c:	ec 01       	movw	r28, r24
    179e:	8a 81       	ldd	r24, Y+2	; 0x02
    17a0:	1f 92       	push	r1
    17a2:	8f 93       	push	r24
    17a4:	89 81       	ldd	r24, Y+1	; 0x01
    17a6:	1f 92       	push	r1
    17a8:	8f 93       	push	r24
    17aa:	88 81       	ld	r24, Y
    17ac:	1f 92       	push	r1
    17ae:	8f 93       	push	r24
    17b0:	83 ed       	ldi	r24, 0xD3	; 211
    17b2:	97 e0       	ldi	r25, 0x07	; 7
    17b4:	9f 93       	push	r25
    17b6:	8f 93       	push	r24
    17b8:	1b d6       	rcall	.+3126   	; 0x23f0 <printf>
    17ba:	08 81       	ld	r16, Y
    17bc:	10 e0       	ldi	r17, 0x00	; 0
    17be:	20 e0       	ldi	r18, 0x00	; 0
    17c0:	30 e0       	ldi	r19, 0x00	; 0
    17c2:	4e 2d       	mov	r20, r14
    17c4:	50 e0       	ldi	r21, 0x00	; 0
    17c6:	60 e0       	ldi	r22, 0x00	; 0
    17c8:	70 e0       	ldi	r23, 0x00	; 0
    17ca:	8d b7       	in	r24, 0x3d	; 61
    17cc:	9e b7       	in	r25, 0x3e	; 62
    17ce:	08 96       	adiw	r24, 0x08	; 8
    17d0:	0f b6       	in	r0, 0x3f	; 63
    17d2:	f8 94       	cli
    17d4:	9e bf       	out	0x3e, r25	; 62
    17d6:	0f be       	out	0x3f, r0	; 63
    17d8:	8d bf       	out	0x3d, r24	; 61
    17da:	04 17       	cp	r16, r20
    17dc:	15 07       	cpc	r17, r21
    17de:	26 07       	cpc	r18, r22
    17e0:	37 07       	cpc	r19, r23
    17e2:	e9 f4       	brne	.+58     	; 0x181e <verifySignature+0x98>
    17e4:	09 81       	ldd	r16, Y+1	; 0x01
    17e6:	10 e0       	ldi	r17, 0x00	; 0
    17e8:	20 e0       	ldi	r18, 0x00	; 0
    17ea:	30 e0       	ldi	r19, 0x00	; 0
    17ec:	4d 2d       	mov	r20, r13
    17ee:	50 e0       	ldi	r21, 0x00	; 0
    17f0:	60 e0       	ldi	r22, 0x00	; 0
    17f2:	70 e0       	ldi	r23, 0x00	; 0
    17f4:	04 17       	cp	r16, r20
    17f6:	15 07       	cpc	r17, r21
    17f8:	26 07       	cpc	r18, r22
    17fa:	37 07       	cpc	r19, r23
    17fc:	99 f4       	brne	.+38     	; 0x1824 <verifySignature+0x9e>
    17fe:	4a 81       	ldd	r20, Y+2	; 0x02
    1800:	50 e0       	ldi	r21, 0x00	; 0
    1802:	60 e0       	ldi	r22, 0x00	; 0
    1804:	70 e0       	ldi	r23, 0x00	; 0
    1806:	dd 24       	eor	r13, r13
    1808:	ee 24       	eor	r14, r14
    180a:	ff 24       	eor	r15, r15
    180c:	81 e0       	ldi	r24, 0x01	; 1
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	4c 15       	cp	r20, r12
    1812:	5d 05       	cpc	r21, r13
    1814:	6e 05       	cpc	r22, r14
    1816:	7f 05       	cpc	r23, r15
    1818:	39 f0       	breq	.+14     	; 0x1828 <verifySignature+0xa2>
    181a:	80 e0       	ldi	r24, 0x00	; 0
    181c:	05 c0       	rjmp	.+10     	; 0x1828 <verifySignature+0xa2>
    181e:	80 e0       	ldi	r24, 0x00	; 0
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	02 c0       	rjmp	.+4      	; 0x1828 <verifySignature+0xa2>
    1824:	80 e0       	ldi	r24, 0x00	; 0
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	df 91       	pop	r29
    182a:	cf 91       	pop	r28
    182c:	1f 91       	pop	r17
    182e:	0f 91       	pop	r16
    1830:	ff 90       	pop	r15
    1832:	ef 90       	pop	r14
    1834:	df 90       	pop	r13
    1836:	cf 90       	pop	r12
    1838:	08 95       	ret

0000183a <Program>:
    183a:	cf 92       	push	r12
    183c:	df 92       	push	r13
    183e:	ef 92       	push	r14
    1840:	ff 92       	push	r15
    1842:	cf 93       	push	r28
    1844:	df 93       	push	r29
    1846:	6b 01       	movw	r12, r22
    1848:	7c 01       	movw	r14, r24
    184a:	46 d1       	rcall	.+652    	; 0x1ad8 <ApplyPullDowns>
    184c:	26 d1       	rcall	.+588    	; 0x1a9a <ProgInit>
    184e:	51 df       	rcall	.-350    	; 0x16f2 <resetRAMOffset>
    1850:	c7 01       	movw	r24, r14
    1852:	b6 01       	movw	r22, r12
    1854:	17 d2       	rcall	.+1070   	; 0x1c84 <EnableProgMode>
    1856:	c7 01       	movw	r24, r14
    1858:	b6 01       	movw	r22, r12
    185a:	95 df       	rcall	.-214    	; 0x1786 <verifySignature>
    185c:	ec 01       	movw	r28, r24
    185e:	00 97       	sbiw	r24, 0x00	; 0
    1860:	09 f4       	brne	.+2      	; 0x1864 <Program+0x2a>
    1862:	36 c0       	rjmp	.+108    	; 0x18d0 <Program+0x96>
    1864:	85 ef       	ldi	r24, 0xF5	; 245
    1866:	97 e0       	ldi	r25, 0x07	; 7
    1868:	d9 d5       	rcall	.+2994   	; 0x241c <puts>
    186a:	8b e0       	ldi	r24, 0x0B	; 11
    186c:	98 e0       	ldi	r25, 0x08	; 8
    186e:	d6 d5       	rcall	.+2988   	; 0x241c <puts>
    1870:	00 d4       	rcall	.+2048   	; 0x2072 <ChipErase>
    1872:	86 e1       	ldi	r24, 0x16	; 22
    1874:	98 e0       	ldi	r25, 0x08	; 8
    1876:	d2 d5       	rcall	.+2980   	; 0x241c <puts>
    1878:	85 e2       	ldi	r24, 0x25	; 37
    187a:	98 e0       	ldi	r25, 0x08	; 8
    187c:	cf d5       	rcall	.+2974   	; 0x241c <puts>
    187e:	c7 01       	movw	r24, r14
    1880:	b6 01       	movw	r22, r12
    1882:	18 d4       	rcall	.+2096   	; 0x20b4 <ProgramFlash>
    1884:	84 e3       	ldi	r24, 0x34	; 52
    1886:	98 e0       	ldi	r25, 0x08	; 8
    1888:	c9 d5       	rcall	.+2962   	; 0x241c <puts>
    188a:	05 d3       	rcall	.+1546   	; 0x1e96 <ReadFlash>
    188c:	83 e4       	ldi	r24, 0x43	; 67
    188e:	98 e0       	ldi	r25, 0x08	; 8
    1890:	c5 d5       	rcall	.+2954   	; 0x241c <puts>
    1892:	55 d3       	rcall	.+1706   	; 0x1f3e <VerifyFlash>
    1894:	ec 01       	movw	r28, r24
    1896:	00 97       	sbiw	r24, 0x00	; 0
    1898:	49 f0       	breq	.+18     	; 0x18ac <Program+0x72>
    189a:	80 e5       	ldi	r24, 0x50	; 80
    189c:	98 e0       	ldi	r25, 0x08	; 8
    189e:	be d5       	rcall	.+2940   	; 0x241c <puts>
    18a0:	d5 d4       	rcall	.+2474   	; 0x224c <ExitParallelProgrammingMode>
    18a2:	a1 98       	cbi	0x14, 1	; 20
    18a4:	a0 9a       	sbi	0x14, 0	; 20
    18a6:	c1 e0       	ldi	r28, 0x01	; 1
    18a8:	d0 e0       	ldi	r29, 0x00	; 0
    18aa:	23 c0       	rjmp	.+70     	; 0x18f2 <Program+0xb8>
    18ac:	87 e6       	ldi	r24, 0x67	; 103
    18ae:	98 e0       	ldi	r25, 0x08	; 8
    18b0:	b5 d5       	rcall	.+2922   	; 0x241c <puts>
    18b2:	cc d4       	rcall	.+2456   	; 0x224c <ExitParallelProgrammingMode>
    18b4:	a1 98       	cbi	0x14, 1	; 20
    18b6:	a2 9a       	sbi	0x14, 2	; 20
    18b8:	2f e7       	ldi	r18, 0x7F	; 127
    18ba:	8a e1       	ldi	r24, 0x1A	; 26
    18bc:	96 e0       	ldi	r25, 0x06	; 6
    18be:	21 50       	subi	r18, 0x01	; 1
    18c0:	80 40       	sbci	r24, 0x00	; 0
    18c2:	90 40       	sbci	r25, 0x00	; 0
    18c4:	e1 f7       	brne	.-8      	; 0x18be <Program+0x84>
    18c6:	00 c0       	rjmp	.+0      	; 0x18c8 <Program+0x8e>
    18c8:	00 00       	nop
    18ca:	a2 98       	cbi	0x14, 2	; 20
    18cc:	a0 9a       	sbi	0x14, 0	; 20
    18ce:	11 c0       	rjmp	.+34     	; 0x18f2 <Program+0xb8>
    18d0:	8b e7       	ldi	r24, 0x7B	; 123
    18d2:	98 e0       	ldi	r25, 0x08	; 8
    18d4:	a3 d5       	rcall	.+2886   	; 0x241c <puts>
    18d6:	ba d4       	rcall	.+2420   	; 0x224c <ExitParallelProgrammingMode>
    18d8:	a2 9a       	sbi	0x14, 2	; 20
    18da:	2f e7       	ldi	r18, 0x7F	; 127
    18dc:	8a e1       	ldi	r24, 0x1A	; 26
    18de:	96 e0       	ldi	r25, 0x06	; 6
    18e0:	21 50       	subi	r18, 0x01	; 1
    18e2:	80 40       	sbci	r24, 0x00	; 0
    18e4:	90 40       	sbci	r25, 0x00	; 0
    18e6:	e1 f7       	brne	.-8      	; 0x18e0 <Program+0xa6>
    18e8:	00 c0       	rjmp	.+0      	; 0x18ea <Program+0xb0>
    18ea:	00 00       	nop
    18ec:	a1 98       	cbi	0x14, 1	; 20
    18ee:	a2 98       	cbi	0x14, 2	; 20
    18f0:	a0 9a       	sbi	0x14, 0	; 20
    18f2:	ce 01       	movw	r24, r28
    18f4:	df 91       	pop	r29
    18f6:	cf 91       	pop	r28
    18f8:	ff 90       	pop	r15
    18fa:	ef 90       	pop	r14
    18fc:	df 90       	pop	r13
    18fe:	cf 90       	pop	r12
    1900:	08 95       	ret

00001902 <checkSum>:

int checkSum()
{
    1902:	7f 92       	push	r7
    1904:	8f 92       	push	r8
    1906:	9f 92       	push	r9
    1908:	af 92       	push	r10
    190a:	bf 92       	push	r11
    190c:	cf 92       	push	r12
    190e:	df 92       	push	r13
    1910:	ef 92       	push	r14
    1912:	ff 92       	push	r15
    1914:	0f 93       	push	r16
    1916:	1f 93       	push	r17
    1918:	cf 93       	push	r28
    191a:	df 93       	push	r29
	resetRAMOffset(); 
    191c:	ea de       	rcall	.-556    	; 0x16f2 <resetRAMOffset>
	uint8_t i = 0; 
	
	while(1)
	{
		hexRow = getHexRow();
		checkSumVal = 0; 
    191e:	81 2c       	mov	r8, r1
	
		byteCount = (hexRow[BYTE_COUNT]);
		//Adding 4 bytes to account for the record type, high and low address, and data type 
		byteCount += 4; 

		for(i=1; i<=byteCount; i++)
    1920:	99 24       	eor	r9, r9
    1922:	93 94       	inc	r9
    1924:	a1 2c       	mov	r10, r1
    1926:	bb 24       	eor	r11, r11
    1928:	b3 94       	inc	r11
		}
		
		//Calculate checksum by performing 2's compliment 
		
		checkSumVal = ~checkSumVal + 1;
		printf("\nCalculated Checksum: 0x%02x\n", checkSumVal);
    192a:	0f 2e       	mov	r0, r31
    192c:	fd ea       	ldi	r31, 0xAD	; 173
    192e:	ef 2e       	mov	r14, r31
    1930:	f8 e0       	ldi	r31, 0x08	; 8
    1932:	ff 2e       	mov	r15, r31
    1934:	f0 2d       	mov	r31, r0
		printf("Actual Checksum: 0x%02x\n", hexRow[byteCount + 1]); 
    1936:	0b ec       	ldi	r16, 0xCB	; 203
    1938:	18 e0       	ldi	r17, 0x08	; 8
	uint8_t checkSumVal; 
	uint8_t i = 0; 
	
	while(1)
	{
		hexRow = getHexRow();
    193a:	e0 de       	rcall	.-576    	; 0x16fc <getHexRow>
    193c:	ec 01       	movw	r28, r24
		checkSumVal = 0; 
		byteCount = 0; 
	
		//printf("We're here now\n");
	
		if(hexRow[RECORD_TYPE] == TYPE_END_OF_FILE)
    193e:	8c 81       	ldd	r24, Y+4	; 0x04
    1940:	81 30       	cpi	r24, 0x01	; 1
    1942:	49 f4       	brne	.+18     	; 0x1956 <checkSum+0x54>
		{
			printf("End of File!\n");
    1944:	8f e8       	ldi	r24, 0x8F	; 143
    1946:	98 e0       	ldi	r25, 0x08	; 8
    1948:	69 d5       	rcall	.+2770   	; 0x241c <puts>
		printf("Actual Checksum: 0x%02x\n", hexRow[byteCount + 1]); 
		if(checkSumVal != hexRow[byteCount + 1])
			return 0;  	
	}
	
	printf("Checksum Passed!\n"); 
    194a:	8c e9       	ldi	r24, 0x9C	; 156
    194c:	98 e0       	ldi	r25, 0x08	; 8
    194e:	66 d5       	rcall	.+2764   	; 0x241c <puts>
	return 1; 
    1950:	81 e0       	ldi	r24, 0x01	; 1
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	33 c0       	rjmp	.+102    	; 0x19bc <checkSum+0xba>
		{
			printf("End of File!\n");
			break;
		}
	
		byteCount = (hexRow[BYTE_COUNT]);
    1956:	c9 80       	ldd	r12, Y+1	; 0x01
    1958:	d1 2c       	mov	r13, r1
		//Adding 4 bytes to account for the record type, high and low address, and data type 
		byteCount += 4; 

		for(i=1; i<=byteCount; i++)
    195a:	c6 01       	movw	r24, r12
    195c:	04 96       	adiw	r24, 0x04	; 4
    195e:	29 2d       	mov	r18, r9
    1960:	3a 2d       	mov	r19, r10
    1962:	4b 2d       	mov	r20, r11
	uint8_t i = 0; 
	
	while(1)
	{
		hexRow = getHexRow();
		checkSumVal = 0; 
    1964:	58 2d       	mov	r21, r8
		//Adding 4 bytes to account for the record type, high and low address, and data type 
		byteCount += 4; 

		for(i=1; i<=byteCount; i++)
		{
			checkSumVal += hexRow[i];
    1966:	fe 01       	movw	r30, r28
    1968:	e2 0f       	add	r30, r18
    196a:	f3 1f       	adc	r31, r19
    196c:	20 81       	ld	r18, Z
    196e:	52 0f       	add	r21, r18
	
		byteCount = (hexRow[BYTE_COUNT]);
		//Adding 4 bytes to account for the record type, high and low address, and data type 
		byteCount += 4; 

		for(i=1; i<=byteCount; i++)
    1970:	4f 5f       	subi	r20, 0xFF	; 255
    1972:	24 2f       	mov	r18, r20
    1974:	30 e0       	ldi	r19, 0x00	; 0
    1976:	82 17       	cp	r24, r18
    1978:	93 07       	cpc	r25, r19
    197a:	a8 f7       	brcc	.-22     	; 0x1966 <checkSum+0x64>
			//printf("Total Bytes: %d, i: %d, j: %d\n", totalBytes, i, j);
		}
		
		//Calculate checksum by performing 2's compliment 
		
		checkSumVal = ~checkSumVal + 1;
    197c:	75 2e       	mov	r7, r21
    197e:	71 94       	neg	r7
		printf("\nCalculated Checksum: 0x%02x\n", checkSumVal);
    1980:	1f 92       	push	r1
    1982:	7f 92       	push	r7
    1984:	ff 92       	push	r15
    1986:	ef 92       	push	r14
    1988:	33 d5       	rcall	.+2662   	; 0x23f0 <printf>
		printf("Actual Checksum: 0x%02x\n", hexRow[byteCount + 1]); 
    198a:	85 e0       	ldi	r24, 0x05	; 5
    198c:	c8 0e       	add	r12, r24
    198e:	d1 1c       	adc	r13, r1
    1990:	cc 0d       	add	r28, r12
    1992:	dd 1d       	adc	r29, r13
    1994:	88 81       	ld	r24, Y
    1996:	1f 92       	push	r1
    1998:	8f 93       	push	r24
    199a:	1f 93       	push	r17
    199c:	0f 93       	push	r16
    199e:	28 d5       	rcall	.+2640   	; 0x23f0 <printf>
		if(checkSumVal != hexRow[byteCount + 1])
    19a0:	8d b7       	in	r24, 0x3d	; 61
    19a2:	9e b7       	in	r25, 0x3e	; 62
    19a4:	08 96       	adiw	r24, 0x08	; 8
    19a6:	0f b6       	in	r0, 0x3f	; 63
    19a8:	f8 94       	cli
    19aa:	9e bf       	out	0x3e, r25	; 62
    19ac:	0f be       	out	0x3f, r0	; 63
    19ae:	8d bf       	out	0x3d, r24	; 61
    19b0:	88 81       	ld	r24, Y
    19b2:	87 15       	cp	r24, r7
    19b4:	09 f4       	brne	.+2      	; 0x19b8 <checkSum+0xb6>
    19b6:	c1 cf       	rjmp	.-126    	; 0x193a <checkSum+0x38>
			return 0;  	
    19b8:	80 e0       	ldi	r24, 0x00	; 0
    19ba:	90 e0       	ldi	r25, 0x00	; 0
	}
	
	printf("Checksum Passed!\n"); 
	return 1; 
}
    19bc:	df 91       	pop	r29
    19be:	cf 91       	pop	r28
    19c0:	1f 91       	pop	r17
    19c2:	0f 91       	pop	r16
    19c4:	ff 90       	pop	r15
    19c6:	ef 90       	pop	r14
    19c8:	df 90       	pop	r13
    19ca:	cf 90       	pop	r12
    19cc:	bf 90       	pop	r11
    19ce:	af 90       	pop	r10
    19d0:	9f 90       	pop	r9
    19d2:	8f 90       	pop	r8
    19d4:	7f 90       	pop	r7
    19d6:	08 95       	ret

000019d8 <compressFile>:

//Converts ASCII to Hex in external RAM 
//Length should be the transmission length given from the Wi-Fi module 
int compressFile(uint16_t length)
{
    19d8:	af 92       	push	r10
    19da:	bf 92       	push	r11
    19dc:	df 92       	push	r13
    19de:	ef 92       	push	r14
    19e0:	ff 92       	push	r15
    19e2:	1f 93       	push	r17
    19e4:	cf 93       	push	r28
    19e6:	df 93       	push	r29
    19e8:	7c 01       	movw	r14, r24
	uint8_t upperNibble; 
	uint8_t lowerNibble; 
	uint8_t hexVal; 
	uint16_t j = 0; 
	
	printf("Length: %d\n", length); 
    19ea:	ff 92       	push	r15
    19ec:	8f 93       	push	r24
    19ee:	85 e9       	ldi	r24, 0x95	; 149
    19f0:	92 e0       	ldi	r25, 0x02	; 2
    19f2:	9f 93       	push	r25
    19f4:	8f 93       	push	r24
    19f6:	fc d4       	rcall	.+2552   	; 0x23f0 <printf>
	
	for(int i=0; i<length; i++)
    19f8:	0f 90       	pop	r0
    19fa:	0f 90       	pop	r0
    19fc:	0f 90       	pop	r0
    19fe:	0f 90       	pop	r0
    1a00:	e1 14       	cp	r14, r1
    1a02:	f1 04       	cpc	r15, r1
    1a04:	09 f4       	brne	.+2      	; 0x1a08 <compressFile+0x30>
    1a06:	3e c0       	rjmp	.+124    	; 0x1a84 <compressFile+0xac>
    1a08:	c0 e0       	ldi	r28, 0x00	; 0
    1a0a:	d0 e0       	ldi	r29, 0x00	; 0
{
	uint8_t buff;
	uint8_t upperNibble; 
	uint8_t lowerNibble; 
	uint8_t hexVal; 
	uint16_t j = 0; 
    1a0c:	a1 2c       	mov	r10, r1
    1a0e:	b1 2c       	mov	r11, r1
	
	printf("Length: %d\n", length); 
	
	for(int i=0; i<length; i++)
	{
		upperNibble = RAMReadByte(HEX_FILE_ADDRESS + i);
    1a10:	be 01       	movw	r22, r28
    1a12:	88 27       	eor	r24, r24
    1a14:	77 fd       	sbrc	r23, 7
    1a16:	80 95       	com	r24
    1a18:	98 2f       	mov	r25, r24
    1a1a:	23 da       	rcall	.-3002   	; 0xe62 <RAMReadByte>
    1a1c:	18 2f       	mov	r17, r24
		//If it's a colon, leave it alone as it is the start code 
		if(upperNibble == ':'){
    1a1e:	8a 33       	cpi	r24, 0x3A	; 58
    1a20:	49 f4       	brne	.+18     	; 0x1a34 <compressFile+0x5c>
			RAMWriteByte(0x3A, HEX_FILE_ADDRESS + j);
    1a22:	a5 01       	movw	r20, r10
    1a24:	60 e0       	ldi	r22, 0x00	; 0
    1a26:	70 e0       	ldi	r23, 0x00	; 0
    1a28:	8a e3       	ldi	r24, 0x3A	; 58
    1a2a:	00 da       	rcall	.-3072   	; 0xe2c <RAMWriteByte>
			j++;
    1a2c:	8f ef       	ldi	r24, 0xFF	; 255
    1a2e:	a8 1a       	sub	r10, r24
    1a30:	b8 0a       	sbc	r11, r24
			continue;
    1a32:	24 c0       	rjmp	.+72     	; 0x1a7c <compressFile+0xa4>
		}
		//Discard any carriage returns or line feeds 
		else if(upperNibble == '\r' || upperNibble == '\n'){
    1a34:	8d 30       	cpi	r24, 0x0D	; 13
    1a36:	11 f1       	breq	.+68     	; 0x1a7c <compressFile+0xa4>
    1a38:	8a 30       	cpi	r24, 0x0A	; 10
    1a3a:	01 f1       	breq	.+64     	; 0x1a7c <compressFile+0xa4>
			//i++; 
			continue; 
		}
		
		lowerNibble = RAMReadByte(HEX_FILE_ADDRESS + 1 + i);
    1a3c:	21 96       	adiw	r28, 0x01	; 1
    1a3e:	be 01       	movw	r22, r28
    1a40:	88 27       	eor	r24, r24
    1a42:	77 fd       	sbrc	r23, 7
    1a44:	80 95       	com	r24
    1a46:	98 2f       	mov	r25, r24
    1a48:	0c da       	rcall	.-3048   	; 0xe62 <RAMReadByte>
		//if(i<600)
			//printf("%d...Upper: 0x%02x, Lower: 0x%02x\n", i, upperNibble, lowerNibble);
		
		if(upperNibble > 0x39)
    1a4a:	1a 33       	cpi	r17, 0x3A	; 58
    1a4c:	18 f0       	brcs	.+6      	; 0x1a54 <compressFile+0x7c>
			upperNibble -= 0x37; 
    1a4e:	99 ec       	ldi	r25, 0xC9	; 201
    1a50:	91 0f       	add	r25, r17
    1a52:	02 c0       	rjmp	.+4      	; 0x1a58 <compressFile+0x80>
		else
			upperNibble &= 0x0F;
    1a54:	91 2f       	mov	r25, r17
    1a56:	9f 70       	andi	r25, 0x0F	; 15
			
		upperNibble <<= 4;  
    1a58:	d9 2e       	mov	r13, r25
    1a5a:	dd 0c       	add	r13, r13
    1a5c:	dd 0c       	add	r13, r13
    1a5e:	dd 0c       	add	r13, r13
    1a60:	dd 0c       	add	r13, r13
		hexVal = upperNibble; 
		
		if(lowerNibble > 0x39)
    1a62:	8a 33       	cpi	r24, 0x3A	; 58
    1a64:	10 f0       	brcs	.+4      	; 0x1a6a <compressFile+0x92>
			lowerNibble -= 0x37; 
    1a66:	87 53       	subi	r24, 0x37	; 55
    1a68:	01 c0       	rjmp	.+2      	; 0x1a6c <compressFile+0x94>
		else
			lowerNibble &= 0x0F;
    1a6a:	8f 70       	andi	r24, 0x0F	; 15
		hexVal |= lowerNibble; 
		//if(i<600)
			//printf("%d...Hex: 0x%02x\n\n", j, hexVal);
		
		//Backfill the already converted ASCII value's addresses with the new hex value 
		RAMWriteByte(hexVal, HEX_FILE_ADDRESS + j); 
    1a6c:	a5 01       	movw	r20, r10
    1a6e:	60 e0       	ldi	r22, 0x00	; 0
    1a70:	70 e0       	ldi	r23, 0x00	; 0
    1a72:	8d 29       	or	r24, r13
    1a74:	db d9       	rcall	.-3146   	; 0xe2c <RAMWriteByte>
		j++;
    1a76:	8f ef       	ldi	r24, 0xFF	; 255
    1a78:	a8 1a       	sub	r10, r24
    1a7a:	b8 0a       	sbc	r11, r24
	uint8_t hexVal; 
	uint16_t j = 0; 
	
	printf("Length: %d\n", length); 
	
	for(int i=0; i<length; i++)
    1a7c:	21 96       	adiw	r28, 0x01	; 1
    1a7e:	ce 15       	cp	r28, r14
    1a80:	df 05       	cpc	r29, r15
    1a82:	30 f2       	brcs	.-116    	; 0x1a10 <compressFile+0x38>
		//hence why the for loop does not have i+=2 
		i++;  
	}
	
	return 1; 
    1a84:	81 e0       	ldi	r24, 0x01	; 1
    1a86:	90 e0       	ldi	r25, 0x00	; 0
    1a88:	df 91       	pop	r29
    1a8a:	cf 91       	pop	r28
    1a8c:	1f 91       	pop	r17
    1a8e:	ff 90       	pop	r15
    1a90:	ef 90       	pop	r14
    1a92:	df 90       	pop	r13
    1a94:	bf 90       	pop	r11
    1a96:	af 90       	pop	r10
    1a98:	08 95       	ret

00001a9a <ProgInit>:


void ProgInit(void)
{
	//SPI_Switching_Circuitry_Init(); 
	SPI_FPGA_Init();
    1a9a:	39 d9       	rcall	.-3470   	; 0xd0e <SPI_FPGA_Init>
	
	voltageControlInit();
    1a9c:	e6 da       	rcall	.-2612   	; 0x106a <voltageControlInit>
	setVpp(VPP_12V);
    1a9e:	81 e0       	ldi	r24, 0x01	; 1
    1aa0:	04 db       	rcall	.-2552   	; 0x10aa <setVpp>
	setVcc(VCC_5V);
    1aa2:	84 e0       	ldi	r24, 0x04	; 4
    1aa4:	f4 da       	rcall	.-2584   	; 0x108e <setVcc>
	setVLogic(VL_5V);
    1aa6:	86 e0       	ldi	r24, 0x06	; 6
    1aa8:	12 db       	rcall	.-2524   	; 0x10ce <setVLogic>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1aaa:	8f e0       	ldi	r24, 0x0F	; 15
    1aac:	97 e2       	ldi	r25, 0x27	; 39
    1aae:	01 97       	sbiw	r24, 0x01	; 1
    1ab0:	f1 f7       	brne	.-4      	; 0x1aae <ProgInit+0x14>
    1ab2:	00 c0       	rjmp	.+0      	; 0x1ab4 <ProgInit+0x1a>
    1ab4:	00 00       	nop
	_delay_ms(5);
	enableVccRegulator();
    1ab6:	e7 da       	rcall	.-2610   	; 0x1086 <enableVccRegulator>
	enableVLogic();
    1ab8:	06 db       	rcall	.-2548   	; 0x10c6 <enableVLogic>
    1aba:	8f e4       	ldi	r24, 0x4F	; 79
    1abc:	93 ec       	ldi	r25, 0xC3	; 195
    1abe:	01 97       	sbiw	r24, 0x01	; 1
    1ac0:	f1 f7       	brne	.-4      	; 0x1abe <ProgInit+0x24>
    1ac2:	00 c0       	rjmp	.+0      	; 0x1ac4 <ProgInit+0x2a>
    1ac4:	00 00       	nop
	_delay_ms(25);
	//Setting up Control lines
	CONTROL_DDR |= ( (1<<XTAL1) | (1<<OE) | (1<<WR) | (1<<BS1_PAGEL) | (1<<XA0) | (1<<XA1_BS2) | (1<<PAGEL) | (1<<BS2));
    1ac6:	8a b1       	in	r24, 0x0a	; 10
    1ac8:	8f ef       	ldi	r24, 0xFF	; 255
    1aca:	8a b9       	out	0x0a, r24	; 10
	RDY_BSY_DDR &= ~(1<<RDY_BSY);
    1acc:	38 98       	cbi	0x07, 0	; 7
	DATA_DDR = 0xFF;
    1ace:	80 93 0a 01 	sts	0x010A, r24
	
	//LED_DDR |= ((1<<LED_Green) | (1<<LED_Yellow) | (1<<LED_Red));
	LED_PORT &= ~(1<<LED_Green);
    1ad2:	a0 98       	cbi	0x14, 0	; 20
	LED_PORT |= (1<<LED_Yellow);
    1ad4:	a1 9a       	sbi	0x14, 1	; 20
    1ad6:	08 95       	ret

00001ad8 <ApplyPullDowns>:
}

void ApplyPullDowns(void)
{
	SPI_Switching_Circuitry_Init();
    1ad8:	c9 d9       	rcall	.-3182   	; 0xe6c <SPI_Switching_Circuitry_Init>
	
	SPI_Switching_Circuitry_Write(0xFF); //Pull Downs
    1ada:	8f ef       	ldi	r24, 0xFF	; 255
    1adc:	d5 d9       	rcall	.-3158   	; 0xe88 <SPI_Switching_Circuitry_Write>
	SPI_Switching_Circuitry_Write(0xFF);
    1ade:	8f ef       	ldi	r24, 0xFF	; 255
    1ae0:	d3 d9       	rcall	.-3162   	; 0xe88 <SPI_Switching_Circuitry_Write>
	SPI_Switching_Circuitry_Write(0xFF);
    1ae2:	8f ef       	ldi	r24, 0xFF	; 255
    1ae4:	d1 d9       	rcall	.-3166   	; 0xe88 <SPI_Switching_Circuitry_Write>
	SPI_Switching_Circuitry_Write(0xFF);
    1ae6:	8f ef       	ldi	r24, 0xFF	; 255
    1ae8:	cf d9       	rcall	.-3170   	; 0xe88 <SPI_Switching_Circuitry_Write>
	SPI_Switching_Circuitry_Write(0xFF);
    1aea:	8f ef       	ldi	r24, 0xFF	; 255
    1aec:	cd d9       	rcall	.-3174   	; 0xe88 <SPI_Switching_Circuitry_Write>
	
	SPI_Switching_Circuitry_Write(0x00); //GND
    1aee:	80 e0       	ldi	r24, 0x00	; 0
    1af0:	cb d9       	rcall	.-3178   	; 0xe88 <SPI_Switching_Circuitry_Write>
	SPI_Switching_Circuitry_Write(0x00);
    1af2:	80 e0       	ldi	r24, 0x00	; 0
    1af4:	c9 d9       	rcall	.-3182   	; 0xe88 <SPI_Switching_Circuitry_Write>
	SPI_Switching_Circuitry_Write(0x00);
    1af6:	80 e0       	ldi	r24, 0x00	; 0
    1af8:	c7 d9       	rcall	.-3186   	; 0xe88 <SPI_Switching_Circuitry_Write>
	SPI_Switching_Circuitry_Write(0x00);
    1afa:	80 e0       	ldi	r24, 0x00	; 0
    1afc:	c5 d9       	rcall	.-3190   	; 0xe88 <SPI_Switching_Circuitry_Write>
	SPI_Switching_Circuitry_Write(0x00);
    1afe:	80 e0       	ldi	r24, 0x00	; 0
    1b00:	c3 d9       	rcall	.-3194   	; 0xe88 <SPI_Switching_Circuitry_Write>
	
	SPI_Switching_Circuitry_Write(0x00); //Pull Ups
    1b02:	80 e0       	ldi	r24, 0x00	; 0
    1b04:	c1 d9       	rcall	.-3198   	; 0xe88 <SPI_Switching_Circuitry_Write>
	SPI_Switching_Circuitry_Write(0x00);
    1b06:	80 e0       	ldi	r24, 0x00	; 0
    1b08:	bf d9       	rcall	.-3202   	; 0xe88 <SPI_Switching_Circuitry_Write>
	SPI_Switching_Circuitry_Write(0x00);
    1b0a:	80 e0       	ldi	r24, 0x00	; 0
    1b0c:	bd d9       	rcall	.-3206   	; 0xe88 <SPI_Switching_Circuitry_Write>
	SPI_Switching_Circuitry_Write(0x00);
    1b0e:	80 e0       	ldi	r24, 0x00	; 0
    1b10:	bb d9       	rcall	.-3210   	; 0xe88 <SPI_Switching_Circuitry_Write>
	SPI_Switching_Circuitry_Write(0x00);
    1b12:	80 e0       	ldi	r24, 0x00	; 0
    1b14:	b9 d9       	rcall	.-3214   	; 0xe88 <SPI_Switching_Circuitry_Write>
	
	SPI_Switching_Circuitry_Write(0x00); //VCC
    1b16:	80 e0       	ldi	r24, 0x00	; 0
    1b18:	b7 d9       	rcall	.-3218   	; 0xe88 <SPI_Switching_Circuitry_Write>
	SPI_Switching_Circuitry_Write(0x00);
    1b1a:	80 e0       	ldi	r24, 0x00	; 0
    1b1c:	b5 d9       	rcall	.-3222   	; 0xe88 <SPI_Switching_Circuitry_Write>
	SPI_Switching_Circuitry_Write(0x00);
    1b1e:	80 e0       	ldi	r24, 0x00	; 0
    1b20:	b3 d9       	rcall	.-3226   	; 0xe88 <SPI_Switching_Circuitry_Write>
	SPI_Switching_Circuitry_Write(0x00);
    1b22:	80 e0       	ldi	r24, 0x00	; 0
    1b24:	b1 d9       	rcall	.-3230   	; 0xe88 <SPI_Switching_Circuitry_Write>
	SPI_Switching_Circuitry_Write(0x00);
    1b26:	80 e0       	ldi	r24, 0x00	; 0
    1b28:	af d9       	rcall	.-3234   	; 0xe88 <SPI_Switching_Circuitry_Write>
	
	SPI_Switching_Circuitry_Write(0x00); //VPP
    1b2a:	80 e0       	ldi	r24, 0x00	; 0
    1b2c:	ad d9       	rcall	.-3238   	; 0xe88 <SPI_Switching_Circuitry_Write>
	SPI_Switching_Circuitry_Write(0x00);
    1b2e:	80 e0       	ldi	r24, 0x00	; 0
    1b30:	ab d9       	rcall	.-3242   	; 0xe88 <SPI_Switching_Circuitry_Write>
	SPI_Switching_Circuitry_Write(0x00);
    1b32:	80 e0       	ldi	r24, 0x00	; 0
    1b34:	a9 d9       	rcall	.-3246   	; 0xe88 <SPI_Switching_Circuitry_Write>
	SPI_Switching_Circuitry_Write(0x00);
    1b36:	80 e0       	ldi	r24, 0x00	; 0
    1b38:	a7 d9       	rcall	.-3250   	; 0xe88 <SPI_Switching_Circuitry_Write>
	SPI_Switching_Circuitry_Write(0x00);
    1b3a:	80 e0       	ldi	r24, 0x00	; 0
    1b3c:	a5 d9       	rcall	.-3254   	; 0xe88 <SPI_Switching_Circuitry_Write>
	
	SR_CNTRL_PORT |= (1<<SRCS);
    1b3e:	e5 e0       	ldi	r30, 0x05	; 5
    1b40:	f1 e0       	ldi	r31, 0x01	; 1
    1b42:	80 81       	ld	r24, Z
    1b44:	80 61       	ori	r24, 0x10	; 16
    1b46:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1b48:	85 e3       	ldi	r24, 0x35	; 53
    1b4a:	8a 95       	dec	r24
    1b4c:	f1 f7       	brne	.-4      	; 0x1b4a <ApplyPullDowns+0x72>
    1b4e:	00 00       	nop
	_delay_us(20);
	SR_CNTRL_PORT &= ~(1<<SRCS);
    1b50:	80 81       	ld	r24, Z
    1b52:	8f 7e       	andi	r24, 0xEF	; 239
    1b54:	80 83       	st	Z, r24
    1b56:	08 95       	ret

00001b58 <LoadCommand>:
}

void LoadCommand(char command)
{
	//A: Load Command "Program Flash"
	CONTROL_PORT |= 1<<XA1_BS2;
    1b58:	5d 9a       	sbi	0x0b, 5	; 11
	CONTROL_PORT &= ~(1<<XA0);
    1b5a:	5c 98       	cbi	0x0b, 4	; 11
	CONTROL_PORT &= ~(1<<BS1_PAGEL);
    1b5c:	5b 98       	cbi	0x0b, 3	; 11
	DATA_PORT = command;
    1b5e:	80 93 0b 01 	sts	0x010B, r24
    1b62:	82 e4       	ldi	r24, 0x42	; 66
    1b64:	8a 95       	dec	r24
    1b66:	f1 f7       	brne	.-4      	; 0x1b64 <LoadCommand+0xc>
    1b68:	00 c0       	rjmp	.+0      	; 0x1b6a <LoadCommand+0x12>
	_delay_us(25);
	CONTROL_PORT |= 1<<XTAL1;
    1b6a:	58 9a       	sbi	0x0b, 0	; 11
    1b6c:	82 e4       	ldi	r24, 0x42	; 66
    1b6e:	8a 95       	dec	r24
    1b70:	f1 f7       	brne	.-4      	; 0x1b6e <LoadCommand+0x16>
    1b72:	00 c0       	rjmp	.+0      	; 0x1b74 <LoadCommand+0x1c>
	_delay_us(25);
	CONTROL_PORT &= ~(1<<XTAL1);
    1b74:	58 98       	cbi	0x0b, 0	; 11
    1b76:	82 e4       	ldi	r24, 0x42	; 66
    1b78:	8a 95       	dec	r24
    1b7a:	f1 f7       	brne	.-4      	; 0x1b78 <LoadCommand+0x20>
    1b7c:	00 c0       	rjmp	.+0      	; 0x1b7e <LoadCommand+0x26>
    1b7e:	08 95       	ret

00001b80 <WriteWord>:
}

void WriteWord(uint16_t data)
{
	//C: Load Data Low Byte
	CONTROL_PORT &= ~(1<<XA1_BS2);
    1b80:	5d 98       	cbi	0x0b, 5	; 11
	CONTROL_PORT |= 1<<XA0;
    1b82:	5c 9a       	sbi	0x0b, 4	; 11
	DATA_PORT = data & 0x00FF; 
    1b84:	80 93 0b 01 	sts	0x010B, r24
    1b88:	82 e4       	ldi	r24, 0x42	; 66
    1b8a:	8a 95       	dec	r24
    1b8c:	f1 f7       	brne	.-4      	; 0x1b8a <WriteWord+0xa>
    1b8e:	00 c0       	rjmp	.+0      	; 0x1b90 <WriteWord+0x10>
	_delay_us(25);
	CONTROL_PORT |= 1<<XTAL1;
    1b90:	58 9a       	sbi	0x0b, 0	; 11
    1b92:	82 e4       	ldi	r24, 0x42	; 66
    1b94:	8a 95       	dec	r24
    1b96:	f1 f7       	brne	.-4      	; 0x1b94 <WriteWord+0x14>
    1b98:	00 c0       	rjmp	.+0      	; 0x1b9a <WriteWord+0x1a>
	_delay_us(25);
	CONTROL_PORT &= ~(1<<XTAL1);
    1b9a:	58 98       	cbi	0x0b, 0	; 11
    1b9c:	82 e4       	ldi	r24, 0x42	; 66
    1b9e:	8a 95       	dec	r24
    1ba0:	f1 f7       	brne	.-4      	; 0x1b9e <WriteWord+0x1e>
    1ba2:	00 c0       	rjmp	.+0      	; 0x1ba4 <WriteWord+0x24>
	_delay_us(25);
	
	//D: Load Data High Byte
	CONTROL_PORT |= 1<<BS1_PAGEL;
    1ba4:	5b 9a       	sbi	0x0b, 3	; 11
	CONTROL_PORT &= ~(1<<XA1_BS2);
    1ba6:	5d 98       	cbi	0x0b, 5	; 11
	CONTROL_PORT |= 1<<XA0;
    1ba8:	5c 9a       	sbi	0x0b, 4	; 11
	DATA_PORT = ((data & 0xFF00) >> 8); 
    1baa:	90 93 0b 01 	sts	0x010B, r25
    1bae:	82 e4       	ldi	r24, 0x42	; 66
    1bb0:	8a 95       	dec	r24
    1bb2:	f1 f7       	brne	.-4      	; 0x1bb0 <WriteWord+0x30>
    1bb4:	00 c0       	rjmp	.+0      	; 0x1bb6 <WriteWord+0x36>
	_delay_us(25);
	CONTROL_PORT |= 1<<XTAL1;
    1bb6:	58 9a       	sbi	0x0b, 0	; 11
    1bb8:	82 e4       	ldi	r24, 0x42	; 66
    1bba:	8a 95       	dec	r24
    1bbc:	f1 f7       	brne	.-4      	; 0x1bba <WriteWord+0x3a>
    1bbe:	00 c0       	rjmp	.+0      	; 0x1bc0 <WriteWord+0x40>
	_delay_us(25);
	CONTROL_PORT &= ~(1<<XTAL1);
    1bc0:	58 98       	cbi	0x0b, 0	; 11
    1bc2:	82 e4       	ldi	r24, 0x42	; 66
    1bc4:	8a 95       	dec	r24
    1bc6:	f1 f7       	brne	.-4      	; 0x1bc4 <WriteWord+0x44>
    1bc8:	00 c0       	rjmp	.+0      	; 0x1bca <WriteWord+0x4a>
    1bca:	08 95       	ret

00001bcc <LoadLowAddress>:
}

void LoadLowAddress(uint16_t address)
{
	//B: Load Address Low Byte
	CONTROL_PORT &= ~(1<<XA1_BS2);
    1bcc:	5d 98       	cbi	0x0b, 5	; 11
	CONTROL_PORT &= ~(1<<XA0);
    1bce:	5c 98       	cbi	0x0b, 4	; 11
	CONTROL_PORT &= ~(1<<BS1_PAGEL);
    1bd0:	5b 98       	cbi	0x0b, 3	; 11
	CONTROL_PORT &= ~(1<<BS2);
    1bd2:	5f 98       	cbi	0x0b, 7	; 11
	DATA_PORT = (address & 0x00FF);
    1bd4:	80 93 0b 01 	sts	0x010B, r24
    1bd8:	82 e4       	ldi	r24, 0x42	; 66
    1bda:	8a 95       	dec	r24
    1bdc:	f1 f7       	brne	.-4      	; 0x1bda <LoadLowAddress+0xe>
    1bde:	00 c0       	rjmp	.+0      	; 0x1be0 <LoadLowAddress+0x14>
	_delay_us(25);
	CONTROL_PORT |= 1<<XTAL1;
    1be0:	58 9a       	sbi	0x0b, 0	; 11
    1be2:	82 e4       	ldi	r24, 0x42	; 66
    1be4:	8a 95       	dec	r24
    1be6:	f1 f7       	brne	.-4      	; 0x1be4 <LoadLowAddress+0x18>
    1be8:	00 c0       	rjmp	.+0      	; 0x1bea <LoadLowAddress+0x1e>
	_delay_us(25);
	CONTROL_PORT &= ~(1<<XTAL1);
    1bea:	58 98       	cbi	0x0b, 0	; 11
    1bec:	82 e4       	ldi	r24, 0x42	; 66
    1bee:	8a 95       	dec	r24
    1bf0:	f1 f7       	brne	.-4      	; 0x1bee <LoadLowAddress+0x22>
    1bf2:	00 c0       	rjmp	.+0      	; 0x1bf4 <LoadLowAddress+0x28>
    1bf4:	08 95       	ret

00001bf6 <LoadHighAddress>:
}

void LoadHighAddress(uint16_t address)
{
	//F: Load Address High Byte
	CONTROL_PORT &= ~(1<<XA1_BS2);
    1bf6:	5d 98       	cbi	0x0b, 5	; 11
	CONTROL_PORT &= ~(1<<XA0);
    1bf8:	5c 98       	cbi	0x0b, 4	; 11
	CONTROL_PORT &= ~(1<<BS2);
    1bfa:	5f 98       	cbi	0x0b, 7	; 11
	CONTROL_PORT |= 1<<BS1_PAGEL;
    1bfc:	5b 9a       	sbi	0x0b, 3	; 11
	DATA_PORT = ((address & 0xFF00) >> 8);
    1bfe:	90 93 0b 01 	sts	0x010B, r25
    1c02:	82 e4       	ldi	r24, 0x42	; 66
    1c04:	8a 95       	dec	r24
    1c06:	f1 f7       	brne	.-4      	; 0x1c04 <LoadHighAddress+0xe>
    1c08:	00 c0       	rjmp	.+0      	; 0x1c0a <LoadHighAddress+0x14>
	_delay_us(25);
	CONTROL_PORT |= 1<<XTAL1;
    1c0a:	58 9a       	sbi	0x0b, 0	; 11
    1c0c:	82 e4       	ldi	r24, 0x42	; 66
    1c0e:	8a 95       	dec	r24
    1c10:	f1 f7       	brne	.-4      	; 0x1c0e <LoadHighAddress+0x18>
    1c12:	00 c0       	rjmp	.+0      	; 0x1c14 <LoadHighAddress+0x1e>
	_delay_us(25);
	CONTROL_PORT &= ~(1<<XTAL1);
    1c14:	58 98       	cbi	0x0b, 0	; 11
    1c16:	82 e4       	ldi	r24, 0x42	; 66
    1c18:	8a 95       	dec	r24
    1c1a:	f1 f7       	brne	.-4      	; 0x1c18 <LoadHighAddress+0x22>
    1c1c:	00 c0       	rjmp	.+0      	; 0x1c1e <LoadHighAddress+0x28>
    1c1e:	08 95       	ret

00001c20 <LatchData>:
	_delay_us(25);
}

void LatchData(void)
{
	CONTROL_PORT |= (1<<BS1_PAGEL);
    1c20:	5b 9a       	sbi	0x0b, 3	; 11
    1c22:	82 e4       	ldi	r24, 0x42	; 66
    1c24:	8a 95       	dec	r24
    1c26:	f1 f7       	brne	.-4      	; 0x1c24 <LatchData+0x4>
    1c28:	00 c0       	rjmp	.+0      	; 0x1c2a <LatchData+0xa>
	_delay_us(25);
	CONTROL_PORT |= (1<<PAGEL);
    1c2a:	5e 9a       	sbi	0x0b, 6	; 11
    1c2c:	82 e4       	ldi	r24, 0x42	; 66
    1c2e:	8a 95       	dec	r24
    1c30:	f1 f7       	brne	.-4      	; 0x1c2e <LatchData+0xe>
    1c32:	00 c0       	rjmp	.+0      	; 0x1c34 <LatchData+0x14>
	_delay_us(25);
	CONTROL_PORT &= ~(1<<PAGEL);
    1c34:	5e 98       	cbi	0x0b, 6	; 11
    1c36:	82 e4       	ldi	r24, 0x42	; 66
    1c38:	8a 95       	dec	r24
    1c3a:	f1 f7       	brne	.-4      	; 0x1c38 <LatchData+0x18>
    1c3c:	00 c0       	rjmp	.+0      	; 0x1c3e <LatchData+0x1e>
    1c3e:	08 95       	ret

00001c40 <ProgramPage>:
}

void ProgramPage(void)
{
	//G: Program Page
	CONTROL_PORT &= ~(1<<BS2);
    1c40:	5f 98       	cbi	0x0b, 7	; 11
	CONTROL_PORT &= ~(1<<BS1_PAGEL);
    1c42:	5b 98       	cbi	0x0b, 3	; 11
	CONTROL_PORT &= ~(1<<WR);
    1c44:	5a 98       	cbi	0x0b, 2	; 11
    1c46:	82 e4       	ldi	r24, 0x42	; 66
    1c48:	8a 95       	dec	r24
    1c4a:	f1 f7       	brne	.-4      	; 0x1c48 <ProgramPage+0x8>
    1c4c:	00 c0       	rjmp	.+0      	; 0x1c4e <ProgramPage+0xe>
	_delay_us(25);
	CONTROL_PORT |= 1<<WR;
    1c4e:	5a 9a       	sbi	0x0b, 2	; 11
    1c50:	82 e4       	ldi	r24, 0x42	; 66
    1c52:	8a 95       	dec	r24
    1c54:	f1 f7       	brne	.-4      	; 0x1c52 <ProgramPage+0x12>
    1c56:	00 c0       	rjmp	.+0      	; 0x1c58 <ProgramPage+0x18>
	_delay_us(25);
	while(!(RDY_BSY_In & (1<<RDY_BSY)));
    1c58:	30 9b       	sbis	0x06, 0	; 6
    1c5a:	fe cf       	rjmp	.-4      	; 0x1c58 <ProgramPage+0x18>
}
    1c5c:	08 95       	ret

00001c5e <EndPageProgramming>:

void EndPageProgramming(void)
{
	//I: End Page Programming
	CONTROL_PORT |= 1<<XA1_BS2;
    1c5e:	5d 9a       	sbi	0x0b, 5	; 11
	CONTROL_PORT &= ~(1<<XA0);
    1c60:	5c 98       	cbi	0x0b, 4	; 11
	DATA_PORT = 0x00;
    1c62:	10 92 0b 01 	sts	0x010B, r1
    1c66:	82 e4       	ldi	r24, 0x42	; 66
    1c68:	8a 95       	dec	r24
    1c6a:	f1 f7       	brne	.-4      	; 0x1c68 <EndPageProgramming+0xa>
    1c6c:	00 c0       	rjmp	.+0      	; 0x1c6e <EndPageProgramming+0x10>
	_delay_us(25);
	CONTROL_PORT |= 1<<XTAL1;
    1c6e:	58 9a       	sbi	0x0b, 0	; 11
    1c70:	82 e4       	ldi	r24, 0x42	; 66
    1c72:	8a 95       	dec	r24
    1c74:	f1 f7       	brne	.-4      	; 0x1c72 <EndPageProgramming+0x14>
    1c76:	00 c0       	rjmp	.+0      	; 0x1c78 <EndPageProgramming+0x1a>
	_delay_us(25);
	CONTROL_PORT &= ~(1<<XTAL1);
    1c78:	58 98       	cbi	0x0b, 0	; 11
    1c7a:	82 e4       	ldi	r24, 0x42	; 66
    1c7c:	8a 95       	dec	r24
    1c7e:	f1 f7       	brne	.-4      	; 0x1c7c <EndPageProgramming+0x1e>
    1c80:	00 c0       	rjmp	.+0      	; 0x1c82 <EndPageProgramming+0x24>
    1c82:	08 95       	ret

00001c84 <EnableProgMode>:
	_delay_us(25);
}

void EnableProgMode(uint32_t TargetMicrocontroller)
{
    1c84:	cf 92       	push	r12
    1c86:	df 92       	push	r13
    1c88:	ef 92       	push	r14
    1c8a:	ff 92       	push	r15
    1c8c:	6b 01       	movw	r12, r22
    1c8e:	7c 01       	movw	r14, r24
	CONTROL_PORT &= ~(1<<XTAL1);
    1c90:	58 98       	cbi	0x0b, 0	; 11
	CONTROL_PORT &= ~(1<<XA1_BS2 | 1<<XA0 | 1<<BS1_PAGEL | 1<<WR | PAGEL);
    1c92:	8b b1       	in	r24, 0x0b	; 11
    1c94:	81 7c       	andi	r24, 0xC1	; 193
    1c96:	8b b9       	out	0x0b, r24	; 11
	DATA_PORT = 0x00;
    1c98:	10 92 0b 01 	sts	0x010B, r1
	CONTROL_PORT = 0x00;
    1c9c:	1b b8       	out	0x0b, r1	; 11
	
	WR_PORT &= ~(1<<FPGAWR);
    1c9e:	e5 e0       	ldi	r30, 0x05	; 5
    1ca0:	f1 e0       	ldi	r31, 0x01	; 1
    1ca2:	80 81       	ld	r24, Z
    1ca4:	8b 7f       	andi	r24, 0xFB	; 251
    1ca6:	80 83       	st	Z, r24
	FPGA_Write(TargetMicrocontroller);
    1ca8:	c7 01       	movw	r24, r14
    1caa:	b6 01       	movw	r22, r12
    1cac:	3f d8       	rcall	.-3970   	; 0xd2c <FPGA_Write>
	
	switch (TargetMicrocontroller)
    1cae:	8a e0       	ldi	r24, 0x0A	; 10
    1cb0:	c8 16       	cp	r12, r24
    1cb2:	81 e9       	ldi	r24, 0x91	; 145
    1cb4:	d8 06       	cpc	r13, r24
    1cb6:	8e e1       	ldi	r24, 0x1E	; 30
    1cb8:	e8 06       	cpc	r14, r24
    1cba:	f1 04       	cpc	r15, r1
    1cbc:	49 f0       	breq	.+18     	; 0x1cd0 <EnableProgMode+0x4c>
    1cbe:	91 e1       	ldi	r25, 0x11	; 17
    1cc0:	c9 16       	cp	r12, r25
    1cc2:	95 e9       	ldi	r25, 0x95	; 149
    1cc4:	d9 06       	cpc	r13, r25
    1cc6:	9e e1       	ldi	r25, 0x1E	; 30
    1cc8:	e9 06       	cpc	r14, r25
    1cca:	f1 04       	cpc	r15, r1
    1ccc:	19 f0       	breq	.+6      	; 0x1cd4 <EnableProgMode+0x50>
    1cce:	03 c0       	rjmp	.+6      	; 0x1cd6 <EnableProgMode+0x52>
	{
		case ATtiny2313 :
			setAtTiny2313();
    1cd0:	38 d9       	rcall	.-3472   	; 0xf42 <setAtTiny2313>
			break;
    1cd2:	01 c0       	rjmp	.+2      	; 0x1cd6 <EnableProgMode+0x52>
		case ATmega324PA :
			setAtMega324PA();
    1cd4:	7f d9       	rcall	.-3330   	; 0xfd4 <setAtMega324PA>
    1cd6:	87 ec       	ldi	r24, 0xC7	; 199
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	01 97       	sbiw	r24, 0x01	; 1
    1cdc:	f1 f7       	brne	.-4      	; 0x1cda <EnableProgMode+0x56>
    1cde:	00 c0       	rjmp	.+0      	; 0x1ce0 <EnableProgMode+0x5c>
    1ce0:	00 00       	nop
		default:
			break;
	}
	
	_delay_us(100);
	enableVppRegulator();
    1ce2:	cd d9       	rcall	.-3174   	; 0x107e <enableVppRegulator>
    1ce4:	95 e8       	ldi	r25, 0x85	; 133
    1ce6:	9a 95       	dec	r25
    1ce8:	f1 f7       	brne	.-4      	; 0x1ce6 <EnableProgMode+0x62>
    1cea:	00 00       	nop
	_delay_us(50);
	CONTROL_PORT |= (1<<WR | 1<<OE);
    1cec:	8b b1       	in	r24, 0x0b	; 11
    1cee:	86 60       	ori	r24, 0x06	; 6
    1cf0:	8b b9       	out	0x0b, r24	; 11
    1cf2:	87 ee       	ldi	r24, 0xE7	; 231
    1cf4:	93 e0       	ldi	r25, 0x03	; 3
    1cf6:	01 97       	sbiw	r24, 0x01	; 1
    1cf8:	f1 f7       	brne	.-4      	; 0x1cf6 <EnableProgMode+0x72>
    1cfa:	00 c0       	rjmp	.+0      	; 0x1cfc <EnableProgMode+0x78>
    1cfc:	00 00       	nop
	_delay_us(500);
}
    1cfe:	ff 90       	pop	r15
    1d00:	ef 90       	pop	r14
    1d02:	df 90       	pop	r13
    1d04:	cf 90       	pop	r12
    1d06:	08 95       	ret

00001d08 <ReadSignatureBytes>:
char* ReadSignatureBytes(void)
{
	static char SignatureBytes[3];
	
	//A: Load Command "Read Signature Bytes"
	LoadCommand(READ_SIG_BYTE);
    1d08:	88 e0       	ldi	r24, 0x08	; 8
    1d0a:	26 df       	rcall	.-436    	; 0x1b58 <LoadCommand>
	
	//B: Load Address Low Byte
	CONTROL_PORT &= ~(1<<XA1_BS2);
    1d0c:	5d 98       	cbi	0x0b, 5	; 11
	CONTROL_PORT &= ~(1<<XA0);
    1d0e:	5c 98       	cbi	0x0b, 4	; 11
	CONTROL_PORT &= ~(1<<BS1_PAGEL);
    1d10:	5b 98       	cbi	0x0b, 3	; 11
	DATA_PORT = 0x00;
    1d12:	10 92 0b 01 	sts	0x010B, r1
    1d16:	87 ec       	ldi	r24, 0xC7	; 199
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	01 97       	sbiw	r24, 0x01	; 1
    1d1c:	f1 f7       	brne	.-4      	; 0x1d1a <ReadSignatureBytes+0x12>
    1d1e:	00 c0       	rjmp	.+0      	; 0x1d20 <ReadSignatureBytes+0x18>
    1d20:	00 00       	nop
	_delay_us(100);
	CONTROL_PORT |= 1<<XTAL1;
    1d22:	58 9a       	sbi	0x0b, 0	; 11
    1d24:	92 e4       	ldi	r25, 0x42	; 66
    1d26:	9a 95       	dec	r25
    1d28:	f1 f7       	brne	.-4      	; 0x1d26 <ReadSignatureBytes+0x1e>
    1d2a:	00 c0       	rjmp	.+0      	; 0x1d2c <ReadSignatureBytes+0x24>
	_delay_us(25);
	CONTROL_PORT &= ~(1<<XTAL1);
    1d2c:	58 98       	cbi	0x0b, 0	; 11
    1d2e:	87 ec       	ldi	r24, 0xC7	; 199
    1d30:	90 e0       	ldi	r25, 0x00	; 0
    1d32:	01 97       	sbiw	r24, 0x01	; 1
    1d34:	f1 f7       	brne	.-4      	; 0x1d32 <ReadSignatureBytes+0x2a>
    1d36:	00 c0       	rjmp	.+0      	; 0x1d38 <ReadSignatureBytes+0x30>
    1d38:	00 00       	nop
	_delay_us(100);
	
	//Read data
	DATA_DDR = 0;
    1d3a:	10 92 0a 01 	sts	0x010A, r1
	WR_PORT |= (1<<FPGAWR);
    1d3e:	e5 e0       	ldi	r30, 0x05	; 5
    1d40:	f1 e0       	ldi	r31, 0x01	; 1
    1d42:	80 81       	ld	r24, Z
    1d44:	84 60       	ori	r24, 0x04	; 4
    1d46:	80 83       	st	Z, r24
	CONTROL_PORT &= ~(1<<OE);
    1d48:	59 98       	cbi	0x0b, 1	; 11
	CONTROL_PORT &= ~(1<<BS1_PAGEL);
    1d4a:	5b 98       	cbi	0x0b, 3	; 11
    1d4c:	87 ee       	ldi	r24, 0xE7	; 231
    1d4e:	93 e0       	ldi	r25, 0x03	; 3
    1d50:	01 97       	sbiw	r24, 0x01	; 1
    1d52:	f1 f7       	brne	.-4      	; 0x1d50 <ReadSignatureBytes+0x48>
    1d54:	00 c0       	rjmp	.+0      	; 0x1d56 <ReadSignatureBytes+0x4e>
    1d56:	00 00       	nop
	_delay_us(500);
	SignatureBytes[0] = DATA_PIN;
    1d58:	80 91 09 01 	lds	r24, 0x0109
    1d5c:	80 93 52 09 	sts	0x0952, r24
	printf("0x%02X ", SignatureBytes[0]);
    1d60:	1f 92       	push	r1
    1d62:	8f 93       	push	r24
    1d64:	84 ee       	ldi	r24, 0xE4	; 228
    1d66:	98 e0       	ldi	r25, 0x08	; 8
    1d68:	9f 93       	push	r25
    1d6a:	8f 93       	push	r24
    1d6c:	41 d3       	rcall	.+1666   	; 0x23f0 <printf>
	CONTROL_PORT |= 1<<OE;
    1d6e:	59 9a       	sbi	0x0b, 1	; 11
	WR_PORT &= ~(1<<FPGAWR);
    1d70:	e5 e0       	ldi	r30, 0x05	; 5
    1d72:	f1 e0       	ldi	r31, 0x01	; 1
    1d74:	80 81       	ld	r24, Z
    1d76:	8b 7f       	andi	r24, 0xFB	; 251
    1d78:	80 83       	st	Z, r24
	DATA_DDR = 0xFF;
    1d7a:	8f ef       	ldi	r24, 0xFF	; 255
    1d7c:	80 93 0a 01 	sts	0x010A, r24
    1d80:	87 ec       	ldi	r24, 0xC7	; 199
    1d82:	90 e0       	ldi	r25, 0x00	; 0
    1d84:	01 97       	sbiw	r24, 0x01	; 1
    1d86:	f1 f7       	brne	.-4      	; 0x1d84 <ReadSignatureBytes+0x7c>
    1d88:	00 c0       	rjmp	.+0      	; 0x1d8a <ReadSignatureBytes+0x82>
    1d8a:	00 00       	nop
	_delay_us(100);
	
	//Load Address Low Byte
	CONTROL_PORT &= ~(1<<XA1_BS2);
    1d8c:	5d 98       	cbi	0x0b, 5	; 11
	CONTROL_PORT &= ~(1<<XA0);
    1d8e:	5c 98       	cbi	0x0b, 4	; 11
	CONTROL_PORT &= ~(1<<BS1_PAGEL);
    1d90:	5b 98       	cbi	0x0b, 3	; 11
	DATA_PORT = 0x01;
    1d92:	81 e0       	ldi	r24, 0x01	; 1
    1d94:	80 93 0b 01 	sts	0x010B, r24
    1d98:	87 ec       	ldi	r24, 0xC7	; 199
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	01 97       	sbiw	r24, 0x01	; 1
    1d9e:	f1 f7       	brne	.-4      	; 0x1d9c <ReadSignatureBytes+0x94>
    1da0:	00 c0       	rjmp	.+0      	; 0x1da2 <ReadSignatureBytes+0x9a>
    1da2:	00 00       	nop
	_delay_us(100);
	CONTROL_PORT |= 1<<XTAL1;
    1da4:	58 9a       	sbi	0x0b, 0	; 11
    1da6:	92 e4       	ldi	r25, 0x42	; 66
    1da8:	9a 95       	dec	r25
    1daa:	f1 f7       	brne	.-4      	; 0x1da8 <ReadSignatureBytes+0xa0>
    1dac:	00 c0       	rjmp	.+0      	; 0x1dae <ReadSignatureBytes+0xa6>
	_delay_us(25);
	CONTROL_PORT &= ~(1<<XTAL1);
    1dae:	58 98       	cbi	0x0b, 0	; 11
    1db0:	87 ec       	ldi	r24, 0xC7	; 199
    1db2:	90 e0       	ldi	r25, 0x00	; 0
    1db4:	01 97       	sbiw	r24, 0x01	; 1
    1db6:	f1 f7       	brne	.-4      	; 0x1db4 <ReadSignatureBytes+0xac>
    1db8:	00 c0       	rjmp	.+0      	; 0x1dba <ReadSignatureBytes+0xb2>
    1dba:	00 00       	nop
	_delay_us(100);
	
	//Read data
	DATA_DDR = 0;
    1dbc:	10 92 0a 01 	sts	0x010A, r1
	WR_PORT |= (1<<FPGAWR);
    1dc0:	80 81       	ld	r24, Z
    1dc2:	84 60       	ori	r24, 0x04	; 4
    1dc4:	80 83       	st	Z, r24
	CONTROL_PORT &= ~(1<<OE);
    1dc6:	59 98       	cbi	0x0b, 1	; 11
	CONTROL_PORT &= ~(1<<BS1_PAGEL);
    1dc8:	5b 98       	cbi	0x0b, 3	; 11
    1dca:	87 ee       	ldi	r24, 0xE7	; 231
    1dcc:	93 e0       	ldi	r25, 0x03	; 3
    1dce:	01 97       	sbiw	r24, 0x01	; 1
    1dd0:	f1 f7       	brne	.-4      	; 0x1dce <ReadSignatureBytes+0xc6>
    1dd2:	00 c0       	rjmp	.+0      	; 0x1dd4 <ReadSignatureBytes+0xcc>
    1dd4:	00 00       	nop
	_delay_us(500);
	SignatureBytes[1] = DATA_PIN;
    1dd6:	80 91 09 01 	lds	r24, 0x0109
    1dda:	80 93 53 09 	sts	0x0953, r24
	printf("0x%02X ", SignatureBytes[1]);
    1dde:	1f 92       	push	r1
    1de0:	8f 93       	push	r24
    1de2:	84 ee       	ldi	r24, 0xE4	; 228
    1de4:	98 e0       	ldi	r25, 0x08	; 8
    1de6:	9f 93       	push	r25
    1de8:	8f 93       	push	r24
    1dea:	02 d3       	rcall	.+1540   	; 0x23f0 <printf>
	CONTROL_PORT |= 1<<OE;
    1dec:	59 9a       	sbi	0x0b, 1	; 11
	WR_PORT &= ~(1<<FPGAWR);
    1dee:	e5 e0       	ldi	r30, 0x05	; 5
    1df0:	f1 e0       	ldi	r31, 0x01	; 1
    1df2:	80 81       	ld	r24, Z
    1df4:	8b 7f       	andi	r24, 0xFB	; 251
    1df6:	80 83       	st	Z, r24
	DATA_DDR = 0xFF;
    1df8:	8f ef       	ldi	r24, 0xFF	; 255
    1dfa:	80 93 0a 01 	sts	0x010A, r24
    1dfe:	87 ec       	ldi	r24, 0xC7	; 199
    1e00:	90 e0       	ldi	r25, 0x00	; 0
    1e02:	01 97       	sbiw	r24, 0x01	; 1
    1e04:	f1 f7       	brne	.-4      	; 0x1e02 <ReadSignatureBytes+0xfa>
    1e06:	00 c0       	rjmp	.+0      	; 0x1e08 <ReadSignatureBytes+0x100>
    1e08:	00 00       	nop
	_delay_us(100);
	
	//Load Address Low Byte
	CONTROL_PORT &= ~(1<<XA1_BS2);
    1e0a:	5d 98       	cbi	0x0b, 5	; 11
	CONTROL_PORT &= ~(1<<XA0);
    1e0c:	5c 98       	cbi	0x0b, 4	; 11
	CONTROL_PORT &= ~(1<<BS1_PAGEL);
    1e0e:	5b 98       	cbi	0x0b, 3	; 11
	DATA_PORT = 0x02;
    1e10:	82 e0       	ldi	r24, 0x02	; 2
    1e12:	80 93 0b 01 	sts	0x010B, r24
    1e16:	87 ec       	ldi	r24, 0xC7	; 199
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	01 97       	sbiw	r24, 0x01	; 1
    1e1c:	f1 f7       	brne	.-4      	; 0x1e1a <ReadSignatureBytes+0x112>
    1e1e:	00 c0       	rjmp	.+0      	; 0x1e20 <ReadSignatureBytes+0x118>
    1e20:	00 00       	nop
	_delay_us(100);
	CONTROL_PORT |= 1<<XTAL1;
    1e22:	58 9a       	sbi	0x0b, 0	; 11
    1e24:	92 e4       	ldi	r25, 0x42	; 66
    1e26:	9a 95       	dec	r25
    1e28:	f1 f7       	brne	.-4      	; 0x1e26 <ReadSignatureBytes+0x11e>
    1e2a:	00 c0       	rjmp	.+0      	; 0x1e2c <ReadSignatureBytes+0x124>
	_delay_us(25);
	CONTROL_PORT &= ~(1<<XTAL1);
    1e2c:	58 98       	cbi	0x0b, 0	; 11
    1e2e:	87 ec       	ldi	r24, 0xC7	; 199
    1e30:	90 e0       	ldi	r25, 0x00	; 0
    1e32:	01 97       	sbiw	r24, 0x01	; 1
    1e34:	f1 f7       	brne	.-4      	; 0x1e32 <ReadSignatureBytes+0x12a>
    1e36:	00 c0       	rjmp	.+0      	; 0x1e38 <ReadSignatureBytes+0x130>
    1e38:	00 00       	nop
	_delay_us(100);
	
	//Read data
	DATA_DDR = 0;
    1e3a:	10 92 0a 01 	sts	0x010A, r1
	WR_PORT |= (1<<FPGAWR);
    1e3e:	80 81       	ld	r24, Z
    1e40:	84 60       	ori	r24, 0x04	; 4
    1e42:	80 83       	st	Z, r24
	CONTROL_PORT &= ~(1<<OE);
    1e44:	59 98       	cbi	0x0b, 1	; 11
	CONTROL_PORT &= ~(1<<BS1_PAGEL);
    1e46:	5b 98       	cbi	0x0b, 3	; 11
    1e48:	87 ee       	ldi	r24, 0xE7	; 231
    1e4a:	93 e0       	ldi	r25, 0x03	; 3
    1e4c:	01 97       	sbiw	r24, 0x01	; 1
    1e4e:	f1 f7       	brne	.-4      	; 0x1e4c <ReadSignatureBytes+0x144>
    1e50:	00 c0       	rjmp	.+0      	; 0x1e52 <ReadSignatureBytes+0x14a>
    1e52:	00 00       	nop
	_delay_us(500);
	SignatureBytes[2] = DATA_PIN;
    1e54:	80 91 09 01 	lds	r24, 0x0109
    1e58:	80 93 54 09 	sts	0x0954, r24
	printf("0x%02X ", SignatureBytes[2]);
    1e5c:	1f 92       	push	r1
    1e5e:	8f 93       	push	r24
    1e60:	84 ee       	ldi	r24, 0xE4	; 228
    1e62:	98 e0       	ldi	r25, 0x08	; 8
    1e64:	9f 93       	push	r25
    1e66:	8f 93       	push	r24
    1e68:	c3 d2       	rcall	.+1414   	; 0x23f0 <printf>
	CONTROL_PORT |= 1<<OE;
    1e6a:	59 9a       	sbi	0x0b, 1	; 11
	WR_PORT &= ~(1<<FPGAWR);
    1e6c:	e5 e0       	ldi	r30, 0x05	; 5
    1e6e:	f1 e0       	ldi	r31, 0x01	; 1
    1e70:	80 81       	ld	r24, Z
    1e72:	8b 7f       	andi	r24, 0xFB	; 251
    1e74:	80 83       	st	Z, r24
	DATA_DDR = 0xFF;
    1e76:	8f ef       	ldi	r24, 0xFF	; 255
    1e78:	80 93 0a 01 	sts	0x010A, r24
	DATA_PORT = 0x00;
    1e7c:	10 92 0b 01 	sts	0x010B, r1
	
	return SignatureBytes;
    1e80:	8d b7       	in	r24, 0x3d	; 61
    1e82:	9e b7       	in	r25, 0x3e	; 62
    1e84:	0c 96       	adiw	r24, 0x0c	; 12
    1e86:	0f b6       	in	r0, 0x3f	; 63
    1e88:	f8 94       	cli
    1e8a:	9e bf       	out	0x3e, r25	; 62
    1e8c:	0f be       	out	0x3f, r0	; 63
    1e8e:	8d bf       	out	0x3d, r24	; 61
}
    1e90:	82 e5       	ldi	r24, 0x52	; 82
    1e92:	99 e0       	ldi	r25, 0x09	; 9
    1e94:	08 95       	ret

00001e96 <ReadFlash>:

void ReadFlash(void)
{
    1e96:	bf 92       	push	r11
    1e98:	cf 92       	push	r12
    1e9a:	df 92       	push	r13
    1e9c:	ef 92       	push	r14
    1e9e:	ff 92       	push	r15
    1ea0:	0f 93       	push	r16
    1ea2:	1f 93       	push	r17
    1ea4:	cf 93       	push	r28
    1ea6:	df 93       	push	r29
	char DataValueIn = 0;
	
	//A: Load Command "Read Flash"
	LoadCommand(READ_FLASH);
    1ea8:	82 e0       	ldi	r24, 0x02	; 2
    1eaa:	56 de       	rcall	.-852    	; 0x1b58 <LoadCommand>
	
	for (unsigned int LowAddressByte = 0; LowAddressByte < 16; LowAddressByte++)
    1eac:	c0 e0       	ldi	r28, 0x00	; 0
    1eae:	d0 e0       	ldi	r29, 0x00	; 0
		
		//B: Load Address Low Byte
		LoadLowAddress(LowAddressByte);
		
		//Read data
		DATA_DDR = 0;
    1eb0:	0f 2e       	mov	r0, r31
    1eb2:	fa e0       	ldi	r31, 0x0A	; 10
    1eb4:	cf 2e       	mov	r12, r31
    1eb6:	dd 24       	eor	r13, r13
    1eb8:	d3 94       	inc	r13
    1eba:	f0 2d       	mov	r31, r0
		WR_PORT |= (1<<FPGAWR);
    1ebc:	05 e0       	ldi	r16, 0x05	; 5
    1ebe:	11 e0       	ldi	r17, 0x01	; 1
		CONTROL_PORT &= ~(1<<OE);
		CONTROL_PORT &= ~(1<<BS1_PAGEL); //Reading flash word low byte
		_delay_us(500);
		DataValueIn = DATA_PIN;
    1ec0:	0f 2e       	mov	r0, r31
    1ec2:	f9 e0       	ldi	r31, 0x09	; 9
    1ec4:	ef 2e       	mov	r14, r31
    1ec6:	ff 24       	eor	r15, r15
    1ec8:	f3 94       	inc	r15
    1eca:	f0 2d       	mov	r31, r0
		_delay_us(500);
		DataValueIn = DATA_PIN;
		//printf("0x%02X ", DataValueIn);
		CONTROL_PORT |= 1<<OE;
		WR_PORT &= ~(1<<FPGAWR);
		DATA_DDR = 0xFF;
    1ecc:	bb 24       	eor	r11, r11
    1ece:	ba 94       	dec	r11
	LoadCommand(READ_FLASH);
	
	for (unsigned int LowAddressByte = 0; LowAddressByte < 16; LowAddressByte++)
	{
		//F: Load Address High Byte
		LoadHighAddress(0x00);
    1ed0:	80 e0       	ldi	r24, 0x00	; 0
    1ed2:	90 e0       	ldi	r25, 0x00	; 0
    1ed4:	90 de       	rcall	.-736    	; 0x1bf6 <LoadHighAddress>
		
		//B: Load Address Low Byte
		LoadLowAddress(LowAddressByte);
    1ed6:	ce 01       	movw	r24, r28
    1ed8:	79 de       	rcall	.-782    	; 0x1bcc <LoadLowAddress>
		
		//Read data
		DATA_DDR = 0;
    1eda:	f6 01       	movw	r30, r12
    1edc:	10 82       	st	Z, r1
		WR_PORT |= (1<<FPGAWR);
    1ede:	f8 01       	movw	r30, r16
    1ee0:	80 81       	ld	r24, Z
    1ee2:	84 60       	ori	r24, 0x04	; 4
    1ee4:	80 83       	st	Z, r24
		CONTROL_PORT &= ~(1<<OE);
    1ee6:	59 98       	cbi	0x0b, 1	; 11
		CONTROL_PORT &= ~(1<<BS1_PAGEL); //Reading flash word low byte
    1ee8:	5b 98       	cbi	0x0b, 3	; 11
    1eea:	87 ee       	ldi	r24, 0xE7	; 231
    1eec:	93 e0       	ldi	r25, 0x03	; 3
    1eee:	01 97       	sbiw	r24, 0x01	; 1
    1ef0:	f1 f7       	brne	.-4      	; 0x1eee <ReadFlash+0x58>
    1ef2:	00 c0       	rjmp	.+0      	; 0x1ef4 <ReadFlash+0x5e>
    1ef4:	00 00       	nop
		_delay_us(500);
		DataValueIn = DATA_PIN;
    1ef6:	f7 01       	movw	r30, r14
    1ef8:	80 81       	ld	r24, Z
		//printf("0x%02X ", DataValueIn);
		CONTROL_PORT |= 1<<BS1_PAGEL; //Reading flash word high byte
    1efa:	5b 9a       	sbi	0x0b, 3	; 11
    1efc:	87 ee       	ldi	r24, 0xE7	; 231
    1efe:	93 e0       	ldi	r25, 0x03	; 3
    1f00:	01 97       	sbiw	r24, 0x01	; 1
    1f02:	f1 f7       	brne	.-4      	; 0x1f00 <ReadFlash+0x6a>
    1f04:	00 c0       	rjmp	.+0      	; 0x1f06 <ReadFlash+0x70>
    1f06:	00 00       	nop
		_delay_us(500);
		DataValueIn = DATA_PIN;
    1f08:	f7 01       	movw	r30, r14
    1f0a:	80 81       	ld	r24, Z
		//printf("0x%02X ", DataValueIn);
		CONTROL_PORT |= 1<<OE;
    1f0c:	59 9a       	sbi	0x0b, 1	; 11
		WR_PORT &= ~(1<<FPGAWR);
    1f0e:	f8 01       	movw	r30, r16
    1f10:	80 81       	ld	r24, Z
    1f12:	8b 7f       	andi	r24, 0xFB	; 251
    1f14:	80 83       	st	Z, r24
		DATA_DDR = 0xFF;
    1f16:	f6 01       	movw	r30, r12
    1f18:	b0 82       	st	Z, r11
    1f1a:	f2 e4       	ldi	r31, 0x42	; 66
    1f1c:	fa 95       	dec	r31
    1f1e:	f1 f7       	brne	.-4      	; 0x1f1c <ReadFlash+0x86>
    1f20:	00 c0       	rjmp	.+0      	; 0x1f22 <ReadFlash+0x8c>
	char DataValueIn = 0;
	
	//A: Load Command "Read Flash"
	LoadCommand(READ_FLASH);
	
	for (unsigned int LowAddressByte = 0; LowAddressByte < 16; LowAddressByte++)
    1f22:	21 96       	adiw	r28, 0x01	; 1
    1f24:	c0 31       	cpi	r28, 0x10	; 16
    1f26:	d1 05       	cpc	r29, r1
    1f28:	99 f6       	brne	.-90     	; 0x1ed0 <ReadFlash+0x3a>
		CONTROL_PORT |= 1<<OE;
		WR_PORT &= ~(1<<FPGAWR);
		DATA_DDR = 0xFF;
		_delay_us(25);
	}
}
    1f2a:	df 91       	pop	r29
    1f2c:	cf 91       	pop	r28
    1f2e:	1f 91       	pop	r17
    1f30:	0f 91       	pop	r16
    1f32:	ff 90       	pop	r15
    1f34:	ef 90       	pop	r14
    1f36:	df 90       	pop	r13
    1f38:	cf 90       	pop	r12
    1f3a:	bf 90       	pop	r11
    1f3c:	08 95       	ret

00001f3e <VerifyFlash>:

int VerifyFlash(void)
{
    1f3e:	2f 92       	push	r2
    1f40:	3f 92       	push	r3
    1f42:	4f 92       	push	r4
    1f44:	5f 92       	push	r5
    1f46:	6f 92       	push	r6
    1f48:	7f 92       	push	r7
    1f4a:	8f 92       	push	r8
    1f4c:	9f 92       	push	r9
    1f4e:	af 92       	push	r10
    1f50:	bf 92       	push	r11
    1f52:	cf 92       	push	r12
    1f54:	df 92       	push	r13
    1f56:	ef 92       	push	r14
    1f58:	ff 92       	push	r15
    1f5a:	0f 93       	push	r16
    1f5c:	1f 93       	push	r17
    1f5e:	cf 93       	push	r28
    1f60:	df 93       	push	r29
	resetRAMOffset(); 
    1f62:	c7 db       	rcall	.-2162   	; 0x16f2 <resetRAMOffset>
	uint16_t byteCount;
	uint16_t address;
	uint16_t data;
	//Keep looping until the hexRow is the end of file or we hit the end of a page
	
	LoadCommand(READ_FLASH);
    1f64:	82 e0       	ldi	r24, 0x02	; 2
    1f66:	f8 dd       	rcall	.-1040   	; 0x1b58 <LoadCommand>
			//printf("\nAddress: 0x%04X\n",(address + j));
			j++;
			
			//Read data
			DATA_DDR = 0;
			WR_PORT |= (1<<FPGAWR);
    1f68:	05 e0       	ldi	r16, 0x05	; 5
    1f6a:	11 e0       	ldi	r17, 0x01	; 1
			CONTROL_PORT &= ~(1<<OE);
			CONTROL_PORT &= ~(1<<BS1_PAGEL); //Reading flash word low byte
			_delay_us(500);
			DataValueIn = DATA_PIN;
    1f6c:	0f 2e       	mov	r0, r31
    1f6e:	f9 e0       	ldi	r31, 0x09	; 9
    1f70:	af 2e       	mov	r10, r31
    1f72:	bb 24       	eor	r11, r11
    1f74:	b3 94       	inc	r11
    1f76:	f0 2d       	mov	r31, r0
	
	LoadCommand(READ_FLASH);
	
	while(1)
	{
		hexRow = getHexRow();
    1f78:	c1 db       	rcall	.-2174   	; 0x16fc <getHexRow>
    1f7a:	4c 01       	movw	r8, r24
		
		//printf("We're here now\n");
		
		if(hexRow[RECORD_TYPE] == TYPE_END_OF_FILE)
    1f7c:	fc 01       	movw	r30, r24
    1f7e:	84 81       	ldd	r24, Z+4	; 0x04
    1f80:	81 30       	cpi	r24, 0x01	; 1
    1f82:	09 f4       	brne	.+2      	; 0x1f86 <VerifyFlash+0x48>
    1f84:	5b c0       	rjmp	.+182    	; 0x203c <VerifyFlash+0xfe>
		{
			return 1;
		}
		
		byteCount = (hexRow[BYTE_COUNT]);
    1f86:	81 81       	ldd	r24, Z+1	; 0x01
    1f88:	68 2e       	mov	r6, r24
    1f8a:	71 2c       	mov	r7, r1
		address = hexRow[ADDRESS_H];
    1f8c:	22 80       	ldd	r2, Z+2	; 0x02
    1f8e:	31 2c       	mov	r3, r1
		address <<= 8;
    1f90:	32 2c       	mov	r3, r2
    1f92:	22 24       	eor	r2, r2
		address |= (hexRow[ADDRESS_L]);
    1f94:	83 81       	ldd	r24, Z+3	; 0x03
    1f96:	28 2a       	or	r2, r24
		address /= 2;
    1f98:	36 94       	lsr	r3
    1f9a:	27 94       	ror	r2
		
		int j =0;
		for(int i=0; i<byteCount; i+=2)
    1f9c:	61 14       	cp	r6, r1
    1f9e:	71 04       	cpc	r7, r1
    1fa0:	59 f3       	breq	.-42     	; 0x1f78 <VerifyFlash+0x3a>
    1fa2:	64 01       	movw	r12, r8
    1fa4:	f5 e0       	ldi	r31, 0x05	; 5
    1fa6:	cf 0e       	add	r12, r31
    1fa8:	d1 1c       	adc	r13, r1
    1faa:	71 01       	movw	r14, r2
    1fac:	41 2c       	mov	r4, r1
    1fae:	51 2c       	mov	r5, r1
    1fb0:	80 e0       	ldi	r24, 0x00	; 0
    1fb2:	c8 2f       	mov	r28, r24
    1fb4:	90 e0       	ldi	r25, 0x00	; 0
    1fb6:	d9 2f       	mov	r29, r25
		{
			LoadHighAddress(address);
    1fb8:	c1 01       	movw	r24, r2
    1fba:	1d de       	rcall	.-966    	; 0x1bf6 <LoadHighAddress>
			LoadLowAddress(address + j);
    1fbc:	c7 01       	movw	r24, r14
    1fbe:	06 de       	rcall	.-1012   	; 0x1bcc <LoadLowAddress>
			//printf("\nAddress: 0x%04X\n",(address + j));
			j++;
			
			//Read data
			DATA_DDR = 0;
    1fc0:	ea e0       	ldi	r30, 0x0A	; 10
    1fc2:	f1 e0       	ldi	r31, 0x01	; 1
    1fc4:	10 82       	st	Z, r1
			WR_PORT |= (1<<FPGAWR);
    1fc6:	f8 01       	movw	r30, r16
    1fc8:	80 81       	ld	r24, Z
    1fca:	84 60       	ori	r24, 0x04	; 4
    1fcc:	80 83       	st	Z, r24
			CONTROL_PORT &= ~(1<<OE);
    1fce:	59 98       	cbi	0x0b, 1	; 11
			CONTROL_PORT &= ~(1<<BS1_PAGEL); //Reading flash word low byte
    1fd0:	5b 98       	cbi	0x0b, 3	; 11
    1fd2:	87 ee       	ldi	r24, 0xE7	; 231
    1fd4:	93 e0       	ldi	r25, 0x03	; 3
    1fd6:	01 97       	sbiw	r24, 0x01	; 1
    1fd8:	f1 f7       	brne	.-4      	; 0x1fd6 <VerifyFlash+0x98>
    1fda:	00 c0       	rjmp	.+0      	; 0x1fdc <VerifyFlash+0x9e>
    1fdc:	00 00       	nop
			_delay_us(500);
			DataValueIn = DATA_PIN;
    1fde:	f5 01       	movw	r30, r10
    1fe0:	80 81       	ld	r24, Z
			//printf("0x%02X ", DataValueIn);
			if (DataValueIn != hexRow[DATA_BEGIN + i])
    1fe2:	f6 01       	movw	r30, r12
    1fe4:	90 81       	ld	r25, Z
    1fe6:	98 13       	cpse	r25, r24
    1fe8:	2c c0       	rjmp	.+88     	; 0x2042 <VerifyFlash+0x104>
			{
				return 0;
			}
			CONTROL_PORT |= 1<<BS1_PAGEL; //Reading flash word high byte
    1fea:	5b 9a       	sbi	0x0b, 3	; 11
    1fec:	87 ee       	ldi	r24, 0xE7	; 231
    1fee:	93 e0       	ldi	r25, 0x03	; 3
    1ff0:	01 97       	sbiw	r24, 0x01	; 1
    1ff2:	f1 f7       	brne	.-4      	; 0x1ff0 <VerifyFlash+0xb2>
    1ff4:	00 c0       	rjmp	.+0      	; 0x1ff6 <VerifyFlash+0xb8>
    1ff6:	00 00       	nop
			_delay_us(500);
			DataValueIn = DATA_PIN;
    1ff8:	f5 01       	movw	r30, r10
    1ffa:	80 81       	ld	r24, Z
			//printf("0x%02X ", DataValueIn);
			if (DataValueIn != hexRow[DATA_BEGIN + i + 1])
    1ffc:	f4 01       	movw	r30, r8
    1ffe:	e4 0d       	add	r30, r4
    2000:	f5 1d       	adc	r31, r5
    2002:	96 81       	ldd	r25, Z+6	; 0x06
    2004:	98 13       	cpse	r25, r24
    2006:	20 c0       	rjmp	.+64     	; 0x2048 <VerifyFlash+0x10a>
			{
				return 0;
			}
			CONTROL_PORT |= 1<<OE;
    2008:	59 9a       	sbi	0x0b, 1	; 11
			WR_PORT &= ~(1<<FPGAWR);
    200a:	f8 01       	movw	r30, r16
    200c:	80 81       	ld	r24, Z
    200e:	8b 7f       	andi	r24, 0xFB	; 251
    2010:	80 83       	st	Z, r24
			DATA_DDR = 0xFF;
    2012:	8f ef       	ldi	r24, 0xFF	; 255
    2014:	ea e0       	ldi	r30, 0x0A	; 10
    2016:	f1 e0       	ldi	r31, 0x01	; 1
    2018:	80 83       	st	Z, r24
    201a:	92 e4       	ldi	r25, 0x42	; 66
    201c:	9a 95       	dec	r25
    201e:	f1 f7       	brne	.-4      	; 0x201c <VerifyFlash+0xde>
    2020:	00 c0       	rjmp	.+0      	; 0x2022 <VerifyFlash+0xe4>
		address <<= 8;
		address |= (hexRow[ADDRESS_L]);
		address /= 2;
		
		int j =0;
		for(int i=0; i<byteCount; i+=2)
    2022:	22 96       	adiw	r28, 0x02	; 2
    2024:	2e 01       	movw	r4, r28
    2026:	ef ef       	ldi	r30, 0xFF	; 255
    2028:	ee 1a       	sub	r14, r30
    202a:	fe 0a       	sbc	r15, r30
    202c:	f2 e0       	ldi	r31, 0x02	; 2
    202e:	cf 0e       	add	r12, r31
    2030:	d1 1c       	adc	r13, r1
    2032:	c6 15       	cp	r28, r6
    2034:	d7 05       	cpc	r29, r7
    2036:	08 f4       	brcc	.+2      	; 0x203a <VerifyFlash+0xfc>
    2038:	bf cf       	rjmp	.-130    	; 0x1fb8 <VerifyFlash+0x7a>
    203a:	9e cf       	rjmp	.-196    	; 0x1f78 <VerifyFlash+0x3a>
		
		//printf("We're here now\n");
		
		if(hexRow[RECORD_TYPE] == TYPE_END_OF_FILE)
		{
			return 1;
    203c:	81 e0       	ldi	r24, 0x01	; 1
    203e:	90 e0       	ldi	r25, 0x00	; 0
    2040:	05 c0       	rjmp	.+10     	; 0x204c <VerifyFlash+0x10e>
			_delay_us(500);
			DataValueIn = DATA_PIN;
			//printf("0x%02X ", DataValueIn);
			if (DataValueIn != hexRow[DATA_BEGIN + i])
			{
				return 0;
    2042:	80 e0       	ldi	r24, 0x00	; 0
    2044:	90 e0       	ldi	r25, 0x00	; 0
    2046:	02 c0       	rjmp	.+4      	; 0x204c <VerifyFlash+0x10e>
			_delay_us(500);
			DataValueIn = DATA_PIN;
			//printf("0x%02X ", DataValueIn);
			if (DataValueIn != hexRow[DATA_BEGIN + i + 1])
			{
				return 0;
    2048:	80 e0       	ldi	r24, 0x00	; 0
    204a:	90 e0       	ldi	r25, 0x00	; 0
			WR_PORT &= ~(1<<FPGAWR);
			DATA_DDR = 0xFF;
			_delay_us(25);
		}
	}
}
    204c:	df 91       	pop	r29
    204e:	cf 91       	pop	r28
    2050:	1f 91       	pop	r17
    2052:	0f 91       	pop	r16
    2054:	ff 90       	pop	r15
    2056:	ef 90       	pop	r14
    2058:	df 90       	pop	r13
    205a:	cf 90       	pop	r12
    205c:	bf 90       	pop	r11
    205e:	af 90       	pop	r10
    2060:	9f 90       	pop	r9
    2062:	8f 90       	pop	r8
    2064:	7f 90       	pop	r7
    2066:	6f 90       	pop	r6
    2068:	5f 90       	pop	r5
    206a:	4f 90       	pop	r4
    206c:	3f 90       	pop	r3
    206e:	2f 90       	pop	r2
    2070:	08 95       	ret

00002072 <ChipErase>:

void ChipErase(void)
{
	CONTROL_PORT |= 1<<XA1_BS2;
    2072:	5d 9a       	sbi	0x0b, 5	; 11
	CONTROL_PORT &= ~(1<<XA0);
    2074:	5c 98       	cbi	0x0b, 4	; 11
	CONTROL_PORT &= ~(1<<BS1_PAGEL);
    2076:	5b 98       	cbi	0x0b, 3	; 11
	DATA_PORT = 0x80;
    2078:	80 e8       	ldi	r24, 0x80	; 128
    207a:	80 93 0b 01 	sts	0x010B, r24
    207e:	82 e4       	ldi	r24, 0x42	; 66
    2080:	8a 95       	dec	r24
    2082:	f1 f7       	brne	.-4      	; 0x2080 <ChipErase+0xe>
    2084:	00 c0       	rjmp	.+0      	; 0x2086 <ChipErase+0x14>
	_delay_us(25);
	CONTROL_PORT |= 1<<XTAL1;
    2086:	58 9a       	sbi	0x0b, 0	; 11
    2088:	82 e4       	ldi	r24, 0x42	; 66
    208a:	8a 95       	dec	r24
    208c:	f1 f7       	brne	.-4      	; 0x208a <ChipErase+0x18>
    208e:	00 c0       	rjmp	.+0      	; 0x2090 <ChipErase+0x1e>
	_delay_us(25);
	CONTROL_PORT &= ~(1<<XTAL1);
    2090:	58 98       	cbi	0x0b, 0	; 11
    2092:	82 e4       	ldi	r24, 0x42	; 66
    2094:	8a 95       	dec	r24
    2096:	f1 f7       	brne	.-4      	; 0x2094 <ChipErase+0x22>
    2098:	00 c0       	rjmp	.+0      	; 0x209a <ChipErase+0x28>
	_delay_us(25);
	CONTROL_PORT &= ~(1<<WR);
    209a:	5a 98       	cbi	0x0b, 2	; 11
    209c:	82 e4       	ldi	r24, 0x42	; 66
    209e:	8a 95       	dec	r24
    20a0:	f1 f7       	brne	.-4      	; 0x209e <ChipErase+0x2c>
    20a2:	00 c0       	rjmp	.+0      	; 0x20a4 <ChipErase+0x32>
	_delay_us(25);
	CONTROL_PORT |= 1<<WR;
    20a4:	5a 9a       	sbi	0x0b, 2	; 11
    20a6:	82 e4       	ldi	r24, 0x42	; 66
    20a8:	8a 95       	dec	r24
    20aa:	f1 f7       	brne	.-4      	; 0x20a8 <ChipErase+0x36>
    20ac:	00 c0       	rjmp	.+0      	; 0x20ae <ChipErase+0x3c>
	_delay_us(25);
	while(!(RDY_BSY_In & (1<<RDY_BSY)));
    20ae:	30 9b       	sbis	0x06, 0	; 6
    20b0:	fe cf       	rjmp	.-4      	; 0x20ae <ChipErase+0x3c>
}
    20b2:	08 95       	ret

000020b4 <ProgramFlash>:

void ProgramFlash(uint32_t sigBytes)
{
    20b4:	2f 92       	push	r2
    20b6:	3f 92       	push	r3
    20b8:	4f 92       	push	r4
    20ba:	5f 92       	push	r5
    20bc:	6f 92       	push	r6
    20be:	7f 92       	push	r7
    20c0:	8f 92       	push	r8
    20c2:	9f 92       	push	r9
    20c4:	af 92       	push	r10
    20c6:	bf 92       	push	r11
    20c8:	cf 92       	push	r12
    20ca:	df 92       	push	r13
    20cc:	ef 92       	push	r14
    20ce:	ff 92       	push	r15
    20d0:	0f 93       	push	r16
    20d2:	1f 93       	push	r17
    20d4:	cf 93       	push	r28
    20d6:	df 93       	push	r29
    20d8:	cd b7       	in	r28, 0x3d	; 61
    20da:	de b7       	in	r29, 0x3e	; 62
    20dc:	28 97       	sbiw	r28, 0x08	; 8
    20de:	0f b6       	in	r0, 0x3f	; 63
    20e0:	f8 94       	cli
    20e2:	de bf       	out	0x3e, r29	; 62
    20e4:	0f be       	out	0x3f, r0	; 63
    20e6:	cd bf       	out	0x3d, r28	; 61
	uint32_t totalBytes = 0; 
	uint16_t pageSize;
	int j;
	int i; 
	//Keep looping until the hexRow is the end of file or we hit the end of a page 
	if(sigBytes == ATtiny2313)
    20e8:	6a 30       	cpi	r22, 0x0A	; 10
    20ea:	21 e9       	ldi	r18, 0x91	; 145
    20ec:	72 07       	cpc	r23, r18
    20ee:	2e e1       	ldi	r18, 0x1E	; 30
    20f0:	82 07       	cpc	r24, r18
    20f2:	91 05       	cpc	r25, r1
    20f4:	41 f4       	brne	.+16     	; 0x2106 <ProgramFlash+0x52>
	{
		printf("Page size is 16\n");
    20f6:	8c ee       	ldi	r24, 0xEC	; 236
    20f8:	98 e0       	ldi	r25, 0x08	; 8
    20fa:	90 d1       	rcall	.+800    	; 0x241c <puts>
		pageSize = 16; 
    20fc:	80 e1       	ldi	r24, 0x10	; 16
    20fe:	90 e0       	ldi	r25, 0x00	; 0
    2100:	9e 83       	std	Y+6, r25	; 0x06
    2102:	8d 83       	std	Y+5, r24	; 0x05
    2104:	0c c0       	rjmp	.+24     	; 0x211e <ProgramFlash+0x6a>
	}
	else if(sigBytes == ATmega324PA)
    2106:	61 31       	cpi	r22, 0x11	; 17
    2108:	75 49       	sbci	r23, 0x95	; 149
    210a:	8e 41       	sbci	r24, 0x1E	; 30
    210c:	91 05       	cpc	r25, r1
    210e:	39 f4       	brne	.+14     	; 0x211e <ProgramFlash+0x6a>
	{
		pageSize = 64; 
		printf("Page size is 64\n");
    2110:	8c ef       	ldi	r24, 0xFC	; 252
    2112:	98 e0       	ldi	r25, 0x08	; 8
    2114:	83 d1       	rcall	.+774    	; 0x241c <puts>
		printf("Page size is 16\n");
		pageSize = 16; 
	}
	else if(sigBytes == ATmega324PA)
	{
		pageSize = 64; 
    2116:	e0 e4       	ldi	r30, 0x40	; 64
    2118:	f0 e0       	ldi	r31, 0x00	; 0
    211a:	fe 83       	std	Y+6, r31	; 0x06
    211c:	ed 83       	std	Y+5, r30	; 0x05
		printf("Page size is 64\n");
	}
	
	LoadCommand(WRITE_FLASH);
    211e:	80 e1       	ldi	r24, 0x10	; 16
    2120:	1b dd       	rcall	.-1482   	; 0x1b58 <LoadCommand>
{
	char* hexRow;
	uint16_t byteCount;
	uint16_t address;
	uint16_t data;
	uint32_t totalBytes = 0; 
    2122:	41 2c       	mov	r4, r1
    2124:	51 2c       	mov	r5, r1
    2126:	32 01       	movw	r6, r4
			//printf("Total Bytes: %d, i: %d, j: %d\n", totalBytes, i, j);
			LatchData();
		}
		
		//Check to see if we hit the end of a page 
		if(totalBytes%pageSize == 0)
    2128:	ad 81       	ldd	r26, Y+5	; 0x05
    212a:	be 81       	ldd	r27, Y+6	; 0x06
    212c:	cd 01       	movw	r24, r26
    212e:	a0 e0       	ldi	r26, 0x00	; 0
    2130:	b0 e0       	ldi	r27, 0x00	; 0
    2132:	89 83       	std	Y+1, r24	; 0x01
    2134:	9a 83       	std	Y+2, r25	; 0x02
    2136:	ab 83       	std	Y+3, r26	; 0x03
    2138:	bc 83       	std	Y+4, r27	; 0x04
	
	LoadCommand(WRITE_FLASH);
	
	while(1)
	{
		hexRow = getHexRow();
    213a:	e0 da       	rcall	.-2624   	; 0x16fc <getHexRow>
    213c:	5c 01       	movw	r10, r24
		
		//printf("We're here now\n");
		
		if(hexRow[RECORD_TYPE] == TYPE_END_OF_FILE)
    213e:	fc 01       	movw	r30, r24
    2140:	84 81       	ldd	r24, Z+4	; 0x04
    2142:	81 30       	cpi	r24, 0x01	; 1
    2144:	89 f4       	brne	.+34     	; 0x2168 <ProgramFlash+0xb4>
		{
			printf("End of File!\n"); 
    2146:	8f e8       	ldi	r24, 0x8F	; 143
    2148:	98 e0       	ldi	r25, 0x08	; 8
    214a:	68 d1       	rcall	.+720    	; 0x241c <puts>
			ProgramPage();
		}
	}
	
	//After reaching end of file, do a final page write in case we did not fill an entire page
	if(totalBytes%pageSize != 0)
    214c:	8d 81       	ldd	r24, Y+5	; 0x05
    214e:	9e 81       	ldd	r25, Y+6	; 0x06
    2150:	9c 01       	movw	r18, r24
    2152:	40 e0       	ldi	r20, 0x00	; 0
    2154:	50 e0       	ldi	r21, 0x00	; 0
    2156:	c3 01       	movw	r24, r6
    2158:	b2 01       	movw	r22, r4
    215a:	d5 d0       	rcall	.+426    	; 0x2306 <__udivmodsi4>
    215c:	67 2b       	or	r22, r23
    215e:	68 2b       	or	r22, r24
    2160:	69 2b       	or	r22, r25
    2162:	09 f4       	brne	.+2      	; 0x2166 <ProgramFlash+0xb2>
    2164:	56 c0       	rjmp	.+172    	; 0x2212 <__stack+0x13>
    2166:	4f c0       	rjmp	.+158    	; 0x2206 <__stack+0x7>
		{
			printf("End of File!\n"); 
			break;
		}
					
		byteCount = (hexRow[BYTE_COUNT]);
    2168:	81 80       	ldd	r8, Z+1	; 0x01
    216a:	91 2c       	mov	r9, r1
		address = hexRow[ADDRESS_H];
    216c:	22 80       	ldd	r2, Z+2	; 0x02
    216e:	31 2c       	mov	r3, r1
		address <<= 8;
    2170:	32 2c       	mov	r3, r2
    2172:	22 24       	eor	r2, r2
		address |= (hexRow[ADDRESS_L]);
    2174:	83 81       	ldd	r24, Z+3	; 0x03
    2176:	28 2a       	or	r2, r24
		address /= 2; 
    2178:	36 94       	lsr	r3
    217a:	27 94       	ror	r2
		//printf("\nByteCount: %d, Address: 0x%04x\n", byteCount, address); 
		j =0;
		for(i=0; i<byteCount; i+=2)
    217c:	81 14       	cp	r8, r1
    217e:	91 04       	cpc	r9, r1
    2180:	79 f1       	breq	.+94     	; 0x21e0 <ProgramFlash+0x12c>
    2182:	85 01       	movw	r16, r10
    2184:	0b 5f       	subi	r16, 0xFB	; 251
    2186:	1f 4f       	sbci	r17, 0xFF	; 255
    2188:	71 01       	movw	r14, r2
    218a:	c1 2c       	mov	r12, r1
    218c:	d1 2c       	mov	r13, r1
    218e:	1f 82       	std	Y+7, r1	; 0x07
    2190:	18 86       	std	Y+8, r1	; 0x08
		{
			LoadLowAddress(address + j);
    2192:	c7 01       	movw	r24, r14
    2194:	1b dd       	rcall	.-1482   	; 0x1bcc <LoadLowAddress>
			//printf("Address: 0x%04X\n",(address + j));
			data = hexRow[DATA_BEGIN + i + 1];
    2196:	f5 01       	movw	r30, r10
    2198:	ec 0d       	add	r30, r12
    219a:	fd 1d       	adc	r31, r13
    219c:	86 81       	ldd	r24, Z+6	; 0x06
    219e:	90 e0       	ldi	r25, 0x00	; 0
			data <<= 8;
    21a0:	98 2f       	mov	r25, r24
    21a2:	88 27       	eor	r24, r24
			data |= hexRow[DATA_BEGIN + i];
    21a4:	f8 01       	movw	r30, r16
    21a6:	20 81       	ld	r18, Z
			WriteWord(data);
    21a8:	82 2b       	or	r24, r18
    21aa:	ea dc       	rcall	.-1580   	; 0x1b80 <WriteWord>
			//printf("Word: 0x%04X\n",(data));
			totalBytes+=i; 
    21ac:	2f 81       	ldd	r18, Y+7	; 0x07
    21ae:	38 85       	ldd	r19, Y+8	; 0x08
    21b0:	c9 01       	movw	r24, r18
    21b2:	aa 27       	eor	r26, r26
    21b4:	97 fd       	sbrc	r25, 7
    21b6:	a0 95       	com	r26
    21b8:	ba 2f       	mov	r27, r26
    21ba:	48 0e       	add	r4, r24
    21bc:	59 1e       	adc	r5, r25
    21be:	6a 1e       	adc	r6, r26
    21c0:	7b 1e       	adc	r7, r27
			j++;
			//printf("Total Bytes: %d, i: %d, j: %d\n", totalBytes, i, j);
			LatchData();
    21c2:	2e dd       	rcall	.-1444   	; 0x1c20 <LatchData>
		address <<= 8;
		address |= (hexRow[ADDRESS_L]);
		address /= 2; 
		//printf("\nByteCount: %d, Address: 0x%04x\n", byteCount, address); 
		j =0;
		for(i=0; i<byteCount; i+=2)
    21c4:	8f 81       	ldd	r24, Y+7	; 0x07
    21c6:	98 85       	ldd	r25, Y+8	; 0x08
    21c8:	02 96       	adiw	r24, 0x02	; 2
    21ca:	98 87       	std	Y+8, r25	; 0x08
    21cc:	8f 83       	std	Y+7, r24	; 0x07
    21ce:	6c 01       	movw	r12, r24
    21d0:	9f ef       	ldi	r25, 0xFF	; 255
    21d2:	e9 1a       	sub	r14, r25
    21d4:	f9 0a       	sbc	r15, r25
    21d6:	0e 5f       	subi	r16, 0xFE	; 254
    21d8:	1f 4f       	sbci	r17, 0xFF	; 255
    21da:	c8 14       	cp	r12, r8
    21dc:	d9 04       	cpc	r13, r9
    21de:	c8 f2       	brcs	.-78     	; 0x2192 <ProgramFlash+0xde>
			//printf("Total Bytes: %d, i: %d, j: %d\n", totalBytes, i, j);
			LatchData();
		}
		
		//Check to see if we hit the end of a page 
		if(totalBytes%pageSize == 0)
    21e0:	c3 01       	movw	r24, r6
    21e2:	b2 01       	movw	r22, r4
    21e4:	29 81       	ldd	r18, Y+1	; 0x01
    21e6:	3a 81       	ldd	r19, Y+2	; 0x02
    21e8:	4b 81       	ldd	r20, Y+3	; 0x03
    21ea:	5c 81       	ldd	r21, Y+4	; 0x04
    21ec:	8c d0       	rcall	.+280    	; 0x2306 <__udivmodsi4>
    21ee:	67 2b       	or	r22, r23
    21f0:	68 2b       	or	r22, r24
    21f2:	69 2b       	or	r22, r25
    21f4:	09 f0       	breq	.+2      	; 0x21f8 <ProgramFlash+0x144>
    21f6:	a1 cf       	rjmp	.-190    	; 0x213a <ProgramFlash+0x86>
		{
			printf("Full Page Written\n");
    21f8:	8c e0       	ldi	r24, 0x0C	; 12
    21fa:	99 e0       	ldi	r25, 0x09	; 9
    21fc:	0f d1       	rcall	.+542    	; 0x241c <puts>
			LoadHighAddress(address);
    21fe:	c1 01       	movw	r24, r2
    2200:	fa dc       	rcall	.-1548   	; 0x1bf6 <LoadHighAddress>
			ProgramPage();
    2202:	1e dd       	rcall	.-1476   	; 0x1c40 <ProgramPage>
    2204:	9a cf       	rjmp	.-204    	; 0x213a <ProgramFlash+0x86>
	}
	
	//After reaching end of file, do a final page write in case we did not fill an entire page
	if(totalBytes%pageSize != 0)
	{
		printf("Partial Page Written\n");
    2206:	8e e1       	ldi	r24, 0x1E	; 30
    2208:	99 e0       	ldi	r25, 0x09	; 9
    220a:	08 d1       	rcall	.+528    	; 0x241c <puts>
		LoadHighAddress(address);
    220c:	c1 01       	movw	r24, r2
    220e:	f3 dc       	rcall	.-1562   	; 0x1bf6 <LoadHighAddress>
		ProgramPage();
    2210:	17 dd       	rcall	.-1490   	; 0x1c40 <ProgramPage>
	} 
	printf("Ending Page Programming!\n");
    2212:	83 e3       	ldi	r24, 0x33	; 51
    2214:	99 e0       	ldi	r25, 0x09	; 9
    2216:	02 d1       	rcall	.+516    	; 0x241c <puts>
	EndPageProgramming();
    2218:	22 dd       	rcall	.-1468   	; 0x1c5e <EndPageProgramming>
}
    221a:	28 96       	adiw	r28, 0x08	; 8
    221c:	0f b6       	in	r0, 0x3f	; 63
    221e:	f8 94       	cli
    2220:	de bf       	out	0x3e, r29	; 62
    2222:	0f be       	out	0x3f, r0	; 63
    2224:	cd bf       	out	0x3d, r28	; 61
    2226:	df 91       	pop	r29
    2228:	cf 91       	pop	r28
    222a:	1f 91       	pop	r17
    222c:	0f 91       	pop	r16
    222e:	ff 90       	pop	r15
    2230:	ef 90       	pop	r14
    2232:	df 90       	pop	r13
    2234:	cf 90       	pop	r12
    2236:	bf 90       	pop	r11
    2238:	af 90       	pop	r10
    223a:	9f 90       	pop	r9
    223c:	8f 90       	pop	r8
    223e:	7f 90       	pop	r7
    2240:	6f 90       	pop	r6
    2242:	5f 90       	pop	r5
    2244:	4f 90       	pop	r4
    2246:	3f 90       	pop	r3
    2248:	2f 90       	pop	r2
    224a:	08 95       	ret

0000224c <ExitParallelProgrammingMode>:

void ExitParallelProgrammingMode(void)
{
	disableVppRegulator();
    224c:	0e 94 41 08 	call	0x1082	; 0x1082 <disableVppRegulator>
	disableVccRegulator();
    2250:	0e 94 45 08 	call	0x108a	; 0x108a <disableVccRegulator>
	disableVLogic();
    2254:	0e 94 65 08 	call	0x10ca	; 0x10ca <disableVLogic>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2258:	8f e0       	ldi	r24, 0x0F	; 15
    225a:	97 e2       	ldi	r25, 0x27	; 39
    225c:	01 97       	sbiw	r24, 0x01	; 1
    225e:	f1 f7       	brne	.-4      	; 0x225c <ExitParallelProgrammingMode+0x10>
    2260:	00 c0       	rjmp	.+0      	; 0x2262 <ExitParallelProgrammingMode+0x16>
    2262:	00 00       	nop
	
	_delay_ms(5);
	DATA_PORT = 0x00;
    2264:	10 92 0b 01 	sts	0x010B, r1
	CONTROL_PORT = 0x00;
    2268:	1b b8       	out	0x0b, r1	; 11
    226a:	8f ec       	ldi	r24, 0xCF	; 207
    226c:	97 e0       	ldi	r25, 0x07	; 7
    226e:	01 97       	sbiw	r24, 0x01	; 1
    2270:	f1 f7       	brne	.-4      	; 0x226e <ExitParallelProgrammingMode+0x22>
    2272:	00 c0       	rjmp	.+0      	; 0x2274 <ExitParallelProgrammingMode+0x28>
    2274:	00 00       	nop
	_delay_ms(1);
	SPI_FPGA_Write(FPGA_Disable);
    2276:	80 e0       	ldi	r24, 0x00	; 0
    2278:	0e 94 80 06 	call	0xd00	; 0xd00 <SPI_FPGA_Write>
	
	SR_CNTRL_PORT &= ~(1<<SR_RESET); //Clearing Max395s and Shift Registers
    227c:	e5 e0       	ldi	r30, 0x05	; 5
    227e:	f1 e0       	ldi	r31, 0x01	; 1
    2280:	80 81       	ld	r24, Z
    2282:	8f 7d       	andi	r24, 0xDF	; 223
    2284:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2286:	95 e3       	ldi	r25, 0x35	; 53
    2288:	9a 95       	dec	r25
    228a:	f1 f7       	brne	.-4      	; 0x2288 <ExitParallelProgrammingMode+0x3c>
    228c:	00 00       	nop
	_delay_us(20);
	SR_CNTRL_PORT |= (1<<SR_RESET);
    228e:	80 81       	ld	r24, Z
    2290:	80 62       	ori	r24, 0x20	; 32
    2292:	80 83       	st	Z, r24
    2294:	2d e0       	ldi	r18, 0x0D	; 13
    2296:	2a 95       	dec	r18
    2298:	f1 f7       	brne	.-4      	; 0x2296 <ExitParallelProgrammingMode+0x4a>
    229a:	00 00       	nop
	_delay_us(5);
	SR_CNTRL_PORT |= (1<<SRCS);
    229c:	80 81       	ld	r24, Z
    229e:	80 61       	ori	r24, 0x10	; 16
    22a0:	80 83       	st	Z, r24
    22a2:	85 e3       	ldi	r24, 0x35	; 53
    22a4:	8a 95       	dec	r24
    22a6:	f1 f7       	brne	.-4      	; 0x22a4 <ExitParallelProgrammingMode+0x58>
    22a8:	00 00       	nop
	_delay_us(20);
	SR_CNTRL_PORT &= ~(1<<SRCS);
    22aa:	80 81       	ld	r24, Z
    22ac:	8f 7e       	andi	r24, 0xEF	; 239
    22ae:	80 83       	st	Z, r24
	
	SR_CNTRL_PORT |= (1<<SROE);
    22b0:	80 81       	ld	r24, Z
    22b2:	88 60       	ori	r24, 0x08	; 8
    22b4:	80 83       	st	Z, r24
	
	LED_PORT |= ((1<<LED_Green) | (1<<LED_Yellow) | (1<<LED_Red));
    22b6:	84 b3       	in	r24, 0x14	; 20
    22b8:	87 60       	ori	r24, 0x07	; 7
    22ba:	84 bb       	out	0x14, r24	; 20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    22bc:	9f ef       	ldi	r25, 0xFF	; 255
    22be:	29 e6       	ldi	r18, 0x69	; 105
    22c0:	88 e1       	ldi	r24, 0x18	; 24
    22c2:	91 50       	subi	r25, 0x01	; 1
    22c4:	20 40       	sbci	r18, 0x00	; 0
    22c6:	80 40       	sbci	r24, 0x00	; 0
    22c8:	e1 f7       	brne	.-8      	; 0x22c2 <ExitParallelProgrammingMode+0x76>
    22ca:	00 c0       	rjmp	.+0      	; 0x22cc <ExitParallelProgrammingMode+0x80>
    22cc:	00 00       	nop
	_delay_ms(1000);
	LED_PORT |= (1<<LED_Green);
    22ce:	a0 9a       	sbi	0x14, 0	; 20
	LED_PORT &= ~((1<<LED_Yellow) | (1<<LED_Red));
    22d0:	84 b3       	in	r24, 0x14	; 20
    22d2:	89 7f       	andi	r24, 0xF9	; 249
    22d4:	84 bb       	out	0x14, r24	; 20
    22d6:	08 95       	ret

000022d8 <main>:
    22d8:	2f ef       	ldi	r18, 0xFF	; 255
    22da:	89 e6       	ldi	r24, 0x69	; 105
    22dc:	98 e1       	ldi	r25, 0x18	; 24
    22de:	21 50       	subi	r18, 0x01	; 1
    22e0:	80 40       	sbci	r24, 0x00	; 0
    22e2:	90 40       	sbci	r25, 0x00	; 0
    22e4:	e1 f7       	brne	.-8      	; 0x22de <main+0x6>
    22e6:	00 c0       	rjmp	.+0      	; 0x22e8 <main+0x10>
    22e8:	00 00       	nop
#include "Program/AVR.h"

int main(void)
{
	_delay_ms(1000);
	LED_DDR |= ((1<<LED_Green) | (1<<LED_Yellow) | (1<<LED_Red));
    22ea:	83 b3       	in	r24, 0x13	; 19
    22ec:	87 60       	ori	r24, 0x07	; 7
    22ee:	83 bb       	out	0x13, r24	; 19
	LED_PORT |= (1<<LED_Green);
    22f0:	a0 9a       	sbi	0x14, 0	; 20
	connectionInit(); 
    22f2:	0e 94 bc 00 	call	0x178	; 0x178 <connectionInit>
	hexInit();
    22f6:	f1 d9       	rcall	.-3102   	; 0x16da <hexInit>
	//ethernetInit(); 
	sei(); 
    22f8:	78 94       	sei
	//Collecting garbage transmission on wi-fi module bootup 
	//receiveStatus();
	//networkConnect("Wi-Pro", "brightshoe902"); 
	//_delay_ms(100);
	//networkTest();  
	pollingInit(); 
    22fa:	0e 94 a9 00 	call	0x152	; 0x152 <pollingInit>
	//Write test file to external RAM
	//Test switching circuitry code
	
	//Program(ATmega324PA);
	
	printf("Done!\n"); 
    22fe:	8c e4       	ldi	r24, 0x4C	; 76
    2300:	99 e0       	ldi	r25, 0x09	; 9
    2302:	8c d0       	rcall	.+280    	; 0x241c <puts>
    2304:	ff cf       	rjmp	.-2      	; 0x2304 <main+0x2c>

00002306 <__udivmodsi4>:
    2306:	a1 e2       	ldi	r26, 0x21	; 33
    2308:	1a 2e       	mov	r1, r26
    230a:	aa 1b       	sub	r26, r26
    230c:	bb 1b       	sub	r27, r27
    230e:	fd 01       	movw	r30, r26
    2310:	0d c0       	rjmp	.+26     	; 0x232c <__udivmodsi4_ep>

00002312 <__udivmodsi4_loop>:
    2312:	aa 1f       	adc	r26, r26
    2314:	bb 1f       	adc	r27, r27
    2316:	ee 1f       	adc	r30, r30
    2318:	ff 1f       	adc	r31, r31
    231a:	a2 17       	cp	r26, r18
    231c:	b3 07       	cpc	r27, r19
    231e:	e4 07       	cpc	r30, r20
    2320:	f5 07       	cpc	r31, r21
    2322:	20 f0       	brcs	.+8      	; 0x232c <__udivmodsi4_ep>
    2324:	a2 1b       	sub	r26, r18
    2326:	b3 0b       	sbc	r27, r19
    2328:	e4 0b       	sbc	r30, r20
    232a:	f5 0b       	sbc	r31, r21

0000232c <__udivmodsi4_ep>:
    232c:	66 1f       	adc	r22, r22
    232e:	77 1f       	adc	r23, r23
    2330:	88 1f       	adc	r24, r24
    2332:	99 1f       	adc	r25, r25
    2334:	1a 94       	dec	r1
    2336:	69 f7       	brne	.-38     	; 0x2312 <__udivmodsi4_loop>
    2338:	60 95       	com	r22
    233a:	70 95       	com	r23
    233c:	80 95       	com	r24
    233e:	90 95       	com	r25
    2340:	9b 01       	movw	r18, r22
    2342:	ac 01       	movw	r20, r24
    2344:	bd 01       	movw	r22, r26
    2346:	cf 01       	movw	r24, r30
    2348:	08 95       	ret

0000234a <__umulhisi3>:
    234a:	a2 9f       	mul	r26, r18
    234c:	b0 01       	movw	r22, r0
    234e:	b3 9f       	mul	r27, r19
    2350:	c0 01       	movw	r24, r0
    2352:	a3 9f       	mul	r26, r19
    2354:	70 0d       	add	r23, r0
    2356:	81 1d       	adc	r24, r1
    2358:	11 24       	eor	r1, r1
    235a:	91 1d       	adc	r25, r1
    235c:	b2 9f       	mul	r27, r18
    235e:	70 0d       	add	r23, r0
    2360:	81 1d       	adc	r24, r1
    2362:	11 24       	eor	r1, r1
    2364:	91 1d       	adc	r25, r1
    2366:	08 95       	ret

00002368 <strcat>:
    2368:	fb 01       	movw	r30, r22
    236a:	dc 01       	movw	r26, r24
    236c:	0d 90       	ld	r0, X+
    236e:	00 20       	and	r0, r0
    2370:	e9 f7       	brne	.-6      	; 0x236c <strcat+0x4>
    2372:	11 97       	sbiw	r26, 0x01	; 1
    2374:	01 90       	ld	r0, Z+
    2376:	0d 92       	st	X+, r0
    2378:	00 20       	and	r0, r0
    237a:	e1 f7       	brne	.-8      	; 0x2374 <strcat+0xc>
    237c:	08 95       	ret

0000237e <strcpy>:
    237e:	fb 01       	movw	r30, r22
    2380:	dc 01       	movw	r26, r24
    2382:	01 90       	ld	r0, Z+
    2384:	0d 92       	st	X+, r0
    2386:	00 20       	and	r0, r0
    2388:	e1 f7       	brne	.-8      	; 0x2382 <strcpy+0x4>
    238a:	08 95       	ret

0000238c <fputc>:
    238c:	0f 93       	push	r16
    238e:	1f 93       	push	r17
    2390:	cf 93       	push	r28
    2392:	df 93       	push	r29
    2394:	18 2f       	mov	r17, r24
    2396:	09 2f       	mov	r16, r25
    2398:	eb 01       	movw	r28, r22
    239a:	8b 81       	ldd	r24, Y+3	; 0x03
    239c:	81 fd       	sbrc	r24, 1
    239e:	03 c0       	rjmp	.+6      	; 0x23a6 <fputc+0x1a>
    23a0:	8f ef       	ldi	r24, 0xFF	; 255
    23a2:	9f ef       	ldi	r25, 0xFF	; 255
    23a4:	20 c0       	rjmp	.+64     	; 0x23e6 <fputc+0x5a>
    23a6:	82 ff       	sbrs	r24, 2
    23a8:	10 c0       	rjmp	.+32     	; 0x23ca <fputc+0x3e>
    23aa:	4e 81       	ldd	r20, Y+6	; 0x06
    23ac:	5f 81       	ldd	r21, Y+7	; 0x07
    23ae:	2c 81       	ldd	r18, Y+4	; 0x04
    23b0:	3d 81       	ldd	r19, Y+5	; 0x05
    23b2:	42 17       	cp	r20, r18
    23b4:	53 07       	cpc	r21, r19
    23b6:	7c f4       	brge	.+30     	; 0x23d6 <fputc+0x4a>
    23b8:	e8 81       	ld	r30, Y
    23ba:	f9 81       	ldd	r31, Y+1	; 0x01
    23bc:	9f 01       	movw	r18, r30
    23be:	2f 5f       	subi	r18, 0xFF	; 255
    23c0:	3f 4f       	sbci	r19, 0xFF	; 255
    23c2:	39 83       	std	Y+1, r19	; 0x01
    23c4:	28 83       	st	Y, r18
    23c6:	10 83       	st	Z, r17
    23c8:	06 c0       	rjmp	.+12     	; 0x23d6 <fputc+0x4a>
    23ca:	e8 85       	ldd	r30, Y+8	; 0x08
    23cc:	f9 85       	ldd	r31, Y+9	; 0x09
    23ce:	81 2f       	mov	r24, r17
    23d0:	09 95       	icall
    23d2:	89 2b       	or	r24, r25
    23d4:	29 f7       	brne	.-54     	; 0x23a0 <fputc+0x14>
    23d6:	2e 81       	ldd	r18, Y+6	; 0x06
    23d8:	3f 81       	ldd	r19, Y+7	; 0x07
    23da:	2f 5f       	subi	r18, 0xFF	; 255
    23dc:	3f 4f       	sbci	r19, 0xFF	; 255
    23de:	3f 83       	std	Y+7, r19	; 0x07
    23e0:	2e 83       	std	Y+6, r18	; 0x06
    23e2:	81 2f       	mov	r24, r17
    23e4:	90 2f       	mov	r25, r16
    23e6:	df 91       	pop	r29
    23e8:	cf 91       	pop	r28
    23ea:	1f 91       	pop	r17
    23ec:	0f 91       	pop	r16
    23ee:	08 95       	ret

000023f0 <printf>:
    23f0:	cf 93       	push	r28
    23f2:	df 93       	push	r29
    23f4:	cd b7       	in	r28, 0x3d	; 61
    23f6:	de b7       	in	r29, 0x3e	; 62
    23f8:	fe 01       	movw	r30, r28
    23fa:	35 96       	adiw	r30, 0x05	; 5
    23fc:	61 91       	ld	r22, Z+
    23fe:	71 91       	ld	r23, Z+
    2400:	af 01       	movw	r20, r30
    2402:	80 91 35 0b 	lds	r24, 0x0B35
    2406:	90 91 36 0b 	lds	r25, 0x0B36
    240a:	35 d0       	rcall	.+106    	; 0x2476 <vfprintf>
    240c:	df 91       	pop	r29
    240e:	cf 91       	pop	r28
    2410:	08 95       	ret

00002412 <putchar>:
    2412:	60 91 35 0b 	lds	r22, 0x0B35
    2416:	70 91 36 0b 	lds	r23, 0x0B36
    241a:	b8 cf       	rjmp	.-144    	; 0x238c <fputc>

0000241c <puts>:
    241c:	0f 93       	push	r16
    241e:	1f 93       	push	r17
    2420:	cf 93       	push	r28
    2422:	df 93       	push	r29
    2424:	e0 91 35 0b 	lds	r30, 0x0B35
    2428:	f0 91 36 0b 	lds	r31, 0x0B36
    242c:	23 81       	ldd	r18, Z+3	; 0x03
    242e:	21 ff       	sbrs	r18, 1
    2430:	1b c0       	rjmp	.+54     	; 0x2468 <puts+0x4c>
    2432:	ec 01       	movw	r28, r24
    2434:	00 e0       	ldi	r16, 0x00	; 0
    2436:	10 e0       	ldi	r17, 0x00	; 0
    2438:	89 91       	ld	r24, Y+
    243a:	60 91 35 0b 	lds	r22, 0x0B35
    243e:	70 91 36 0b 	lds	r23, 0x0B36
    2442:	db 01       	movw	r26, r22
    2444:	18 96       	adiw	r26, 0x08	; 8
    2446:	ed 91       	ld	r30, X+
    2448:	fc 91       	ld	r31, X
    244a:	19 97       	sbiw	r26, 0x09	; 9
    244c:	88 23       	and	r24, r24
    244e:	31 f0       	breq	.+12     	; 0x245c <puts+0x40>
    2450:	09 95       	icall
    2452:	89 2b       	or	r24, r25
    2454:	89 f3       	breq	.-30     	; 0x2438 <puts+0x1c>
    2456:	0f ef       	ldi	r16, 0xFF	; 255
    2458:	1f ef       	ldi	r17, 0xFF	; 255
    245a:	ee cf       	rjmp	.-36     	; 0x2438 <puts+0x1c>
    245c:	8a e0       	ldi	r24, 0x0A	; 10
    245e:	09 95       	icall
    2460:	89 2b       	or	r24, r25
    2462:	11 f4       	brne	.+4      	; 0x2468 <puts+0x4c>
    2464:	c8 01       	movw	r24, r16
    2466:	02 c0       	rjmp	.+4      	; 0x246c <puts+0x50>
    2468:	8f ef       	ldi	r24, 0xFF	; 255
    246a:	9f ef       	ldi	r25, 0xFF	; 255
    246c:	df 91       	pop	r29
    246e:	cf 91       	pop	r28
    2470:	1f 91       	pop	r17
    2472:	0f 91       	pop	r16
    2474:	08 95       	ret

00002476 <vfprintf>:
    2476:	2f 92       	push	r2
    2478:	3f 92       	push	r3
    247a:	4f 92       	push	r4
    247c:	5f 92       	push	r5
    247e:	6f 92       	push	r6
    2480:	7f 92       	push	r7
    2482:	8f 92       	push	r8
    2484:	9f 92       	push	r9
    2486:	af 92       	push	r10
    2488:	bf 92       	push	r11
    248a:	cf 92       	push	r12
    248c:	df 92       	push	r13
    248e:	ef 92       	push	r14
    2490:	ff 92       	push	r15
    2492:	0f 93       	push	r16
    2494:	1f 93       	push	r17
    2496:	cf 93       	push	r28
    2498:	df 93       	push	r29
    249a:	cd b7       	in	r28, 0x3d	; 61
    249c:	de b7       	in	r29, 0x3e	; 62
    249e:	2c 97       	sbiw	r28, 0x0c	; 12
    24a0:	0f b6       	in	r0, 0x3f	; 63
    24a2:	f8 94       	cli
    24a4:	de bf       	out	0x3e, r29	; 62
    24a6:	0f be       	out	0x3f, r0	; 63
    24a8:	cd bf       	out	0x3d, r28	; 61
    24aa:	7c 01       	movw	r14, r24
    24ac:	6b 01       	movw	r12, r22
    24ae:	8a 01       	movw	r16, r20
    24b0:	fc 01       	movw	r30, r24
    24b2:	17 82       	std	Z+7, r1	; 0x07
    24b4:	16 82       	std	Z+6, r1	; 0x06
    24b6:	83 81       	ldd	r24, Z+3	; 0x03
    24b8:	81 ff       	sbrs	r24, 1
    24ba:	b0 c1       	rjmp	.+864    	; 0x281c <vfprintf+0x3a6>
    24bc:	ce 01       	movw	r24, r28
    24be:	01 96       	adiw	r24, 0x01	; 1
    24c0:	4c 01       	movw	r8, r24
    24c2:	f7 01       	movw	r30, r14
    24c4:	93 81       	ldd	r25, Z+3	; 0x03
    24c6:	f6 01       	movw	r30, r12
    24c8:	93 fd       	sbrc	r25, 3
    24ca:	85 91       	lpm	r24, Z+
    24cc:	93 ff       	sbrs	r25, 3
    24ce:	81 91       	ld	r24, Z+
    24d0:	6f 01       	movw	r12, r30
    24d2:	88 23       	and	r24, r24
    24d4:	09 f4       	brne	.+2      	; 0x24d8 <vfprintf+0x62>
    24d6:	9e c1       	rjmp	.+828    	; 0x2814 <vfprintf+0x39e>
    24d8:	85 32       	cpi	r24, 0x25	; 37
    24da:	39 f4       	brne	.+14     	; 0x24ea <vfprintf+0x74>
    24dc:	93 fd       	sbrc	r25, 3
    24de:	85 91       	lpm	r24, Z+
    24e0:	93 ff       	sbrs	r25, 3
    24e2:	81 91       	ld	r24, Z+
    24e4:	6f 01       	movw	r12, r30
    24e6:	85 32       	cpi	r24, 0x25	; 37
    24e8:	21 f4       	brne	.+8      	; 0x24f2 <vfprintf+0x7c>
    24ea:	b7 01       	movw	r22, r14
    24ec:	90 e0       	ldi	r25, 0x00	; 0
    24ee:	4e df       	rcall	.-356    	; 0x238c <fputc>
    24f0:	e8 cf       	rjmp	.-48     	; 0x24c2 <vfprintf+0x4c>
    24f2:	51 2c       	mov	r5, r1
    24f4:	31 2c       	mov	r3, r1
    24f6:	20 e0       	ldi	r18, 0x00	; 0
    24f8:	20 32       	cpi	r18, 0x20	; 32
    24fa:	a0 f4       	brcc	.+40     	; 0x2524 <vfprintf+0xae>
    24fc:	8b 32       	cpi	r24, 0x2B	; 43
    24fe:	69 f0       	breq	.+26     	; 0x251a <vfprintf+0xa4>
    2500:	30 f4       	brcc	.+12     	; 0x250e <vfprintf+0x98>
    2502:	80 32       	cpi	r24, 0x20	; 32
    2504:	59 f0       	breq	.+22     	; 0x251c <vfprintf+0xa6>
    2506:	83 32       	cpi	r24, 0x23	; 35
    2508:	69 f4       	brne	.+26     	; 0x2524 <vfprintf+0xae>
    250a:	20 61       	ori	r18, 0x10	; 16
    250c:	2c c0       	rjmp	.+88     	; 0x2566 <vfprintf+0xf0>
    250e:	8d 32       	cpi	r24, 0x2D	; 45
    2510:	39 f0       	breq	.+14     	; 0x2520 <vfprintf+0xaa>
    2512:	80 33       	cpi	r24, 0x30	; 48
    2514:	39 f4       	brne	.+14     	; 0x2524 <vfprintf+0xae>
    2516:	21 60       	ori	r18, 0x01	; 1
    2518:	26 c0       	rjmp	.+76     	; 0x2566 <vfprintf+0xf0>
    251a:	22 60       	ori	r18, 0x02	; 2
    251c:	24 60       	ori	r18, 0x04	; 4
    251e:	23 c0       	rjmp	.+70     	; 0x2566 <vfprintf+0xf0>
    2520:	28 60       	ori	r18, 0x08	; 8
    2522:	21 c0       	rjmp	.+66     	; 0x2566 <vfprintf+0xf0>
    2524:	27 fd       	sbrc	r18, 7
    2526:	27 c0       	rjmp	.+78     	; 0x2576 <vfprintf+0x100>
    2528:	30 ed       	ldi	r19, 0xD0	; 208
    252a:	38 0f       	add	r19, r24
    252c:	3a 30       	cpi	r19, 0x0A	; 10
    252e:	78 f4       	brcc	.+30     	; 0x254e <vfprintf+0xd8>
    2530:	26 ff       	sbrs	r18, 6
    2532:	06 c0       	rjmp	.+12     	; 0x2540 <vfprintf+0xca>
    2534:	fa e0       	ldi	r31, 0x0A	; 10
    2536:	5f 9e       	mul	r5, r31
    2538:	30 0d       	add	r19, r0
    253a:	11 24       	eor	r1, r1
    253c:	53 2e       	mov	r5, r19
    253e:	13 c0       	rjmp	.+38     	; 0x2566 <vfprintf+0xf0>
    2540:	8a e0       	ldi	r24, 0x0A	; 10
    2542:	38 9e       	mul	r3, r24
    2544:	30 0d       	add	r19, r0
    2546:	11 24       	eor	r1, r1
    2548:	33 2e       	mov	r3, r19
    254a:	20 62       	ori	r18, 0x20	; 32
    254c:	0c c0       	rjmp	.+24     	; 0x2566 <vfprintf+0xf0>
    254e:	8e 32       	cpi	r24, 0x2E	; 46
    2550:	21 f4       	brne	.+8      	; 0x255a <vfprintf+0xe4>
    2552:	26 fd       	sbrc	r18, 6
    2554:	5f c1       	rjmp	.+702    	; 0x2814 <vfprintf+0x39e>
    2556:	20 64       	ori	r18, 0x40	; 64
    2558:	06 c0       	rjmp	.+12     	; 0x2566 <vfprintf+0xf0>
    255a:	8c 36       	cpi	r24, 0x6C	; 108
    255c:	11 f4       	brne	.+4      	; 0x2562 <vfprintf+0xec>
    255e:	20 68       	ori	r18, 0x80	; 128
    2560:	02 c0       	rjmp	.+4      	; 0x2566 <vfprintf+0xf0>
    2562:	88 36       	cpi	r24, 0x68	; 104
    2564:	41 f4       	brne	.+16     	; 0x2576 <vfprintf+0x100>
    2566:	f6 01       	movw	r30, r12
    2568:	93 fd       	sbrc	r25, 3
    256a:	85 91       	lpm	r24, Z+
    256c:	93 ff       	sbrs	r25, 3
    256e:	81 91       	ld	r24, Z+
    2570:	6f 01       	movw	r12, r30
    2572:	81 11       	cpse	r24, r1
    2574:	c1 cf       	rjmp	.-126    	; 0x24f8 <vfprintf+0x82>
    2576:	98 2f       	mov	r25, r24
    2578:	9f 7d       	andi	r25, 0xDF	; 223
    257a:	95 54       	subi	r25, 0x45	; 69
    257c:	93 30       	cpi	r25, 0x03	; 3
    257e:	28 f4       	brcc	.+10     	; 0x258a <vfprintf+0x114>
    2580:	0c 5f       	subi	r16, 0xFC	; 252
    2582:	1f 4f       	sbci	r17, 0xFF	; 255
    2584:	ff e3       	ldi	r31, 0x3F	; 63
    2586:	f9 83       	std	Y+1, r31	; 0x01
    2588:	0d c0       	rjmp	.+26     	; 0x25a4 <vfprintf+0x12e>
    258a:	83 36       	cpi	r24, 0x63	; 99
    258c:	31 f0       	breq	.+12     	; 0x259a <vfprintf+0x124>
    258e:	83 37       	cpi	r24, 0x73	; 115
    2590:	71 f0       	breq	.+28     	; 0x25ae <vfprintf+0x138>
    2592:	83 35       	cpi	r24, 0x53	; 83
    2594:	09 f0       	breq	.+2      	; 0x2598 <vfprintf+0x122>
    2596:	57 c0       	rjmp	.+174    	; 0x2646 <vfprintf+0x1d0>
    2598:	21 c0       	rjmp	.+66     	; 0x25dc <vfprintf+0x166>
    259a:	f8 01       	movw	r30, r16
    259c:	80 81       	ld	r24, Z
    259e:	89 83       	std	Y+1, r24	; 0x01
    25a0:	0e 5f       	subi	r16, 0xFE	; 254
    25a2:	1f 4f       	sbci	r17, 0xFF	; 255
    25a4:	44 24       	eor	r4, r4
    25a6:	43 94       	inc	r4
    25a8:	51 2c       	mov	r5, r1
    25aa:	54 01       	movw	r10, r8
    25ac:	14 c0       	rjmp	.+40     	; 0x25d6 <vfprintf+0x160>
    25ae:	38 01       	movw	r6, r16
    25b0:	f2 e0       	ldi	r31, 0x02	; 2
    25b2:	6f 0e       	add	r6, r31
    25b4:	71 1c       	adc	r7, r1
    25b6:	f8 01       	movw	r30, r16
    25b8:	a0 80       	ld	r10, Z
    25ba:	b1 80       	ldd	r11, Z+1	; 0x01
    25bc:	26 ff       	sbrs	r18, 6
    25be:	03 c0       	rjmp	.+6      	; 0x25c6 <vfprintf+0x150>
    25c0:	65 2d       	mov	r22, r5
    25c2:	70 e0       	ldi	r23, 0x00	; 0
    25c4:	02 c0       	rjmp	.+4      	; 0x25ca <vfprintf+0x154>
    25c6:	6f ef       	ldi	r22, 0xFF	; 255
    25c8:	7f ef       	ldi	r23, 0xFF	; 255
    25ca:	c5 01       	movw	r24, r10
    25cc:	2c 87       	std	Y+12, r18	; 0x0c
    25ce:	4c d1       	rcall	.+664    	; 0x2868 <strnlen>
    25d0:	2c 01       	movw	r4, r24
    25d2:	83 01       	movw	r16, r6
    25d4:	2c 85       	ldd	r18, Y+12	; 0x0c
    25d6:	2f 77       	andi	r18, 0x7F	; 127
    25d8:	22 2e       	mov	r2, r18
    25da:	16 c0       	rjmp	.+44     	; 0x2608 <vfprintf+0x192>
    25dc:	38 01       	movw	r6, r16
    25de:	f2 e0       	ldi	r31, 0x02	; 2
    25e0:	6f 0e       	add	r6, r31
    25e2:	71 1c       	adc	r7, r1
    25e4:	f8 01       	movw	r30, r16
    25e6:	a0 80       	ld	r10, Z
    25e8:	b1 80       	ldd	r11, Z+1	; 0x01
    25ea:	26 ff       	sbrs	r18, 6
    25ec:	03 c0       	rjmp	.+6      	; 0x25f4 <vfprintf+0x17e>
    25ee:	65 2d       	mov	r22, r5
    25f0:	70 e0       	ldi	r23, 0x00	; 0
    25f2:	02 c0       	rjmp	.+4      	; 0x25f8 <vfprintf+0x182>
    25f4:	6f ef       	ldi	r22, 0xFF	; 255
    25f6:	7f ef       	ldi	r23, 0xFF	; 255
    25f8:	c5 01       	movw	r24, r10
    25fa:	2c 87       	std	Y+12, r18	; 0x0c
    25fc:	2a d1       	rcall	.+596    	; 0x2852 <strnlen_P>
    25fe:	2c 01       	movw	r4, r24
    2600:	2c 85       	ldd	r18, Y+12	; 0x0c
    2602:	20 68       	ori	r18, 0x80	; 128
    2604:	22 2e       	mov	r2, r18
    2606:	83 01       	movw	r16, r6
    2608:	23 fc       	sbrc	r2, 3
    260a:	19 c0       	rjmp	.+50     	; 0x263e <vfprintf+0x1c8>
    260c:	83 2d       	mov	r24, r3
    260e:	90 e0       	ldi	r25, 0x00	; 0
    2610:	48 16       	cp	r4, r24
    2612:	59 06       	cpc	r5, r25
    2614:	a0 f4       	brcc	.+40     	; 0x263e <vfprintf+0x1c8>
    2616:	b7 01       	movw	r22, r14
    2618:	80 e2       	ldi	r24, 0x20	; 32
    261a:	90 e0       	ldi	r25, 0x00	; 0
    261c:	b7 de       	rcall	.-658    	; 0x238c <fputc>
    261e:	3a 94       	dec	r3
    2620:	f5 cf       	rjmp	.-22     	; 0x260c <vfprintf+0x196>
    2622:	f5 01       	movw	r30, r10
    2624:	27 fc       	sbrc	r2, 7
    2626:	85 91       	lpm	r24, Z+
    2628:	27 fe       	sbrs	r2, 7
    262a:	81 91       	ld	r24, Z+
    262c:	5f 01       	movw	r10, r30
    262e:	b7 01       	movw	r22, r14
    2630:	90 e0       	ldi	r25, 0x00	; 0
    2632:	ac de       	rcall	.-680    	; 0x238c <fputc>
    2634:	31 10       	cpse	r3, r1
    2636:	3a 94       	dec	r3
    2638:	f1 e0       	ldi	r31, 0x01	; 1
    263a:	4f 1a       	sub	r4, r31
    263c:	51 08       	sbc	r5, r1
    263e:	41 14       	cp	r4, r1
    2640:	51 04       	cpc	r5, r1
    2642:	79 f7       	brne	.-34     	; 0x2622 <vfprintf+0x1ac>
    2644:	de c0       	rjmp	.+444    	; 0x2802 <vfprintf+0x38c>
    2646:	84 36       	cpi	r24, 0x64	; 100
    2648:	11 f0       	breq	.+4      	; 0x264e <vfprintf+0x1d8>
    264a:	89 36       	cpi	r24, 0x69	; 105
    264c:	31 f5       	brne	.+76     	; 0x269a <vfprintf+0x224>
    264e:	f8 01       	movw	r30, r16
    2650:	27 ff       	sbrs	r18, 7
    2652:	07 c0       	rjmp	.+14     	; 0x2662 <vfprintf+0x1ec>
    2654:	60 81       	ld	r22, Z
    2656:	71 81       	ldd	r23, Z+1	; 0x01
    2658:	82 81       	ldd	r24, Z+2	; 0x02
    265a:	93 81       	ldd	r25, Z+3	; 0x03
    265c:	0c 5f       	subi	r16, 0xFC	; 252
    265e:	1f 4f       	sbci	r17, 0xFF	; 255
    2660:	08 c0       	rjmp	.+16     	; 0x2672 <vfprintf+0x1fc>
    2662:	60 81       	ld	r22, Z
    2664:	71 81       	ldd	r23, Z+1	; 0x01
    2666:	88 27       	eor	r24, r24
    2668:	77 fd       	sbrc	r23, 7
    266a:	80 95       	com	r24
    266c:	98 2f       	mov	r25, r24
    266e:	0e 5f       	subi	r16, 0xFE	; 254
    2670:	1f 4f       	sbci	r17, 0xFF	; 255
    2672:	2f 76       	andi	r18, 0x6F	; 111
    2674:	b2 2e       	mov	r11, r18
    2676:	97 ff       	sbrs	r25, 7
    2678:	09 c0       	rjmp	.+18     	; 0x268c <vfprintf+0x216>
    267a:	90 95       	com	r25
    267c:	80 95       	com	r24
    267e:	70 95       	com	r23
    2680:	61 95       	neg	r22
    2682:	7f 4f       	sbci	r23, 0xFF	; 255
    2684:	8f 4f       	sbci	r24, 0xFF	; 255
    2686:	9f 4f       	sbci	r25, 0xFF	; 255
    2688:	20 68       	ori	r18, 0x80	; 128
    268a:	b2 2e       	mov	r11, r18
    268c:	2a e0       	ldi	r18, 0x0A	; 10
    268e:	30 e0       	ldi	r19, 0x00	; 0
    2690:	a4 01       	movw	r20, r8
    2692:	f5 d0       	rcall	.+490    	; 0x287e <__ultoa_invert>
    2694:	a8 2e       	mov	r10, r24
    2696:	a8 18       	sub	r10, r8
    2698:	43 c0       	rjmp	.+134    	; 0x2720 <vfprintf+0x2aa>
    269a:	85 37       	cpi	r24, 0x75	; 117
    269c:	29 f4       	brne	.+10     	; 0x26a8 <vfprintf+0x232>
    269e:	2f 7e       	andi	r18, 0xEF	; 239
    26a0:	b2 2e       	mov	r11, r18
    26a2:	2a e0       	ldi	r18, 0x0A	; 10
    26a4:	30 e0       	ldi	r19, 0x00	; 0
    26a6:	25 c0       	rjmp	.+74     	; 0x26f2 <vfprintf+0x27c>
    26a8:	f2 2f       	mov	r31, r18
    26aa:	f9 7f       	andi	r31, 0xF9	; 249
    26ac:	bf 2e       	mov	r11, r31
    26ae:	8f 36       	cpi	r24, 0x6F	; 111
    26b0:	c1 f0       	breq	.+48     	; 0x26e2 <vfprintf+0x26c>
    26b2:	18 f4       	brcc	.+6      	; 0x26ba <vfprintf+0x244>
    26b4:	88 35       	cpi	r24, 0x58	; 88
    26b6:	79 f0       	breq	.+30     	; 0x26d6 <vfprintf+0x260>
    26b8:	ad c0       	rjmp	.+346    	; 0x2814 <vfprintf+0x39e>
    26ba:	80 37       	cpi	r24, 0x70	; 112
    26bc:	19 f0       	breq	.+6      	; 0x26c4 <vfprintf+0x24e>
    26be:	88 37       	cpi	r24, 0x78	; 120
    26c0:	21 f0       	breq	.+8      	; 0x26ca <vfprintf+0x254>
    26c2:	a8 c0       	rjmp	.+336    	; 0x2814 <vfprintf+0x39e>
    26c4:	2f 2f       	mov	r18, r31
    26c6:	20 61       	ori	r18, 0x10	; 16
    26c8:	b2 2e       	mov	r11, r18
    26ca:	b4 fe       	sbrs	r11, 4
    26cc:	0d c0       	rjmp	.+26     	; 0x26e8 <vfprintf+0x272>
    26ce:	8b 2d       	mov	r24, r11
    26d0:	84 60       	ori	r24, 0x04	; 4
    26d2:	b8 2e       	mov	r11, r24
    26d4:	09 c0       	rjmp	.+18     	; 0x26e8 <vfprintf+0x272>
    26d6:	24 ff       	sbrs	r18, 4
    26d8:	0a c0       	rjmp	.+20     	; 0x26ee <vfprintf+0x278>
    26da:	9f 2f       	mov	r25, r31
    26dc:	96 60       	ori	r25, 0x06	; 6
    26de:	b9 2e       	mov	r11, r25
    26e0:	06 c0       	rjmp	.+12     	; 0x26ee <vfprintf+0x278>
    26e2:	28 e0       	ldi	r18, 0x08	; 8
    26e4:	30 e0       	ldi	r19, 0x00	; 0
    26e6:	05 c0       	rjmp	.+10     	; 0x26f2 <vfprintf+0x27c>
    26e8:	20 e1       	ldi	r18, 0x10	; 16
    26ea:	30 e0       	ldi	r19, 0x00	; 0
    26ec:	02 c0       	rjmp	.+4      	; 0x26f2 <vfprintf+0x27c>
    26ee:	20 e1       	ldi	r18, 0x10	; 16
    26f0:	32 e0       	ldi	r19, 0x02	; 2
    26f2:	f8 01       	movw	r30, r16
    26f4:	b7 fe       	sbrs	r11, 7
    26f6:	07 c0       	rjmp	.+14     	; 0x2706 <vfprintf+0x290>
    26f8:	60 81       	ld	r22, Z
    26fa:	71 81       	ldd	r23, Z+1	; 0x01
    26fc:	82 81       	ldd	r24, Z+2	; 0x02
    26fe:	93 81       	ldd	r25, Z+3	; 0x03
    2700:	0c 5f       	subi	r16, 0xFC	; 252
    2702:	1f 4f       	sbci	r17, 0xFF	; 255
    2704:	06 c0       	rjmp	.+12     	; 0x2712 <vfprintf+0x29c>
    2706:	60 81       	ld	r22, Z
    2708:	71 81       	ldd	r23, Z+1	; 0x01
    270a:	80 e0       	ldi	r24, 0x00	; 0
    270c:	90 e0       	ldi	r25, 0x00	; 0
    270e:	0e 5f       	subi	r16, 0xFE	; 254
    2710:	1f 4f       	sbci	r17, 0xFF	; 255
    2712:	a4 01       	movw	r20, r8
    2714:	b4 d0       	rcall	.+360    	; 0x287e <__ultoa_invert>
    2716:	a8 2e       	mov	r10, r24
    2718:	a8 18       	sub	r10, r8
    271a:	fb 2d       	mov	r31, r11
    271c:	ff 77       	andi	r31, 0x7F	; 127
    271e:	bf 2e       	mov	r11, r31
    2720:	b6 fe       	sbrs	r11, 6
    2722:	0b c0       	rjmp	.+22     	; 0x273a <vfprintf+0x2c4>
    2724:	2b 2d       	mov	r18, r11
    2726:	2e 7f       	andi	r18, 0xFE	; 254
    2728:	a5 14       	cp	r10, r5
    272a:	50 f4       	brcc	.+20     	; 0x2740 <vfprintf+0x2ca>
    272c:	b4 fe       	sbrs	r11, 4
    272e:	0a c0       	rjmp	.+20     	; 0x2744 <vfprintf+0x2ce>
    2730:	b2 fc       	sbrc	r11, 2
    2732:	08 c0       	rjmp	.+16     	; 0x2744 <vfprintf+0x2ce>
    2734:	2b 2d       	mov	r18, r11
    2736:	2e 7e       	andi	r18, 0xEE	; 238
    2738:	05 c0       	rjmp	.+10     	; 0x2744 <vfprintf+0x2ce>
    273a:	7a 2c       	mov	r7, r10
    273c:	2b 2d       	mov	r18, r11
    273e:	03 c0       	rjmp	.+6      	; 0x2746 <vfprintf+0x2d0>
    2740:	7a 2c       	mov	r7, r10
    2742:	01 c0       	rjmp	.+2      	; 0x2746 <vfprintf+0x2d0>
    2744:	75 2c       	mov	r7, r5
    2746:	24 ff       	sbrs	r18, 4
    2748:	0d c0       	rjmp	.+26     	; 0x2764 <vfprintf+0x2ee>
    274a:	fe 01       	movw	r30, r28
    274c:	ea 0d       	add	r30, r10
    274e:	f1 1d       	adc	r31, r1
    2750:	80 81       	ld	r24, Z
    2752:	80 33       	cpi	r24, 0x30	; 48
    2754:	11 f4       	brne	.+4      	; 0x275a <vfprintf+0x2e4>
    2756:	29 7e       	andi	r18, 0xE9	; 233
    2758:	09 c0       	rjmp	.+18     	; 0x276c <vfprintf+0x2f6>
    275a:	22 ff       	sbrs	r18, 2
    275c:	06 c0       	rjmp	.+12     	; 0x276a <vfprintf+0x2f4>
    275e:	73 94       	inc	r7
    2760:	73 94       	inc	r7
    2762:	04 c0       	rjmp	.+8      	; 0x276c <vfprintf+0x2f6>
    2764:	82 2f       	mov	r24, r18
    2766:	86 78       	andi	r24, 0x86	; 134
    2768:	09 f0       	breq	.+2      	; 0x276c <vfprintf+0x2f6>
    276a:	73 94       	inc	r7
    276c:	23 fd       	sbrc	r18, 3
    276e:	12 c0       	rjmp	.+36     	; 0x2794 <vfprintf+0x31e>
    2770:	20 ff       	sbrs	r18, 0
    2772:	06 c0       	rjmp	.+12     	; 0x2780 <vfprintf+0x30a>
    2774:	5a 2c       	mov	r5, r10
    2776:	73 14       	cp	r7, r3
    2778:	18 f4       	brcc	.+6      	; 0x2780 <vfprintf+0x30a>
    277a:	53 0c       	add	r5, r3
    277c:	57 18       	sub	r5, r7
    277e:	73 2c       	mov	r7, r3
    2780:	73 14       	cp	r7, r3
    2782:	60 f4       	brcc	.+24     	; 0x279c <vfprintf+0x326>
    2784:	b7 01       	movw	r22, r14
    2786:	80 e2       	ldi	r24, 0x20	; 32
    2788:	90 e0       	ldi	r25, 0x00	; 0
    278a:	2c 87       	std	Y+12, r18	; 0x0c
    278c:	ff dd       	rcall	.-1026   	; 0x238c <fputc>
    278e:	73 94       	inc	r7
    2790:	2c 85       	ldd	r18, Y+12	; 0x0c
    2792:	f6 cf       	rjmp	.-20     	; 0x2780 <vfprintf+0x30a>
    2794:	73 14       	cp	r7, r3
    2796:	10 f4       	brcc	.+4      	; 0x279c <vfprintf+0x326>
    2798:	37 18       	sub	r3, r7
    279a:	01 c0       	rjmp	.+2      	; 0x279e <vfprintf+0x328>
    279c:	31 2c       	mov	r3, r1
    279e:	24 ff       	sbrs	r18, 4
    27a0:	11 c0       	rjmp	.+34     	; 0x27c4 <vfprintf+0x34e>
    27a2:	b7 01       	movw	r22, r14
    27a4:	80 e3       	ldi	r24, 0x30	; 48
    27a6:	90 e0       	ldi	r25, 0x00	; 0
    27a8:	2c 87       	std	Y+12, r18	; 0x0c
    27aa:	f0 dd       	rcall	.-1056   	; 0x238c <fputc>
    27ac:	2c 85       	ldd	r18, Y+12	; 0x0c
    27ae:	22 ff       	sbrs	r18, 2
    27b0:	16 c0       	rjmp	.+44     	; 0x27de <vfprintf+0x368>
    27b2:	21 ff       	sbrs	r18, 1
    27b4:	03 c0       	rjmp	.+6      	; 0x27bc <vfprintf+0x346>
    27b6:	88 e5       	ldi	r24, 0x58	; 88
    27b8:	90 e0       	ldi	r25, 0x00	; 0
    27ba:	02 c0       	rjmp	.+4      	; 0x27c0 <vfprintf+0x34a>
    27bc:	88 e7       	ldi	r24, 0x78	; 120
    27be:	90 e0       	ldi	r25, 0x00	; 0
    27c0:	b7 01       	movw	r22, r14
    27c2:	0c c0       	rjmp	.+24     	; 0x27dc <vfprintf+0x366>
    27c4:	82 2f       	mov	r24, r18
    27c6:	86 78       	andi	r24, 0x86	; 134
    27c8:	51 f0       	breq	.+20     	; 0x27de <vfprintf+0x368>
    27ca:	21 fd       	sbrc	r18, 1
    27cc:	02 c0       	rjmp	.+4      	; 0x27d2 <vfprintf+0x35c>
    27ce:	80 e2       	ldi	r24, 0x20	; 32
    27d0:	01 c0       	rjmp	.+2      	; 0x27d4 <vfprintf+0x35e>
    27d2:	8b e2       	ldi	r24, 0x2B	; 43
    27d4:	27 fd       	sbrc	r18, 7
    27d6:	8d e2       	ldi	r24, 0x2D	; 45
    27d8:	b7 01       	movw	r22, r14
    27da:	90 e0       	ldi	r25, 0x00	; 0
    27dc:	d7 dd       	rcall	.-1106   	; 0x238c <fputc>
    27de:	a5 14       	cp	r10, r5
    27e0:	30 f4       	brcc	.+12     	; 0x27ee <vfprintf+0x378>
    27e2:	b7 01       	movw	r22, r14
    27e4:	80 e3       	ldi	r24, 0x30	; 48
    27e6:	90 e0       	ldi	r25, 0x00	; 0
    27e8:	d1 dd       	rcall	.-1118   	; 0x238c <fputc>
    27ea:	5a 94       	dec	r5
    27ec:	f8 cf       	rjmp	.-16     	; 0x27de <vfprintf+0x368>
    27ee:	aa 94       	dec	r10
    27f0:	f4 01       	movw	r30, r8
    27f2:	ea 0d       	add	r30, r10
    27f4:	f1 1d       	adc	r31, r1
    27f6:	80 81       	ld	r24, Z
    27f8:	b7 01       	movw	r22, r14
    27fa:	90 e0       	ldi	r25, 0x00	; 0
    27fc:	c7 dd       	rcall	.-1138   	; 0x238c <fputc>
    27fe:	a1 10       	cpse	r10, r1
    2800:	f6 cf       	rjmp	.-20     	; 0x27ee <vfprintf+0x378>
    2802:	33 20       	and	r3, r3
    2804:	09 f4       	brne	.+2      	; 0x2808 <vfprintf+0x392>
    2806:	5d ce       	rjmp	.-838    	; 0x24c2 <vfprintf+0x4c>
    2808:	b7 01       	movw	r22, r14
    280a:	80 e2       	ldi	r24, 0x20	; 32
    280c:	90 e0       	ldi	r25, 0x00	; 0
    280e:	be dd       	rcall	.-1156   	; 0x238c <fputc>
    2810:	3a 94       	dec	r3
    2812:	f7 cf       	rjmp	.-18     	; 0x2802 <vfprintf+0x38c>
    2814:	f7 01       	movw	r30, r14
    2816:	86 81       	ldd	r24, Z+6	; 0x06
    2818:	97 81       	ldd	r25, Z+7	; 0x07
    281a:	02 c0       	rjmp	.+4      	; 0x2820 <vfprintf+0x3aa>
    281c:	8f ef       	ldi	r24, 0xFF	; 255
    281e:	9f ef       	ldi	r25, 0xFF	; 255
    2820:	2c 96       	adiw	r28, 0x0c	; 12
    2822:	0f b6       	in	r0, 0x3f	; 63
    2824:	f8 94       	cli
    2826:	de bf       	out	0x3e, r29	; 62
    2828:	0f be       	out	0x3f, r0	; 63
    282a:	cd bf       	out	0x3d, r28	; 61
    282c:	df 91       	pop	r29
    282e:	cf 91       	pop	r28
    2830:	1f 91       	pop	r17
    2832:	0f 91       	pop	r16
    2834:	ff 90       	pop	r15
    2836:	ef 90       	pop	r14
    2838:	df 90       	pop	r13
    283a:	cf 90       	pop	r12
    283c:	bf 90       	pop	r11
    283e:	af 90       	pop	r10
    2840:	9f 90       	pop	r9
    2842:	8f 90       	pop	r8
    2844:	7f 90       	pop	r7
    2846:	6f 90       	pop	r6
    2848:	5f 90       	pop	r5
    284a:	4f 90       	pop	r4
    284c:	3f 90       	pop	r3
    284e:	2f 90       	pop	r2
    2850:	08 95       	ret

00002852 <strnlen_P>:
    2852:	fc 01       	movw	r30, r24
    2854:	05 90       	lpm	r0, Z+
    2856:	61 50       	subi	r22, 0x01	; 1
    2858:	70 40       	sbci	r23, 0x00	; 0
    285a:	01 10       	cpse	r0, r1
    285c:	d8 f7       	brcc	.-10     	; 0x2854 <strnlen_P+0x2>
    285e:	80 95       	com	r24
    2860:	90 95       	com	r25
    2862:	8e 0f       	add	r24, r30
    2864:	9f 1f       	adc	r25, r31
    2866:	08 95       	ret

00002868 <strnlen>:
    2868:	fc 01       	movw	r30, r24
    286a:	61 50       	subi	r22, 0x01	; 1
    286c:	70 40       	sbci	r23, 0x00	; 0
    286e:	01 90       	ld	r0, Z+
    2870:	01 10       	cpse	r0, r1
    2872:	d8 f7       	brcc	.-10     	; 0x286a <strnlen+0x2>
    2874:	80 95       	com	r24
    2876:	90 95       	com	r25
    2878:	8e 0f       	add	r24, r30
    287a:	9f 1f       	adc	r25, r31
    287c:	08 95       	ret

0000287e <__ultoa_invert>:
    287e:	fa 01       	movw	r30, r20
    2880:	aa 27       	eor	r26, r26
    2882:	28 30       	cpi	r18, 0x08	; 8
    2884:	51 f1       	breq	.+84     	; 0x28da <__ultoa_invert+0x5c>
    2886:	20 31       	cpi	r18, 0x10	; 16
    2888:	81 f1       	breq	.+96     	; 0x28ea <__ultoa_invert+0x6c>
    288a:	e8 94       	clt
    288c:	6f 93       	push	r22
    288e:	6e 7f       	andi	r22, 0xFE	; 254
    2890:	6e 5f       	subi	r22, 0xFE	; 254
    2892:	7f 4f       	sbci	r23, 0xFF	; 255
    2894:	8f 4f       	sbci	r24, 0xFF	; 255
    2896:	9f 4f       	sbci	r25, 0xFF	; 255
    2898:	af 4f       	sbci	r26, 0xFF	; 255
    289a:	b1 e0       	ldi	r27, 0x01	; 1
    289c:	3e d0       	rcall	.+124    	; 0x291a <__ultoa_invert+0x9c>
    289e:	b4 e0       	ldi	r27, 0x04	; 4
    28a0:	3c d0       	rcall	.+120    	; 0x291a <__ultoa_invert+0x9c>
    28a2:	67 0f       	add	r22, r23
    28a4:	78 1f       	adc	r23, r24
    28a6:	89 1f       	adc	r24, r25
    28a8:	9a 1f       	adc	r25, r26
    28aa:	a1 1d       	adc	r26, r1
    28ac:	68 0f       	add	r22, r24
    28ae:	79 1f       	adc	r23, r25
    28b0:	8a 1f       	adc	r24, r26
    28b2:	91 1d       	adc	r25, r1
    28b4:	a1 1d       	adc	r26, r1
    28b6:	6a 0f       	add	r22, r26
    28b8:	71 1d       	adc	r23, r1
    28ba:	81 1d       	adc	r24, r1
    28bc:	91 1d       	adc	r25, r1
    28be:	a1 1d       	adc	r26, r1
    28c0:	20 d0       	rcall	.+64     	; 0x2902 <__ultoa_invert+0x84>
    28c2:	09 f4       	brne	.+2      	; 0x28c6 <__ultoa_invert+0x48>
    28c4:	68 94       	set
    28c6:	3f 91       	pop	r19
    28c8:	2a e0       	ldi	r18, 0x0A	; 10
    28ca:	26 9f       	mul	r18, r22
    28cc:	11 24       	eor	r1, r1
    28ce:	30 19       	sub	r19, r0
    28d0:	30 5d       	subi	r19, 0xD0	; 208
    28d2:	31 93       	st	Z+, r19
    28d4:	de f6       	brtc	.-74     	; 0x288c <__ultoa_invert+0xe>
    28d6:	cf 01       	movw	r24, r30
    28d8:	08 95       	ret
    28da:	46 2f       	mov	r20, r22
    28dc:	47 70       	andi	r20, 0x07	; 7
    28de:	40 5d       	subi	r20, 0xD0	; 208
    28e0:	41 93       	st	Z+, r20
    28e2:	b3 e0       	ldi	r27, 0x03	; 3
    28e4:	0f d0       	rcall	.+30     	; 0x2904 <__ultoa_invert+0x86>
    28e6:	c9 f7       	brne	.-14     	; 0x28da <__ultoa_invert+0x5c>
    28e8:	f6 cf       	rjmp	.-20     	; 0x28d6 <__ultoa_invert+0x58>
    28ea:	46 2f       	mov	r20, r22
    28ec:	4f 70       	andi	r20, 0x0F	; 15
    28ee:	40 5d       	subi	r20, 0xD0	; 208
    28f0:	4a 33       	cpi	r20, 0x3A	; 58
    28f2:	18 f0       	brcs	.+6      	; 0x28fa <__ultoa_invert+0x7c>
    28f4:	49 5d       	subi	r20, 0xD9	; 217
    28f6:	31 fd       	sbrc	r19, 1
    28f8:	40 52       	subi	r20, 0x20	; 32
    28fa:	41 93       	st	Z+, r20
    28fc:	02 d0       	rcall	.+4      	; 0x2902 <__ultoa_invert+0x84>
    28fe:	a9 f7       	brne	.-22     	; 0x28ea <__ultoa_invert+0x6c>
    2900:	ea cf       	rjmp	.-44     	; 0x28d6 <__ultoa_invert+0x58>
    2902:	b4 e0       	ldi	r27, 0x04	; 4
    2904:	a6 95       	lsr	r26
    2906:	97 95       	ror	r25
    2908:	87 95       	ror	r24
    290a:	77 95       	ror	r23
    290c:	67 95       	ror	r22
    290e:	ba 95       	dec	r27
    2910:	c9 f7       	brne	.-14     	; 0x2904 <__ultoa_invert+0x86>
    2912:	00 97       	sbiw	r24, 0x00	; 0
    2914:	61 05       	cpc	r22, r1
    2916:	71 05       	cpc	r23, r1
    2918:	08 95       	ret
    291a:	9b 01       	movw	r18, r22
    291c:	ac 01       	movw	r20, r24
    291e:	0a 2e       	mov	r0, r26
    2920:	06 94       	lsr	r0
    2922:	57 95       	ror	r21
    2924:	47 95       	ror	r20
    2926:	37 95       	ror	r19
    2928:	27 95       	ror	r18
    292a:	ba 95       	dec	r27
    292c:	c9 f7       	brne	.-14     	; 0x2920 <__ultoa_invert+0xa2>
    292e:	62 0f       	add	r22, r18
    2930:	73 1f       	adc	r23, r19
    2932:	84 1f       	adc	r24, r20
    2934:	95 1f       	adc	r25, r21
    2936:	a0 1d       	adc	r26, r0
    2938:	08 95       	ret

0000293a <_exit>:
    293a:	f8 94       	cli

0000293c <__stop_program>:
    293c:	ff cf       	rjmp	.-2      	; 0x293c <__stop_program>
