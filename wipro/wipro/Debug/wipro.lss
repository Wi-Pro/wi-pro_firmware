
wipro.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000400  00800200  000020b4  00002148  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000020b4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001c4  00800600  00800600  00002548  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002548  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000528  00000000  00000000  000025a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00005744  00000000  00000000  00002acc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001789  00000000  00000000  00008210  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001d9c  00000000  00000000  00009999  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000f98  00000000  00000000  0000b738  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000d85  00000000  00000000  0000c6d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000030d9  00000000  00000000  0000d455  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000460  00000000  00000000  0001052e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
       8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
       c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      10:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      14:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      18:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      1c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      20:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      24:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      28:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      2c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      30:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      34:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      38:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      3c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      40:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      44:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      48:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      4c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      50:	0c 94 d5 01 	jmp	0x3aa	; 0x3aa <__vector_20>
      54:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      58:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      5c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      60:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      64:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      68:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      6c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      70:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      74:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      78:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      7c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      80:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      84:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      88:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      8c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      90:	0c 94 c6 07 	jmp	0xf8c	; 0xf8c <__vector_36>
      94:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      98:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      9c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      a0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      a4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      a8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      ac:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      b0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      b4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      b8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      bc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      c0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      c4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      c8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      cc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      d0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      d4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      d8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      dc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      e0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
      f0:	16 e0       	ldi	r17, 0x06	; 6
      f2:	a0 e0       	ldi	r26, 0x00	; 0
      f4:	b2 e0       	ldi	r27, 0x02	; 2
      f6:	e4 eb       	ldi	r30, 0xB4	; 180
      f8:	f0 e2       	ldi	r31, 0x20	; 32
      fa:	02 c0       	rjmp	.+4      	; 0x100 <__do_copy_data+0x10>
      fc:	05 90       	lpm	r0, Z+
      fe:	0d 92       	st	X+, r0
     100:	a0 30       	cpi	r26, 0x00	; 0
     102:	b1 07       	cpc	r27, r17
     104:	d9 f7       	brne	.-10     	; 0xfc <__do_copy_data+0xc>

00000106 <__do_clear_bss>:
     106:	27 e0       	ldi	r18, 0x07	; 7
     108:	a0 e0       	ldi	r26, 0x00	; 0
     10a:	b6 e0       	ldi	r27, 0x06	; 6
     10c:	01 c0       	rjmp	.+2      	; 0x110 <.do_clear_bss_start>

0000010e <.do_clear_bss_loop>:
     10e:	1d 92       	st	X+, r1

00000110 <.do_clear_bss_start>:
     110:	a4 3c       	cpi	r26, 0xC4	; 196
     112:	b2 07       	cpc	r27, r18
     114:	e1 f7       	brne	.-8      	; 0x10e <.do_clear_bss_loop>
     116:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <main>
     11a:	0c 94 58 10 	jmp	0x20b0	; 0x20b0 <_exit>

0000011e <__bad_interrupt>:
     11e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000122 <connectionInit>:
uint8_t Flags[FLAG_ARRAY_LENGTH]; 
char filepath[100]; 

void connectionInit()
{
	uart2_init();
     122:	0e 94 86 04 	call	0x90c	; 0x90c <uart2_init>
	SPI_Init();
     126:	0e 94 3f 05 	call	0xa7e	; 0xa7e <SPI_Init>
     12a:	08 95       	ret

0000012c <pollingInit>:

void pollingInit()
{
	//Set a 64 prescaler to achieve a ping roughly every half second
	//TCCR1B = (1<<CS11)|(1<<CS10);
	TCCR1B |= (1<<CS12); 
     12c:	e1 e8       	ldi	r30, 0x81	; 129
     12e:	f0 e0       	ldi	r31, 0x00	; 0
     130:	80 81       	ld	r24, Z
     132:	84 60       	ori	r24, 0x04	; 4
     134:	80 83       	st	Z, r24
	//Load internal counter registers with min value 
	TCNT1L = 0x00; 
     136:	10 92 84 00 	sts	0x0084, r1
	TCNT1H = 0x00; 
     13a:	10 92 85 00 	sts	0x0085, r1
	//Set interrupt to invoke on overflow
	TIMSK1 = (1 << TOIE1);
     13e:	81 e0       	ldi	r24, 0x01	; 1
     140:	80 93 6f 00 	sts	0x006F, r24
     144:	08 95       	ret

00000146 <clearFlags>:
{
	
}

int clearFlags()
{
     146:	cf 93       	push	r28
     148:	df 93       	push	r29
	if(Flags[ETHERNET])
     14a:	80 91 67 06 	lds	r24, 0x0667
     14e:	88 23       	and	r24, r24
     150:	99 f1       	breq	.+102    	; 0x1b8 <clearFlags+0x72>
	{
		strcpy(filepath, GET);
     152:	c3 e0       	ldi	r28, 0x03	; 3
     154:	d6 e0       	ldi	r29, 0x06	; 6
     156:	85 e0       	ldi	r24, 0x05	; 5
     158:	e6 e1       	ldi	r30, 0x16	; 22
     15a:	f2 e0       	ldi	r31, 0x02	; 2
     15c:	de 01       	movw	r26, r28
     15e:	01 90       	ld	r0, Z+
     160:	0d 92       	st	X+, r0
     162:	8a 95       	dec	r24
     164:	e1 f7       	brne	.-8      	; 0x15e <clearFlags+0x18>
		strcat(filepath, URL);
     166:	de 01       	movw	r26, r28
     168:	0d 90       	ld	r0, X+
     16a:	00 20       	and	r0, r0
     16c:	e9 f7       	brne	.-6      	; 0x168 <clearFlags+0x22>
     16e:	11 97       	sbiw	r26, 0x01	; 1
     170:	85 e1       	ldi	r24, 0x15	; 21
     172:	eb e1       	ldi	r30, 0x1B	; 27
     174:	f2 e0       	ldi	r31, 0x02	; 2
     176:	01 90       	ld	r0, Z+
     178:	0d 92       	st	X+, r0
     17a:	8a 95       	dec	r24
     17c:	e1 f7       	brne	.-8      	; 0x176 <clearFlags+0x30>
		strcat(filepath, CLEAR_FLAG);
     17e:	de 01       	movw	r26, r28
     180:	0d 90       	ld	r0, X+
     182:	00 20       	and	r0, r0
     184:	e9 f7       	brne	.-6      	; 0x180 <clearFlags+0x3a>
     186:	11 97       	sbiw	r26, 0x01	; 1
     188:	82 e1       	ldi	r24, 0x12	; 18
     18a:	e0 e3       	ldi	r30, 0x30	; 48
     18c:	f2 e0       	ldi	r31, 0x02	; 2
     18e:	01 90       	ld	r0, Z+
     190:	0d 92       	st	X+, r0
     192:	8a 95       	dec	r24
     194:	e1 f7       	brne	.-8      	; 0x18e <clearFlags+0x48>
		strcat(filepath, WIPRO_ID);
     196:	09 90       	ld	r0, Y+
     198:	00 20       	and	r0, r0
     19a:	e9 f7       	brne	.-6      	; 0x196 <clearFlags+0x50>
     19c:	de 01       	movw	r26, r28
     19e:	11 97       	sbiw	r26, 0x01	; 1
     1a0:	83 e1       	ldi	r24, 0x13	; 19
     1a2:	e2 e4       	ldi	r30, 0x42	; 66
     1a4:	f2 e0       	ldi	r31, 0x02	; 2
     1a6:	01 90       	ld	r0, Z+
     1a8:	0d 92       	st	X+, r0
     1aa:	8a 95       	dec	r24
     1ac:	e1 f7       	brne	.-8      	; 0x1a6 <clearFlags+0x60>
		//printf("Clear: %s\n", filepath);
		updateFileEthernet(filepath);
     1ae:	83 e0       	ldi	r24, 0x03	; 3
     1b0:	96 e0       	ldi	r25, 0x06	; 6
     1b2:	0e 94 03 02 	call	0x406	; 0x406 <updateFileEthernet>
     1b6:	36 c0       	rjmp	.+108    	; 0x224 <clearFlags+0xde>
	}
	else if(Flags[WIFI])
     1b8:	80 91 68 06 	lds	r24, 0x0668
     1bc:	88 23       	and	r24, r24
     1be:	91 f1       	breq	.+100    	; 0x224 <clearFlags+0xde>
	{
		strcpy(filepath, HTTP_GET);
     1c0:	c3 e0       	ldi	r28, 0x03	; 3
     1c2:	d6 e0       	ldi	r29, 0x06	; 6
     1c4:	8a e0       	ldi	r24, 0x0A	; 10
     1c6:	e5 e5       	ldi	r30, 0x55	; 85
     1c8:	f2 e0       	ldi	r31, 0x02	; 2
     1ca:	de 01       	movw	r26, r28
     1cc:	01 90       	ld	r0, Z+
     1ce:	0d 92       	st	X+, r0
     1d0:	8a 95       	dec	r24
     1d2:	e1 f7       	brne	.-8      	; 0x1cc <clearFlags+0x86>
		strcat(filepath, URL); 
     1d4:	de 01       	movw	r26, r28
     1d6:	0d 90       	ld	r0, X+
     1d8:	00 20       	and	r0, r0
     1da:	e9 f7       	brne	.-6      	; 0x1d6 <clearFlags+0x90>
     1dc:	11 97       	sbiw	r26, 0x01	; 1
     1de:	85 e1       	ldi	r24, 0x15	; 21
     1e0:	eb e1       	ldi	r30, 0x1B	; 27
     1e2:	f2 e0       	ldi	r31, 0x02	; 2
     1e4:	01 90       	ld	r0, Z+
     1e6:	0d 92       	st	X+, r0
     1e8:	8a 95       	dec	r24
     1ea:	e1 f7       	brne	.-8      	; 0x1e4 <clearFlags+0x9e>
		strcat(filepath, CLEAR_FLAG);
     1ec:	de 01       	movw	r26, r28
     1ee:	0d 90       	ld	r0, X+
     1f0:	00 20       	and	r0, r0
     1f2:	e9 f7       	brne	.-6      	; 0x1ee <clearFlags+0xa8>
     1f4:	11 97       	sbiw	r26, 0x01	; 1
     1f6:	82 e1       	ldi	r24, 0x12	; 18
     1f8:	e0 e3       	ldi	r30, 0x30	; 48
     1fa:	f2 e0       	ldi	r31, 0x02	; 2
     1fc:	01 90       	ld	r0, Z+
     1fe:	0d 92       	st	X+, r0
     200:	8a 95       	dec	r24
     202:	e1 f7       	brne	.-8      	; 0x1fc <clearFlags+0xb6>
		strcat(filepath, WIPRO_ID);
     204:	09 90       	ld	r0, Y+
     206:	00 20       	and	r0, r0
     208:	e9 f7       	brne	.-6      	; 0x204 <clearFlags+0xbe>
     20a:	de 01       	movw	r26, r28
     20c:	11 97       	sbiw	r26, 0x01	; 1
     20e:	83 e1       	ldi	r24, 0x13	; 19
     210:	e2 e4       	ldi	r30, 0x42	; 66
     212:	f2 e0       	ldi	r31, 0x02	; 2
     214:	01 90       	ld	r0, Z+
     216:	0d 92       	st	X+, r0
     218:	8a 95       	dec	r24
     21a:	e1 f7       	brne	.-8      	; 0x214 <clearFlags+0xce>
		updateFileWifi(filepath);	
     21c:	83 e0       	ldi	r24, 0x03	; 3
     21e:	96 e0       	ldi	r25, 0x06	; 6
     220:	0e 94 2f 06 	call	0xc5e	; 0xc5e <updateFileWifi>
	}
	
	memset(filepath, 0x00, 100);
     224:	84 e6       	ldi	r24, 0x64	; 100
     226:	e3 e0       	ldi	r30, 0x03	; 3
     228:	f6 e0       	ldi	r31, 0x06	; 6
     22a:	df 01       	movw	r26, r30
     22c:	1d 92       	st	X+, r1
     22e:	8a 95       	dec	r24
     230:	e9 f7       	brne	.-6      	; 0x22c <clearFlags+0xe6>
	return 1; 
}
     232:	81 e0       	ldi	r24, 0x01	; 1
     234:	90 e0       	ldi	r25, 0x00	; 0
     236:	df 91       	pop	r29
     238:	cf 91       	pop	r28
     23a:	08 95       	ret

0000023c <getHexFile>:
	memset(filepath, 0x00, 100);
	printf("Sent!");
}

int getHexFile()
{
     23c:	0f 93       	push	r16
     23e:	1f 93       	push	r17
	Flags[WIFI] = 1; 
     240:	81 e0       	ldi	r24, 0x01	; 1
     242:	80 93 68 06 	sts	0x0668, r24
	if(Flags[WIFI])
	{
		strcpy(filepath, URL);
     246:	85 e1       	ldi	r24, 0x15	; 21
     248:	eb e1       	ldi	r30, 0x1B	; 27
     24a:	f2 e0       	ldi	r31, 0x02	; 2
     24c:	a3 e0       	ldi	r26, 0x03	; 3
     24e:	b6 e0       	ldi	r27, 0x06	; 6
     250:	01 90       	ld	r0, Z+
     252:	0d 92       	st	X+, r0
     254:	8a 95       	dec	r24
     256:	e1 f7       	brne	.-8      	; 0x250 <getHexFile+0x14>
		strcat(filepath, HEX_FILE);
     258:	a3 e0       	ldi	r26, 0x03	; 3
     25a:	b6 e0       	ldi	r27, 0x06	; 6
     25c:	0d 90       	ld	r0, X+
     25e:	00 20       	and	r0, r0
     260:	e9 f7       	brne	.-6      	; 0x25c <getHexFile+0x20>
     262:	11 97       	sbiw	r26, 0x01	; 1
     264:	84 e2       	ldi	r24, 0x24	; 36
     266:	ed e9       	ldi	r30, 0x9D	; 157
     268:	f2 e0       	ldi	r31, 0x02	; 2
     26a:	01 90       	ld	r0, Z+
     26c:	0d 92       	st	X+, r0
     26e:	8a 95       	dec	r24
     270:	e1 f7       	brne	.-8      	; 0x26a <getHexFile+0x2e>
		//setTestPrint(1);
		printf("Compress Flag Set!");
     272:	81 ec       	ldi	r24, 0xC1	; 193
     274:	92 e0       	ldi	r25, 0x02	; 2
     276:	9f 93       	push	r25
     278:	8f 93       	push	r24
     27a:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <printf>
		setCompressFlag(1);
     27e:	81 e0       	ldi	r24, 0x01	; 1
     280:	90 e0       	ldi	r25, 0x00	; 0
     282:	0e 94 44 06 	call	0xc88	; 0xc88 <setCompressFlag>
		getFileWifi(filepath, 1, HEX_FILE_ADDRESS, 1);
     286:	01 e0       	ldi	r16, 0x01	; 1
     288:	10 e0       	ldi	r17, 0x00	; 0
     28a:	20 e0       	ldi	r18, 0x00	; 0
     28c:	30 e0       	ldi	r19, 0x00	; 0
     28e:	a9 01       	movw	r20, r18
     290:	61 e0       	ldi	r22, 0x01	; 1
     292:	70 e0       	ldi	r23, 0x00	; 0
     294:	83 e0       	ldi	r24, 0x03	; 3
     296:	96 e0       	ldi	r25, 0x06	; 6
     298:	0e 94 a8 05 	call	0xb50	; 0xb50 <getFileWifi>
		//setCompressFlag(0); 
		RAMPrint(HEX_FILE_ADDRESS, 1045);
     29c:	45 e1       	ldi	r20, 0x15	; 21
     29e:	54 e0       	ldi	r21, 0x04	; 4
     2a0:	60 e0       	ldi	r22, 0x00	; 0
     2a2:	70 e0       	ldi	r23, 0x00	; 0
     2a4:	cb 01       	movw	r24, r22
     2a6:	0e 94 df 04 	call	0x9be	; 0x9be <RAMPrint>
		//printf("Hex File Downloaded!\n");
	}
	
	return 1; 
     2aa:	0f 90       	pop	r0
     2ac:	0f 90       	pop	r0
}
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	90 e0       	ldi	r25, 0x00	; 0
     2b2:	1f 91       	pop	r17
     2b4:	0f 91       	pop	r16
     2b6:	08 95       	ret

000002b8 <getFlagStatus>:

int getFlagStatus()
{
     2b8:	0f 93       	push	r16
     2ba:	1f 93       	push	r17
     2bc:	cf 93       	push	r28
     2be:	df 93       	push	r29
	//Testing 
	TIMSK1 &= ~(1 << TOIE1);
     2c0:	ef e6       	ldi	r30, 0x6F	; 111
     2c2:	f0 e0       	ldi	r31, 0x00	; 0
     2c4:	80 81       	ld	r24, Z
     2c6:	8e 7f       	andi	r24, 0xFE	; 254
     2c8:	80 83       	st	Z, r24
	Flags[ETHERNET] = 0; 
     2ca:	10 92 67 06 	sts	0x0667, r1
	Flags[WIFI] = 1; 
     2ce:	81 e0       	ldi	r24, 0x01	; 1
     2d0:	80 93 68 06 	sts	0x0668, r24
		Flags[NETWORK_SCAN] = (RAMReadByte(STATUS_FLAG_ADDRESS + 1) & 0x0F);
		Flags[NETWORK_CONNECT] = (RAMReadByte(STATUS_FLAG_ADDRESS + 2) & 0x0F); 
		//printf("Flag Status: %s\n", flags);  
	}
	else if(Flags[WIFI]){
		strcpy(filepath, URL);
     2d4:	c3 e0       	ldi	r28, 0x03	; 3
     2d6:	d6 e0       	ldi	r29, 0x06	; 6
     2d8:	85 e1       	ldi	r24, 0x15	; 21
     2da:	eb e1       	ldi	r30, 0x1B	; 27
     2dc:	f2 e0       	ldi	r31, 0x02	; 2
     2de:	de 01       	movw	r26, r28
     2e0:	01 90       	ld	r0, Z+
     2e2:	0d 92       	st	X+, r0
     2e4:	8a 95       	dec	r24
     2e6:	e1 f7       	brne	.-8      	; 0x2e0 <getFlagStatus+0x28>
		strcat(filepath, FLAG_FILE); 
     2e8:	de 01       	movw	r26, r28
     2ea:	0d 90       	ld	r0, X+
     2ec:	00 20       	and	r0, r0
     2ee:	e9 f7       	brne	.-6      	; 0x2ea <getFlagStatus+0x32>
     2f0:	11 97       	sbiw	r26, 0x01	; 1
     2f2:	85 e2       	ldi	r24, 0x25	; 37
     2f4:	e4 ed       	ldi	r30, 0xD4	; 212
     2f6:	f2 e0       	ldi	r31, 0x02	; 2
     2f8:	01 90       	ld	r0, Z+
     2fa:	0d 92       	st	X+, r0
     2fc:	8a 95       	dec	r24
     2fe:	e1 f7       	brne	.-8      	; 0x2f8 <getFlagStatus+0x40>
		//setTestPrint(1);
		getFileWifi(filepath, 1, STATUS_FLAG_ADDRESS, 0); 
     300:	00 e0       	ldi	r16, 0x00	; 0
     302:	10 e0       	ldi	r17, 0x00	; 0
     304:	20 e0       	ldi	r18, 0x00	; 0
     306:	30 e3       	ldi	r19, 0x30	; 48
     308:	40 e0       	ldi	r20, 0x00	; 0
     30a:	50 e0       	ldi	r21, 0x00	; 0
     30c:	61 e0       	ldi	r22, 0x01	; 1
     30e:	70 e0       	ldi	r23, 0x00	; 0
     310:	ce 01       	movw	r24, r28
     312:	0e 94 a8 05 	call	0xb50	; 0xb50 <getFileWifi>
		printf("Ram Print: ");
     316:	89 ef       	ldi	r24, 0xF9	; 249
     318:	92 e0       	ldi	r25, 0x02	; 2
     31a:	9f 93       	push	r25
     31c:	8f 93       	push	r24
     31e:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <printf>
		RAMPrint(STATUS_FLAG_ADDRESS, 3);
     322:	43 e0       	ldi	r20, 0x03	; 3
     324:	50 e0       	ldi	r21, 0x00	; 0
     326:	60 e0       	ldi	r22, 0x00	; 0
     328:	70 e3       	ldi	r23, 0x30	; 48
     32a:	80 e0       	ldi	r24, 0x00	; 0
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	0e 94 df 04 	call	0x9be	; 0x9be <RAMPrint>
		printf("\n");
     332:	8a e0       	ldi	r24, 0x0A	; 10
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <putchar>
		Flags[PROGRAM] = (RAMReadByte(STATUS_FLAG_ADDRESS) & 0x0F);
     33a:	60 e0       	ldi	r22, 0x00	; 0
     33c:	70 e3       	ldi	r23, 0x30	; 48
     33e:	80 e0       	ldi	r24, 0x00	; 0
     340:	90 e0       	ldi	r25, 0x00	; 0
     342:	0e 94 4c 05 	call	0xa98	; 0xa98 <RAMReadByte>
     346:	09 e6       	ldi	r16, 0x69	; 105
     348:	16 e0       	ldi	r17, 0x06	; 6
     34a:	8f 70       	andi	r24, 0x0F	; 15
     34c:	f8 01       	movw	r30, r16
     34e:	80 83       	st	Z, r24
		Flags[NETWORK_SCAN] = (RAMReadByte(STATUS_FLAG_ADDRESS + 1) & 0x0F);
     350:	61 e0       	ldi	r22, 0x01	; 1
     352:	70 e3       	ldi	r23, 0x30	; 48
     354:	80 e0       	ldi	r24, 0x00	; 0
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	0e 94 4c 05 	call	0xa98	; 0xa98 <RAMReadByte>
     35c:	8f 70       	andi	r24, 0x0F	; 15
     35e:	80 93 6a 06 	sts	0x066A, r24
		Flags[NETWORK_CONNECT] = (RAMReadByte(STATUS_FLAG_ADDRESS + 2) & 0x0F);
     362:	62 e0       	ldi	r22, 0x02	; 2
     364:	70 e3       	ldi	r23, 0x30	; 48
     366:	80 e0       	ldi	r24, 0x00	; 0
     368:	90 e0       	ldi	r25, 0x00	; 0
     36a:	0e 94 4c 05 	call	0xa98	; 0xa98 <RAMReadByte>
     36e:	8f 70       	andi	r24, 0x0F	; 15
     370:	80 93 6b 06 	sts	0x066B, r24
		
	}
	memset(filepath, 0x00, 100); 
     374:	84 e6       	ldi	r24, 0x64	; 100
     376:	fe 01       	movw	r30, r28
     378:	11 92       	st	Z+, r1
     37a:	8a 95       	dec	r24
     37c:	e9 f7       	brne	.-6      	; 0x378 <getFlagStatus+0xc0>
	//Perform actions based on flags 
	if(Flags[PROGRAM] == 0x01)
     37e:	0f 90       	pop	r0
     380:	0f 90       	pop	r0
     382:	f8 01       	movw	r30, r16
     384:	80 81       	ld	r24, Z
     386:	81 30       	cpi	r24, 0x01	; 1
     388:	21 f4       	brne	.+8      	; 0x392 <getFlagStatus+0xda>
		//printf("Program!\n");
		//PORTD &= ~(1<<CTS);
		//wifiDriverInit(); 
		//PORTD |= (1<<CTS); 
		//_delay_ms(2000); 
		getHexFile();
     38a:	0e 94 1e 01 	call	0x23c	; 0x23c <getHexFile>
		Program();
     38e:	0e 94 8f 09 	call	0x131e	; 0x131e <Program>
		//printf("Network Connect!\n");
		//networkConnect("Wi-Pro", "brightshoe902"); 
		//getFileEthernet()
	}
	//_delay_ms(500);
	clearFlags(); 
     392:	0e 94 a3 00 	call	0x146	; 0x146 <clearFlags>
	TIMSK1 |= (1 << TOIE1);
     396:	ef e6       	ldi	r30, 0x6F	; 111
     398:	f0 e0       	ldi	r31, 0x00	; 0
     39a:	80 81       	ld	r24, Z
     39c:	81 60       	ori	r24, 0x01	; 1
     39e:	80 83       	st	Z, r24
}
     3a0:	df 91       	pop	r29
     3a2:	cf 91       	pop	r28
     3a4:	1f 91       	pop	r17
     3a6:	0f 91       	pop	r16
     3a8:	08 95       	ret

000003aa <__vector_20>:

//Timer overflow vector for polling 
ISR(TIMER1_OVF_vect)
{
     3aa:	1f 92       	push	r1
     3ac:	0f 92       	push	r0
     3ae:	0f b6       	in	r0, 0x3f	; 63
     3b0:	0f 92       	push	r0
     3b2:	11 24       	eor	r1, r1
     3b4:	2f 93       	push	r18
     3b6:	3f 93       	push	r19
     3b8:	4f 93       	push	r20
     3ba:	5f 93       	push	r21
     3bc:	6f 93       	push	r22
     3be:	7f 93       	push	r23
     3c0:	8f 93       	push	r24
     3c2:	9f 93       	push	r25
     3c4:	af 93       	push	r26
     3c6:	bf 93       	push	r27
     3c8:	ef 93       	push	r30
     3ca:	ff 93       	push	r31
	cli(); 
     3cc:	f8 94       	cli
	printf("Flag Status\n");
     3ce:	85 e0       	ldi	r24, 0x05	; 5
     3d0:	93 e0       	ldi	r25, 0x03	; 3
     3d2:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <puts>
	getFlagStatus(); 
     3d6:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <getFlagStatus>
	TCNT1L = 0x00;
     3da:	10 92 84 00 	sts	0x0084, r1
	TCNT1H = 0x00;
     3de:	10 92 85 00 	sts	0x0085, r1
	sei();  
     3e2:	78 94       	sei
}
     3e4:	ff 91       	pop	r31
     3e6:	ef 91       	pop	r30
     3e8:	bf 91       	pop	r27
     3ea:	af 91       	pop	r26
     3ec:	9f 91       	pop	r25
     3ee:	8f 91       	pop	r24
     3f0:	7f 91       	pop	r23
     3f2:	6f 91       	pop	r22
     3f4:	5f 91       	pop	r21
     3f6:	4f 91       	pop	r20
     3f8:	3f 91       	pop	r19
     3fa:	2f 91       	pop	r18
     3fc:	0f 90       	pop	r0
     3fe:	0f be       	out	0x3f, r0	; 63
     400:	0f 90       	pop	r0
     402:	1f 90       	pop	r1
     404:	18 95       	reti

00000406 <updateFileEthernet>:
	memset(httpBuff, 0x00, 100); 
	return receiveData; 
}

void updateFileEthernet(char* filepath)
{
     406:	cf 93       	push	r28
     408:	df 93       	push	r29
	//strncpy(httpBuff, "GET ", 4); 
	strcpy(httpBuff, filepath); 
     40a:	bc 01       	movw	r22, r24
     40c:	8c e6       	ldi	r24, 0x6C	; 108
     40e:	96 e0       	ldi	r25, 0x06	; 6
     410:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <strcpy>
	strncat(httpBuff, " HTTP/1.1 \nHost: www.wi-pro.us \n\n", 40); 
     414:	cc e6       	ldi	r28, 0x6C	; 108
     416:	d6 e0       	ldi	r29, 0x06	; 6
     418:	de 01       	movw	r26, r28
     41a:	0d 90       	ld	r0, X+
     41c:	00 20       	and	r0, r0
     41e:	e9 f7       	brne	.-6      	; 0x41a <updateFileEthernet+0x14>
     420:	11 97       	sbiw	r26, 0x01	; 1
     422:	82 e2       	ldi	r24, 0x22	; 34
     424:	e1 e1       	ldi	r30, 0x11	; 17
     426:	f3 e0       	ldi	r31, 0x03	; 3
     428:	01 90       	ld	r0, Z+
     42a:	0d 92       	st	X+, r0
     42c:	8a 95       	dec	r24
     42e:	e1 f7       	brne	.-8      	; 0x428 <updateFileEthernet+0x22>
	printf("%s", httpBuff); 
     430:	df 93       	push	r29
     432:	cf 93       	push	r28
     434:	84 e9       	ldi	r24, 0x94	; 148
     436:	92 e0       	ldi	r25, 0x02	; 2
     438:	9f 93       	push	r25
     43a:	8f 93       	push	r24
     43c:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <printf>
	SendData(httpBuff, strlen(httpBuff), 0);
     440:	fe 01       	movw	r30, r28
     442:	01 90       	ld	r0, Z+
     444:	00 20       	and	r0, r0
     446:	e9 f7       	brne	.-6      	; 0x442 <updateFileEthernet+0x3c>
     448:	31 97       	sbiw	r30, 0x01	; 1
     44a:	bf 01       	movw	r22, r30
     44c:	6c 56       	subi	r22, 0x6C	; 108
     44e:	76 40       	sbci	r23, 0x06	; 6
     450:	40 e0       	ldi	r20, 0x00	; 0
     452:	50 e0       	ldi	r21, 0x00	; 0
     454:	ce 01       	movw	r24, r28
     456:	0e 94 2d 03 	call	0x65a	; 0x65a <SendData>
	memset(httpBuff, 0x00, 100); 
     45a:	84 e6       	ldi	r24, 0x64	; 100
     45c:	fe 01       	movw	r30, r28
     45e:	11 92       	st	Z+, r1
     460:	8a 95       	dec	r24
     462:	e9 f7       	brne	.-6      	; 0x45e <updateFileEthernet+0x58>
     464:	0f 90       	pop	r0
     466:	0f 90       	pop	r0
     468:	0f 90       	pop	r0
     46a:	0f 90       	pop	r0
}
     46c:	df 91       	pop	r29
     46e:	cf 91       	pop	r28
     470:	08 95       	ret

00000472 <SPI_EthernetWrite>:
//}

void SPI_EthernetWrite(unsigned int addr,unsigned char data)
{
	// Activate the CS pin
	CS_PORT &= ~(1<<ETH_CS);
     472:	10 98       	cbi	0x02, 0	; 2
	// Start Wiznet W5100 Write OpCode transmission
	SPDR = WIZNET_WRITE_OPCODE;
     474:	20 ef       	ldi	r18, 0xF0	; 240
     476:	2e bd       	out	0x2e, r18	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     478:	0d b4       	in	r0, 0x2d	; 45
     47a:	07 fe       	sbrs	r0, 7
     47c:	fd cf       	rjmp	.-6      	; 0x478 <SPI_EthernetWrite+0x6>
	// Start Wiznet W5100 Address High Bytes transmission
	SPDR = (addr & 0xFF00) >> 8;
     47e:	9e bd       	out	0x2e, r25	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     480:	0d b4       	in	r0, 0x2d	; 45
     482:	07 fe       	sbrs	r0, 7
     484:	fd cf       	rjmp	.-6      	; 0x480 <SPI_EthernetWrite+0xe>
	// Start Wiznet W5100 Address Low Bytes transmission
	SPDR = addr & 0x00FF;
     486:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     488:	0d b4       	in	r0, 0x2d	; 45
     48a:	07 fe       	sbrs	r0, 7
     48c:	fd cf       	rjmp	.-6      	; 0x488 <SPI_EthernetWrite+0x16>

	// Start Data transmission
	SPDR = data;
     48e:	6e bd       	out	0x2e, r22	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     490:	0d b4       	in	r0, 0x2d	; 45
     492:	07 fe       	sbrs	r0, 7
     494:	fd cf       	rjmp	.-6      	; 0x490 <SPI_EthernetWrite+0x1e>
	// CS pin is not active
	CS_PORT |= (1<<ETH_CS);
     496:	10 9a       	sbi	0x02, 0	; 2
     498:	08 95       	ret

0000049a <SPI_EthernetRead>:
}

unsigned char SPI_EthernetRead(unsigned int addr)
{
	// Activate the CS pin
	CS_PORT &= ~(1<<ETH_CS);
     49a:	10 98       	cbi	0x02, 0	; 2
	// Start Wiznet W5100 Read OpCode transmission
	SPDR = WIZNET_READ_OPCODE;
     49c:	2f e0       	ldi	r18, 0x0F	; 15
     49e:	2e bd       	out	0x2e, r18	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     4a0:	0d b4       	in	r0, 0x2d	; 45
     4a2:	07 fe       	sbrs	r0, 7
     4a4:	fd cf       	rjmp	.-6      	; 0x4a0 <SPI_EthernetRead+0x6>
	// Start Wiznet W5100 Address High Bytes transmission
	SPDR = (addr & 0xFF00) >> 8;
     4a6:	9e bd       	out	0x2e, r25	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     4a8:	0d b4       	in	r0, 0x2d	; 45
     4aa:	07 fe       	sbrs	r0, 7
     4ac:	fd cf       	rjmp	.-6      	; 0x4a8 <SPI_EthernetRead+0xe>
	// Start Wiznet W5100 Address Low Bytes transmission
	SPDR = addr & 0x00FF;
     4ae:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     4b0:	0d b4       	in	r0, 0x2d	; 45
     4b2:	07 fe       	sbrs	r0, 7
     4b4:	fd cf       	rjmp	.-6      	; 0x4b0 <SPI_EthernetRead+0x16>

	// Send Dummy transmission for reading the data
	SPDR = 0x00;
     4b6:	1e bc       	out	0x2e, r1	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     4b8:	0d b4       	in	r0, 0x2d	; 45
     4ba:	07 fe       	sbrs	r0, 7
     4bc:	fd cf       	rjmp	.-6      	; 0x4b8 <SPI_EthernetRead+0x1e>

	// CS pin is not active
	CS_PORT |= (1<<ETH_CS);
     4be:	10 9a       	sbi	0x02, 0	; 2
	return(SPDR);
     4c0:	8e b5       	in	r24, 0x2e	; 46
}
     4c2:	08 95       	ret

000004c4 <Server_Connect>:
	//printf("Done Wiznet W5100 Initialized!\n");
	//Memory_Init(); 
}

int Server_Connect(uint8_t socketMode, uint8_t *server_ip_addr, uint8_t *server_port, uint8_t *source_port)
{
     4c4:	bf 92       	push	r11
     4c6:	cf 92       	push	r12
     4c8:	df 92       	push	r13
     4ca:	ef 92       	push	r14
     4cc:	ff 92       	push	r15
     4ce:	0f 93       	push	r16
     4d0:	1f 93       	push	r17
     4d2:	cf 93       	push	r28
     4d4:	df 93       	push	r29
     4d6:	b8 2e       	mov	r11, r24
     4d8:	7b 01       	movw	r14, r22
     4da:	6a 01       	movw	r12, r20
     4dc:	89 01       	movw	r16, r18
	do 
	{
		printf("SPI SR Status: %d\n", SPI_EthernetRead(S0_SR));
     4de:	cd e3       	ldi	r28, 0x3D	; 61
     4e0:	d3 e0       	ldi	r29, 0x03	; 3
     4e2:	83 e0       	ldi	r24, 0x03	; 3
     4e4:	94 e0       	ldi	r25, 0x04	; 4
     4e6:	0e 94 4d 02 	call	0x49a	; 0x49a <SPI_EthernetRead>
     4ea:	1f 92       	push	r1
     4ec:	8f 93       	push	r24
     4ee:	df 93       	push	r29
     4f0:	cf 93       	push	r28
     4f2:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <printf>
		SPI_EthernetWrite(S0_CR, CLOSE);
     4f6:	60 e1       	ldi	r22, 0x10	; 16
     4f8:	81 e0       	ldi	r24, 0x01	; 1
     4fa:	94 e0       	ldi	r25, 0x04	; 4
     4fc:	0e 94 39 02 	call	0x472	; 0x472 <SPI_EthernetWrite>
		//SPI_Write(S0_MR, TCP_MODE);
		SPI_EthernetWrite(S0_MR, socketMode);
     500:	6b 2d       	mov	r22, r11
     502:	80 e0       	ldi	r24, 0x00	; 0
     504:	94 e0       	ldi	r25, 0x04	; 4
     506:	0e 94 39 02 	call	0x472	; 0x472 <SPI_EthernetWrite>
		//printf("Setting Source Port on Socket 0 %d%d\n",source_port[0],source_port[1]);
		SPI_EthernetWrite(S0_SPORT + 0, source_port[0]);
     50a:	f8 01       	movw	r30, r16
     50c:	60 81       	ld	r22, Z
     50e:	84 e0       	ldi	r24, 0x04	; 4
     510:	94 e0       	ldi	r25, 0x04	; 4
     512:	0e 94 39 02 	call	0x472	; 0x472 <SPI_EthernetWrite>
		SPI_EthernetWrite(S0_SPORT + 1, source_port[1]);
     516:	f8 01       	movw	r30, r16
     518:	61 81       	ldd	r22, Z+1	; 0x01
     51a:	85 e0       	ldi	r24, 0x05	; 5
     51c:	94 e0       	ldi	r25, 0x04	; 4
     51e:	0e 94 39 02 	call	0x472	; 0x472 <SPI_EthernetWrite>
		//printf("Reading Source Port on Socket 0 %d%d\n\n",SPI_EthernetRead(S0_SPORT),SPI_EthernetRead(S0_SPORT + 1));
		
		//printf("Setting Socket 0 to Open\n\n");
		SPI_EthernetWrite(S0_CR, OPEN);
     522:	61 e0       	ldi	r22, 0x01	; 1
     524:	81 e0       	ldi	r24, 0x01	; 1
     526:	94 e0       	ldi	r25, 0x04	; 4
     528:	0e 94 39 02 	call	0x472	; 0x472 <SPI_EthernetWrite>
		//printf("SPI SR Status: %d\n", SPI_EthernetRead(S0_SR));
		
	} while (SPI_EthernetRead(S0_SR) != SOCK_INIT);
     52c:	83 e0       	ldi	r24, 0x03	; 3
     52e:	94 e0       	ldi	r25, 0x04	; 4
     530:	0e 94 4d 02 	call	0x49a	; 0x49a <SPI_EthernetRead>
     534:	0f 90       	pop	r0
     536:	0f 90       	pop	r0
     538:	0f 90       	pop	r0
     53a:	0f 90       	pop	r0
     53c:	83 31       	cpi	r24, 0x13	; 19
     53e:	89 f6       	brne	.-94     	; 0x4e2 <Server_Connect+0x1e>
	
	//Write Server IP to Socket 0 IP Register
	//printf("Setting Server IP Address %d.%d.%d.%d\n",server_ip_addr[0],server_ip_addr[1],\
	server_ip_addr[2],server_ip_addr[3]); 
	SPI_EthernetWrite(S0_DIPR + 0,server_ip_addr[0]);
     540:	f7 01       	movw	r30, r14
     542:	60 81       	ld	r22, Z
     544:	8c e0       	ldi	r24, 0x0C	; 12
     546:	94 e0       	ldi	r25, 0x04	; 4
     548:	0e 94 39 02 	call	0x472	; 0x472 <SPI_EthernetWrite>
	SPI_EthernetWrite(S0_DIPR + 1, server_ip_addr[1]);
     54c:	f7 01       	movw	r30, r14
     54e:	61 81       	ldd	r22, Z+1	; 0x01
     550:	8d e0       	ldi	r24, 0x0D	; 13
     552:	94 e0       	ldi	r25, 0x04	; 4
     554:	0e 94 39 02 	call	0x472	; 0x472 <SPI_EthernetWrite>
	SPI_EthernetWrite(S0_DIPR + 2,server_ip_addr[2]);
     558:	f7 01       	movw	r30, r14
     55a:	62 81       	ldd	r22, Z+2	; 0x02
     55c:	8e e0       	ldi	r24, 0x0E	; 14
     55e:	94 e0       	ldi	r25, 0x04	; 4
     560:	0e 94 39 02 	call	0x472	; 0x472 <SPI_EthernetWrite>
	SPI_EthernetWrite(S0_DIPR + 3, server_ip_addr[3]);
     564:	f7 01       	movw	r30, r14
     566:	63 81       	ldd	r22, Z+3	; 0x03
     568:	8f e0       	ldi	r24, 0x0F	; 15
     56a:	94 e0       	ldi	r25, 0x04	; 4
     56c:	0e 94 39 02 	call	0x472	; 0x472 <SPI_EthernetWrite>
	SPI_EthernetRead(S0_DIPR + 2),SPI_EthernetRead(S0_DIPR + 3));
	//printf("SPI SR Status: 0x%02x\n", SPI_EthernetRead(S0_SR));
	
	//Write Server Port to Socket 0 IP Register 
	//printf("Setting Server Port\n");
	SPI_EthernetWrite(S0_DPORT + 0, server_port[0]); 
     570:	f6 01       	movw	r30, r12
     572:	60 81       	ld	r22, Z
     574:	80 e1       	ldi	r24, 0x10	; 16
     576:	94 e0       	ldi	r25, 0x04	; 4
     578:	0e 94 39 02 	call	0x472	; 0x472 <SPI_EthernetWrite>
	SPI_EthernetWrite(S0_DPORT + 1, server_port[1]);
     57c:	f6 01       	movw	r30, r12
     57e:	61 81       	ldd	r22, Z+1	; 0x01
     580:	81 e1       	ldi	r24, 0x11	; 17
     582:	94 e0       	ldi	r25, 0x04	; 4
     584:	0e 94 39 02 	call	0x472	; 0x472 <SPI_EthernetWrite>
	//printf("Reading S0_DPORT: %d%d\n\n",SPI_EthernetRead(S0_DPORT + 0),SPI_EthernetRead(S0_DPORT + 1)); 
	//printf("SPI SR Status: 0x%02x\n", SPI_EthernetRead(S0_SR));
	
	//Try to connect 
	SPI_EthernetWrite(S0_CR, CONNECT);
     588:	64 e0       	ldi	r22, 0x04	; 4
     58a:	81 e0       	ldi	r24, 0x01	; 1
     58c:	94 e0       	ldi	r25, 0x04	; 4
     58e:	0e 94 39 02 	call	0x472	; 0x472 <SPI_EthernetWrite>
	//while((SPI_EthernetRead(S0_IR) & 0x1F) != 0); 
	//while((SPI_EthernetRead(S0_SR) != SOCK_ESTABLISHED)); 

	//Check to see if connection has been established 
	unsigned int delayCount = 0; 
     592:	c0 e0       	ldi	r28, 0x00	; 0
     594:	d0 e0       	ldi	r29, 0x00	; 0
	while(SPI_EthernetRead(S0_SR) != SOCK_ESTABLISHED)
	{
		_delay_us(300); 
		delayCount += 1; 
		//Every 3 seconds
		if(delayCount%10000 == 0)
     596:	00 e1       	ldi	r16, 0x10	; 16
     598:	17 e2       	ldi	r17, 0x27	; 39
	//while((SPI_EthernetRead(S0_IR) & 0x1F) != 0); 
	//while((SPI_EthernetRead(S0_SR) != SOCK_ESTABLISHED)); 

	//Check to see if connection has been established 
	unsigned int delayCount = 0; 
	while(SPI_EthernetRead(S0_SR) != SOCK_ESTABLISHED)
     59a:	36 c0       	rjmp	.+108    	; 0x608 <Server_Connect+0x144>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     59c:	87 e5       	ldi	r24, 0x57	; 87
     59e:	92 e0       	ldi	r25, 0x02	; 2
     5a0:	01 97       	sbiw	r24, 0x01	; 1
     5a2:	f1 f7       	brne	.-4      	; 0x5a0 <Server_Connect+0xdc>
     5a4:	00 c0       	rjmp	.+0      	; 0x5a6 <Server_Connect+0xe2>
     5a6:	00 00       	nop
	{
		_delay_us(300); 
		delayCount += 1; 
     5a8:	21 96       	adiw	r28, 0x01	; 1
		//Every 3 seconds
		if(delayCount%10000 == 0)
     5aa:	9e 01       	movw	r18, r28
     5ac:	32 95       	swap	r19
     5ae:	22 95       	swap	r18
     5b0:	2f 70       	andi	r18, 0x0F	; 15
     5b2:	23 27       	eor	r18, r19
     5b4:	3f 70       	andi	r19, 0x0F	; 15
     5b6:	23 27       	eor	r18, r19
     5b8:	a7 e4       	ldi	r26, 0x47	; 71
     5ba:	b3 e0       	ldi	r27, 0x03	; 3
     5bc:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <__umulhisi3>
     5c0:	96 95       	lsr	r25
     5c2:	87 95       	ror	r24
     5c4:	96 95       	lsr	r25
     5c6:	87 95       	ror	r24
     5c8:	96 95       	lsr	r25
     5ca:	87 95       	ror	r24
     5cc:	80 9f       	mul	r24, r16
     5ce:	90 01       	movw	r18, r0
     5d0:	81 9f       	mul	r24, r17
     5d2:	30 0d       	add	r19, r0
     5d4:	90 9f       	mul	r25, r16
     5d6:	30 0d       	add	r19, r0
     5d8:	11 24       	eor	r1, r1
     5da:	c2 17       	cp	r28, r18
     5dc:	d3 07       	cpc	r29, r19
     5de:	a1 f4       	brne	.+40     	; 0x608 <Server_Connect+0x144>
		{
			printf("Trying to Establish Connection...\n");
     5e0:	80 e5       	ldi	r24, 0x50	; 80
     5e2:	93 e0       	ldi	r25, 0x03	; 3
     5e4:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <puts>
			//delayCount = 0; 
			//15 seconds
			if(delayCount > 50000)
     5e8:	c1 35       	cpi	r28, 0x51	; 81
     5ea:	93 ec       	ldi	r25, 0xC3	; 195
     5ec:	d9 07       	cpc	r29, r25
     5ee:	60 f0       	brcs	.+24     	; 0x608 <Server_Connect+0x144>
			{
				printf("Timeout, disconnecting!\n"); 
     5f0:	82 e7       	ldi	r24, 0x72	; 114
     5f2:	93 e0       	ldi	r25, 0x03	; 3
     5f4:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <puts>
				SPI_EthernetWrite(S0_CR, CLOSE); 
     5f8:	60 e1       	ldi	r22, 0x10	; 16
     5fa:	81 e0       	ldi	r24, 0x01	; 1
     5fc:	94 e0       	ldi	r25, 0x04	; 4
     5fe:	0e 94 39 02 	call	0x472	; 0x472 <SPI_EthernetWrite>
				return 0; 
     602:	80 e0       	ldi	r24, 0x00	; 0
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	19 c0       	rjmp	.+50     	; 0x63a <Server_Connect+0x176>
	//while((SPI_EthernetRead(S0_IR) & 0x1F) != 0); 
	//while((SPI_EthernetRead(S0_SR) != SOCK_ESTABLISHED)); 

	//Check to see if connection has been established 
	unsigned int delayCount = 0; 
	while(SPI_EthernetRead(S0_SR) != SOCK_ESTABLISHED)
     608:	83 e0       	ldi	r24, 0x03	; 3
     60a:	94 e0       	ldi	r25, 0x04	; 4
     60c:	0e 94 4d 02 	call	0x49a	; 0x49a <SPI_EthernetRead>
     610:	87 31       	cpi	r24, 0x17	; 23
     612:	21 f6       	brne	.-120    	; 0x59c <Server_Connect+0xd8>
				return 0; 
			}
		}
	}
	
	uint8_t sr_status = SPI_EthernetRead(S0_SR);
     614:	83 e0       	ldi	r24, 0x03	; 3
     616:	94 e0       	ldi	r25, 0x04	; 4
     618:	0e 94 4d 02 	call	0x49a	; 0x49a <SPI_EthernetRead>
	if(sr_status == SOCK_ESTABLISHED)
     61c:	87 31       	cpi	r24, 0x17	; 23
     61e:	39 f4       	brne	.+14     	; 0x62e <Server_Connect+0x16a>
	{
		//printf("SPI SR Status: 0x%02x\n", sr_status);
		printf("Connection Succeeded!\n\n");
     620:	8a e8       	ldi	r24, 0x8A	; 138
     622:	93 e0       	ldi	r25, 0x03	; 3
     624:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <puts>
		return 1; 
     628:	81 e0       	ldi	r24, 0x01	; 1
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	06 c0       	rjmp	.+12     	; 0x63a <Server_Connect+0x176>
	}
	//Connection Failed 
	else
	{
		//printf("SPI SR Status: 0x%02x\n", sr_status);
		printf("Could not connect. Exiting...\n\n");
     62e:	81 ea       	ldi	r24, 0xA1	; 161
     630:	93 e0       	ldi	r25, 0x03	; 3
     632:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <puts>
		return 0; 
     636:	80 e0       	ldi	r24, 0x00	; 0
     638:	90 e0       	ldi	r25, 0x00	; 0
	}
}
     63a:	df 91       	pop	r29
     63c:	cf 91       	pop	r28
     63e:	1f 91       	pop	r17
     640:	0f 91       	pop	r16
     642:	ff 90       	pop	r15
     644:	ef 90       	pop	r14
     646:	df 90       	pop	r13
     648:	cf 90       	pop	r12
     64a:	bf 90       	pop	r11
     64c:	08 95       	ret

0000064e <SocketCommand>:
	return ((SPI_EthernetRead(S0_RX_RSR) & 0x00FF) << 8 ) + SPI_EthernetRead(S0_RX_RSR + 1);
}

void SocketCommand(uint8_t command) 
{
	SPI_EthernetWrite(S0_CR, command);
     64e:	68 2f       	mov	r22, r24
     650:	81 e0       	ldi	r24, 0x01	; 1
     652:	94 e0       	ldi	r25, 0x04	; 4
     654:	0e 94 39 02 	call	0x472	; 0x472 <SPI_EthernetWrite>
     658:	08 95       	ret

0000065a <SendData>:
	S0_RX_MASK = 0x1FFF;
	S0_RX_BASE = 0x6000;
}

int SendData(const uint8_t *buffer,uint16_t bufferLength, int externRAM)
{
     65a:	4f 92       	push	r4
     65c:	5f 92       	push	r5
     65e:	6f 92       	push	r6
     660:	7f 92       	push	r7
     662:	8f 92       	push	r8
     664:	9f 92       	push	r9
     666:	af 92       	push	r10
     668:	bf 92       	push	r11
     66a:	cf 92       	push	r12
     66c:	df 92       	push	r13
     66e:	ef 92       	push	r14
     670:	ff 92       	push	r15
     672:	0f 93       	push	r16
     674:	1f 93       	push	r17
     676:	cf 93       	push	r28
     678:	df 93       	push	r29
     67a:	7c 01       	movw	r14, r24
     67c:	6b 01       	movw	r12, r22
     67e:	3a 01       	movw	r6, r20
		
	uint16_t ptr,offaddr,realaddr,txsize,timeout,i,data;
	printf("SR: 0x%02x\n", SPI_EthernetRead(S0_SR));
     680:	83 e0       	ldi	r24, 0x03	; 3
     682:	94 e0       	ldi	r25, 0x04	; 4
     684:	0e 94 4d 02 	call	0x49a	; 0x49a <SPI_EthernetRead>
     688:	1f 92       	push	r1
     68a:	8f 93       	push	r24
     68c:	80 ec       	ldi	r24, 0xC0	; 192
     68e:	93 e0       	ldi	r25, 0x03	; 3
     690:	9f 93       	push	r25
     692:	8f 93       	push	r24
     694:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <printf>
	if(SPI_EthernetRead(S0_SR) != SOCK_ESTABLISHED){
     698:	83 e0       	ldi	r24, 0x03	; 3
     69a:	94 e0       	ldi	r25, 0x04	; 4
     69c:	0e 94 4d 02 	call	0x49a	; 0x49a <SPI_EthernetRead>
     6a0:	0f 90       	pop	r0
     6a2:	0f 90       	pop	r0
     6a4:	0f 90       	pop	r0
     6a6:	0f 90       	pop	r0
     6a8:	87 31       	cpi	r24, 0x17	; 23
     6aa:	59 f0       	breq	.+22     	; 0x6c2 <SendData+0x68>
		while(!Server_Connect(TCP_MODE, gl_server_ip_addr, gl_server_port, gl_source_port));
     6ac:	20 e0       	ldi	r18, 0x00	; 0
     6ae:	32 e0       	ldi	r19, 0x02	; 2
     6b0:	42 e0       	ldi	r20, 0x02	; 2
     6b2:	52 e0       	ldi	r21, 0x02	; 2
     6b4:	64 e0       	ldi	r22, 0x04	; 4
     6b6:	72 e0       	ldi	r23, 0x02	; 2
     6b8:	81 e0       	ldi	r24, 0x01	; 1
     6ba:	0e 94 62 02 	call	0x4c4	; 0x4c4 <Server_Connect>
     6be:	89 2b       	or	r24, r25
     6c0:	a9 f3       	breq	.-22     	; 0x6ac <SendData+0x52>
	}
	//#if _DEBUG_MODE
	//printf("Send Size: %d\n",bufferLength);
	//#endif
	// Make sure the TX Free Size Register is available
	txsize = SPI_EthernetRead(S0_TX_FSR);
     6c2:	80 e2       	ldi	r24, 0x20	; 32
     6c4:	94 e0       	ldi	r25, 0x04	; 4
     6c6:	0e 94 4d 02 	call	0x49a	; 0x49a <SPI_EthernetRead>
     6ca:	c8 2f       	mov	r28, r24
     6cc:	d0 e0       	ldi	r29, 0x00	; 0
	txsize = (((txsize & 0x00FF) << 8 ) + SPI_EthernetRead(S0_TX_FSR + 1));
     6ce:	dc 2f       	mov	r29, r28
     6d0:	cc 27       	eor	r28, r28
     6d2:	81 e2       	ldi	r24, 0x21	; 33
     6d4:	94 e0       	ldi	r25, 0x04	; 4
     6d6:	0e 94 4d 02 	call	0x49a	; 0x49a <SPI_EthernetRead>
     6da:	c8 0f       	add	r28, r24
     6dc:	d1 1d       	adc	r29, r1
	//#if _DEBUG_MODE
	//printf("TX Free Size: %d\n",txsize);
	//#endif
	timeout = 0;
	//Writing our buffer to the transmit buffer
	while (txsize < bufferLength) {
     6de:	cc 15       	cp	r28, r12
     6e0:	dd 05       	cpc	r29, r13
     6e2:	08 f4       	brcc	.+2      	; 0x6e6 <SendData+0x8c>
     6e4:	a0 c0       	rjmp	.+320    	; 0x826 <SendData+0x1cc>
     6e6:	30 c0       	rjmp	.+96     	; 0x748 <SendData+0xee>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6e8:	8f ec       	ldi	r24, 0xCF	; 207
     6ea:	97 e0       	ldi	r25, 0x07	; 7
     6ec:	01 97       	sbiw	r24, 0x01	; 1
     6ee:	f1 f7       	brne	.-4      	; 0x6ec <SendData+0x92>
     6f0:	00 c0       	rjmp	.+0      	; 0x6f2 <SendData+0x98>
     6f2:	00 00       	nop
		_delay_ms(1);
		txsize = SPI_EthernetRead(S0_TX_FSR);
     6f4:	80 e2       	ldi	r24, 0x20	; 32
     6f6:	94 e0       	ldi	r25, 0x04	; 4
     6f8:	0e 94 4d 02 	call	0x49a	; 0x49a <SPI_EthernetRead>
     6fc:	c8 2f       	mov	r28, r24
     6fe:	d0 e0       	ldi	r29, 0x00	; 0
		txsize = (((txsize & 0x00FF) << 8 ) + SPI_EthernetRead(S0_TX_FSR + 1));
     700:	dc 2f       	mov	r29, r28
     702:	cc 27       	eor	r28, r28
     704:	81 e2       	ldi	r24, 0x21	; 33
     706:	94 e0       	ldi	r25, 0x04	; 4
     708:	0e 94 4d 02 	call	0x49a	; 0x49a <SPI_EthernetRead>
     70c:	c8 0f       	add	r28, r24
     70e:	d1 1d       	adc	r29, r1
		printf("TX Size: %d", txsize);
     710:	df 93       	push	r29
     712:	cf 93       	push	r28
     714:	9f 92       	push	r9
     716:	8f 92       	push	r8
     718:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <printf>
     71c:	01 50       	subi	r16, 0x01	; 1
     71e:	11 09       	sbc	r17, r1
		// Timeout for approx 1000 ms
		if (timeout++ > 1000) {
     720:	0f 90       	pop	r0
     722:	0f 90       	pop	r0
     724:	0f 90       	pop	r0
     726:	0f 90       	pop	r0
     728:	01 15       	cp	r16, r1
     72a:	11 05       	cpc	r17, r1
     72c:	51 f4       	brne	.+20     	; 0x742 <SendData+0xe8>
			//#if _DEBUG_MODE
			//printf("TX Free Size Error!\n");
			//#endif
			// Disconnect the connection
			SocketCommand(DISCON);
     72e:	88 e0       	ldi	r24, 0x08	; 8
     730:	0e 94 27 03 	call	0x64e	; 0x64e <SocketCommand>
			while(SPI_EthernetRead(S0_CR));
     734:	81 e0       	ldi	r24, 0x01	; 1
     736:	94 e0       	ldi	r25, 0x04	; 4
     738:	0e 94 4d 02 	call	0x49a	; 0x49a <SPI_EthernetRead>
     73c:	81 11       	cpse	r24, r1
     73e:	fa cf       	rjmp	.-12     	; 0x734 <SendData+0xda>
     740:	6c c0       	rjmp	.+216    	; 0x81a <SendData+0x1c0>
	//#if _DEBUG_MODE
	//printf("TX Free Size: %d\n",txsize);
	//#endif
	timeout = 0;
	//Writing our buffer to the transmit buffer
	while (txsize < bufferLength) {
     742:	cc 15       	cp	r28, r12
     744:	dd 05       	cpc	r29, r13
     746:	80 f2       	brcs	.-96     	; 0x6e8 <SendData+0x8e>
			return 0;
		}
	}

	// Read the Tx Write Pointer
	ptr = SPI_EthernetRead(S0_TX_WR);
     748:	84 e2       	ldi	r24, 0x24	; 36
     74a:	94 e0       	ldi	r25, 0x04	; 4
     74c:	0e 94 4d 02 	call	0x49a	; 0x49a <SPI_EthernetRead>
     750:	48 2e       	mov	r4, r24
	offaddr = (((ptr & 0x00FF) << 8 ) + SPI_EthernetRead(S0_TX_WR + 1));
     752:	85 e2       	ldi	r24, 0x25	; 37
     754:	94 e0       	ldi	r25, 0x04	; 4
     756:	0e 94 4d 02 	call	0x49a	; 0x49a <SPI_EthernetRead>
			return 0;
		}
	}

	// Read the Tx Write Pointer
	ptr = SPI_EthernetRead(S0_TX_WR);
     75a:	51 2c       	mov	r5, r1
	offaddr = (((ptr & 0x00FF) << 8 ) + SPI_EthernetRead(S0_TX_WR + 1));
     75c:	54 2c       	mov	r5, r4
     75e:	44 24       	eor	r4, r4
     760:	48 0e       	add	r4, r24
     762:	51 1c       	adc	r5, r1
	unsigned int startaddr = (((SPI_EthernetRead(S0_TX_RR) << 8) + SPI_EthernetRead(S0_TX_RR + 1)));
     764:	82 e2       	ldi	r24, 0x22	; 34
     766:	94 e0       	ldi	r25, 0x04	; 4
     768:	0e 94 4d 02 	call	0x49a	; 0x49a <SPI_EthernetRead>
     76c:	83 e2       	ldi	r24, 0x23	; 35
     76e:	94 e0       	ldi	r25, 0x04	; 4
     770:	0e 94 4d 02 	call	0x49a	; 0x49a <SPI_EthernetRead>
	//printf("Real WR: %d\n", realWR);
	//printf("Real RR: %d\n", realRR); 
	//#endif 
	i = 0; 
	data = 0; 
	printf("Sending...\n\n");
     774:	88 ed       	ldi	r24, 0xD8	; 216
     776:	93 e0       	ldi	r25, 0x03	; 3
     778:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <puts>
	while(i < bufferLength) {
     77c:	c1 14       	cp	r12, r1
     77e:	d1 04       	cpc	r13, r1
     780:	79 f1       	breq	.+94     	; 0x7e0 <SendData+0x186>
     782:	47 01       	movw	r8, r14
     784:	8c 0c       	add	r8, r12
     786:	9d 1c       	adc	r9, r13
		}
	}

	// Read the Tx Write Pointer
	ptr = SPI_EthernetRead(S0_TX_WR);
	offaddr = (((ptr & 0x00FF) << 8 ) + SPI_EthernetRead(S0_TX_WR + 1));
     788:	82 01       	movw	r16, r4
	//printf("Real RR: %d\n", realRR); 
	//#endif 
	i = 0; 
	data = 0; 
	printf("Sending...\n\n");
	while(i < bufferLength) {
     78a:	c0 e0       	ldi	r28, 0x00	; 0
     78c:	d4 e0       	ldi	r29, 0x04	; 4

		// Calculate the real W5100 physical Tx Buffer Address
		realaddr = S0_TX_BASE + (offaddr & S0_TX_MASK);
     78e:	a0 90 02 07 	lds	r10, 0x0702
     792:	b0 90 03 07 	lds	r11, 0x0703
     796:	a0 22       	and	r10, r16
     798:	b1 22       	and	r11, r17
     79a:	80 91 04 07 	lds	r24, 0x0704
     79e:	90 91 05 07 	lds	r25, 0x0705
     7a2:	a8 0e       	add	r10, r24
     7a4:	b9 1e       	adc	r11, r25
		//printf("TX Real Address: %d\n", realaddr);
		// Copy the application data to the W5100 Tx Buffer
		if(externRAM)
     7a6:	61 14       	cp	r6, r1
     7a8:	71 04       	cpc	r7, r1
     7aa:	51 f0       	breq	.+20     	; 0x7c0 <SendData+0x166>
		{
			//Grab the byte from external RAM and write it to the Wiznet TX Buffer 
			data = RAMReadByte(WIFI_QSTRING_ADDRESS + i);
     7ac:	be 01       	movw	r22, r28
     7ae:	80 e0       	ldi	r24, 0x00	; 0
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	0e 94 4c 05 	call	0xa98	; 0xa98 <RAMReadByte>
			//_delay_us(10);
			//printf("%c", data);
			SPI_EthernetWrite(realaddr, data);
     7b6:	68 2f       	mov	r22, r24
     7b8:	c5 01       	movw	r24, r10
     7ba:	0e 94 39 02 	call	0x472	; 0x472 <SPI_EthernetWrite>
     7be:	05 c0       	rjmp	.+10     	; 0x7ca <SendData+0x170>
			//_delay_us(10);
		}
		else
		{
			//printf("%c", *buffer);
			SPI_EthernetWrite(realaddr,*buffer);	
     7c0:	f7 01       	movw	r30, r14
     7c2:	60 81       	ld	r22, Z
     7c4:	c5 01       	movw	r24, r10
     7c6:	0e 94 39 02 	call	0x472	; 0x472 <SPI_EthernetWrite>
		}
		offaddr++;
     7ca:	0f 5f       	subi	r16, 0xFF	; 255
     7cc:	1f 4f       	sbci	r17, 0xFF	; 255
		buffer++;
     7ce:	ff ef       	ldi	r31, 0xFF	; 255
     7d0:	ef 1a       	sub	r14, r31
     7d2:	ff 0a       	sbc	r15, r31
     7d4:	21 96       	adiw	r28, 0x01	; 1
	//printf("Real RR: %d\n", realRR); 
	//#endif 
	i = 0; 
	data = 0; 
	printf("Sending...\n\n");
	while(i < bufferLength) {
     7d6:	e8 14       	cp	r14, r8
     7d8:	f9 04       	cpc	r15, r9
     7da:	c9 f6       	brne	.-78     	; 0x78e <SendData+0x134>
     7dc:	4c 0c       	add	r4, r12
     7de:	5d 1c       	adc	r5, r13
		}
		offaddr++;
		buffer++;
		i++; 
	}
		SPI_EthernetWrite(realaddr + 1, 0x00);
     7e0:	60 e0       	ldi	r22, 0x00	; 0
     7e2:	c5 01       	movw	r24, r10
     7e4:	01 96       	adiw	r24, 0x01	; 1
     7e6:	0e 94 39 02 	call	0x472	; 0x472 <SPI_EthernetWrite>

	// Increase the S0_TX_WR value, so it points to the next transmit
	//printf("Offset After: %d\n", offaddr);
	ptr = SPI_EthernetRead(S0_TX_WR);
     7ea:	84 e2       	ldi	r24, 0x24	; 36
     7ec:	94 e0       	ldi	r25, 0x04	; 4
     7ee:	0e 94 4d 02 	call	0x49a	; 0x49a <SPI_EthernetRead>
	//realWR = S0_TX_BASE + (offaddr & S0_TX_MASK);
	//printf("Real WR: %d\n", realWR);
	//printf("%d\n", (offaddr & 0xFF00) >> 8);
	//printf("%d\n", (offaddr & 0x00FF));
	//SPI_Write(S0_TX_WR,(offaddr & 0xFF00) >> 8 );
	SPI_EthernetWrite(S0_TX_WR, 0xFF);
     7f2:	6f ef       	ldi	r22, 0xFF	; 255
     7f4:	84 e2       	ldi	r24, 0x24	; 36
     7f6:	94 e0       	ldi	r25, 0x04	; 4
     7f8:	0e 94 39 02 	call	0x472	; 0x472 <SPI_EthernetWrite>
	SPI_EthernetWrite(S0_TX_WR + 1,(offaddr & 0x00FF));
     7fc:	64 2d       	mov	r22, r4
     7fe:	85 e2       	ldi	r24, 0x25	; 37
     800:	94 e0       	ldi	r25, 0x04	; 4
     802:	0e 94 39 02 	call	0x472	; 0x472 <SPI_EthernetWrite>
	//realRR = S0_TX_BASE + (startaddr & S0_TX_MASK);
	//printf("Real WR: %d\n", realWR);
	//printf("Real RR: %d\n", realRR);
	
	// Now Send the SEND command
	SocketCommand(SEND);
     806:	80 e2       	ldi	r24, 0x20	; 32
     808:	0e 94 27 03 	call	0x64e	; 0x64e <SocketCommand>
	//printf("WR Low: %d\n", SPI_Read(S0_TX_WR));
	//printf("WR High: %d\n", SPI_Read(S0_TX_WR + 1));
	// Wait for Sending Process
	while(SPI_EthernetRead(S0_CR));
     80c:	81 e0       	ldi	r24, 0x01	; 1
     80e:	94 e0       	ldi	r25, 0x04	; 4
     810:	0e 94 4d 02 	call	0x49a	; 0x49a <SPI_EthernetRead>
     814:	81 11       	cpse	r24, r1
     816:	fa cf       	rjmp	.-12     	; 0x80c <SendData+0x1b2>
     818:	03 c0       	rjmp	.+6      	; 0x820 <SendData+0x1c6>
			//printf("TX Free Size Error!\n");
			//#endif
			// Disconnect the connection
			SocketCommand(DISCON);
			while(SPI_EthernetRead(S0_CR));
			return 0;
     81a:	80 e0       	ldi	r24, 0x00	; 0
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	2c c0       	rjmp	.+88     	; 0x878 <SendData+0x21e>
	//printf("WR Low: %d\n", SPI_Read(S0_TX_WR));
	//printf("WR High: %d\n", SPI_Read(S0_TX_WR + 1));
	// Wait for Sending Process
	while(SPI_EthernetRead(S0_CR));
	//while(!(SPI_EthernetRead(S0_IR) & (1<<SIR_SEND_OK))); 
	return 1;
     820:	81 e0       	ldi	r24, 0x01	; 1
     822:	90 e0       	ldi	r25, 0x00	; 0
     824:	29 c0       	rjmp	.+82     	; 0x878 <SendData+0x21e>
     826:	8f ec       	ldi	r24, 0xCF	; 207
     828:	97 e0       	ldi	r25, 0x07	; 7
     82a:	01 97       	sbiw	r24, 0x01	; 1
     82c:	f1 f7       	brne	.-4      	; 0x82a <SendData+0x1d0>
     82e:	00 c0       	rjmp	.+0      	; 0x830 <SendData+0x1d6>
     830:	00 00       	nop
	//#endif
	timeout = 0;
	//Writing our buffer to the transmit buffer
	while (txsize < bufferLength) {
		_delay_ms(1);
		txsize = SPI_EthernetRead(S0_TX_FSR);
     832:	80 e2       	ldi	r24, 0x20	; 32
     834:	94 e0       	ldi	r25, 0x04	; 4
     836:	0e 94 4d 02 	call	0x49a	; 0x49a <SPI_EthernetRead>
     83a:	c8 2f       	mov	r28, r24
     83c:	d0 e0       	ldi	r29, 0x00	; 0
		txsize = (((txsize & 0x00FF) << 8 ) + SPI_EthernetRead(S0_TX_FSR + 1));
     83e:	dc 2f       	mov	r29, r28
     840:	cc 27       	eor	r28, r28
     842:	81 e2       	ldi	r24, 0x21	; 33
     844:	94 e0       	ldi	r25, 0x04	; 4
     846:	0e 94 4d 02 	call	0x49a	; 0x49a <SPI_EthernetRead>
     84a:	c8 0f       	add	r28, r24
     84c:	d1 1d       	adc	r29, r1
		printf("TX Size: %d", txsize);
     84e:	df 93       	push	r29
     850:	cf 93       	push	r28
     852:	8c ec       	ldi	r24, 0xCC	; 204
     854:	93 e0       	ldi	r25, 0x03	; 3
     856:	9f 93       	push	r25
     858:	8f 93       	push	r24
     85a:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <printf>
     85e:	0f 90       	pop	r0
     860:	0f 90       	pop	r0
     862:	0f 90       	pop	r0
     864:	0f 90       	pop	r0
     866:	09 ee       	ldi	r16, 0xE9	; 233
     868:	13 e0       	ldi	r17, 0x03	; 3
     86a:	0f 2e       	mov	r0, r31
     86c:	fc ec       	ldi	r31, 0xCC	; 204
     86e:	8f 2e       	mov	r8, r31
     870:	f3 e0       	ldi	r31, 0x03	; 3
     872:	9f 2e       	mov	r9, r31
     874:	f0 2d       	mov	r31, r0
     876:	65 cf       	rjmp	.-310    	; 0x742 <SendData+0xe8>
	//printf("WR High: %d\n", SPI_Read(S0_TX_WR + 1));
	// Wait for Sending Process
	while(SPI_EthernetRead(S0_CR));
	//while(!(SPI_EthernetRead(S0_IR) & (1<<SIR_SEND_OK))); 
	return 1;
}
     878:	df 91       	pop	r29
     87a:	cf 91       	pop	r28
     87c:	1f 91       	pop	r17
     87e:	0f 91       	pop	r16
     880:	ff 90       	pop	r15
     882:	ef 90       	pop	r14
     884:	df 90       	pop	r13
     886:	cf 90       	pop	r12
     888:	bf 90       	pop	r11
     88a:	af 90       	pop	r10
     88c:	9f 90       	pop	r9
     88e:	8f 90       	pop	r8
     890:	7f 90       	pop	r7
     892:	6f 90       	pop	r6
     894:	5f 90       	pop	r5
     896:	4f 90       	pop	r4
     898:	08 95       	ret

0000089a <SPI_FPGA_Write>:
	SPI_FPGA_Write(FPGA_Disable);
}

void SPI_FPGA_Write(unsigned char SPI_Data)
{
	FPGA_CS_PORT &= ~(1<<FPGA_SPI_CS);
     89a:	a4 98       	cbi	0x14, 4	; 20
	// Start Write transmission
	SPDR = SPI_Data;
     89c:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     89e:	0d b4       	in	r0, 0x2d	; 45
     8a0:	07 fe       	sbrs	r0, 7
     8a2:	fd cf       	rjmp	.-6      	; 0x89e <SPI_FPGA_Write+0x4>
	FPGA_CS_PORT |= (1<<FPGA_SPI_CS);
     8a4:	a4 9a       	sbi	0x14, 4	; 20
     8a6:	08 95       	ret

000008a8 <SPI_FPGA_Init>:
#include <util/delay.h>
#include "FPGA.h"

void SPI_FPGA_Init(void)
{
	FPGA_CS_DDR |= (1<<FPGA_SPI_CS);
     8a8:	9c 9a       	sbi	0x13, 4	; 19
	FPGA_CS_PORT |= (1<<FPGA_SPI_CS);
     8aa:	a4 9a       	sbi	0x14, 4	; 20
	
	WR_DDR |= 1<<FPGAWR;
     8ac:	e4 e0       	ldi	r30, 0x04	; 4
     8ae:	f1 e0       	ldi	r31, 0x01	; 1
     8b0:	80 81       	ld	r24, Z
     8b2:	84 60       	ori	r24, 0x04	; 4
     8b4:	80 83       	st	Z, r24
	WR_PORT &= ~(1<<FPGAWR);
     8b6:	e5 e0       	ldi	r30, 0x05	; 5
     8b8:	f1 e0       	ldi	r31, 0x01	; 1
     8ba:	80 81       	ld	r24, Z
     8bc:	8b 7f       	andi	r24, 0xFB	; 251
     8be:	80 83       	st	Z, r24
	SPI_FPGA_Write(FPGA_Disable);
     8c0:	80 e0       	ldi	r24, 0x00	; 0
     8c2:	0e 94 4d 04 	call	0x89a	; 0x89a <SPI_FPGA_Write>
     8c6:	08 95       	ret

000008c8 <uart_sendStream>:
	putchar('m');
}


int uart_sendStream(char ch,FILE *stream)
{
     8c8:	cf 93       	push	r28
     8ca:	c8 2f       	mov	r28, r24
	if (ch == '\n')
     8cc:	8a 30       	cpi	r24, 0x0A	; 10
     8ce:	19 f4       	brne	.+6      	; 0x8d6 <uart_sendStream+0xe>
	uart_sendStream('\r', stream);
     8d0:	8d e0       	ldi	r24, 0x0D	; 13
     8d2:	0e 94 64 04 	call	0x8c8	; 0x8c8 <uart_sendStream>
	while (!(UCSR2A & (1<<UDRE2)));
     8d6:	e0 ed       	ldi	r30, 0xD0	; 208
     8d8:	f0 e0       	ldi	r31, 0x00	; 0
     8da:	90 81       	ld	r25, Z
     8dc:	95 ff       	sbrs	r25, 5
     8de:	fd cf       	rjmp	.-6      	; 0x8da <uart_sendStream+0x12>
	UDR2=ch;
     8e0:	c0 93 d6 00 	sts	0x00D6, r28
	return 0;
}
     8e4:	80 e0       	ldi	r24, 0x00	; 0
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	cf 91       	pop	r28
     8ea:	08 95       	ret

000008ec <uart_receiveStream>:

int uart_receiveStream(FILE *stream)
{
     8ec:	cf 93       	push	r28
     8ee:	bc 01       	movw	r22, r24
	unsigned char ch;
	while (!(UCSR2A & (1<<RXC2)));
     8f0:	e0 ed       	ldi	r30, 0xD0	; 208
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	80 81       	ld	r24, Z
     8f6:	88 23       	and	r24, r24
     8f8:	ec f7       	brge	.-6      	; 0x8f4 <uart_receiveStream+0x8>
	ch=UDR2;
     8fa:	c0 91 d6 00 	lds	r28, 0x00D6

	/* Echo the Output Back to terminal */
	uart_sendStream(ch,stream);
     8fe:	8c 2f       	mov	r24, r28
     900:	0e 94 64 04 	call	0x8c8	; 0x8c8 <uart_sendStream>

	return ch;
}
     904:	8c 2f       	mov	r24, r28
     906:	90 e0       	ldi	r25, 0x00	; 0
     908:	cf 91       	pop	r28
     90a:	08 95       	ret

0000090c <uart2_init>:

FILE uart_stream = FDEV_SETUP_STREAM(uart_sendStream, uart_receiveStream, _FDEV_SETUP_RW);

void uart2_init()
{
	UBRR2H = (((F_CPU/BAUD_RATE)/16)-1)>>8;	// set baud rate
     90c:	10 92 d5 00 	sts	0x00D5, r1
	UBRR2L = (((F_CPU/BAUD_RATE)/16)-1);
     910:	83 e3       	ldi	r24, 0x33	; 51
     912:	80 93 d4 00 	sts	0x00D4, r24
	UCSR2B = (1<<RXEN2)|(1<<TXEN2); 		// enable Rx & Tx
     916:	88 e1       	ldi	r24, 0x18	; 24
     918:	80 93 d1 00 	sts	0x00D1, r24
	UCSR2C=  (1<<UCSZ21)|(1<<UCSZ20);  	       // config USART; 8N1
     91c:	86 e0       	ldi	r24, 0x06	; 6
     91e:	80 93 d2 00 	sts	0x00D2, r24
	//DDRD |= (1<<PORTD1)|(1<<PORTD0);
	// Define Output/Input Stream
	stdout = stdin = &uart_stream;
     922:	88 e0       	ldi	r24, 0x08	; 8
     924:	92 e0       	ldi	r25, 0x02	; 2
     926:	90 93 bf 07 	sts	0x07BF, r25
     92a:	80 93 be 07 	sts	0x07BE, r24
     92e:	90 93 c1 07 	sts	0x07C1, r25
     932:	80 93 c0 07 	sts	0x07C0, r24
     936:	08 95       	ret

00000938 <setRAMStatus>:
}

void setRAMStatus(char mode)
{
	// Activate the CS pin
	RAM_PORT &= ~(1<<RAM_CS);
     938:	a3 98       	cbi	0x14, 3	; 20
	SPDR = WRSR;
     93a:	91 e0       	ldi	r25, 0x01	; 1
     93c:	9e bd       	out	0x2e, r25	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     93e:	0d b4       	in	r0, 0x2d	; 45
     940:	07 fe       	sbrs	r0, 7
     942:	fd cf       	rjmp	.-6      	; 0x93e <setRAMStatus+0x6>
	// Start Data transmission
	SPDR = mode;
     944:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     946:	0d b4       	in	r0, 0x2d	; 45
     948:	07 fe       	sbrs	r0, 7
     94a:	fd cf       	rjmp	.-6      	; 0x946 <setRAMStatus+0xe>
	// CS pin is not active
	RAM_PORT |= (1<<RAM_CS);
     94c:	a3 9a       	sbi	0x14, 3	; 20
     94e:	08 95       	ret

00000950 <SPI_WriteAddress>:
}

void SPI_WriteAddress(uint32_t address)
{
     950:	26 2f       	mov	r18, r22
     952:	97 2f       	mov	r25, r23
     954:	48 2f       	mov	r20, r24
	SPDR = WRITE;
     956:	82 e0       	ldi	r24, 0x02	; 2
     958:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     95a:	0d b4       	in	r0, 0x2d	; 45
     95c:	07 fe       	sbrs	r0, 7
     95e:	fd cf       	rjmp	.-6      	; 0x95a <SPI_WriteAddress+0xa>
	// Start Wiznet W5100 Address High Bytes transmission
	SPDR = (address & 0xFF0000) >> 16;
     960:	4e bd       	out	0x2e, r20	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     962:	0d b4       	in	r0, 0x2d	; 45
     964:	07 fe       	sbrs	r0, 7
     966:	fd cf       	rjmp	.-6      	; 0x962 <SPI_WriteAddress+0x12>
	// Start Wiznet W5100 Address Low Bytes transmission
	SPDR = (address & 0x00FF00) >> 8;
     968:	89 2f       	mov	r24, r25
     96a:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     96c:	0d b4       	in	r0, 0x2d	; 45
     96e:	07 fe       	sbrs	r0, 7
     970:	fd cf       	rjmp	.-6      	; 0x96c <SPI_WriteAddress+0x1c>
	SPDR = (address & 0x0000FF);
     972:	2e bd       	out	0x2e, r18	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     974:	0d b4       	in	r0, 0x2d	; 45
     976:	07 fe       	sbrs	r0, 7
     978:	fd cf       	rjmp	.-6      	; 0x974 <SPI_WriteAddress+0x24>
}
     97a:	08 95       	ret

0000097c <SPI_WriteData>:

void SPI_WriteData(char data)
{
	// Start Data transmission
	SPDR = data;
     97c:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     97e:	0d b4       	in	r0, 0x2d	; 45
     980:	07 fe       	sbrs	r0, 7
     982:	fd cf       	rjmp	.-6      	; 0x97e <SPI_WriteData+0x2>
}
     984:	08 95       	ret

00000986 <SPI_ReadAddress>:

void SPI_ReadAddress(uint32_t address)
{
     986:	26 2f       	mov	r18, r22
     988:	97 2f       	mov	r25, r23
     98a:	48 2f       	mov	r20, r24
	SPDR = READ;
     98c:	83 e0       	ldi	r24, 0x03	; 3
     98e:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     990:	0d b4       	in	r0, 0x2d	; 45
     992:	07 fe       	sbrs	r0, 7
     994:	fd cf       	rjmp	.-6      	; 0x990 <SPI_ReadAddress+0xa>
	SPDR = (address & 0xFF0000) >> 16;
     996:	4e bd       	out	0x2e, r20	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     998:	0d b4       	in	r0, 0x2d	; 45
     99a:	07 fe       	sbrs	r0, 7
     99c:	fd cf       	rjmp	.-6      	; 0x998 <SPI_ReadAddress+0x12>
	// Start Wiznet W5100 Address Low Bytes transmission
	SPDR = (address & 0x00FF00) >> 8;
     99e:	89 2f       	mov	r24, r25
     9a0:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     9a2:	0d b4       	in	r0, 0x2d	; 45
     9a4:	07 fe       	sbrs	r0, 7
     9a6:	fd cf       	rjmp	.-6      	; 0x9a2 <SPI_ReadAddress+0x1c>
	SPDR = (address & 0x0000FF);
     9a8:	2e bd       	out	0x2e, r18	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     9aa:	0d b4       	in	r0, 0x2d	; 45
     9ac:	07 fe       	sbrs	r0, 7
     9ae:	fd cf       	rjmp	.-6      	; 0x9aa <SPI_ReadAddress+0x24>
}
     9b0:	08 95       	ret

000009b2 <SPI_ReadData>:

char SPI_ReadData()
{
	// Send Dummy transmission for reading the data
	SPDR = 0x00;
     9b2:	1e bc       	out	0x2e, r1	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     9b4:	0d b4       	in	r0, 0x2d	; 45
     9b6:	07 fe       	sbrs	r0, 7
     9b8:	fd cf       	rjmp	.-6      	; 0x9b4 <SPI_ReadData+0x2>
	return(SPDR);
     9ba:	8e b5       	in	r24, 0x2e	; 46
}
     9bc:	08 95       	ret

000009be <RAMPrint>:
	//printf("%d\n", buffer);
	return buffer; 
}

void RAMPrint(uint32_t startAddress, uint16_t length)
{
     9be:	ef 92       	push	r14
     9c0:	ff 92       	push	r15
     9c2:	0f 93       	push	r16
     9c4:	1f 93       	push	r17
     9c6:	cf 93       	push	r28
     9c8:	df 93       	push	r29
     9ca:	c6 2f       	mov	r28, r22
     9cc:	d7 2f       	mov	r29, r23
     9ce:	18 2f       	mov	r17, r24
     9d0:	09 2f       	mov	r16, r25
     9d2:	7a 01       	movw	r14, r20
	//char* data = ""; 
	setRAMStatus(SEQ);
     9d4:	80 e4       	ldi	r24, 0x40	; 64
     9d6:	0e 94 9c 04 	call	0x938	; 0x938 <setRAMStatus>
	RAM_PORT &= ~(1<<RAM_CS);
     9da:	a3 98       	cbi	0x14, 3	; 20
	SPI_ReadAddress(startAddress);
     9dc:	6c 2f       	mov	r22, r28
     9de:	7d 2f       	mov	r23, r29
     9e0:	81 2f       	mov	r24, r17
     9e2:	90 2f       	mov	r25, r16
     9e4:	0e 94 c3 04 	call	0x986	; 0x986 <SPI_ReadAddress>
	printf("Address: 0x%06x\n", startAddress);
     9e8:	0f 93       	push	r16
     9ea:	1f 93       	push	r17
     9ec:	df 93       	push	r29
     9ee:	cf 93       	push	r28
     9f0:	85 e1       	ldi	r24, 0x15	; 21
     9f2:	94 e0       	ldi	r25, 0x04	; 4
     9f4:	9f 93       	push	r25
     9f6:	8f 93       	push	r24
     9f8:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <printf>
	int i; 
	for(i=0; i<length; i++)
     9fc:	0f 90       	pop	r0
     9fe:	0f 90       	pop	r0
     a00:	0f 90       	pop	r0
     a02:	0f 90       	pop	r0
     a04:	0f 90       	pop	r0
     a06:	0f 90       	pop	r0
     a08:	e1 14       	cp	r14, r1
     a0a:	f1 04       	cpc	r15, r1
     a0c:	a9 f0       	breq	.+42     	; 0xa38 <RAMPrint+0x7a>
     a0e:	c0 e0       	ldi	r28, 0x00	; 0
     a10:	d0 e0       	ldi	r29, 0x00	; 0
	{
		printf("0x%02X ", SPI_ReadData());
     a12:	06 e2       	ldi	r16, 0x26	; 38
     a14:	14 e0       	ldi	r17, 0x04	; 4
     a16:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <SPI_ReadData>
     a1a:	1f 92       	push	r1
     a1c:	8f 93       	push	r24
     a1e:	1f 93       	push	r17
     a20:	0f 93       	push	r16
     a22:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <printf>
	setRAMStatus(SEQ);
	RAM_PORT &= ~(1<<RAM_CS);
	SPI_ReadAddress(startAddress);
	printf("Address: 0x%06x\n", startAddress);
	int i; 
	for(i=0; i<length; i++)
     a26:	21 96       	adiw	r28, 0x01	; 1
     a28:	0f 90       	pop	r0
     a2a:	0f 90       	pop	r0
     a2c:	0f 90       	pop	r0
     a2e:	0f 90       	pop	r0
     a30:	ce 15       	cp	r28, r14
     a32:	df 05       	cpc	r29, r15
     a34:	81 f7       	brne	.-32     	; 0xa16 <RAMPrint+0x58>
     a36:	02 c0       	rjmp	.+4      	; 0xa3c <RAMPrint+0x7e>
     a38:	e1 2c       	mov	r14, r1
     a3a:	f1 2c       	mov	r15, r1
	{
		printf("0x%02X ", SPI_ReadData());
	}
	RAM_PORT |= (1<<RAM_CS); 
     a3c:	a3 9a       	sbi	0x14, 3	; 20
	printf("\nSize: %d\n", i); 
     a3e:	ff 92       	push	r15
     a40:	ef 92       	push	r14
     a42:	8e e2       	ldi	r24, 0x2E	; 46
     a44:	94 e0       	ldi	r25, 0x04	; 4
     a46:	9f 93       	push	r25
     a48:	8f 93       	push	r24
     a4a:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <printf>
     a4e:	0f 90       	pop	r0
     a50:	0f 90       	pop	r0
     a52:	0f 90       	pop	r0
     a54:	0f 90       	pop	r0
}
     a56:	df 91       	pop	r29
     a58:	cf 91       	pop	r28
     a5a:	1f 91       	pop	r17
     a5c:	0f 91       	pop	r16
     a5e:	ff 90       	pop	r15
     a60:	ef 90       	pop	r14
     a62:	08 95       	ret

00000a64 <RAMWriteByte>:

void RAMWriteByte(char data, uint32_t address)
{
     a64:	cf 93       	push	r28
     a66:	c8 2f       	mov	r28, r24
	RAM_PORT &= ~(1<<RAM_CS);
     a68:	a3 98       	cbi	0x14, 3	; 20
	SPI_WriteAddress(address);
     a6a:	cb 01       	movw	r24, r22
     a6c:	ba 01       	movw	r22, r20
     a6e:	0e 94 a8 04 	call	0x950	; 0x950 <SPI_WriteAddress>
	SPI_WriteData(data);
     a72:	8c 2f       	mov	r24, r28
     a74:	0e 94 be 04 	call	0x97c	; 0x97c <SPI_WriteData>
	RAM_PORT |= (1<<RAM_CS);
     a78:	a3 9a       	sbi	0x14, 3	; 20
}
     a7a:	cf 91       	pop	r28
     a7c:	08 95       	ret

00000a7e <SPI_Init>:


void SPI_Init()
{
	// Set MOSI ,SCK, and SS as output, others as input
	SPI_DDR = (1<<MOSI)|(1<<SCK)|(1<<SS);
     a7e:	87 e0       	ldi	r24, 0x07	; 7
     a80:	84 b9       	out	0x04, r24	; 4
	// CS pin is not active
	RAM_DDR |= (1<<RAM_CS);
     a82:	9b 9a       	sbi	0x13, 3	; 19
	RAM_PORT |= (1<<RAM_CS);
     a84:	a3 9a       	sbi	0x14, 3	; 20
	
	// Enable SPI, Master Mode 0, set the clock rate fck/16
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
     a86:	81 e5       	ldi	r24, 0x51	; 81
     a88:	8c bd       	out	0x2c, r24	; 44
	RAMWriteByte(0x32, 0000);
     a8a:	40 e0       	ldi	r20, 0x00	; 0
     a8c:	50 e0       	ldi	r21, 0x00	; 0
     a8e:	ba 01       	movw	r22, r20
     a90:	82 e3       	ldi	r24, 0x32	; 50
     a92:	0e 94 32 05 	call	0xa64	; 0xa64 <RAMWriteByte>
     a96:	08 95       	ret

00000a98 <RAMReadByte>:
	RAM_PORT |= (1<<RAM_CS);
}

char RAMReadByte(uint32_t address)
{
	RAM_PORT &= ~(1<<RAM_CS);
     a98:	a3 98       	cbi	0x14, 3	; 20
	SPI_ReadAddress(address);
     a9a:	0e 94 c3 04 	call	0x986	; 0x986 <SPI_ReadAddress>
	char data = SPI_ReadData();
     a9e:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <SPI_ReadData>
	RAM_PORT |= (1<<RAM_CS);
     aa2:	a3 9a       	sbi	0x14, 3	; 20
	return data; 
}
     aa4:	08 95       	ret

00000aa6 <SPI_Switching_Circuitry_Init>:


void SPI_Switching_Circuitry_Init()
{
	// Set MOSI ,SCK, and SS as output, others as input
	SPI_DDR |= ((1<<MOSI)|(1<<SCK)|(1<<SS));
     aa6:	84 b1       	in	r24, 0x04	; 4
     aa8:	87 60       	ori	r24, 0x07	; 7
     aaa:	84 b9       	out	0x04, r24	; 4
	
	// Enable SPI, Master Mode 0, set the clock rate fck/64
	SPCR = ((1<<SPE)|(1<<MSTR)|(1<<SPR1));
     aac:	82 e5       	ldi	r24, 0x52	; 82
     aae:	8c bd       	out	0x2c, r24	; 44
	
	SR_CNTRL_DDR |= ((1<<SR_RESET) | (1<<MAXCS) | (1<<SROE));
     ab0:	e4 e0       	ldi	r30, 0x04	; 4
     ab2:	f1 e0       	ldi	r31, 0x01	; 1
     ab4:	80 81       	ld	r24, Z
     ab6:	88 63       	ori	r24, 0x38	; 56
     ab8:	80 83       	st	Z, r24
	SRCS_DDR |= (1<<SRCS);
     aba:	27 9a       	sbi	0x04, 7	; 4
	SRCS_PORT &= ~(1<<SRCS);
     abc:	2f 98       	cbi	0x05, 7	; 5
	SR_CNTRL_PORT |= ((1<<MAXCS) | (1<<SROE));
     abe:	e5 e0       	ldi	r30, 0x05	; 5
     ac0:	f1 e0       	ldi	r31, 0x01	; 1
     ac2:	80 81       	ld	r24, Z
     ac4:	88 61       	ori	r24, 0x18	; 24
     ac6:	80 83       	st	Z, r24
	SR_CNTRL_PORT &= ~(1<<SR_RESET);
     ac8:	80 81       	ld	r24, Z
     aca:	8f 7d       	andi	r24, 0xDF	; 223
     acc:	80 83       	st	Z, r24
     ace:	08 95       	ret

00000ad0 <voltageControlInit>:
	VCNTRL_PORT &= ~((1<<VPP_9V) | (1<<VPP_12V) | (1<VPP_13V));
}

void voltageControlInit()
{
	VCNTRL_DDR = 0xFF;
     ad0:	8f ef       	ldi	r24, 0xFF	; 255
     ad2:	80 bb       	out	0x10, r24	; 16
	VCNTRL_PORT = 0x00;
     ad4:	11 ba       	out	0x11, r1	; 17
	
	VEN_DDR |= ((1<<VPPENABLE) | (1<<VCCENABLE) | (1<<VLENABLE));
     ad6:	84 b1       	in	r24, 0x04	; 4
     ad8:	80 67       	ori	r24, 0x70	; 112
     ada:	84 b9       	out	0x04, r24	; 4
	VEN_PORT &= ~((1<<VPPENABLE) | (1<<VCCENABLE) | (1<<VLENABLE));
     adc:	85 b1       	in	r24, 0x05	; 5
     ade:	8f 78       	andi	r24, 0x8F	; 143
     ae0:	85 b9       	out	0x05, r24	; 5
     ae2:	08 95       	ret

00000ae4 <enableVppRegulator>:
}

void enableVppRegulator()
{
	VEN_PORT |= (1<<VPPENABLE); 
     ae4:	2c 9a       	sbi	0x05, 4	; 5
     ae6:	08 95       	ret

00000ae8 <disableVppRegulator>:
}

void disableVppRegulator()
{
	VEN_PORT &= ~((1<<VPPENABLE));
     ae8:	2c 98       	cbi	0x05, 4	; 5
     aea:	08 95       	ret

00000aec <enableVccRegulator>:
	VCNTRL_PORT &= ~((1<<VCC_3_3V) | (1<<VCC_5V) | (1<<VCC_6_5V));
}

void enableVccRegulator() 
{
	VEN_PORT |= (1<<VCCENABLE);
     aec:	2d 9a       	sbi	0x05, 5	; 5
     aee:	08 95       	ret

00000af0 <disableVccRegulator>:
}

void disableVccRegulator()
{
	VEN_PORT &= ~(1<<VCCENABLE);
     af0:	2d 98       	cbi	0x05, 5	; 5
     af2:	08 95       	ret

00000af4 <setVcc>:
	//prevents accidental triggering of the wrong regulator 
	//if(voltageLevel != (VCC_3_3V || VCC_5V || VCC_6_5V))
	//	return 0; 
	//else
	//{
		VCNTRL_PORT |= (1<<voltageLevel);
     af4:	41 b3       	in	r20, 0x11	; 17
     af6:	21 e0       	ldi	r18, 0x01	; 1
     af8:	30 e0       	ldi	r19, 0x00	; 0
     afa:	b9 01       	movw	r22, r18
     afc:	02 c0       	rjmp	.+4      	; 0xb02 <setVcc+0xe>
     afe:	66 0f       	add	r22, r22
     b00:	77 1f       	adc	r23, r23
     b02:	8a 95       	dec	r24
     b04:	e2 f7       	brpl	.-8      	; 0xafe <setVcc+0xa>
     b06:	cb 01       	movw	r24, r22
     b08:	84 2b       	or	r24, r20
     b0a:	81 bb       	out	0x11, r24	; 17
		return 1; 
	//}
}
     b0c:	81 e0       	ldi	r24, 0x01	; 1
     b0e:	08 95       	ret

00000b10 <setVpp>:
	//prevents accidental triggering of the wrong regulator 
	//if(voltageLevel != (VPP_9V || VPP_12V || VPP_13V))
		//return 0; 
	//else
	//{
		VCNTRL_PORT |= (1<<voltageLevel);
     b10:	41 b3       	in	r20, 0x11	; 17
     b12:	21 e0       	ldi	r18, 0x01	; 1
     b14:	30 e0       	ldi	r19, 0x00	; 0
     b16:	b9 01       	movw	r22, r18
     b18:	02 c0       	rjmp	.+4      	; 0xb1e <setVpp+0xe>
     b1a:	66 0f       	add	r22, r22
     b1c:	77 1f       	adc	r23, r23
     b1e:	8a 95       	dec	r24
     b20:	e2 f7       	brpl	.-8      	; 0xb1a <setVpp+0xa>
     b22:	cb 01       	movw	r24, r22
     b24:	84 2b       	or	r24, r20
     b26:	81 bb       	out	0x11, r24	; 17
		return 1; 
	//}
}
     b28:	81 e0       	ldi	r24, 0x01	; 1
     b2a:	08 95       	ret

00000b2c <enableVLogic>:
	VCNTRL_PORT &= ~((1<<VL_3_3V) | (1<<VL_5V));
}

void enableVLogic()
{
	VEN_PORT |= (1<<VLENABLE);
     b2c:	2e 9a       	sbi	0x05, 6	; 5
     b2e:	08 95       	ret

00000b30 <disableVLogic>:
}

void disableVLogic()
{
	VEN_PORT &= ~(1<<VLENABLE);
     b30:	2e 98       	cbi	0x05, 6	; 5
     b32:	08 95       	ret

00000b34 <setVLogic>:
	//prevents accidental triggering of the wrong regulator
	//if(voltageLevel != (VL_3_3V || VL_5V))
	//	return 0;
	//else
	//{
		VCNTRL_PORT |= (1<<voltageLevel);
     b34:	41 b3       	in	r20, 0x11	; 17
     b36:	21 e0       	ldi	r18, 0x01	; 1
     b38:	30 e0       	ldi	r19, 0x00	; 0
     b3a:	b9 01       	movw	r22, r18
     b3c:	02 c0       	rjmp	.+4      	; 0xb42 <setVLogic+0xe>
     b3e:	66 0f       	add	r22, r22
     b40:	77 1f       	adc	r23, r23
     b42:	8a 95       	dec	r24
     b44:	e2 f7       	brpl	.-8      	; 0xb3e <setVLogic+0xa>
     b46:	cb 01       	movw	r24, r22
     b48:	84 2b       	or	r24, r20
     b4a:	81 bb       	out	0x11, r24	; 17
		return 1;
	//}
}
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	08 95       	ret

00000b50 <getFileWifi>:
	j+=strlen(footer)-1; 
	return j; 
}

char* getFileWifi(char* filepath, int externRAM, uint32_t RAMAddress, int multiReceive)
{ 
     b50:	2f 92       	push	r2
     b52:	3f 92       	push	r3
     b54:	4f 92       	push	r4
     b56:	5f 92       	push	r5
     b58:	6f 92       	push	r6
     b5a:	7f 92       	push	r7
     b5c:	8f 92       	push	r8
     b5e:	9f 92       	push	r9
     b60:	af 92       	push	r10
     b62:	bf 92       	push	r11
     b64:	cf 92       	push	r12
     b66:	df 92       	push	r13
     b68:	ef 92       	push	r14
     b6a:	ff 92       	push	r15
     b6c:	0f 93       	push	r16
     b6e:	1f 93       	push	r17
     b70:	cf 93       	push	r28
     b72:	df 93       	push	r29
     b74:	ec 01       	movw	r28, r24
     b76:	6b 01       	movw	r12, r22
     b78:	49 01       	movw	r8, r18
     b7a:	5a 01       	movw	r10, r20
	//printf("Filepath: %s\n", filepath);
	//enableReceiveINT();
	//setTestPrint(1); 
	enableReceiveINT();   
     b7c:	0e 94 83 06 	call	0xd06	; 0xd06 <enableReceiveINT>
	PORTD &= ~(1<<CTS);
     b80:	5c 98       	cbi	0x0b, 4	; 11
	setReceiveCounter(0);
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	0e 94 49 06 	call	0xc92	; 0xc92 <setReceiveCounter>
	uint16_t i = 0; 
	char* receiveHeader; 
	//setCompressFlag(1);
	PORTD |= (1<<CTS);
     b8a:	5c 9a       	sbi	0x0b, 4	; 11
	sendCommand(NOPREFIX, HTTP_GET, filepath);
     b8c:	ae 01       	movw	r20, r28
     b8e:	65 e5       	ldi	r22, 0x55	; 85
     b90:	72 e0       	ldi	r23, 0x02	; 2
     b92:	8f ef       	ldi	r24, 0xFF	; 255
     b94:	0e 94 47 07 	call	0xe8e	; 0xe8e <sendCommand>
	receiveStatus();
     b98:	0e 94 94 06 	call	0xd28	; 0xd28 <receiveStatus>
	//enableReceiveINT();
	//setTestPrint(1); 
	enableReceiveINT();   
	PORTD &= ~(1<<CTS);
	setReceiveCounter(0);
	uint16_t i = 0; 
     b9c:	e1 2c       	mov	r14, r1
     b9e:	f1 2c       	mov	r15, r1
			printf("RAM Address: %d\n", RAMAddress+i); 
		}
		sendCommand(NOPREFIX, STREAM_READ, "0 10000");
		receiveStatus();
		receiveHeader = getMessageHeader(); 
		printf("Tran Length: %d\n", receiveHeader); 
     ba0:	0f 2e       	mov	r0, r31
     ba2:	ff e5       	ldi	r31, 0x5F	; 95
     ba4:	2f 2e       	mov	r2, r31
     ba6:	f2 e0       	ldi	r31, 0x02	; 2
     ba8:	3f 2e       	mov	r3, r31
     baa:	f0 2d       	mov	r31, r0
	PORTD |= (1<<CTS);
	sendCommand(NOPREFIX, HTTP_GET, filepath);
	receiveStatus();
	do 
	{
		if(externRAM){
     bac:	c1 14       	cp	r12, r1
     bae:	d1 04       	cpc	r13, r1
     bb0:	d1 f0       	breq	.+52     	; 0xbe6 <getFileWifi+0x96>
			updateRAMAddress(RAMAddress + i);
     bb2:	24 01       	movw	r4, r8
     bb4:	35 01       	movw	r6, r10
     bb6:	4e 0c       	add	r4, r14
     bb8:	5f 1c       	adc	r5, r15
     bba:	61 1c       	adc	r6, r1
     bbc:	71 1c       	adc	r7, r1
     bbe:	c3 01       	movw	r24, r6
     bc0:	b2 01       	movw	r22, r4
     bc2:	0e 94 3e 07 	call	0xe7c	; 0xe7c <updateRAMAddress>
			printf("RAM Address: %d\n", RAMAddress+i); 
     bc6:	7f 92       	push	r7
     bc8:	6f 92       	push	r6
     bca:	5f 92       	push	r5
     bcc:	4f 92       	push	r4
     bce:	a0 ee       	ldi	r26, 0xE0	; 224
     bd0:	b4 e0       	ldi	r27, 0x04	; 4
     bd2:	bf 93       	push	r27
     bd4:	af 93       	push	r26
     bd6:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <printf>
     bda:	0f 90       	pop	r0
     bdc:	0f 90       	pop	r0
     bde:	0f 90       	pop	r0
     be0:	0f 90       	pop	r0
     be2:	0f 90       	pop	r0
     be4:	0f 90       	pop	r0
		}
		sendCommand(NOPREFIX, STREAM_READ, "0 10000");
     be6:	41 ef       	ldi	r20, 0xF1	; 241
     be8:	54 e0       	ldi	r21, 0x04	; 4
     bea:	69 ef       	ldi	r22, 0xF9	; 249
     bec:	74 e0       	ldi	r23, 0x04	; 4
     bee:	8f ef       	ldi	r24, 0xFF	; 255
     bf0:	0e 94 47 07 	call	0xe8e	; 0xe8e <sendCommand>
		receiveStatus();
     bf4:	0e 94 94 06 	call	0xd28	; 0xd28 <receiveStatus>
		receiveHeader = getMessageHeader(); 
     bf8:	0e 94 3b 07 	call	0xe76	; 0xe76 <getMessageHeader>
     bfc:	ec 01       	movw	r28, r24
		printf("Tran Length: %d\n", receiveHeader); 
     bfe:	df 93       	push	r29
     c00:	cf 93       	push	r28
     c02:	3f 92       	push	r3
     c04:	2f 92       	push	r2
     c06:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <printf>
		if(receiveHeader[errorCode] == '1'){
     c0a:	0f 90       	pop	r0
     c0c:	0f 90       	pop	r0
     c0e:	0f 90       	pop	r0
     c10:	0f 90       	pop	r0
     c12:	89 81       	ldd	r24, Y+1	; 0x01
     c14:	81 33       	cpi	r24, 0x31	; 49
     c16:	39 f0       	breq	.+14     	; 0xc26 <getFileWifi+0xd6>
			break; 
		}
		i += getTransmissionLength(); 
     c18:	0e 94 36 07 	call	0xe6c	; 0xe6c <getTransmissionLength>
     c1c:	e8 0e       	add	r14, r24
     c1e:	f9 1e       	adc	r15, r25
	} while (multiReceive);
     c20:	01 15       	cp	r16, r1
     c22:	11 05       	cpc	r17, r1
     c24:	19 f6       	brne	.-122    	; 0xbac <getFileWifi+0x5c>
	
	disableReceiveINT(); 
     c26:	0e 94 8c 06 	call	0xd18	; 0xd18 <disableReceiveINT>
	//_delay_ms(3000);  
	sendCommand(NOPREFIX, STREAM_CLOSE, NOVAL);
     c2a:	42 e3       	ldi	r20, 0x32	; 50
     c2c:	53 e0       	ldi	r21, 0x03	; 3
     c2e:	65 e0       	ldi	r22, 0x05	; 5
     c30:	75 e0       	ldi	r23, 0x05	; 5
     c32:	8f ef       	ldi	r24, 0xFF	; 255
     c34:	0e 94 47 07 	call	0xe8e	; 0xe8e <sendCommand>
	//receiveStatus(); 
}
     c38:	df 91       	pop	r29
     c3a:	cf 91       	pop	r28
     c3c:	1f 91       	pop	r17
     c3e:	0f 91       	pop	r16
     c40:	ff 90       	pop	r15
     c42:	ef 90       	pop	r14
     c44:	df 90       	pop	r13
     c46:	cf 90       	pop	r12
     c48:	bf 90       	pop	r11
     c4a:	af 90       	pop	r10
     c4c:	9f 90       	pop	r9
     c4e:	8f 90       	pop	r8
     c50:	7f 90       	pop	r7
     c52:	6f 90       	pop	r6
     c54:	5f 90       	pop	r5
     c56:	4f 90       	pop	r4
     c58:	3f 90       	pop	r3
     c5a:	2f 90       	pop	r2
     c5c:	08 95       	ret

00000c5e <updateFileWifi>:

void updateFileWifi(char* filepath)
{
     c5e:	cf 93       	push	r28
     c60:	df 93       	push	r29
     c62:	ec 01       	movw	r28, r24
	disableReceiveINT(); 
     c64:	0e 94 8c 06 	call	0xd18	; 0xd18 <disableReceiveINT>
	sendCommand(NOPREFIX, filepath, NOVAL);
     c68:	42 e3       	ldi	r20, 0x32	; 50
     c6a:	53 e0       	ldi	r21, 0x03	; 3
     c6c:	be 01       	movw	r22, r28
     c6e:	8f ef       	ldi	r24, 0xFF	; 255
     c70:	0e 94 47 07 	call	0xe8e	; 0xe8e <sendCommand>
	sendCommand(NOPREFIX, STREAM_CLOSE, NOVAL); 	
     c74:	42 e3       	ldi	r20, 0x32	; 50
     c76:	53 e0       	ldi	r21, 0x03	; 3
     c78:	65 e0       	ldi	r22, 0x05	; 5
     c7a:	75 e0       	ldi	r23, 0x05	; 5
     c7c:	8f ef       	ldi	r24, 0xFF	; 255
     c7e:	0e 94 47 07 	call	0xe8e	; 0xe8e <sendCommand>
}
     c82:	df 91       	pop	r29
     c84:	cf 91       	pop	r28
     c86:	08 95       	ret

00000c88 <setCompressFlag>:
	testPrint = print; 
}

void setCompressFlag(uint8_t compress)
{
	PORTD &= ~(1<<CTS); 
     c88:	5c 98       	cbi	0x0b, 4	; 11
	compressFlag = compress;
     c8a:	80 93 1c 07 	sts	0x071C, r24
	PORTD |= (1<<CTS); 
     c8e:	5c 9a       	sbi	0x0b, 4	; 11
     c90:	08 95       	ret

00000c92 <setReceiveCounter>:
}

void setReceiveCounter(int val)
{
	i = val; 
     c92:	90 93 1a 07 	sts	0x071A, r25
     c96:	80 93 19 07 	sts	0x0719, r24
     c9a:	08 95       	ret

00000c9c <uart_send>:
	}
	return count; 
}

int uart_send(char* data, unsigned int length)
{
     c9c:	cf 93       	push	r28
     c9e:	df 93       	push	r29
	//printf("Uart Send Function: %s\nAddress: %p", data, data);
	uint8_t i = 0;
	//UCSR1B |= (1<<RXCIE1);
	receiveWifiFlag = 0;
     ca0:	10 92 25 07 	sts	0x0725, r1
	memset(headerBuffer, 0x00, endHeader);
     ca4:	29 e0       	ldi	r18, 0x09	; 9
     ca6:	ec e0       	ldi	r30, 0x0C	; 12
     ca8:	f7 e0       	ldi	r31, 0x07	; 7
     caa:	df 01       	movw	r26, r30
     cac:	1d 92       	st	X+, r1
     cae:	2a 95       	dec	r18
     cb0:	e9 f7       	brne	.-6      	; 0xcac <uart_send+0x10>
	PORTD |= (1<<RTS);
     cb2:	5d 9a       	sbi	0x0b, 5	; 11
	//while(!(PIND & (1<<CTS))){
		//_delay_us(100);
		//printf("Waiting..\n");
	//} 
	while(i < length){
     cb4:	61 15       	cp	r22, r1
     cb6:	71 05       	cpc	r23, r1
     cb8:	a9 f0       	breq	.+42     	; 0xce4 <uart_send+0x48>
     cba:	20 e0       	ldi	r18, 0x00	; 0
     cbc:	30 e0       	ldi	r19, 0x00	; 0
}

int uart_send(char* data, unsigned int length)
{
	//printf("Uart Send Function: %s\nAddress: %p", data, data);
	uint8_t i = 0;
     cbe:	50 e0       	ldi	r21, 0x00	; 0
	//while(!(PIND & (1<<CTS))){
		//_delay_us(100);
		//printf("Waiting..\n");
	//} 
	while(i < length){
		while(!(UCSR1A & (1<<UDRE1)));
     cc0:	e8 ec       	ldi	r30, 0xC8	; 200
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
		UDR1 = data[i];
     cc4:	ae ec       	ldi	r26, 0xCE	; 206
     cc6:	b0 e0       	ldi	r27, 0x00	; 0
	//while(!(PIND & (1<<CTS))){
		//_delay_us(100);
		//printf("Waiting..\n");
	//} 
	while(i < length){
		while(!(UCSR1A & (1<<UDRE1)));
     cc8:	40 81       	ld	r20, Z
     cca:	45 ff       	sbrs	r20, 5
     ccc:	fd cf       	rjmp	.-6      	; 0xcc8 <uart_send+0x2c>
		UDR1 = data[i];
     cce:	ec 01       	movw	r28, r24
     cd0:	c2 0f       	add	r28, r18
     cd2:	d3 1f       	adc	r29, r19
     cd4:	28 81       	ld	r18, Y
     cd6:	2c 93       	st	X, r18
		i++;
     cd8:	5f 5f       	subi	r21, 0xFF	; 255
	PORTD |= (1<<RTS);
	//while(!(PIND & (1<<CTS))){
		//_delay_us(100);
		//printf("Waiting..\n");
	//} 
	while(i < length){
     cda:	25 2f       	mov	r18, r21
     cdc:	30 e0       	ldi	r19, 0x00	; 0
     cde:	26 17       	cp	r18, r22
     ce0:	37 07       	cpc	r19, r23
     ce2:	90 f3       	brcs	.-28     	; 0xcc8 <uart_send+0x2c>
		while(!(UCSR1A & (1<<UDRE1)));
		UDR1 = data[i];
		i++;
	}
	//while(!(PIND & (1<<CTS))){_delay_us(100);}
	printf("Sent!\n");
     ce4:	87 e9       	ldi	r24, 0x97	; 151
     ce6:	92 e0       	ldi	r25, 0x02	; 2
     ce8:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <puts>
	return 0;
}
     cec:	80 e0       	ldi	r24, 0x00	; 0
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	df 91       	pop	r29
     cf2:	cf 91       	pop	r28
     cf4:	08 95       	ret

00000cf6 <uart_receiveChar>:
}

unsigned char uart_receiveChar()
{
	//printf("Receiving...\n");
	while (!(UCSR1A & (1<<RXC1)));
     cf6:	e8 ec       	ldi	r30, 0xC8	; 200
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	80 81       	ld	r24, Z
     cfc:	88 23       	and	r24, r24
     cfe:	ec f7       	brge	.-6      	; 0xcfa <uart_receiveChar+0x4>
	return UDR1; 
     d00:	80 91 ce 00 	lds	r24, 0x00CE
}
     d04:	08 95       	ret

00000d06 <enableReceiveINT>:

int enableReceiveINT()
{
	UCSR1B |= (1<<RXCIE1);
     d06:	e9 ec       	ldi	r30, 0xC9	; 201
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	80 81       	ld	r24, Z
     d0c:	80 68       	ori	r24, 0x80	; 128
     d0e:	80 83       	st	Z, r24
	sei(); 
     d10:	78 94       	sei
	return 1; 
}
     d12:	81 e0       	ldi	r24, 0x01	; 1
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	08 95       	ret

00000d18 <disableReceiveINT>:

int disableReceiveINT()
{
	UCSR1B &= ~(1<<RXCIE1);
     d18:	e9 ec       	ldi	r30, 0xC9	; 201
     d1a:	f0 e0       	ldi	r31, 0x00	; 0
     d1c:	80 81       	ld	r24, Z
     d1e:	8f 77       	andi	r24, 0x7F	; 127
     d20:	80 83       	st	Z, r24
	return 1; 
}
     d22:	81 e0       	ldi	r24, 0x01	; 1
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	08 95       	ret

00000d28 <receiveStatus>:
	return ""; 
}

int receiveStatus()
{
	while(receiveWifiFlag == 0)
     d28:	80 91 25 07 	lds	r24, 0x0725
     d2c:	81 11       	cpse	r24, r1
     d2e:	08 c0       	rjmp	.+16     	; 0xd40 <receiveStatus+0x18>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d30:	81 e2       	ldi	r24, 0x21	; 33
     d32:	8a 95       	dec	r24
     d34:	f1 f7       	brne	.-4      	; 0xd32 <receiveStatus+0xa>
     d36:	00 00       	nop
     d38:	80 91 25 07 	lds	r24, 0x0725
     d3c:	88 23       	and	r24, r24
     d3e:	c1 f3       	breq	.-16     	; 0xd30 <receiveStatus+0x8>
		//printf("Receive Flag: %d\n", receiveWifiFlag);
		//printf("Loooop\n");
	}
	
	return 1; 
}
     d40:	81 e0       	ldi	r24, 0x01	; 1
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	08 95       	ret

00000d46 <buildTransmissionLength>:

unsigned int buildTransmissionLength()
{
     d46:	0f 93       	push	r16
     d48:	1f 93       	push	r17
     d4a:	cf 93       	push	r28
     d4c:	df 93       	push	r29
	if(testPrint)
     d4e:	80 91 17 07 	lds	r24, 0x0717
     d52:	90 91 18 07 	lds	r25, 0x0718
     d56:	89 2b       	or	r24, r25
     d58:	f1 f0       	breq	.+60     	; 0xd96 <buildTransmissionLength+0x50>
     d5a:	c0 e0       	ldi	r28, 0x00	; 0
     d5c:	d0 e0       	ldi	r29, 0x00	; 0
	{
		//printf("Header: ");
		for(int i = 0; i < endHeader; i++)
		{
			printf("Value: 0x%02x, Address: %p\n", headerBuffer[i], headerBuffer + i);
     d5e:	06 e1       	ldi	r16, 0x16	; 22
     d60:	15 e0       	ldi	r17, 0x05	; 5
     d62:	fe 01       	movw	r30, r28
     d64:	e4 5f       	subi	r30, 0xF4	; 244
     d66:	f8 4f       	sbci	r31, 0xF8	; 248
     d68:	80 81       	ld	r24, Z
     d6a:	ff 93       	push	r31
     d6c:	ef 93       	push	r30
     d6e:	1f 92       	push	r1
     d70:	8f 93       	push	r24
     d72:	1f 93       	push	r17
     d74:	0f 93       	push	r16
     d76:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <printf>
unsigned int buildTransmissionLength()
{
	if(testPrint)
	{
		//printf("Header: ");
		for(int i = 0; i < endHeader; i++)
     d7a:	21 96       	adiw	r28, 0x01	; 1
     d7c:	0f 90       	pop	r0
     d7e:	0f 90       	pop	r0
     d80:	0f 90       	pop	r0
     d82:	0f 90       	pop	r0
     d84:	0f 90       	pop	r0
     d86:	0f 90       	pop	r0
     d88:	c9 30       	cpi	r28, 0x09	; 9
     d8a:	d1 05       	cpc	r29, r1
     d8c:	51 f7       	brne	.-44     	; 0xd62 <buildTransmissionLength+0x1c>
		{
			printf("Value: 0x%02x, Address: %p\n", headerBuffer[i], headerBuffer + i);
			//printf("0x%02x ", receiveBuffer[i]);
		}
		printf("\n");
     d8e:	8a e0       	ldi	r24, 0x0A	; 10
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <putchar>
	}
	transLength = 0; 
     d96:	10 92 1e 07 	sts	0x071E, r1
     d9a:	10 92 1d 07 	sts	0x071D, r1
	transLength += (headerBuffer[ones] & 0x0F);
     d9e:	20 91 12 07 	lds	r18, 0x0712
     da2:	80 91 1d 07 	lds	r24, 0x071D
     da6:	90 91 1e 07 	lds	r25, 0x071E
     daa:	2f 70       	andi	r18, 0x0F	; 15
     dac:	82 0f       	add	r24, r18
     dae:	91 1d       	adc	r25, r1
     db0:	90 93 1e 07 	sts	0x071E, r25
     db4:	80 93 1d 07 	sts	0x071D, r24
	transLength += (headerBuffer[tens] & 0x0F) * 10; 
     db8:	80 91 11 07 	lds	r24, 0x0711
     dbc:	20 91 1d 07 	lds	r18, 0x071D
     dc0:	30 91 1e 07 	lds	r19, 0x071E
     dc4:	8f 70       	andi	r24, 0x0F	; 15
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	ac 01       	movw	r20, r24
     dca:	44 0f       	add	r20, r20
     dcc:	55 1f       	adc	r21, r21
     dce:	88 0f       	add	r24, r24
     dd0:	99 1f       	adc	r25, r25
     dd2:	88 0f       	add	r24, r24
     dd4:	99 1f       	adc	r25, r25
     dd6:	88 0f       	add	r24, r24
     dd8:	99 1f       	adc	r25, r25
     dda:	84 0f       	add	r24, r20
     ddc:	95 1f       	adc	r25, r21
     dde:	82 0f       	add	r24, r18
     de0:	93 1f       	adc	r25, r19
     de2:	90 93 1e 07 	sts	0x071E, r25
     de6:	80 93 1d 07 	sts	0x071D, r24
	transLength += (headerBuffer[hundreds] & 0x0F) * 100; 
     dea:	20 91 10 07 	lds	r18, 0x0710
     dee:	80 91 1d 07 	lds	r24, 0x071D
     df2:	90 91 1e 07 	lds	r25, 0x071E
     df6:	2f 70       	andi	r18, 0x0F	; 15
     df8:	34 e6       	ldi	r19, 0x64	; 100
     dfa:	23 9f       	mul	r18, r19
     dfc:	80 0d       	add	r24, r0
     dfe:	91 1d       	adc	r25, r1
     e00:	11 24       	eor	r1, r1
     e02:	90 93 1e 07 	sts	0x071E, r25
     e06:	80 93 1d 07 	sts	0x071D, r24
	transLength += (headerBuffer[thousands] & 0x0F) * 1000; 
     e0a:	60 91 0f 07 	lds	r22, 0x070F
     e0e:	80 91 1d 07 	lds	r24, 0x071D
     e12:	90 91 1e 07 	lds	r25, 0x071E
     e16:	6f 70       	andi	r22, 0x0F	; 15
     e18:	48 ee       	ldi	r20, 0xE8	; 232
     e1a:	53 e0       	ldi	r21, 0x03	; 3
     e1c:	64 9f       	mul	r22, r20
     e1e:	90 01       	movw	r18, r0
     e20:	65 9f       	mul	r22, r21
     e22:	30 0d       	add	r19, r0
     e24:	11 24       	eor	r1, r1
     e26:	82 0f       	add	r24, r18
     e28:	93 1f       	adc	r25, r19
     e2a:	90 93 1e 07 	sts	0x071E, r25
     e2e:	80 93 1d 07 	sts	0x071D, r24
	transLength += (headerBuffer[tenThousands] & 0x0F) * 10000; 
     e32:	60 91 0e 07 	lds	r22, 0x070E
     e36:	80 91 1d 07 	lds	r24, 0x071D
     e3a:	90 91 1e 07 	lds	r25, 0x071E
     e3e:	6f 70       	andi	r22, 0x0F	; 15
     e40:	40 e1       	ldi	r20, 0x10	; 16
     e42:	57 e2       	ldi	r21, 0x27	; 39
     e44:	64 9f       	mul	r22, r20
     e46:	90 01       	movw	r18, r0
     e48:	65 9f       	mul	r22, r21
     e4a:	30 0d       	add	r19, r0
     e4c:	11 24       	eor	r1, r1
     e4e:	82 0f       	add	r24, r18
     e50:	93 1f       	adc	r25, r19
     e52:	90 93 1e 07 	sts	0x071E, r25
     e56:	80 93 1d 07 	sts	0x071D, r24
	//if(transLength < MaxRecSize)
	return transLength; 
     e5a:	80 91 1d 07 	lds	r24, 0x071D
     e5e:	90 91 1e 07 	lds	r25, 0x071E
	//else
		////8 is the length of the header 
		//return MaxRecSize - 8; 
}
     e62:	df 91       	pop	r29
     e64:	cf 91       	pop	r28
     e66:	1f 91       	pop	r17
     e68:	0f 91       	pop	r16
     e6a:	08 95       	ret

00000e6c <getTransmissionLength>:

uint16_t getTransmissionLength()
{
	return transLength; 
     e6c:	80 91 1d 07 	lds	r24, 0x071D
     e70:	90 91 1e 07 	lds	r25, 0x071E
}
     e74:	08 95       	ret

00000e76 <getMessageHeader>:

char* getMessageHeader()
{
	return headerBuffer; 
}
     e76:	8c e0       	ldi	r24, 0x0C	; 12
     e78:	97 e0       	ldi	r25, 0x07	; 7
     e7a:	08 95       	ret

00000e7c <updateRAMAddress>:
		return 0; 
}

void updateRAMAddress(uint32_t address)
{
	RAMAddress = address; 
     e7c:	60 93 1f 07 	sts	0x071F, r22
     e80:	70 93 20 07 	sts	0x0720, r23
     e84:	80 93 21 07 	sts	0x0721, r24
     e88:	90 93 22 07 	sts	0x0722, r25
     e8c:	08 95       	ret

00000e8e <sendCommand>:
}

unsigned int sendCommand(int8_t prefix, char* command, char* value)
{
     e8e:	0f 93       	push	r16
     e90:	1f 93       	push	r17
     e92:	cf 93       	push	r28
     e94:	df 93       	push	r29
     e96:	ea 01       	movw	r28, r20
	//char* fullCommand = (char *)malloc(MaxSendSize);
	switch(prefix)
     e98:	81 30       	cpi	r24, 0x01	; 1
     e9a:	31 f0       	breq	.+12     	; 0xea8 <sendCommand+0x1a>
     e9c:	82 30       	cpi	r24, 0x02	; 2
     e9e:	71 f0       	breq	.+28     	; 0xebc <sendCommand+0x2e>
     ea0:	8f 3f       	cpi	r24, 0xFF	; 255
     ea2:	09 f0       	breq	.+2      	; 0xea6 <sendCommand+0x18>
     ea4:	6c c0       	rjmp	.+216    	; 0xf7e <sendCommand+0xf0>
     ea6:	17 c0       	rjmp	.+46     	; 0xed6 <sendCommand+0x48>
	{
		case NOPREFIX: 
			break; 
		case GET:
			strcpy(fullCommand, "get "); 
     ea8:	85 e0       	ldi	r24, 0x05	; 5
     eaa:	ea e5       	ldi	r30, 0x5A	; 90
     eac:	f2 e0       	ldi	r31, 0x02	; 2
     eae:	a6 e2       	ldi	r26, 0x26	; 38
     eb0:	b7 e0       	ldi	r27, 0x07	; 7
     eb2:	01 90       	ld	r0, Z+
     eb4:	0d 92       	st	X+, r0
     eb6:	8a 95       	dec	r24
     eb8:	e1 f7       	brne	.-8      	; 0xeb2 <sendCommand+0x24>
			//strcat(fullCommand, "get ");
			break; 
     eba:	0d c0       	rjmp	.+26     	; 0xed6 <sendCommand+0x48>
		case SET: 
			strcat(fullCommand, "set ");
     ebc:	a6 e2       	ldi	r26, 0x26	; 38
     ebe:	b7 e0       	ldi	r27, 0x07	; 7
     ec0:	0d 90       	ld	r0, X+
     ec2:	00 20       	and	r0, r0
     ec4:	e9 f7       	brne	.-6      	; 0xec0 <sendCommand+0x32>
     ec6:	11 97       	sbiw	r26, 0x01	; 1
     ec8:	85 e0       	ldi	r24, 0x05	; 5
     eca:	e2 e3       	ldi	r30, 0x32	; 50
     ecc:	f5 e0       	ldi	r31, 0x05	; 5
     ece:	01 90       	ld	r0, Z+
     ed0:	0d 92       	st	X+, r0
     ed2:	8a 95       	dec	r24
     ed4:	e1 f7       	brne	.-8      	; 0xece <sendCommand+0x40>
			return 0; 
			break; 
	}
	//printf("Command: %s Length: %d, Address: %p\n", fullCommand, strlen(fullCommand), fullCommand);
	//printf("Command: %s Length: %d, Address: %p\n", command, strlen(command),  command);
	strcat(fullCommand, command);
     ed6:	86 e2       	ldi	r24, 0x26	; 38
     ed8:	97 e0       	ldi	r25, 0x07	; 7
     eda:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <strcat>
	//printf("Full Command: %s", fullCommand);	
	if(value != NOVAL)
     ede:	83 e0       	ldi	r24, 0x03	; 3
     ee0:	c2 33       	cpi	r28, 0x32	; 50
     ee2:	d8 07       	cpc	r29, r24
     ee4:	79 f0       	breq	.+30     	; 0xf04 <sendCommand+0x76>
	{
		strcat(fullCommand, " ");
     ee6:	e6 e2       	ldi	r30, 0x26	; 38
     ee8:	f7 e0       	ldi	r31, 0x07	; 7
     eea:	01 90       	ld	r0, Z+
     eec:	00 20       	and	r0, r0
     eee:	e9 f7       	brne	.-6      	; 0xeea <sendCommand+0x5c>
     ef0:	31 97       	sbiw	r30, 0x01	; 1
     ef2:	80 e2       	ldi	r24, 0x20	; 32
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	91 83       	std	Z+1, r25	; 0x01
     ef8:	80 83       	st	Z, r24
		strcat(fullCommand, value);
     efa:	be 01       	movw	r22, r28
     efc:	86 e2       	ldi	r24, 0x26	; 38
     efe:	97 e0       	ldi	r25, 0x07	; 7
     f00:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <strcat>
	}
	
	//printf("fullCommand: %s\n", fullCommand);
	strcat(fullCommand, ENDCOMMAND);
     f04:	c6 e2       	ldi	r28, 0x26	; 38
     f06:	d7 e0       	ldi	r29, 0x07	; 7
     f08:	fe 01       	movw	r30, r28
     f0a:	01 90       	ld	r0, Z+
     f0c:	00 20       	and	r0, r0
     f0e:	e9 f7       	brne	.-6      	; 0xf0a <sendCommand+0x7c>
     f10:	31 97       	sbiw	r30, 0x01	; 1
     f12:	8d e0       	ldi	r24, 0x0D	; 13
     f14:	9a e0       	ldi	r25, 0x0A	; 10
     f16:	a0 e0       	ldi	r26, 0x00	; 0
     f18:	80 83       	st	Z, r24
     f1a:	91 83       	std	Z+1, r25	; 0x01
     f1c:	a2 83       	std	Z+2, r26	; 0x02
	uint16_t length = strlen(fullCommand);
     f1e:	fe 01       	movw	r30, r28
     f20:	01 90       	ld	r0, Z+
     f22:	00 20       	and	r0, r0
     f24:	e9 f7       	brne	.-6      	; 0xf20 <sendCommand+0x92>
     f26:	31 97       	sbiw	r30, 0x01	; 1
     f28:	8f 01       	movw	r16, r30
     f2a:	06 52       	subi	r16, 0x26	; 38
     f2c:	17 40       	sbci	r17, 0x07	; 7
	printf("Command: %s Length: %d, Address: %p\n", fullCommand, length, fullCommand);
     f2e:	df 93       	push	r29
     f30:	cf 93       	push	r28
     f32:	1f 93       	push	r17
     f34:	0f 93       	push	r16
     f36:	df 93       	push	r29
     f38:	cf 93       	push	r28
     f3a:	87 e3       	ldi	r24, 0x37	; 55
     f3c:	95 e0       	ldi	r25, 0x05	; 5
     f3e:	9f 93       	push	r25
     f40:	8f 93       	push	r24
     f42:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <printf>
	uart_send(fullCommand, length);
     f46:	b8 01       	movw	r22, r16
     f48:	ce 01       	movw	r24, r28
     f4a:	0e 94 4e 06 	call	0xc9c	; 0xc9c <uart_send>
	memset(fullCommand, 0x00, 100);
     f4e:	84 e6       	ldi	r24, 0x64	; 100
     f50:	fe 01       	movw	r30, r28
     f52:	11 92       	st	Z+, r1
     f54:	8a 95       	dec	r24
     f56:	e9 f7       	brne	.-6      	; 0xf52 <sendCommand+0xc4>
	//PORTD |= (1<<RTS);
	printf("Freed!\n");
     f58:	8c e5       	ldi	r24, 0x5C	; 92
     f5a:	95 e0       	ldi	r25, 0x05	; 5
     f5c:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <puts>
	printf("Returning!\n");
     f60:	83 e6       	ldi	r24, 0x63	; 99
     f62:	95 e0       	ldi	r25, 0x05	; 5
     f64:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <puts>
	return 1; 
     f68:	8d b7       	in	r24, 0x3d	; 61
     f6a:	9e b7       	in	r25, 0x3e	; 62
     f6c:	08 96       	adiw	r24, 0x08	; 8
     f6e:	0f b6       	in	r0, 0x3f	; 63
     f70:	f8 94       	cli
     f72:	9e bf       	out	0x3e, r25	; 62
     f74:	0f be       	out	0x3f, r0	; 63
     f76:	8d bf       	out	0x3d, r24	; 61
     f78:	81 e0       	ldi	r24, 0x01	; 1
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	02 c0       	rjmp	.+4      	; 0xf82 <sendCommand+0xf4>
			break; 
		case SET: 
			strcat(fullCommand, "set ");
			break; 
		default:
			return 0; 
     f7e:	80 e0       	ldi	r24, 0x00	; 0
     f80:	90 e0       	ldi	r25, 0x00	; 0
	memset(fullCommand, 0x00, 100);
	//PORTD |= (1<<RTS);
	printf("Freed!\n");
	printf("Returning!\n");
	return 1; 
}
     f82:	df 91       	pop	r29
     f84:	cf 91       	pop	r28
     f86:	1f 91       	pop	r17
     f88:	0f 91       	pop	r16
     f8a:	08 95       	ret

00000f8c <__vector_36>:
	//PORTD |= (1<<CTS);
	//sei();
//}

ISR(USART1_RX_vect)
{
     f8c:	1f 92       	push	r1
     f8e:	0f 92       	push	r0
     f90:	0f b6       	in	r0, 0x3f	; 63
     f92:	0f 92       	push	r0
     f94:	11 24       	eor	r1, r1
     f96:	2f 93       	push	r18
     f98:	3f 93       	push	r19
     f9a:	4f 93       	push	r20
     f9c:	5f 93       	push	r21
     f9e:	6f 93       	push	r22
     fa0:	7f 93       	push	r23
     fa2:	8f 93       	push	r24
     fa4:	9f 93       	push	r25
     fa6:	af 93       	push	r26
     fa8:	bf 93       	push	r27
     faa:	cf 93       	push	r28
     fac:	df 93       	push	r29
     fae:	ef 93       	push	r30
     fb0:	ff 93       	push	r31
	cli();
     fb2:	f8 94       	cli
	//if(testPrint)
		//printf("Interrupt!\n");
	if(!bufferStart)
     fb4:	80 91 23 07 	lds	r24, 0x0723
     fb8:	90 91 24 07 	lds	r25, 0x0724
     fbc:	89 2b       	or	r24, r25
     fbe:	f9 f4       	brne	.+62     	; 0xffe <__vector_36+0x72>
	{
		buff = uart_receiveChar();
     fc0:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <uart_receiveChar>
     fc4:	80 93 15 07 	sts	0x0715, r24
		//Header always begins with letter 'R'
		if(buff == headerStartVal)
     fc8:	80 91 15 07 	lds	r24, 0x0715
     fcc:	82 35       	cpi	r24, 0x52	; 82
     fce:	09 f0       	breq	.+2      	; 0xfd2 <__vector_36+0x46>
     fd0:	03 c1       	rjmp	.+518    	; 0x11d8 <__vector_36+0x24c>
		{
			PORTD &= ~(1<<RTS);
     fd2:	5d 98       	cbi	0x0b, 5	; 11
			//if(testPrint)
				//printf("Beginning Found @ %d\n", i); 
				
			i = 0;
     fd4:	10 92 1a 07 	sts	0x071A, r1
     fd8:	10 92 19 07 	sts	0x0719, r1
			headerBuffer[i] = buff; 
     fdc:	e0 91 19 07 	lds	r30, 0x0719
     fe0:	f0 91 1a 07 	lds	r31, 0x071A
     fe4:	80 91 15 07 	lds	r24, 0x0715
     fe8:	e4 5f       	subi	r30, 0xF4	; 244
     fea:	f8 4f       	sbci	r31, 0xF8	; 248
     fec:	80 83       	st	Z, r24
			
				//if(testPrint)
					//printf("Header: %c @ address %p", headerBuffer[i], headerBuffer); 
					
			bufferStart = 1;
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	90 93 24 07 	sts	0x0724, r25
     ff6:	80 93 23 07 	sts	0x0723, r24
			PORTD |= (1<<RTS); 
     ffa:	5d 9a       	sbi	0x0b, 5	; 11
     ffc:	ed c0       	rjmp	.+474    	; 0x11d8 <__vector_36+0x24c>
	
	else
	{
		//printf("Beginning of buffer.\n");
		//Grab Receive Header
		if(i < endHeader)
     ffe:	80 91 19 07 	lds	r24, 0x0719
    1002:	90 91 1a 07 	lds	r25, 0x071A
    1006:	09 97       	sbiw	r24, 0x09	; 9
    1008:	60 f4       	brcc	.+24     	; 0x1022 <__vector_36+0x96>
		{
			PORTD &= ~(1<<RTS);
    100a:	5d 98       	cbi	0x0b, 5	; 11
			headerBuffer[i] = uart_receiveChar();
    100c:	c0 91 19 07 	lds	r28, 0x0719
    1010:	d0 91 1a 07 	lds	r29, 0x071A
    1014:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <uart_receiveChar>
    1018:	c4 5f       	subi	r28, 0xF4	; 244
    101a:	d8 4f       	sbci	r29, 0xF8	; 248
    101c:	88 83       	st	Y, r24
			//if(testPrint)
				//printf("Header: %c @ address %p\n", headerBuffer[i], headerBuffer + i);
			//i++; 
			//RAMWriteByte(uart_receiveChar(), i);
			PORTD |= (1<<RTS); 
    101e:	5d 9a       	sbi	0x0b, 5	; 11
    1020:	db c0       	rjmp	.+438    	; 0x11d8 <__vector_36+0x24c>
		}
		else if(i == endHeader)
    1022:	80 91 19 07 	lds	r24, 0x0719
    1026:	90 91 1a 07 	lds	r25, 0x071A
    102a:	09 97       	sbiw	r24, 0x09	; 9
    102c:	f1 f4       	brne	.+60     	; 0x106a <__vector_36+0xde>
		{
			transLength = buildTransmissionLength();
    102e:	0e 94 a3 06 	call	0xd46	; 0xd46 <buildTransmissionLength>
    1032:	90 93 1e 07 	sts	0x071E, r25
    1036:	80 93 1d 07 	sts	0x071D, r24
			//i++; 
			if(testPrint)
    103a:	80 91 17 07 	lds	r24, 0x0717
    103e:	90 91 18 07 	lds	r25, 0x0718
    1042:	89 2b       	or	r24, r25
    1044:	09 f4       	brne	.+2      	; 0x1048 <__vector_36+0xbc>
    1046:	c8 c0       	rjmp	.+400    	; 0x11d8 <__vector_36+0x24c>
				printf("Transmission Length: %d\n", transLength);
    1048:	80 91 1d 07 	lds	r24, 0x071D
    104c:	90 91 1e 07 	lds	r25, 0x071E
    1050:	9f 93       	push	r25
    1052:	8f 93       	push	r24
    1054:	8e e6       	ldi	r24, 0x6E	; 110
    1056:	95 e0       	ldi	r25, 0x05	; 5
    1058:	9f 93       	push	r25
    105a:	8f 93       	push	r24
    105c:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <printf>
    1060:	0f 90       	pop	r0
    1062:	0f 90       	pop	r0
    1064:	0f 90       	pop	r0
    1066:	0f 90       	pop	r0
    1068:	b7 c0       	rjmp	.+366    	; 0x11d8 <__vector_36+0x24c>
		}
		else
		{
			if(i < transLength + endHeader)
    106a:	20 91 1d 07 	lds	r18, 0x071D
    106e:	30 91 1e 07 	lds	r19, 0x071E
    1072:	80 91 19 07 	lds	r24, 0x0719
    1076:	90 91 1a 07 	lds	r25, 0x071A
    107a:	27 5f       	subi	r18, 0xF7	; 247
    107c:	3f 4f       	sbci	r19, 0xFF	; 255
    107e:	82 17       	cp	r24, r18
    1080:	93 07       	cpc	r25, r19
    1082:	08 f0       	brcs	.+2      	; 0x1086 <__vector_36+0xfa>
    1084:	6f c0       	rjmp	.+222    	; 0x1164 <__vector_36+0x1d8>
			{
				//printf("Translength: %d", transLength);
				buff = uart_receiveChar();
    1086:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <uart_receiveChar>
    108a:	80 93 15 07 	sts	0x0715, r24
				if(compressFlag == 1)
    108e:	80 91 1c 07 	lds	r24, 0x071C
    1092:	81 30       	cpi	r24, 0x01	; 1
    1094:	09 f0       	breq	.+2      	; 0x1098 <__vector_36+0x10c>
    1096:	4d c0       	rjmp	.+154    	; 0x1132 <__vector_36+0x1a6>
				{
					//printf("Compressing!\n");
					PORTD &= ~(1<<CTS);
    1098:	5c 98       	cbi	0x0b, 4	; 11
					if(buff == ':')
    109a:	80 91 15 07 	lds	r24, 0x0715
    109e:	8a 33       	cpi	r24, 0x3A	; 58
    10a0:	d1 f4       	brne	.+52     	; 0x10d6 <__vector_36+0x14a>
					{
						PORTD &= ~(1<<RTS);
    10a2:	5d 98       	cbi	0x0b, 5	; 11
						RAMWriteByte(buff, RAMAddress + i - endHeader -1);
    10a4:	20 91 19 07 	lds	r18, 0x0719
    10a8:	30 91 1a 07 	lds	r19, 0x071A
    10ac:	40 91 1f 07 	lds	r20, 0x071F
    10b0:	50 91 20 07 	lds	r21, 0x0720
    10b4:	60 91 21 07 	lds	r22, 0x0721
    10b8:	70 91 22 07 	lds	r23, 0x0722
    10bc:	80 91 15 07 	lds	r24, 0x0715
    10c0:	4a 50       	subi	r20, 0x0A	; 10
    10c2:	51 09       	sbc	r21, r1
    10c4:	61 09       	sbc	r22, r1
    10c6:	71 09       	sbc	r23, r1
    10c8:	42 0f       	add	r20, r18
    10ca:	53 1f       	adc	r21, r19
    10cc:	61 1d       	adc	r22, r1
    10ce:	71 1d       	adc	r23, r1
    10d0:	0e 94 32 05 	call	0xa64	; 0xa64 <RAMWriteByte>
    10d4:	81 c0       	rjmp	.+258    	; 0x11d8 <__vector_36+0x24c>
					}
					else if(!secondNibble)
    10d6:	80 91 1b 07 	lds	r24, 0x071B
    10da:	81 11       	cpse	r24, r1
    10dc:	0a c0       	rjmp	.+20     	; 0x10f2 <__vector_36+0x166>
					{
						//Mask the ASCII Nibble 
						compressBuff = (buff & 0x0F);
    10de:	80 91 15 07 	lds	r24, 0x0715
						//Shift it into the upper nibble  
						compressBuff <<= 4; 
    10e2:	82 95       	swap	r24
    10e4:	80 7f       	andi	r24, 0xF0	; 240
    10e6:	80 93 16 07 	sts	0x0716, r24
						secondNibble =  1;
    10ea:	81 e0       	ldi	r24, 0x01	; 1
    10ec:	80 93 1b 07 	sts	0x071B, r24
    10f0:	73 c0       	rjmp	.+230    	; 0x11d8 <__vector_36+0x24c>
					}
					else
					{
						compressBuff |= buff; 
    10f2:	90 91 15 07 	lds	r25, 0x0715
    10f6:	80 91 16 07 	lds	r24, 0x0716
    10fa:	89 2b       	or	r24, r25
    10fc:	80 93 16 07 	sts	0x0716, r24
						RAMWriteByte(compressBuff, RAMAddress + i - endHeader -1);
    1100:	20 91 19 07 	lds	r18, 0x0719
    1104:	30 91 1a 07 	lds	r19, 0x071A
    1108:	40 91 1f 07 	lds	r20, 0x071F
    110c:	50 91 20 07 	lds	r21, 0x0720
    1110:	60 91 21 07 	lds	r22, 0x0721
    1114:	70 91 22 07 	lds	r23, 0x0722
    1118:	4a 50       	subi	r20, 0x0A	; 10
    111a:	51 09       	sbc	r21, r1
    111c:	61 09       	sbc	r22, r1
    111e:	71 09       	sbc	r23, r1
    1120:	42 0f       	add	r20, r18
    1122:	53 1f       	adc	r21, r19
    1124:	61 1d       	adc	r22, r1
    1126:	71 1d       	adc	r23, r1
    1128:	0e 94 32 05 	call	0xa64	; 0xa64 <RAMWriteByte>
						secondNibble = 0; 
    112c:	10 92 1b 07 	sts	0x071B, r1
    1130:	53 c0       	rjmp	.+166    	; 0x11d8 <__vector_36+0x24c>
					}
				}
				else
				{
					RAMWriteByte(buff, RAMAddress + i - endHeader -1);	
    1132:	20 91 19 07 	lds	r18, 0x0719
    1136:	30 91 1a 07 	lds	r19, 0x071A
    113a:	40 91 1f 07 	lds	r20, 0x071F
    113e:	50 91 20 07 	lds	r21, 0x0720
    1142:	60 91 21 07 	lds	r22, 0x0721
    1146:	70 91 22 07 	lds	r23, 0x0722
    114a:	80 91 15 07 	lds	r24, 0x0715
    114e:	4a 50       	subi	r20, 0x0A	; 10
    1150:	51 09       	sbc	r21, r1
    1152:	61 09       	sbc	r22, r1
    1154:	71 09       	sbc	r23, r1
    1156:	42 0f       	add	r20, r18
    1158:	53 1f       	adc	r21, r19
    115a:	61 1d       	adc	r22, r1
    115c:	71 1d       	adc	r23, r1
    115e:	0e 94 32 05 	call	0xa64	; 0xa64 <RAMWriteByte>
    1162:	3a c0       	rjmp	.+116    	; 0x11d8 <__vector_36+0x24c>
			}

			else
			{
				//printf("End of String!\n");
				RAMWriteByte(0x00, RAMAddress + i - endHeader -1);
    1164:	80 91 19 07 	lds	r24, 0x0719
    1168:	90 91 1a 07 	lds	r25, 0x071A
    116c:	40 91 1f 07 	lds	r20, 0x071F
    1170:	50 91 20 07 	lds	r21, 0x0720
    1174:	60 91 21 07 	lds	r22, 0x0721
    1178:	70 91 22 07 	lds	r23, 0x0722
    117c:	4a 50       	subi	r20, 0x0A	; 10
    117e:	51 09       	sbc	r21, r1
    1180:	61 09       	sbc	r22, r1
    1182:	71 09       	sbc	r23, r1
    1184:	48 0f       	add	r20, r24
    1186:	59 1f       	adc	r21, r25
    1188:	61 1d       	adc	r22, r1
    118a:	71 1d       	adc	r23, r1
    118c:	80 e0       	ldi	r24, 0x00	; 0
    118e:	0e 94 32 05 	call	0xa64	; 0xa64 <RAMWriteByte>
				//cli();
				i = 0;
    1192:	10 92 1a 07 	sts	0x071A, r1
    1196:	10 92 19 07 	sts	0x0719, r1
				bufferStart = 0;
    119a:	10 92 24 07 	sts	0x0724, r1
    119e:	10 92 23 07 	sts	0x0723, r1
				compressFlag = 0; 
    11a2:	10 92 1c 07 	sts	0x071C, r1
				secondNibble = 0; 
    11a6:	10 92 1b 07 	sts	0x071B, r1
				compressBuff = 0x00; 
    11aa:	10 92 16 07 	sts	0x0716, r1
				//done receiving
				receiveWifiFlag = 1;
    11ae:	81 e0       	ldi	r24, 0x01	; 1
    11b0:	80 93 25 07 	sts	0x0725, r24
				printf("Transmission Length: %d\n", buildTransmissionLength());
    11b4:	0e 94 a3 06 	call	0xd46	; 0xd46 <buildTransmissionLength>
    11b8:	9f 93       	push	r25
    11ba:	8f 93       	push	r24
    11bc:	8e e6       	ldi	r24, 0x6E	; 110
    11be:	95 e0       	ldi	r25, 0x05	; 5
    11c0:	9f 93       	push	r25
    11c2:	8f 93       	push	r24
    11c4:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <printf>
				printf("Done Receiving!\n");
    11c8:	87 e8       	ldi	r24, 0x87	; 135
    11ca:	95 e0       	ldi	r25, 0x05	; 5
    11cc:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <puts>
    11d0:	0f 90       	pop	r0
    11d2:	0f 90       	pop	r0
    11d4:	0f 90       	pop	r0
    11d6:	0f 90       	pop	r0
		}
		//printf("%d\n", i); 
		//i++; 
	}
	//if(bufferStart && !receiveWifiFlag)
	i++; 
    11d8:	80 91 19 07 	lds	r24, 0x0719
    11dc:	90 91 1a 07 	lds	r25, 0x071A
    11e0:	01 96       	adiw	r24, 0x01	; 1
    11e2:	90 93 1a 07 	sts	0x071A, r25
    11e6:	80 93 19 07 	sts	0x0719, r24
		
	PORTD |= (1<<CTS); 
    11ea:	5c 9a       	sbi	0x0b, 4	; 11
	sei(); 
    11ec:	78 94       	sei
}
    11ee:	ff 91       	pop	r31
    11f0:	ef 91       	pop	r30
    11f2:	df 91       	pop	r29
    11f4:	cf 91       	pop	r28
    11f6:	bf 91       	pop	r27
    11f8:	af 91       	pop	r26
    11fa:	9f 91       	pop	r25
    11fc:	8f 91       	pop	r24
    11fe:	7f 91       	pop	r23
    1200:	6f 91       	pop	r22
    1202:	5f 91       	pop	r21
    1204:	4f 91       	pop	r20
    1206:	3f 91       	pop	r19
    1208:	2f 91       	pop	r18
    120a:	0f 90       	pop	r0
    120c:	0f be       	out	0x3f, r0	; 63
    120e:	0f 90       	pop	r0
    1210:	1f 90       	pop	r1
    1212:	18 95       	reti

00001214 <hexInit>:
				   ':', 0x10, 0x00, 0x10, 0x00, 0x12, 0xC0, 0x11, 0xC0, 0x10, 0xC0, 0x0F, 0xC0, 0x0E, 0xC0, 0x0D, 0xC0, 0x0C, 0xC0, 0x0B, 0xC0, 0x6C,
				   ':', 0x00, 0x00, 0x00, 0x01, 0xFF};

void hexInit()
{
	RAMOffset = 0; 
    1214:	10 92 bd 07 	sts	0x07BD, r1
    1218:	10 92 bc 07 	sts	0x07BC, r1
	memset(hexRow, 0x00, 50); 
    121c:	82 e3       	ldi	r24, 0x32	; 50
    121e:	ea e8       	ldi	r30, 0x8A	; 138
    1220:	f7 e0       	ldi	r31, 0x07	; 7
    1222:	df 01       	movw	r26, r30
    1224:	1d 92       	st	X+, r1
    1226:	8a 95       	dec	r24
    1228:	e9 f7       	brne	.-6      	; 0x1224 <hexInit+0x10>
    122a:	08 95       	ret

0000122c <getHexRow>:
} 

char* getHexRow()
{
    122c:	0f 93       	push	r16
    122e:	1f 93       	push	r17
    1230:	cf 93       	push	r28
    1232:	df 93       	push	r29
    1234:	ca e8       	ldi	r28, 0x8A	; 138
    1236:	d7 e0       	ldi	r29, 0x07	; 7
    1238:	0f e8       	ldi	r16, 0x8F	; 143
    123a:	17 e0       	ldi	r17, 0x07	; 7
	char buffer; 
	int i=0; 
	for(i=0; i<DATA_BEGIN; i++)
	{
		//Read the bytes from RAM and throw them into the buffer
		buffer = RAMReadByte(HEX_FILE_ADDRESS + RAMOffset);
    123c:	60 91 bc 07 	lds	r22, 0x07BC
    1240:	70 91 bd 07 	lds	r23, 0x07BD
    1244:	80 e0       	ldi	r24, 0x00	; 0
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	0e 94 4c 05 	call	0xa98	; 0xa98 <RAMReadByte>
		//printf("0x%02X ",buffer);
		hexRow[i] = buffer; 
    124c:	89 93       	st	Y+, r24
		RAMOffset++; 
    124e:	80 91 bc 07 	lds	r24, 0x07BC
    1252:	90 91 bd 07 	lds	r25, 0x07BD
    1256:	01 96       	adiw	r24, 0x01	; 1
    1258:	90 93 bd 07 	sts	0x07BD, r25
    125c:	80 93 bc 07 	sts	0x07BC, r24

char* getHexRow()
{
	char buffer; 
	int i=0; 
	for(i=0; i<DATA_BEGIN; i++)
    1260:	c0 17       	cp	r28, r16
    1262:	d1 07       	cpc	r29, r17
    1264:	59 f7       	brne	.-42     	; 0x123c <getHexRow+0x10>
		//printf("0x%02X ",buffer);
		hexRow[i] = buffer; 
		RAMOffset++; 
	}
	
	uint8_t dataLength = hexRow[BYTE_COUNT];
    1266:	00 91 8b 07 	lds	r16, 0x078B
    126a:	cf e8       	ldi	r28, 0x8F	; 143
    126c:	d7 e0       	ldi	r29, 0x07	; 7
    126e:	10 e0       	ldi	r17, 0x00	; 0
    1270:	00 57       	subi	r16, 0x70	; 112
    1272:	18 4f       	sbci	r17, 0xF8	; 248
	//Add 1 to dataLength to catch the checkSum 
	for(i=0;i<dataLength+1;i++)
	{
		buffer = RAMReadByte(HEX_FILE_ADDRESS + RAMOffset);
    1274:	60 91 bc 07 	lds	r22, 0x07BC
    1278:	70 91 bd 07 	lds	r23, 0x07BD
    127c:	80 e0       	ldi	r24, 0x00	; 0
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	0e 94 4c 05 	call	0xa98	; 0xa98 <RAMReadByte>
		//printf("0x%02X ",buffer);
		hexRow[DATA_BEGIN + i] = RAMReadByte(HEX_FILE_ADDRESS + RAMOffset);
    1284:	60 91 bc 07 	lds	r22, 0x07BC
    1288:	70 91 bd 07 	lds	r23, 0x07BD
    128c:	80 e0       	ldi	r24, 0x00	; 0
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	0e 94 4c 05 	call	0xa98	; 0xa98 <RAMReadByte>
    1294:	89 93       	st	Y+, r24
		RAMOffset++; 
    1296:	80 91 bc 07 	lds	r24, 0x07BC
    129a:	90 91 bd 07 	lds	r25, 0x07BD
    129e:	01 96       	adiw	r24, 0x01	; 1
    12a0:	90 93 bd 07 	sts	0x07BD, r25
    12a4:	80 93 bc 07 	sts	0x07BC, r24
		RAMOffset++; 
	}
	
	uint8_t dataLength = hexRow[BYTE_COUNT];
	//Add 1 to dataLength to catch the checkSum 
	for(i=0;i<dataLength+1;i++)
    12a8:	c0 17       	cp	r28, r16
    12aa:	d1 07       	cpc	r29, r17
    12ac:	19 f7       	brne	.-58     	; 0x1274 <getHexRow+0x48>
		hexRow[DATA_BEGIN + i] = RAMReadByte(HEX_FILE_ADDRESS + RAMOffset);
		RAMOffset++; 
	}
	
	return hexRow; 
}
    12ae:	8a e8       	ldi	r24, 0x8A	; 138
    12b0:	97 e0       	ldi	r25, 0x07	; 7
    12b2:	df 91       	pop	r29
    12b4:	cf 91       	pop	r28
    12b6:	1f 91       	pop	r17
    12b8:	0f 91       	pop	r16
    12ba:	08 95       	ret

000012bc <readyToProgram>:
	ExitParallelProgrammingMode();
	
}

int readyToProgram()
{
    12bc:	cf 93       	push	r28
    12be:	df 93       	push	r29
	char* SignatureBytes = ReadSignatureBytes();
    12c0:	0e 94 8c 0a 	call	0x1518	; 0x1518 <ReadSignatureBytes>
    12c4:	ec 01       	movw	r28, r24
	
	printf("\nSignature Bytes: %02X %02X %02X\n", *SignatureBytes, *(SignatureBytes + 1), *(SignatureBytes + 2));
    12c6:	8a 81       	ldd	r24, Y+2	; 0x02
    12c8:	1f 92       	push	r1
    12ca:	8f 93       	push	r24
    12cc:	89 81       	ldd	r24, Y+1	; 0x01
    12ce:	1f 92       	push	r1
    12d0:	8f 93       	push	r24
    12d2:	88 81       	ld	r24, Y
    12d4:	1f 92       	push	r1
    12d6:	8f 93       	push	r24
    12d8:	87 e9       	ldi	r24, 0x97	; 151
    12da:	95 e0       	ldi	r25, 0x05	; 5
    12dc:	9f 93       	push	r25
    12de:	8f 93       	push	r24
    12e0:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <printf>
	//if ( (*SignatureBytes == 0x1E) && (*(SignatureBytes + 1) == 0x91) && (*(SignatureBytes + 2) == 0x0A) )
	if ( (*SignatureBytes == ATtiny2313_1) && (*(SignatureBytes + 1) == ATtiny2313_2) && (*(SignatureBytes + 2) == ATtiny2313_3) )
    12e4:	8d b7       	in	r24, 0x3d	; 61
    12e6:	9e b7       	in	r25, 0x3e	; 62
    12e8:	08 96       	adiw	r24, 0x08	; 8
    12ea:	0f b6       	in	r0, 0x3f	; 63
    12ec:	f8 94       	cli
    12ee:	9e bf       	out	0x3e, r25	; 62
    12f0:	0f be       	out	0x3f, r0	; 63
    12f2:	8d bf       	out	0x3d, r24	; 61
    12f4:	88 81       	ld	r24, Y
    12f6:	8e 31       	cpi	r24, 0x1E	; 30
    12f8:	51 f4       	brne	.+20     	; 0x130e <readyToProgram+0x52>
    12fa:	89 81       	ldd	r24, Y+1	; 0x01
    12fc:	81 39       	cpi	r24, 0x91	; 145
    12fe:	51 f4       	brne	.+20     	; 0x1314 <readyToProgram+0x58>
    1300:	81 e0       	ldi	r24, 0x01	; 1
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	2a 81       	ldd	r18, Y+2	; 0x02
    1306:	2a 30       	cpi	r18, 0x0A	; 10
    1308:	39 f0       	breq	.+14     	; 0x1318 <readyToProgram+0x5c>
    130a:	80 e0       	ldi	r24, 0x00	; 0
    130c:	05 c0       	rjmp	.+10     	; 0x1318 <readyToProgram+0x5c>
		//printf("Done Programming!\n");
		//ReadFlash();
		//printf("\nDone!\n\n");
	}
	//ExitParallelProgrammingMode();
	return 0; 
    130e:	80 e0       	ldi	r24, 0x00	; 0
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	02 c0       	rjmp	.+4      	; 0x1318 <readyToProgram+0x5c>
    1314:	80 e0       	ldi	r24, 0x00	; 0
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	df 91       	pop	r29
    131a:	cf 91       	pop	r28
    131c:	08 95       	ret

0000131e <Program>:
#include "AVR.h"


int Program()
{
	if(readyToProgram())
    131e:	0e 94 5e 09 	call	0x12bc	; 0x12bc <readyToProgram>
    1322:	89 2b       	or	r24, r25
    1324:	e1 f0       	breq	.+56     	; 0x135e <Program+0x40>
	{
		//Continue with Programming operation 
		printf("Programming!\n");
    1326:	8c ec       	ldi	r24, 0xCC	; 204
    1328:	95 e0       	ldi	r25, 0x05	; 5
    132a:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <puts>
		ChipErase();
    132e:	0e 94 cc 0b 	call	0x1798	; 0x1798 <ChipErase>
		printf("Done Erasing!\n");
    1332:	89 eb       	ldi	r24, 0xB9	; 185
    1334:	95 e0       	ldi	r25, 0x05	; 5
    1336:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <puts>
		ReadFlash();
    133a:	0e 94 57 0b 	call	0x16ae	; 0x16ae <ReadFlash>
		printf("\n");
    133e:	8a e0       	ldi	r24, 0x0A	; 10
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <putchar>
		ProgramFlash();
    1346:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <ProgramFlash>
		printf("Done Programming!\n");
    134a:	87 ec       	ldi	r24, 0xC7	; 199
    134c:	95 e0       	ldi	r25, 0x05	; 5
    134e:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <puts>
		ReadFlash();
    1352:	0e 94 57 0b 	call	0x16ae	; 0x16ae <ReadFlash>
		printf("\nDone!\n\n");
    1356:	89 ed       	ldi	r24, 0xD9	; 217
    1358:	95 e0       	ldi	r25, 0x05	; 5
    135a:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <puts>
	}
	ExitParallelProgrammingMode();
    135e:	0e 94 b4 0c 	call	0x1968	; 0x1968 <ExitParallelProgrammingMode>
	
}
    1362:	08 95       	ret

00001364 <ProgInit>:
#include "AVR.h"


void ProgInit(void)
{
	SPI_Switching_Circuitry_Init(); 
    1364:	0e 94 53 05 	call	0xaa6	; 0xaa6 <SPI_Switching_Circuitry_Init>
	SPI_FPGA_Init();
    1368:	0e 94 54 04 	call	0x8a8	; 0x8a8 <SPI_FPGA_Init>
	
	voltageControlInit();
    136c:	0e 94 68 05 	call	0xad0	; 0xad0 <voltageControlInit>
	setVpp(VPP_12V);
    1370:	81 e0       	ldi	r24, 0x01	; 1
    1372:	0e 94 88 05 	call	0xb10	; 0xb10 <setVpp>
	setVcc(VCC_5V);
    1376:	84 e0       	ldi	r24, 0x04	; 4
    1378:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <setVcc>
	setVLogic(VL_5V);
    137c:	86 e0       	ldi	r24, 0x06	; 6
    137e:	0e 94 9a 05 	call	0xb34	; 0xb34 <setVLogic>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1382:	8f e0       	ldi	r24, 0x0F	; 15
    1384:	97 e2       	ldi	r25, 0x27	; 39
    1386:	01 97       	sbiw	r24, 0x01	; 1
    1388:	f1 f7       	brne	.-4      	; 0x1386 <ProgInit+0x22>
    138a:	00 c0       	rjmp	.+0      	; 0x138c <ProgInit+0x28>
    138c:	00 00       	nop
	_delay_ms(5);
	enableVccRegulator();
    138e:	0e 94 76 05 	call	0xaec	; 0xaec <enableVccRegulator>
	enableVLogic();
    1392:	0e 94 96 05 	call	0xb2c	; 0xb2c <enableVLogic>
    1396:	9f ef       	ldi	r25, 0xFF	; 255
    1398:	24 e3       	ldi	r18, 0x34	; 52
    139a:	8c e0       	ldi	r24, 0x0C	; 12
    139c:	91 50       	subi	r25, 0x01	; 1
    139e:	20 40       	sbci	r18, 0x00	; 0
    13a0:	80 40       	sbci	r24, 0x00	; 0
    13a2:	e1 f7       	brne	.-8      	; 0x139c <ProgInit+0x38>
    13a4:	00 c0       	rjmp	.+0      	; 0x13a6 <ProgInit+0x42>
    13a6:	00 00       	nop
	_delay_ms(500);
	//Setting up Control lines
	CONTROL_DDR |= ( (1<<XTAL1) | (1<<OE) | (1<<WR) | (1<<BS1_PAGEL) | (1<<XA0) | (1<<XA1_BS2) | (1<<PAGEL) | (1<<BS2));
    13a8:	8a b1       	in	r24, 0x0a	; 10
    13aa:	8f ef       	ldi	r24, 0xFF	; 255
    13ac:	8a b9       	out	0x0a, r24	; 10
	RDY_BSY_DDR &= ~(1<<RDY_BSY);
    13ae:	38 98       	cbi	0x07, 0	; 7
	DATA_DDR = 0xFF;
    13b0:	80 93 0a 01 	sts	0x010A, r24
	
	LED_PORT &= ~((1<<LED_Green) | (1<<LED_Yellow) | (1<<LED_Red));
    13b4:	84 b3       	in	r24, 0x14	; 20
    13b6:	88 7f       	andi	r24, 0xF8	; 248
    13b8:	84 bb       	out	0x14, r24	; 20
    13ba:	08 95       	ret

000013bc <LoadCommand>:
}

void LoadCommand(char command)
{
	//A: Load Command "Program Flash"
	CONTROL_PORT |= 1<<XA1_BS2;
    13bc:	5d 9a       	sbi	0x0b, 5	; 11
	CONTROL_PORT &= ~(1<<XA0);
    13be:	5c 98       	cbi	0x0b, 4	; 11
	CONTROL_PORT &= ~(1<<BS1_PAGEL);
    13c0:	5b 98       	cbi	0x0b, 3	; 11
	DATA_PORT = command;
    13c2:	80 93 0b 01 	sts	0x010B, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    13c6:	82 e4       	ldi	r24, 0x42	; 66
    13c8:	8a 95       	dec	r24
    13ca:	f1 f7       	brne	.-4      	; 0x13c8 <LoadCommand+0xc>
    13cc:	00 c0       	rjmp	.+0      	; 0x13ce <LoadCommand+0x12>
	_delay_us(25);
	CONTROL_PORT |= 1<<XTAL1;
    13ce:	58 9a       	sbi	0x0b, 0	; 11
    13d0:	82 e4       	ldi	r24, 0x42	; 66
    13d2:	8a 95       	dec	r24
    13d4:	f1 f7       	brne	.-4      	; 0x13d2 <LoadCommand+0x16>
    13d6:	00 c0       	rjmp	.+0      	; 0x13d8 <LoadCommand+0x1c>
	_delay_us(25);
	CONTROL_PORT &= ~(1<<XTAL1);
    13d8:	58 98       	cbi	0x0b, 0	; 11
    13da:	82 e4       	ldi	r24, 0x42	; 66
    13dc:	8a 95       	dec	r24
    13de:	f1 f7       	brne	.-4      	; 0x13dc <LoadCommand+0x20>
    13e0:	00 c0       	rjmp	.+0      	; 0x13e2 <LoadCommand+0x26>
    13e2:	08 95       	ret

000013e4 <WriteWord>:
}

void WriteWord(uint16_t data)
{
	//C: Load Data Low Byte
	CONTROL_PORT &= ~(1<<XA1_BS2);
    13e4:	5d 98       	cbi	0x0b, 5	; 11
	CONTROL_PORT |= 1<<XA0;
    13e6:	5c 9a       	sbi	0x0b, 4	; 11
	DATA_PORT = data & 0x00FF; 
    13e8:	80 93 0b 01 	sts	0x010B, r24
    13ec:	82 e4       	ldi	r24, 0x42	; 66
    13ee:	8a 95       	dec	r24
    13f0:	f1 f7       	brne	.-4      	; 0x13ee <WriteWord+0xa>
    13f2:	00 c0       	rjmp	.+0      	; 0x13f4 <WriteWord+0x10>
	_delay_us(25);
	CONTROL_PORT |= 1<<XTAL1;
    13f4:	58 9a       	sbi	0x0b, 0	; 11
    13f6:	82 e4       	ldi	r24, 0x42	; 66
    13f8:	8a 95       	dec	r24
    13fa:	f1 f7       	brne	.-4      	; 0x13f8 <WriteWord+0x14>
    13fc:	00 c0       	rjmp	.+0      	; 0x13fe <WriteWord+0x1a>
	_delay_us(25);
	CONTROL_PORT &= ~(1<<XTAL1);
    13fe:	58 98       	cbi	0x0b, 0	; 11
    1400:	82 e4       	ldi	r24, 0x42	; 66
    1402:	8a 95       	dec	r24
    1404:	f1 f7       	brne	.-4      	; 0x1402 <WriteWord+0x1e>
    1406:	00 c0       	rjmp	.+0      	; 0x1408 <WriteWord+0x24>
	_delay_us(25);
	
	//D: Load Data High Byte
	CONTROL_PORT |= 1<<BS1_PAGEL;
    1408:	5b 9a       	sbi	0x0b, 3	; 11
	CONTROL_PORT &= ~(1<<XA1_BS2);
    140a:	5d 98       	cbi	0x0b, 5	; 11
	CONTROL_PORT |= 1<<XA0;
    140c:	5c 9a       	sbi	0x0b, 4	; 11
	DATA_PORT = ((data & 0xFF00) >> 8); 
    140e:	90 93 0b 01 	sts	0x010B, r25
    1412:	82 e4       	ldi	r24, 0x42	; 66
    1414:	8a 95       	dec	r24
    1416:	f1 f7       	brne	.-4      	; 0x1414 <WriteWord+0x30>
    1418:	00 c0       	rjmp	.+0      	; 0x141a <WriteWord+0x36>
	_delay_us(25);
	CONTROL_PORT |= 1<<XTAL1;
    141a:	58 9a       	sbi	0x0b, 0	; 11
    141c:	82 e4       	ldi	r24, 0x42	; 66
    141e:	8a 95       	dec	r24
    1420:	f1 f7       	brne	.-4      	; 0x141e <WriteWord+0x3a>
    1422:	00 c0       	rjmp	.+0      	; 0x1424 <WriteWord+0x40>
	_delay_us(25);
	CONTROL_PORT &= ~(1<<XTAL1);
    1424:	58 98       	cbi	0x0b, 0	; 11
    1426:	82 e4       	ldi	r24, 0x42	; 66
    1428:	8a 95       	dec	r24
    142a:	f1 f7       	brne	.-4      	; 0x1428 <WriteWord+0x44>
    142c:	00 c0       	rjmp	.+0      	; 0x142e <WriteWord+0x4a>
    142e:	08 95       	ret

00001430 <LoadLowAddress>:
}

void LoadLowAddress(uint16_t address)
{
	//B: Load Address Low Byte
	CONTROL_PORT &= ~(1<<XA1_BS2);
    1430:	5d 98       	cbi	0x0b, 5	; 11
	CONTROL_PORT &= ~(1<<XA0);
    1432:	5c 98       	cbi	0x0b, 4	; 11
	CONTROL_PORT &= ~(1<<BS1_PAGEL);
    1434:	5b 98       	cbi	0x0b, 3	; 11
	DATA_PORT = (address & 0x00FF);
    1436:	80 93 0b 01 	sts	0x010B, r24
    143a:	82 e4       	ldi	r24, 0x42	; 66
    143c:	8a 95       	dec	r24
    143e:	f1 f7       	brne	.-4      	; 0x143c <LoadLowAddress+0xc>
    1440:	00 c0       	rjmp	.+0      	; 0x1442 <LoadLowAddress+0x12>
	_delay_us(25);
	CONTROL_PORT |= 1<<XTAL1;
    1442:	58 9a       	sbi	0x0b, 0	; 11
    1444:	82 e4       	ldi	r24, 0x42	; 66
    1446:	8a 95       	dec	r24
    1448:	f1 f7       	brne	.-4      	; 0x1446 <LoadLowAddress+0x16>
    144a:	00 c0       	rjmp	.+0      	; 0x144c <LoadLowAddress+0x1c>
	_delay_us(25);
	CONTROL_PORT &= ~(1<<XTAL1);
    144c:	58 98       	cbi	0x0b, 0	; 11
    144e:	82 e4       	ldi	r24, 0x42	; 66
    1450:	8a 95       	dec	r24
    1452:	f1 f7       	brne	.-4      	; 0x1450 <LoadLowAddress+0x20>
    1454:	00 c0       	rjmp	.+0      	; 0x1456 <LoadLowAddress+0x26>
    1456:	08 95       	ret

00001458 <LoadHighAddress>:
}

void LoadHighAddress(uint16_t address)
{
	//F: Load Address High Byte
	CONTROL_PORT &= ~(1<<XA1_BS2);
    1458:	5d 98       	cbi	0x0b, 5	; 11
	CONTROL_PORT &= ~(1<<XA0);
    145a:	5c 98       	cbi	0x0b, 4	; 11
	CONTROL_PORT |= 1<<BS1_PAGEL;
    145c:	5b 9a       	sbi	0x0b, 3	; 11
	DATA_PORT = ((address & 0xFF00) >> 8);
    145e:	90 93 0b 01 	sts	0x010B, r25
    1462:	82 e4       	ldi	r24, 0x42	; 66
    1464:	8a 95       	dec	r24
    1466:	f1 f7       	brne	.-4      	; 0x1464 <LoadHighAddress+0xc>
    1468:	00 c0       	rjmp	.+0      	; 0x146a <LoadHighAddress+0x12>
	_delay_us(25);
	CONTROL_PORT |= 1<<XTAL1;
    146a:	58 9a       	sbi	0x0b, 0	; 11
    146c:	82 e4       	ldi	r24, 0x42	; 66
    146e:	8a 95       	dec	r24
    1470:	f1 f7       	brne	.-4      	; 0x146e <LoadHighAddress+0x16>
    1472:	00 c0       	rjmp	.+0      	; 0x1474 <LoadHighAddress+0x1c>
	_delay_us(25);
	CONTROL_PORT &= ~(1<<XTAL1);
    1474:	58 98       	cbi	0x0b, 0	; 11
    1476:	82 e4       	ldi	r24, 0x42	; 66
    1478:	8a 95       	dec	r24
    147a:	f1 f7       	brne	.-4      	; 0x1478 <LoadHighAddress+0x20>
    147c:	00 c0       	rjmp	.+0      	; 0x147e <LoadHighAddress+0x26>
    147e:	08 95       	ret

00001480 <ProgramPage>:
}

void ProgramPage(void)
{
	//G: Program Page
	CONTROL_PORT &= ~(1<<WR);
    1480:	5a 98       	cbi	0x0b, 2	; 11
    1482:	22 e4       	ldi	r18, 0x42	; 66
    1484:	2a 95       	dec	r18
    1486:	f1 f7       	brne	.-4      	; 0x1484 <ProgramPage+0x4>
    1488:	00 c0       	rjmp	.+0      	; 0x148a <ProgramPage+0xa>
	_delay_us(25);
	CONTROL_PORT |= 1<<WR;
    148a:	5a 9a       	sbi	0x0b, 2	; 11
    148c:	82 e4       	ldi	r24, 0x42	; 66
    148e:	8a 95       	dec	r24
    1490:	f1 f7       	brne	.-4      	; 0x148e <ProgramPage+0xe>
    1492:	00 c0       	rjmp	.+0      	; 0x1494 <ProgramPage+0x14>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1494:	9f ef       	ldi	r25, 0xFF	; 255
    1496:	29 e6       	ldi	r18, 0x69	; 105
    1498:	88 e1       	ldi	r24, 0x18	; 24
    149a:	91 50       	subi	r25, 0x01	; 1
    149c:	20 40       	sbci	r18, 0x00	; 0
    149e:	80 40       	sbci	r24, 0x00	; 0
    14a0:	e1 f7       	brne	.-8      	; 0x149a <ProgramPage+0x1a>
    14a2:	00 c0       	rjmp	.+0      	; 0x14a4 <ProgramPage+0x24>
    14a4:	00 00       	nop
    14a6:	08 95       	ret

000014a8 <EndPageProgramming>:
}

void EndPageProgramming(void)
{
	//I: End Page Programming
	CONTROL_PORT |= 1<<XA1_BS2;
    14a8:	5d 9a       	sbi	0x0b, 5	; 11
	CONTROL_PORT &= ~(1<<XA0);
    14aa:	5c 98       	cbi	0x0b, 4	; 11
	DATA_PORT = 0x00;
    14ac:	10 92 0b 01 	sts	0x010B, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    14b0:	82 e4       	ldi	r24, 0x42	; 66
    14b2:	8a 95       	dec	r24
    14b4:	f1 f7       	brne	.-4      	; 0x14b2 <EndPageProgramming+0xa>
    14b6:	00 c0       	rjmp	.+0      	; 0x14b8 <EndPageProgramming+0x10>
	_delay_us(25);
	CONTROL_PORT |= 1<<XTAL1;
    14b8:	58 9a       	sbi	0x0b, 0	; 11
    14ba:	82 e4       	ldi	r24, 0x42	; 66
    14bc:	8a 95       	dec	r24
    14be:	f1 f7       	brne	.-4      	; 0x14bc <EndPageProgramming+0x14>
    14c0:	00 c0       	rjmp	.+0      	; 0x14c2 <EndPageProgramming+0x1a>
	_delay_us(25);
	CONTROL_PORT &= ~(1<<XTAL1);
    14c2:	58 98       	cbi	0x0b, 0	; 11
    14c4:	82 e4       	ldi	r24, 0x42	; 66
    14c6:	8a 95       	dec	r24
    14c8:	f1 f7       	brne	.-4      	; 0x14c6 <EndPageProgramming+0x1e>
    14ca:	00 c0       	rjmp	.+0      	; 0x14cc <EndPageProgramming+0x24>
    14cc:	08 95       	ret

000014ce <EnableProgMode>:
	_delay_us(25);
}

void EnableProgMode(unsigned char TargetMicrocontroller)
{
	CONTROL_PORT &= ~(1<<XTAL1);
    14ce:	58 98       	cbi	0x0b, 0	; 11
	CONTROL_PORT &= ~(1<<XA1_BS2 | 1<<XA0 | 1<<BS1_PAGEL | 1<<WR);
    14d0:	8b b1       	in	r24, 0x0b	; 11
    14d2:	83 7c       	andi	r24, 0xC3	; 195
    14d4:	8b b9       	out	0x0b, r24	; 11
	DATA_PORT = 0x00;
    14d6:	10 92 0b 01 	sts	0x010B, r1
	CONTROL_PORT = 0x00;
    14da:	1b b8       	out	0x0b, r1	; 11
	
	WR_PORT &= ~(1<<FPGAWR);
    14dc:	e5 e0       	ldi	r30, 0x05	; 5
    14de:	f1 e0       	ldi	r31, 0x01	; 1
    14e0:	80 81       	ld	r24, Z
    14e2:	8b 7f       	andi	r24, 0xFB	; 251
    14e4:	80 83       	st	Z, r24
	SPI_FPGA_Write(FPGA_ATtiny2313_Mapping);
    14e6:	81 e0       	ldi	r24, 0x01	; 1
    14e8:	0e 94 4d 04 	call	0x89a	; 0x89a <SPI_FPGA_Write>
    14ec:	87 ec       	ldi	r24, 0xC7	; 199
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	01 97       	sbiw	r24, 0x01	; 1
    14f2:	f1 f7       	brne	.-4      	; 0x14f0 <EnableProgMode+0x22>
    14f4:	00 c0       	rjmp	.+0      	; 0x14f6 <EnableProgMode+0x28>
    14f6:	00 00       	nop
		default:
			break;
	}
	
	_delay_us(100);
	enableVppRegulator();
    14f8:	0e 94 72 05 	call	0xae4	; 0xae4 <enableVppRegulator>
    14fc:	95 e8       	ldi	r25, 0x85	; 133
    14fe:	9a 95       	dec	r25
    1500:	f1 f7       	brne	.-4      	; 0x14fe <EnableProgMode+0x30>
    1502:	00 00       	nop
	_delay_us(50);
	CONTROL_PORT |= (1<<WR | 1<<OE);
    1504:	8b b1       	in	r24, 0x0b	; 11
    1506:	86 60       	ori	r24, 0x06	; 6
    1508:	8b b9       	out	0x0b, r24	; 11
    150a:	87 ee       	ldi	r24, 0xE7	; 231
    150c:	93 e0       	ldi	r25, 0x03	; 3
    150e:	01 97       	sbiw	r24, 0x01	; 1
    1510:	f1 f7       	brne	.-4      	; 0x150e <EnableProgMode+0x40>
    1512:	00 c0       	rjmp	.+0      	; 0x1514 <EnableProgMode+0x46>
    1514:	00 00       	nop
    1516:	08 95       	ret

00001518 <ReadSignatureBytes>:
char* ReadSignatureBytes(void)
{
	static char SignatureBytes[3];
	
	//A: Load Command "Read Signature Bytes"
	LoadCommand(READ_SIG_BYTE);
    1518:	88 e0       	ldi	r24, 0x08	; 8
    151a:	0e 94 de 09 	call	0x13bc	; 0x13bc <LoadCommand>
	
	//B: Load Address Low Byte
	CONTROL_PORT &= ~(1<<XA1_BS2);
    151e:	5d 98       	cbi	0x0b, 5	; 11
	CONTROL_PORT &= ~(1<<XA0);
    1520:	5c 98       	cbi	0x0b, 4	; 11
	CONTROL_PORT &= ~(1<<BS1_PAGEL);
    1522:	5b 98       	cbi	0x0b, 3	; 11
	DATA_PORT = 0x00;
    1524:	10 92 0b 01 	sts	0x010B, r1
    1528:	87 ec       	ldi	r24, 0xC7	; 199
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	01 97       	sbiw	r24, 0x01	; 1
    152e:	f1 f7       	brne	.-4      	; 0x152c <ReadSignatureBytes+0x14>
    1530:	00 c0       	rjmp	.+0      	; 0x1532 <ReadSignatureBytes+0x1a>
    1532:	00 00       	nop
	_delay_us(100);
	CONTROL_PORT |= 1<<XTAL1;
    1534:	58 9a       	sbi	0x0b, 0	; 11
    1536:	92 e4       	ldi	r25, 0x42	; 66
    1538:	9a 95       	dec	r25
    153a:	f1 f7       	brne	.-4      	; 0x1538 <ReadSignatureBytes+0x20>
    153c:	00 c0       	rjmp	.+0      	; 0x153e <ReadSignatureBytes+0x26>
	_delay_us(25);
	CONTROL_PORT &= ~(1<<XTAL1);
    153e:	58 98       	cbi	0x0b, 0	; 11
    1540:	87 ec       	ldi	r24, 0xC7	; 199
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	01 97       	sbiw	r24, 0x01	; 1
    1546:	f1 f7       	brne	.-4      	; 0x1544 <ReadSignatureBytes+0x2c>
    1548:	00 c0       	rjmp	.+0      	; 0x154a <ReadSignatureBytes+0x32>
    154a:	00 00       	nop
	_delay_us(100);
	
	//Read data
	DATA_DDR = 0;
    154c:	10 92 0a 01 	sts	0x010A, r1
	WR_PORT |= (1<<FPGAWR);
    1550:	e5 e0       	ldi	r30, 0x05	; 5
    1552:	f1 e0       	ldi	r31, 0x01	; 1
    1554:	80 81       	ld	r24, Z
    1556:	84 60       	ori	r24, 0x04	; 4
    1558:	80 83       	st	Z, r24
	CONTROL_PORT &= ~(1<<OE);
    155a:	59 98       	cbi	0x0b, 1	; 11
	CONTROL_PORT &= ~(1<<BS1_PAGEL);
    155c:	5b 98       	cbi	0x0b, 3	; 11
    155e:	87 ee       	ldi	r24, 0xE7	; 231
    1560:	93 e0       	ldi	r25, 0x03	; 3
    1562:	01 97       	sbiw	r24, 0x01	; 1
    1564:	f1 f7       	brne	.-4      	; 0x1562 <ReadSignatureBytes+0x4a>
    1566:	00 c0       	rjmp	.+0      	; 0x1568 <ReadSignatureBytes+0x50>
    1568:	00 00       	nop
	_delay_us(500);
	SignatureBytes[0] = DATA_PIN;
    156a:	80 91 09 01 	lds	r24, 0x0109
    156e:	80 93 00 06 	sts	0x0600, r24
	printf("0x%02X ", SignatureBytes[0]);
    1572:	1f 92       	push	r1
    1574:	8f 93       	push	r24
    1576:	86 e2       	ldi	r24, 0x26	; 38
    1578:	94 e0       	ldi	r25, 0x04	; 4
    157a:	9f 93       	push	r25
    157c:	8f 93       	push	r24
    157e:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <printf>
	CONTROL_PORT |= 1<<OE;
    1582:	59 9a       	sbi	0x0b, 1	; 11
	WR_PORT &= ~(1<<FPGAWR);
    1584:	e5 e0       	ldi	r30, 0x05	; 5
    1586:	f1 e0       	ldi	r31, 0x01	; 1
    1588:	80 81       	ld	r24, Z
    158a:	8b 7f       	andi	r24, 0xFB	; 251
    158c:	80 83       	st	Z, r24
	DATA_DDR = 0xFF;
    158e:	8f ef       	ldi	r24, 0xFF	; 255
    1590:	80 93 0a 01 	sts	0x010A, r24
    1594:	87 ec       	ldi	r24, 0xC7	; 199
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	01 97       	sbiw	r24, 0x01	; 1
    159a:	f1 f7       	brne	.-4      	; 0x1598 <ReadSignatureBytes+0x80>
    159c:	00 c0       	rjmp	.+0      	; 0x159e <ReadSignatureBytes+0x86>
    159e:	00 00       	nop
	_delay_us(100);
	
	//Load Address Low Byte
	CONTROL_PORT &= ~(1<<XA1_BS2);
    15a0:	5d 98       	cbi	0x0b, 5	; 11
	CONTROL_PORT &= ~(1<<XA0);
    15a2:	5c 98       	cbi	0x0b, 4	; 11
	CONTROL_PORT &= ~(1<<BS1_PAGEL);
    15a4:	5b 98       	cbi	0x0b, 3	; 11
	DATA_PORT = 0x01;
    15a6:	81 e0       	ldi	r24, 0x01	; 1
    15a8:	80 93 0b 01 	sts	0x010B, r24
    15ac:	87 ec       	ldi	r24, 0xC7	; 199
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	01 97       	sbiw	r24, 0x01	; 1
    15b2:	f1 f7       	brne	.-4      	; 0x15b0 <ReadSignatureBytes+0x98>
    15b4:	00 c0       	rjmp	.+0      	; 0x15b6 <ReadSignatureBytes+0x9e>
    15b6:	00 00       	nop
	_delay_us(100);
	CONTROL_PORT |= 1<<XTAL1;
    15b8:	58 9a       	sbi	0x0b, 0	; 11
    15ba:	92 e4       	ldi	r25, 0x42	; 66
    15bc:	9a 95       	dec	r25
    15be:	f1 f7       	brne	.-4      	; 0x15bc <ReadSignatureBytes+0xa4>
    15c0:	00 c0       	rjmp	.+0      	; 0x15c2 <ReadSignatureBytes+0xaa>
	_delay_us(25);
	CONTROL_PORT &= ~(1<<XTAL1);
    15c2:	58 98       	cbi	0x0b, 0	; 11
    15c4:	87 ec       	ldi	r24, 0xC7	; 199
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	01 97       	sbiw	r24, 0x01	; 1
    15ca:	f1 f7       	brne	.-4      	; 0x15c8 <ReadSignatureBytes+0xb0>
    15cc:	00 c0       	rjmp	.+0      	; 0x15ce <ReadSignatureBytes+0xb6>
    15ce:	00 00       	nop
	_delay_us(100);
	
	//Read data
	DATA_DDR = 0;
    15d0:	10 92 0a 01 	sts	0x010A, r1
	WR_PORT |= (1<<FPGAWR);
    15d4:	80 81       	ld	r24, Z
    15d6:	84 60       	ori	r24, 0x04	; 4
    15d8:	80 83       	st	Z, r24
	CONTROL_PORT &= ~(1<<OE);
    15da:	59 98       	cbi	0x0b, 1	; 11
	CONTROL_PORT &= ~(1<<BS1_PAGEL);
    15dc:	5b 98       	cbi	0x0b, 3	; 11
    15de:	87 ee       	ldi	r24, 0xE7	; 231
    15e0:	93 e0       	ldi	r25, 0x03	; 3
    15e2:	01 97       	sbiw	r24, 0x01	; 1
    15e4:	f1 f7       	brne	.-4      	; 0x15e2 <ReadSignatureBytes+0xca>
    15e6:	00 c0       	rjmp	.+0      	; 0x15e8 <ReadSignatureBytes+0xd0>
    15e8:	00 00       	nop
	_delay_us(500);
	SignatureBytes[1] = DATA_PIN;
    15ea:	80 91 09 01 	lds	r24, 0x0109
    15ee:	80 93 01 06 	sts	0x0601, r24
	printf("0x%02X ", SignatureBytes[1]);
    15f2:	1f 92       	push	r1
    15f4:	8f 93       	push	r24
    15f6:	86 e2       	ldi	r24, 0x26	; 38
    15f8:	94 e0       	ldi	r25, 0x04	; 4
    15fa:	9f 93       	push	r25
    15fc:	8f 93       	push	r24
    15fe:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <printf>
	CONTROL_PORT |= 1<<OE;
    1602:	59 9a       	sbi	0x0b, 1	; 11
	WR_PORT &= ~(1<<FPGAWR);
    1604:	e5 e0       	ldi	r30, 0x05	; 5
    1606:	f1 e0       	ldi	r31, 0x01	; 1
    1608:	80 81       	ld	r24, Z
    160a:	8b 7f       	andi	r24, 0xFB	; 251
    160c:	80 83       	st	Z, r24
	DATA_DDR = 0xFF;
    160e:	8f ef       	ldi	r24, 0xFF	; 255
    1610:	80 93 0a 01 	sts	0x010A, r24
    1614:	87 ec       	ldi	r24, 0xC7	; 199
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	01 97       	sbiw	r24, 0x01	; 1
    161a:	f1 f7       	brne	.-4      	; 0x1618 <ReadSignatureBytes+0x100>
    161c:	00 c0       	rjmp	.+0      	; 0x161e <ReadSignatureBytes+0x106>
    161e:	00 00       	nop
	_delay_us(100);
	
	//Load Address Low Byte
	CONTROL_PORT &= ~(1<<XA1_BS2);
    1620:	5d 98       	cbi	0x0b, 5	; 11
	CONTROL_PORT &= ~(1<<XA0);
    1622:	5c 98       	cbi	0x0b, 4	; 11
	CONTROL_PORT &= ~(1<<BS1_PAGEL);
    1624:	5b 98       	cbi	0x0b, 3	; 11
	DATA_PORT = 0x02;
    1626:	82 e0       	ldi	r24, 0x02	; 2
    1628:	80 93 0b 01 	sts	0x010B, r24
    162c:	87 ec       	ldi	r24, 0xC7	; 199
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	01 97       	sbiw	r24, 0x01	; 1
    1632:	f1 f7       	brne	.-4      	; 0x1630 <ReadSignatureBytes+0x118>
    1634:	00 c0       	rjmp	.+0      	; 0x1636 <ReadSignatureBytes+0x11e>
    1636:	00 00       	nop
	_delay_us(100);
	CONTROL_PORT |= 1<<XTAL1;
    1638:	58 9a       	sbi	0x0b, 0	; 11
    163a:	92 e4       	ldi	r25, 0x42	; 66
    163c:	9a 95       	dec	r25
    163e:	f1 f7       	brne	.-4      	; 0x163c <ReadSignatureBytes+0x124>
    1640:	00 c0       	rjmp	.+0      	; 0x1642 <ReadSignatureBytes+0x12a>
	_delay_us(25);
	CONTROL_PORT &= ~(1<<XTAL1);
    1642:	58 98       	cbi	0x0b, 0	; 11
    1644:	87 ec       	ldi	r24, 0xC7	; 199
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	01 97       	sbiw	r24, 0x01	; 1
    164a:	f1 f7       	brne	.-4      	; 0x1648 <ReadSignatureBytes+0x130>
    164c:	00 c0       	rjmp	.+0      	; 0x164e <ReadSignatureBytes+0x136>
    164e:	00 00       	nop
	_delay_us(100);
	
	//Read data
	DATA_DDR = 0;
    1650:	10 92 0a 01 	sts	0x010A, r1
	WR_PORT |= (1<<FPGAWR);
    1654:	80 81       	ld	r24, Z
    1656:	84 60       	ori	r24, 0x04	; 4
    1658:	80 83       	st	Z, r24
	CONTROL_PORT &= ~(1<<OE);
    165a:	59 98       	cbi	0x0b, 1	; 11
	CONTROL_PORT &= ~(1<<BS1_PAGEL);
    165c:	5b 98       	cbi	0x0b, 3	; 11
    165e:	87 ee       	ldi	r24, 0xE7	; 231
    1660:	93 e0       	ldi	r25, 0x03	; 3
    1662:	01 97       	sbiw	r24, 0x01	; 1
    1664:	f1 f7       	brne	.-4      	; 0x1662 <ReadSignatureBytes+0x14a>
    1666:	00 c0       	rjmp	.+0      	; 0x1668 <ReadSignatureBytes+0x150>
    1668:	00 00       	nop
	_delay_us(500);
	SignatureBytes[2] = DATA_PIN;
    166a:	80 91 09 01 	lds	r24, 0x0109
    166e:	80 93 02 06 	sts	0x0602, r24
	printf("0x%02X ", SignatureBytes[2]);
    1672:	1f 92       	push	r1
    1674:	8f 93       	push	r24
    1676:	86 e2       	ldi	r24, 0x26	; 38
    1678:	94 e0       	ldi	r25, 0x04	; 4
    167a:	9f 93       	push	r25
    167c:	8f 93       	push	r24
    167e:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <printf>
	CONTROL_PORT |= 1<<OE;
    1682:	59 9a       	sbi	0x0b, 1	; 11
	WR_PORT &= ~(1<<FPGAWR);
    1684:	e5 e0       	ldi	r30, 0x05	; 5
    1686:	f1 e0       	ldi	r31, 0x01	; 1
    1688:	80 81       	ld	r24, Z
    168a:	8b 7f       	andi	r24, 0xFB	; 251
    168c:	80 83       	st	Z, r24
	DATA_DDR = 0xFF;
    168e:	8f ef       	ldi	r24, 0xFF	; 255
    1690:	80 93 0a 01 	sts	0x010A, r24
	DATA_PORT = 0x00;
    1694:	10 92 0b 01 	sts	0x010B, r1
	
	return SignatureBytes;
    1698:	8d b7       	in	r24, 0x3d	; 61
    169a:	9e b7       	in	r25, 0x3e	; 62
    169c:	0c 96       	adiw	r24, 0x0c	; 12
    169e:	0f b6       	in	r0, 0x3f	; 63
    16a0:	f8 94       	cli
    16a2:	9e bf       	out	0x3e, r25	; 62
    16a4:	0f be       	out	0x3f, r0	; 63
    16a6:	8d bf       	out	0x3d, r24	; 61
}
    16a8:	80 e0       	ldi	r24, 0x00	; 0
    16aa:	96 e0       	ldi	r25, 0x06	; 6
    16ac:	08 95       	ret

000016ae <ReadFlash>:

void ReadFlash(void)
{
    16ae:	9f 92       	push	r9
    16b0:	af 92       	push	r10
    16b2:	bf 92       	push	r11
    16b4:	cf 92       	push	r12
    16b6:	df 92       	push	r13
    16b8:	ef 92       	push	r14
    16ba:	ff 92       	push	r15
    16bc:	0f 93       	push	r16
    16be:	1f 93       	push	r17
    16c0:	cf 93       	push	r28
    16c2:	df 93       	push	r29
	char DataValueIn = 0;
	
	for (unsigned int LowAddressByte = 0; LowAddressByte < 16; LowAddressByte++)
    16c4:	e1 2c       	mov	r14, r1
    16c6:	f1 2c       	mov	r15, r1
		
		//B: Load Address Low Byte
		LoadLowAddress(LowAddressByte);
		
		//Read data
		DATA_DDR = 0;
    16c8:	0f 2e       	mov	r0, r31
    16ca:	fa e0       	ldi	r31, 0x0A	; 10
    16cc:	af 2e       	mov	r10, r31
    16ce:	bb 24       	eor	r11, r11
    16d0:	b3 94       	inc	r11
    16d2:	f0 2d       	mov	r31, r0
		WR_PORT |= (1<<FPGAWR);
    16d4:	05 e0       	ldi	r16, 0x05	; 5
    16d6:	11 e0       	ldi	r17, 0x01	; 1
		CONTROL_PORT &= ~(1<<OE);
		CONTROL_PORT &= ~(1<<BS1_PAGEL); //Reading flash word low byte
		_delay_us(500);
		DataValueIn = DATA_PIN;
    16d8:	0f 2e       	mov	r0, r31
    16da:	f9 e0       	ldi	r31, 0x09	; 9
    16dc:	cf 2e       	mov	r12, r31
    16de:	dd 24       	eor	r13, r13
    16e0:	d3 94       	inc	r13
    16e2:	f0 2d       	mov	r31, r0
		printf("0x%02X ", DataValueIn);
    16e4:	c6 e2       	ldi	r28, 0x26	; 38
    16e6:	d4 e0       	ldi	r29, 0x04	; 4
		_delay_us(500);
		DataValueIn = DATA_PIN;
		printf("0x%02X ", DataValueIn);
		CONTROL_PORT |= 1<<OE;
		WR_PORT &= ~(1<<FPGAWR);
		DATA_DDR = 0xFF;
    16e8:	99 24       	eor	r9, r9
    16ea:	9a 94       	dec	r9
	char DataValueIn = 0;
	
	for (unsigned int LowAddressByte = 0; LowAddressByte < 16; LowAddressByte++)
	{
		//A: Load Command "Read Flash"
		LoadCommand(READ_FLASH);
    16ec:	82 e0       	ldi	r24, 0x02	; 2
    16ee:	0e 94 de 09 	call	0x13bc	; 0x13bc <LoadCommand>
		
		//F: Load Address High Byte
		LoadHighAddress(0x00);
    16f2:	80 e0       	ldi	r24, 0x00	; 0
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	0e 94 2c 0a 	call	0x1458	; 0x1458 <LoadHighAddress>
		
		//B: Load Address Low Byte
		LoadLowAddress(LowAddressByte);
    16fa:	c7 01       	movw	r24, r14
    16fc:	0e 94 18 0a 	call	0x1430	; 0x1430 <LoadLowAddress>
		
		//Read data
		DATA_DDR = 0;
    1700:	f5 01       	movw	r30, r10
    1702:	10 82       	st	Z, r1
		WR_PORT |= (1<<FPGAWR);
    1704:	f8 01       	movw	r30, r16
    1706:	80 81       	ld	r24, Z
    1708:	84 60       	ori	r24, 0x04	; 4
    170a:	80 83       	st	Z, r24
		CONTROL_PORT &= ~(1<<OE);
    170c:	59 98       	cbi	0x0b, 1	; 11
		CONTROL_PORT &= ~(1<<BS1_PAGEL); //Reading flash word low byte
    170e:	5b 98       	cbi	0x0b, 3	; 11
    1710:	87 ee       	ldi	r24, 0xE7	; 231
    1712:	93 e0       	ldi	r25, 0x03	; 3
    1714:	01 97       	sbiw	r24, 0x01	; 1
    1716:	f1 f7       	brne	.-4      	; 0x1714 <ReadFlash+0x66>
    1718:	00 c0       	rjmp	.+0      	; 0x171a <ReadFlash+0x6c>
    171a:	00 00       	nop
		_delay_us(500);
		DataValueIn = DATA_PIN;
    171c:	f6 01       	movw	r30, r12
    171e:	80 81       	ld	r24, Z
		printf("0x%02X ", DataValueIn);
    1720:	1f 92       	push	r1
    1722:	8f 93       	push	r24
    1724:	df 93       	push	r29
    1726:	cf 93       	push	r28
    1728:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <printf>
		CONTROL_PORT |= 1<<BS1_PAGEL; //Reading flash word high byte
    172c:	5b 9a       	sbi	0x0b, 3	; 11
    172e:	e7 ee       	ldi	r30, 0xE7	; 231
    1730:	f3 e0       	ldi	r31, 0x03	; 3
    1732:	31 97       	sbiw	r30, 0x01	; 1
    1734:	f1 f7       	brne	.-4      	; 0x1732 <ReadFlash+0x84>
    1736:	00 c0       	rjmp	.+0      	; 0x1738 <ReadFlash+0x8a>
    1738:	00 00       	nop
		_delay_us(500);
		DataValueIn = DATA_PIN;
    173a:	f6 01       	movw	r30, r12
    173c:	80 81       	ld	r24, Z
		printf("0x%02X ", DataValueIn);
    173e:	1f 92       	push	r1
    1740:	8f 93       	push	r24
    1742:	df 93       	push	r29
    1744:	cf 93       	push	r28
    1746:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <printf>
		CONTROL_PORT |= 1<<OE;
    174a:	59 9a       	sbi	0x0b, 1	; 11
		WR_PORT &= ~(1<<FPGAWR);
    174c:	f8 01       	movw	r30, r16
    174e:	80 81       	ld	r24, Z
    1750:	8b 7f       	andi	r24, 0xFB	; 251
    1752:	80 83       	st	Z, r24
		DATA_DDR = 0xFF;
    1754:	f5 01       	movw	r30, r10
    1756:	90 82       	st	Z, r9
    1758:	f2 e4       	ldi	r31, 0x42	; 66
    175a:	fa 95       	dec	r31
    175c:	f1 f7       	brne	.-4      	; 0x175a <ReadFlash+0xac>
    175e:	00 c0       	rjmp	.+0      	; 0x1760 <ReadFlash+0xb2>

void ReadFlash(void)
{
	char DataValueIn = 0;
	
	for (unsigned int LowAddressByte = 0; LowAddressByte < 16; LowAddressByte++)
    1760:	8f ef       	ldi	r24, 0xFF	; 255
    1762:	e8 1a       	sub	r14, r24
    1764:	f8 0a       	sbc	r15, r24
    1766:	ed b7       	in	r30, 0x3d	; 61
    1768:	fe b7       	in	r31, 0x3e	; 62
    176a:	38 96       	adiw	r30, 0x08	; 8
    176c:	0f b6       	in	r0, 0x3f	; 63
    176e:	f8 94       	cli
    1770:	fe bf       	out	0x3e, r31	; 62
    1772:	0f be       	out	0x3f, r0	; 63
    1774:	ed bf       	out	0x3d, r30	; 61
    1776:	f0 e1       	ldi	r31, 0x10	; 16
    1778:	ef 16       	cp	r14, r31
    177a:	f1 04       	cpc	r15, r1
    177c:	09 f0       	breq	.+2      	; 0x1780 <ReadFlash+0xd2>
    177e:	b6 cf       	rjmp	.-148    	; 0x16ec <ReadFlash+0x3e>
		CONTROL_PORT |= 1<<OE;
		WR_PORT &= ~(1<<FPGAWR);
		DATA_DDR = 0xFF;
		_delay_us(25);
	}
}
    1780:	df 91       	pop	r29
    1782:	cf 91       	pop	r28
    1784:	1f 91       	pop	r17
    1786:	0f 91       	pop	r16
    1788:	ff 90       	pop	r15
    178a:	ef 90       	pop	r14
    178c:	df 90       	pop	r13
    178e:	cf 90       	pop	r12
    1790:	bf 90       	pop	r11
    1792:	af 90       	pop	r10
    1794:	9f 90       	pop	r9
    1796:	08 95       	ret

00001798 <ChipErase>:

void ChipErase(void)
{
	CONTROL_PORT |= 1<<XA1_BS2;
    1798:	5d 9a       	sbi	0x0b, 5	; 11
	CONTROL_PORT &= ~(1<<XA0);
    179a:	5c 98       	cbi	0x0b, 4	; 11
	CONTROL_PORT &= ~(1<<BS1_PAGEL);
    179c:	5b 98       	cbi	0x0b, 3	; 11
	DATA_PORT = 0x80;
    179e:	80 e8       	ldi	r24, 0x80	; 128
    17a0:	80 93 0b 01 	sts	0x010B, r24
    17a4:	22 e4       	ldi	r18, 0x42	; 66
    17a6:	2a 95       	dec	r18
    17a8:	f1 f7       	brne	.-4      	; 0x17a6 <ChipErase+0xe>
    17aa:	00 c0       	rjmp	.+0      	; 0x17ac <ChipErase+0x14>
	_delay_us(25);
	CONTROL_PORT |= 1<<XTAL1;
    17ac:	58 9a       	sbi	0x0b, 0	; 11
    17ae:	82 e4       	ldi	r24, 0x42	; 66
    17b0:	8a 95       	dec	r24
    17b2:	f1 f7       	brne	.-4      	; 0x17b0 <ChipErase+0x18>
    17b4:	00 c0       	rjmp	.+0      	; 0x17b6 <ChipErase+0x1e>
	_delay_us(25);
	CONTROL_PORT &= ~(1<<XTAL1);
    17b6:	58 98       	cbi	0x0b, 0	; 11
    17b8:	92 e4       	ldi	r25, 0x42	; 66
    17ba:	9a 95       	dec	r25
    17bc:	f1 f7       	brne	.-4      	; 0x17ba <ChipErase+0x22>
    17be:	00 c0       	rjmp	.+0      	; 0x17c0 <ChipErase+0x28>
	_delay_us(25);
	CONTROL_PORT &= ~(1<<WR);
    17c0:	5a 98       	cbi	0x0b, 2	; 11
    17c2:	22 e4       	ldi	r18, 0x42	; 66
    17c4:	2a 95       	dec	r18
    17c6:	f1 f7       	brne	.-4      	; 0x17c4 <ChipErase+0x2c>
    17c8:	00 c0       	rjmp	.+0      	; 0x17ca <ChipErase+0x32>
	_delay_us(25);
	CONTROL_PORT |= 1<<WR;
    17ca:	5a 9a       	sbi	0x0b, 2	; 11
    17cc:	82 e4       	ldi	r24, 0x42	; 66
    17ce:	8a 95       	dec	r24
    17d0:	f1 f7       	brne	.-4      	; 0x17ce <ChipErase+0x36>
    17d2:	00 c0       	rjmp	.+0      	; 0x17d4 <ChipErase+0x3c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    17d4:	9f ef       	ldi	r25, 0xFF	; 255
    17d6:	29 e6       	ldi	r18, 0x69	; 105
    17d8:	88 e1       	ldi	r24, 0x18	; 24
    17da:	91 50       	subi	r25, 0x01	; 1
    17dc:	20 40       	sbci	r18, 0x00	; 0
    17de:	80 40       	sbci	r24, 0x00	; 0
    17e0:	e1 f7       	brne	.-8      	; 0x17da <ChipErase+0x42>
    17e2:	00 c0       	rjmp	.+0      	; 0x17e4 <ChipErase+0x4c>
    17e4:	00 00       	nop
    17e6:	08 95       	ret

000017e8 <ProgramFlash>:
	//while(!(CONTROL_PIN & (1<<RDY_BSY)));
	_delay_ms(1000);
}

void ProgramFlash(char* hexData)
{
    17e8:	2f 92       	push	r2
    17ea:	3f 92       	push	r3
    17ec:	4f 92       	push	r4
    17ee:	5f 92       	push	r5
    17f0:	6f 92       	push	r6
    17f2:	7f 92       	push	r7
    17f4:	8f 92       	push	r8
    17f6:	9f 92       	push	r9
    17f8:	af 92       	push	r10
    17fa:	bf 92       	push	r11
    17fc:	cf 92       	push	r12
    17fe:	df 92       	push	r13
    1800:	ef 92       	push	r14
    1802:	ff 92       	push	r15
    1804:	0f 93       	push	r16
    1806:	1f 93       	push	r17
    1808:	cf 93       	push	r28
    180a:	df 93       	push	r29
    180c:	00 d0       	rcall	.+0      	; 0x180e <ProgramFlash+0x26>
    180e:	00 d0       	rcall	.+0      	; 0x1810 <ProgramFlash+0x28>
    1810:	cd b7       	in	r28, 0x3d	; 61
    1812:	de b7       	in	r29, 0x3e	; 62
	uint16_t address;
	uint16_t data;
	uint32_t totalBytes = 0; 
	//Keep looping until the hexRow is the end of file or we hit the end of a page 
	
	LoadCommand(WRITE_FLASH);
    1814:	80 e1       	ldi	r24, 0x10	; 16
    1816:	0e 94 de 09 	call	0x13bc	; 0x13bc <LoadCommand>
{
	char* hexRow;
	uint16_t byteCount;
	uint16_t address;
	uint16_t data;
	uint32_t totalBytes = 0; 
    181a:	81 2c       	mov	r8, r1
    181c:	91 2c       	mov	r9, r1
    181e:	54 01       	movw	r10, r8
		
		int j =0;
		for(int i=0; i<byteCount; i+=2)
		{
			LoadLowAddress(address + j);
			printf("Address: 0x%04X\n",(address + j));
    1820:	0f 2e       	mov	r0, r31
    1822:	f1 ee       	ldi	r31, 0xE1	; 225
    1824:	2f 2e       	mov	r2, r31
    1826:	f5 e0       	ldi	r31, 0x05	; 5
    1828:	3f 2e       	mov	r3, r31
    182a:	f0 2d       	mov	r31, r0
	
	LoadCommand(WRITE_FLASH);
	
	while(1)
	{
		hexRow = getHexRow();
    182c:	0e 94 16 09 	call	0x122c	; 0x122c <getHexRow>
    1830:	3c 01       	movw	r6, r24
		
		//printf("We're here now\n");
		
		if(hexRow[RECORD_TYPE] == TYPE_END_OF_FILE)
    1832:	dc 01       	movw	r26, r24
    1834:	14 96       	adiw	r26, 0x04	; 4
    1836:	8c 91       	ld	r24, X
    1838:	14 97       	sbiw	r26, 0x04	; 4
    183a:	81 30       	cpi	r24, 0x01	; 1
    183c:	09 f4       	brne	.+2      	; 0x1840 <ProgramFlash+0x58>
    183e:	6c c0       	rjmp	.+216    	; 0x1918 <ProgramFlash+0x130>
			break; 
			
		byteCount = (hexRow[BYTE_COUNT]);
    1840:	11 96       	adiw	r26, 0x01	; 1
    1842:	4c 90       	ld	r4, X
    1844:	11 97       	sbiw	r26, 0x01	; 1
    1846:	51 2c       	mov	r5, r1
		address = hexRow[ADDRESS_H];
    1848:	12 96       	adiw	r26, 0x02	; 2
    184a:	8c 91       	ld	r24, X
    184c:	12 97       	sbiw	r26, 0x02	; 2
    184e:	90 e0       	ldi	r25, 0x00	; 0
		address <<= 8;
    1850:	98 2f       	mov	r25, r24
    1852:	88 27       	eor	r24, r24
		address |= (hexRow[ADDRESS_L]/2);
    1854:	13 96       	adiw	r26, 0x03	; 3
    1856:	2c 91       	ld	r18, X
    1858:	26 95       	lsr	r18
    185a:	fc 01       	movw	r30, r24
    185c:	e2 2b       	or	r30, r18
    185e:	fa 83       	std	Y+2, r31	; 0x02
    1860:	e9 83       	std	Y+1, r30	; 0x01
		
		int j =0;
		for(int i=0; i<byteCount; i+=2)
    1862:	41 14       	cp	r4, r1
    1864:	51 04       	cpc	r5, r1
    1866:	09 f4       	brne	.+2      	; 0x186a <ProgramFlash+0x82>
    1868:	45 c0       	rjmp	.+138    	; 0x18f4 <ProgramFlash+0x10c>
    186a:	63 01       	movw	r12, r6
    186c:	f5 e0       	ldi	r31, 0x05	; 5
    186e:	cf 0e       	add	r12, r31
    1870:	d1 1c       	adc	r13, r1
    1872:	09 81       	ldd	r16, Y+1	; 0x01
    1874:	1a 81       	ldd	r17, Y+2	; 0x02
    1876:	e1 2c       	mov	r14, r1
    1878:	f1 2c       	mov	r15, r1
    187a:	1b 82       	std	Y+3, r1	; 0x03
    187c:	1c 82       	std	Y+4, r1	; 0x04
		{
			LoadLowAddress(address + j);
    187e:	c8 01       	movw	r24, r16
    1880:	0e 94 18 0a 	call	0x1430	; 0x1430 <LoadLowAddress>
			printf("Address: 0x%04X\n",(address + j));
    1884:	1f 93       	push	r17
    1886:	0f 93       	push	r16
    1888:	3f 92       	push	r3
    188a:	2f 92       	push	r2
    188c:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <printf>
			data = hexRow[DATA_BEGIN + i + 1];
    1890:	f3 01       	movw	r30, r6
    1892:	ee 0d       	add	r30, r14
    1894:	ff 1d       	adc	r31, r15
    1896:	e6 80       	ldd	r14, Z+6	; 0x06
    1898:	f1 2c       	mov	r15, r1
			data <<= 8;
    189a:	fe 2c       	mov	r15, r14
    189c:	ee 24       	eor	r14, r14
			data |= hexRow[DATA_BEGIN + i];
    189e:	d6 01       	movw	r26, r12
    18a0:	8c 91       	ld	r24, X
    18a2:	e8 2a       	or	r14, r24
			WriteWord(data);
    18a4:	c7 01       	movw	r24, r14
    18a6:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <WriteWord>
			printf("Word: 0x%04X\n",(data));
    18aa:	ff 92       	push	r15
    18ac:	ef 92       	push	r14
    18ae:	a2 ef       	ldi	r26, 0xF2	; 242
    18b0:	b5 e0       	ldi	r27, 0x05	; 5
    18b2:	bf 93       	push	r27
    18b4:	af 93       	push	r26
    18b6:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <printf>
			totalBytes+=i; 
    18ba:	2b 81       	ldd	r18, Y+3	; 0x03
    18bc:	3c 81       	ldd	r19, Y+4	; 0x04
    18be:	c9 01       	movw	r24, r18
    18c0:	aa 27       	eor	r26, r26
    18c2:	97 fd       	sbrc	r25, 7
    18c4:	a0 95       	com	r26
    18c6:	ba 2f       	mov	r27, r26
    18c8:	88 0e       	add	r8, r24
    18ca:	99 1e       	adc	r9, r25
    18cc:	aa 1e       	adc	r10, r26
    18ce:	bb 1e       	adc	r11, r27
		address = hexRow[ADDRESS_H];
		address <<= 8;
		address |= (hexRow[ADDRESS_L]/2);
		
		int j =0;
		for(int i=0; i<byteCount; i+=2)
    18d0:	2e 5f       	subi	r18, 0xFE	; 254
    18d2:	3f 4f       	sbci	r19, 0xFF	; 255
    18d4:	3c 83       	std	Y+4, r19	; 0x04
    18d6:	2b 83       	std	Y+3, r18	; 0x03
    18d8:	79 01       	movw	r14, r18
    18da:	0f 5f       	subi	r16, 0xFF	; 255
    18dc:	1f 4f       	sbci	r17, 0xFF	; 255
    18de:	32 e0       	ldi	r19, 0x02	; 2
    18e0:	c3 0e       	add	r12, r19
    18e2:	d1 1c       	adc	r13, r1
    18e4:	0f b6       	in	r0, 0x3f	; 63
    18e6:	f8 94       	cli
    18e8:	de bf       	out	0x3e, r29	; 62
    18ea:	0f be       	out	0x3f, r0	; 63
    18ec:	cd bf       	out	0x3d, r28	; 61
    18ee:	e4 14       	cp	r14, r4
    18f0:	f5 04       	cpc	r15, r5
    18f2:	28 f2       	brcs	.-118    	; 0x187e <ProgramFlash+0x96>
			totalBytes+=i; 
			j++;
		}
		
		//Check to see if we hit the end of a page 
		if(totalBytes%PAGE_SIZE_BYTES == 0)
    18f4:	d5 01       	movw	r26, r10
    18f6:	c4 01       	movw	r24, r8
    18f8:	8f 71       	andi	r24, 0x1F	; 31
    18fa:	99 27       	eor	r25, r25
    18fc:	aa 27       	eor	r26, r26
    18fe:	bb 27       	eor	r27, r27
    1900:	89 2b       	or	r24, r25
    1902:	8a 2b       	or	r24, r26
    1904:	8b 2b       	or	r24, r27
    1906:	09 f0       	breq	.+2      	; 0x190a <ProgramFlash+0x122>
    1908:	91 cf       	rjmp	.-222    	; 0x182c <ProgramFlash+0x44>
		{
			LoadHighAddress(address);
    190a:	89 81       	ldd	r24, Y+1	; 0x01
    190c:	9a 81       	ldd	r25, Y+2	; 0x02
    190e:	0e 94 2c 0a 	call	0x1458	; 0x1458 <LoadHighAddress>
			ProgramPage();
    1912:	0e 94 40 0a 	call	0x1480	; 0x1480 <ProgramPage>
    1916:	8a cf       	rjmp	.-236    	; 0x182c <ProgramFlash+0x44>
		}
	}
	
	//After reaching end of file, do a final page write in case we did not fill an entire page
	if(totalBytes%PAGE_SIZE_BYTES != 0)
    1918:	5f e1       	ldi	r21, 0x1F	; 31
    191a:	85 22       	and	r8, r21
    191c:	99 24       	eor	r9, r9
    191e:	aa 24       	eor	r10, r10
    1920:	bb 24       	eor	r11, r11
    1922:	89 28       	or	r8, r9
    1924:	8a 28       	or	r8, r10
    1926:	8b 28       	or	r8, r11
    1928:	31 f0       	breq	.+12     	; 0x1936 <ProgramFlash+0x14e>
	{
		LoadHighAddress(address);
    192a:	89 81       	ldd	r24, Y+1	; 0x01
    192c:	9a 81       	ldd	r25, Y+2	; 0x02
    192e:	0e 94 2c 0a 	call	0x1458	; 0x1458 <LoadHighAddress>
		ProgramPage();
    1932:	0e 94 40 0a 	call	0x1480	; 0x1480 <ProgramPage>
	} 
	
	EndPageProgramming();
    1936:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <EndPageProgramming>
}
    193a:	0f 90       	pop	r0
    193c:	0f 90       	pop	r0
    193e:	0f 90       	pop	r0
    1940:	0f 90       	pop	r0
    1942:	df 91       	pop	r29
    1944:	cf 91       	pop	r28
    1946:	1f 91       	pop	r17
    1948:	0f 91       	pop	r16
    194a:	ff 90       	pop	r15
    194c:	ef 90       	pop	r14
    194e:	df 90       	pop	r13
    1950:	cf 90       	pop	r12
    1952:	bf 90       	pop	r11
    1954:	af 90       	pop	r10
    1956:	9f 90       	pop	r9
    1958:	8f 90       	pop	r8
    195a:	7f 90       	pop	r7
    195c:	6f 90       	pop	r6
    195e:	5f 90       	pop	r5
    1960:	4f 90       	pop	r4
    1962:	3f 90       	pop	r3
    1964:	2f 90       	pop	r2
    1966:	08 95       	ret

00001968 <ExitParallelProgrammingMode>:
	EndPageProgramming();
}

void ExitParallelProgrammingMode(void)
{
	disableVppRegulator();
    1968:	0e 94 74 05 	call	0xae8	; 0xae8 <disableVppRegulator>
	disableVccRegulator();
    196c:	0e 94 78 05 	call	0xaf0	; 0xaf0 <disableVccRegulator>
	disableVLogic();
    1970:	0e 94 98 05 	call	0xb30	; 0xb30 <disableVLogic>
    1974:	8f e0       	ldi	r24, 0x0F	; 15
    1976:	97 e2       	ldi	r25, 0x27	; 39
    1978:	01 97       	sbiw	r24, 0x01	; 1
    197a:	f1 f7       	brne	.-4      	; 0x1978 <ExitParallelProgrammingMode+0x10>
    197c:	00 c0       	rjmp	.+0      	; 0x197e <ExitParallelProgrammingMode+0x16>
    197e:	00 00       	nop
	
	_delay_ms(5);
	DATA_PORT = 0x00;
    1980:	10 92 0b 01 	sts	0x010B, r1
	CONTROL_PORT = 0x00;
    1984:	1b b8       	out	0x0b, r1	; 11
    1986:	8f ec       	ldi	r24, 0xCF	; 207
    1988:	97 e0       	ldi	r25, 0x07	; 7
    198a:	01 97       	sbiw	r24, 0x01	; 1
    198c:	f1 f7       	brne	.-4      	; 0x198a <ExitParallelProgrammingMode+0x22>
    198e:	00 c0       	rjmp	.+0      	; 0x1990 <ExitParallelProgrammingMode+0x28>
    1990:	00 00       	nop
	_delay_ms(1);
	SPI_FPGA_Write(FPGA_Disable);
    1992:	80 e0       	ldi	r24, 0x00	; 0
    1994:	0e 94 4d 04 	call	0x89a	; 0x89a <SPI_FPGA_Write>
	
	SR_CNTRL_PORT &= ~(1<<SR_RESET); //Clearing Max395s and Shift Registers
    1998:	e5 e0       	ldi	r30, 0x05	; 5
    199a:	f1 e0       	ldi	r31, 0x01	; 1
    199c:	80 81       	ld	r24, Z
    199e:	8f 7d       	andi	r24, 0xDF	; 223
    19a0:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    19a2:	95 e3       	ldi	r25, 0x35	; 53
    19a4:	9a 95       	dec	r25
    19a6:	f1 f7       	brne	.-4      	; 0x19a4 <ExitParallelProgrammingMode+0x3c>
    19a8:	00 00       	nop
	_delay_us(20);
	SR_CNTRL_PORT |= (1<<SR_RESET);
    19aa:	80 81       	ld	r24, Z
    19ac:	80 62       	ori	r24, 0x20	; 32
    19ae:	80 83       	st	Z, r24
    19b0:	2d e0       	ldi	r18, 0x0D	; 13
    19b2:	2a 95       	dec	r18
    19b4:	f1 f7       	brne	.-4      	; 0x19b2 <ExitParallelProgrammingMode+0x4a>
    19b6:	00 00       	nop
	_delay_us(5);
	SRCS_PORT |= (1<<SRCS);
    19b8:	2f 9a       	sbi	0x05, 7	; 5
    19ba:	85 e3       	ldi	r24, 0x35	; 53
    19bc:	8a 95       	dec	r24
    19be:	f1 f7       	brne	.-4      	; 0x19bc <ExitParallelProgrammingMode+0x54>
    19c0:	00 00       	nop
	_delay_us(20);
	SRCS_PORT &= ~(1<<SRCS);
    19c2:	2f 98       	cbi	0x05, 7	; 5
	
	SR_CNTRL_PORT |= (1<<SROE);
    19c4:	80 81       	ld	r24, Z
    19c6:	88 60       	ori	r24, 0x08	; 8
    19c8:	80 83       	st	Z, r24
	
	LED_PORT |= (1<<LED_Green);
    19ca:	a0 9a       	sbi	0x14, 0	; 20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    19cc:	9f ef       	ldi	r25, 0xFF	; 255
    19ce:	29 e6       	ldi	r18, 0x69	; 105
    19d0:	88 e1       	ldi	r24, 0x18	; 24
    19d2:	91 50       	subi	r25, 0x01	; 1
    19d4:	20 40       	sbci	r18, 0x00	; 0
    19d6:	80 40       	sbci	r24, 0x00	; 0
    19d8:	e1 f7       	brne	.-8      	; 0x19d2 <ExitParallelProgrammingMode+0x6a>
    19da:	00 c0       	rjmp	.+0      	; 0x19dc <ExitParallelProgrammingMode+0x74>
    19dc:	00 00       	nop
	_delay_ms(1000);
	LED_PORT &= ~((1<<LED_Green) | (1<<LED_Yellow) | (1<<LED_Red));
    19de:	84 b3       	in	r24, 0x14	; 20
    19e0:	88 7f       	andi	r24, 0xF8	; 248
    19e2:	84 bb       	out	0x14, r24	; 20
    19e4:	08 95       	ret

000019e6 <main>:
#include "Program/AVR.h"

int main(void)
{
	char* SignatureBytes;
	connectionInit(); 
    19e6:	0e 94 91 00 	call	0x122	; 0x122 <connectionInit>
	hexInit();
    19ea:	0e 94 0a 09 	call	0x1214	; 0x1214 <hexInit>
	pollingInit(); 
    19ee:	0e 94 96 00 	call	0x12c	; 0x12c <pollingInit>
	//printf("\n\n");
	//writeHexFileTest();
	//RAMPrint(HEX_FILE_ADDRESS, 50);
	//Write test file to external RAM
	//Test switching circuitry code
	ProgInit();
    19f2:	0e 94 b2 09 	call	0x1364	; 0x1364 <ProgInit>
	EnableProgMode(ATtiny2313);
    19f6:	8a e0       	ldi	r24, 0x0A	; 10
    19f8:	0e 94 67 0a 	call	0x14ce	; 0x14ce <EnableProgMode>
	SignatureBytes = ReadSignatureBytes();
    19fc:	0e 94 8c 0a 	call	0x1518	; 0x1518 <ReadSignatureBytes>
    1a00:	ec 01       	movw	r28, r24
	
	printf("\nSignature Bytes: %02X %02X %02X\n", *SignatureBytes, *(SignatureBytes + 1), *(SignatureBytes + 2));
    1a02:	8a 81       	ldd	r24, Y+2	; 0x02
    1a04:	1f 92       	push	r1
    1a06:	8f 93       	push	r24
    1a08:	89 81       	ldd	r24, Y+1	; 0x01
    1a0a:	1f 92       	push	r1
    1a0c:	8f 93       	push	r24
    1a0e:	88 81       	ld	r24, Y
    1a10:	1f 92       	push	r1
    1a12:	8f 93       	push	r24
    1a14:	87 e9       	ldi	r24, 0x97	; 151
    1a16:	95 e0       	ldi	r25, 0x05	; 5
    1a18:	9f 93       	push	r25
    1a1a:	8f 93       	push	r24
    1a1c:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <printf>
	if ( (*SignatureBytes == 0x1E) && (*(SignatureBytes + 1) == 0x91) && (*(SignatureBytes + 2) == 0x0A) )
    1a20:	8d b7       	in	r24, 0x3d	; 61
    1a22:	9e b7       	in	r25, 0x3e	; 62
    1a24:	08 96       	adiw	r24, 0x08	; 8
    1a26:	0f b6       	in	r0, 0x3f	; 63
    1a28:	f8 94       	cli
    1a2a:	9e bf       	out	0x3e, r25	; 62
    1a2c:	0f be       	out	0x3f, r0	; 63
    1a2e:	8d bf       	out	0x3d, r24	; 61
    1a30:	88 81       	ld	r24, Y
    1a32:	8e 31       	cpi	r24, 0x1E	; 30
    1a34:	11 f5       	brne	.+68     	; 0x1a7a <main+0x94>
    1a36:	89 81       	ldd	r24, Y+1	; 0x01
    1a38:	81 39       	cpi	r24, 0x91	; 145
    1a3a:	f9 f4       	brne	.+62     	; 0x1a7a <main+0x94>
    1a3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3e:	8a 30       	cpi	r24, 0x0A	; 10
    1a40:	e1 f4       	brne	.+56     	; 0x1a7a <main+0x94>
	{
		printf("Programming!\n");
    1a42:	8c ec       	ldi	r24, 0xCC	; 204
    1a44:	95 e0       	ldi	r25, 0x05	; 5
    1a46:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <puts>
		ChipErase();
    1a4a:	0e 94 cc 0b 	call	0x1798	; 0x1798 <ChipErase>
		printf("Done Erasing!\n");
    1a4e:	89 eb       	ldi	r24, 0xB9	; 185
    1a50:	95 e0       	ldi	r25, 0x05	; 5
    1a52:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <puts>
		ReadFlash();
    1a56:	0e 94 57 0b 	call	0x16ae	; 0x16ae <ReadFlash>
		printf("\n");
    1a5a:	8a e0       	ldi	r24, 0x0A	; 10
    1a5c:	90 e0       	ldi	r25, 0x00	; 0
    1a5e:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <putchar>
		ProgramFlash();
    1a62:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <ProgramFlash>
		printf("Done Programming!\n");
    1a66:	87 ec       	ldi	r24, 0xC7	; 199
    1a68:	95 e0       	ldi	r25, 0x05	; 5
    1a6a:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <puts>
		ReadFlash();
    1a6e:	0e 94 57 0b 	call	0x16ae	; 0x16ae <ReadFlash>
		printf("\nDone!\n\n");
    1a72:	89 ed       	ldi	r24, 0xD9	; 217
    1a74:	95 e0       	ldi	r25, 0x05	; 5
    1a76:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <puts>
	}
	ExitParallelProgrammingMode();
    1a7a:	0e 94 b4 0c 	call	0x1968	; 0x1968 <ExitParallelProgrammingMode>
    1a7e:	ff cf       	rjmp	.-2      	; 0x1a7e <main+0x98>

00001a80 <__umulhisi3>:
    1a80:	a2 9f       	mul	r26, r18
    1a82:	b0 01       	movw	r22, r0
    1a84:	b3 9f       	mul	r27, r19
    1a86:	c0 01       	movw	r24, r0
    1a88:	a3 9f       	mul	r26, r19
    1a8a:	70 0d       	add	r23, r0
    1a8c:	81 1d       	adc	r24, r1
    1a8e:	11 24       	eor	r1, r1
    1a90:	91 1d       	adc	r25, r1
    1a92:	b2 9f       	mul	r27, r18
    1a94:	70 0d       	add	r23, r0
    1a96:	81 1d       	adc	r24, r1
    1a98:	11 24       	eor	r1, r1
    1a9a:	91 1d       	adc	r25, r1
    1a9c:	08 95       	ret

00001a9e <strcat>:
    1a9e:	fb 01       	movw	r30, r22
    1aa0:	dc 01       	movw	r26, r24
    1aa2:	0d 90       	ld	r0, X+
    1aa4:	00 20       	and	r0, r0
    1aa6:	e9 f7       	brne	.-6      	; 0x1aa2 <strcat+0x4>
    1aa8:	11 97       	sbiw	r26, 0x01	; 1
    1aaa:	01 90       	ld	r0, Z+
    1aac:	0d 92       	st	X+, r0
    1aae:	00 20       	and	r0, r0
    1ab0:	e1 f7       	brne	.-8      	; 0x1aaa <strcat+0xc>
    1ab2:	08 95       	ret

00001ab4 <strcpy>:
    1ab4:	fb 01       	movw	r30, r22
    1ab6:	dc 01       	movw	r26, r24
    1ab8:	01 90       	ld	r0, Z+
    1aba:	0d 92       	st	X+, r0
    1abc:	00 20       	and	r0, r0
    1abe:	e1 f7       	brne	.-8      	; 0x1ab8 <strcpy+0x4>
    1ac0:	08 95       	ret

00001ac2 <fputc>:
    1ac2:	0f 93       	push	r16
    1ac4:	1f 93       	push	r17
    1ac6:	cf 93       	push	r28
    1ac8:	df 93       	push	r29
    1aca:	18 2f       	mov	r17, r24
    1acc:	09 2f       	mov	r16, r25
    1ace:	eb 01       	movw	r28, r22
    1ad0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad2:	81 fd       	sbrc	r24, 1
    1ad4:	03 c0       	rjmp	.+6      	; 0x1adc <fputc+0x1a>
    1ad6:	8f ef       	ldi	r24, 0xFF	; 255
    1ad8:	9f ef       	ldi	r25, 0xFF	; 255
    1ada:	20 c0       	rjmp	.+64     	; 0x1b1c <fputc+0x5a>
    1adc:	82 ff       	sbrs	r24, 2
    1ade:	10 c0       	rjmp	.+32     	; 0x1b00 <fputc+0x3e>
    1ae0:	4e 81       	ldd	r20, Y+6	; 0x06
    1ae2:	5f 81       	ldd	r21, Y+7	; 0x07
    1ae4:	2c 81       	ldd	r18, Y+4	; 0x04
    1ae6:	3d 81       	ldd	r19, Y+5	; 0x05
    1ae8:	42 17       	cp	r20, r18
    1aea:	53 07       	cpc	r21, r19
    1aec:	7c f4       	brge	.+30     	; 0x1b0c <fputc+0x4a>
    1aee:	e8 81       	ld	r30, Y
    1af0:	f9 81       	ldd	r31, Y+1	; 0x01
    1af2:	9f 01       	movw	r18, r30
    1af4:	2f 5f       	subi	r18, 0xFF	; 255
    1af6:	3f 4f       	sbci	r19, 0xFF	; 255
    1af8:	39 83       	std	Y+1, r19	; 0x01
    1afa:	28 83       	st	Y, r18
    1afc:	10 83       	st	Z, r17
    1afe:	06 c0       	rjmp	.+12     	; 0x1b0c <fputc+0x4a>
    1b00:	e8 85       	ldd	r30, Y+8	; 0x08
    1b02:	f9 85       	ldd	r31, Y+9	; 0x09
    1b04:	81 2f       	mov	r24, r17
    1b06:	09 95       	icall
    1b08:	89 2b       	or	r24, r25
    1b0a:	29 f7       	brne	.-54     	; 0x1ad6 <fputc+0x14>
    1b0c:	2e 81       	ldd	r18, Y+6	; 0x06
    1b0e:	3f 81       	ldd	r19, Y+7	; 0x07
    1b10:	2f 5f       	subi	r18, 0xFF	; 255
    1b12:	3f 4f       	sbci	r19, 0xFF	; 255
    1b14:	3f 83       	std	Y+7, r19	; 0x07
    1b16:	2e 83       	std	Y+6, r18	; 0x06
    1b18:	81 2f       	mov	r24, r17
    1b1a:	90 2f       	mov	r25, r16
    1b1c:	df 91       	pop	r29
    1b1e:	cf 91       	pop	r28
    1b20:	1f 91       	pop	r17
    1b22:	0f 91       	pop	r16
    1b24:	08 95       	ret

00001b26 <printf>:
    1b26:	a0 e0       	ldi	r26, 0x00	; 0
    1b28:	b0 e0       	ldi	r27, 0x00	; 0
    1b2a:	e9 e9       	ldi	r30, 0x99	; 153
    1b2c:	fd e0       	ldi	r31, 0x0D	; 13
    1b2e:	0c 94 31 10 	jmp	0x2062	; 0x2062 <__prologue_saves__+0x20>
    1b32:	fe 01       	movw	r30, r28
    1b34:	35 96       	adiw	r30, 0x05	; 5
    1b36:	61 91       	ld	r22, Z+
    1b38:	71 91       	ld	r23, Z+
    1b3a:	af 01       	movw	r20, r30
    1b3c:	80 91 c0 07 	lds	r24, 0x07C0
    1b40:	90 91 c1 07 	lds	r25, 0x07C1
    1b44:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <vfprintf>
    1b48:	e2 e0       	ldi	r30, 0x02	; 2
    1b4a:	0c 94 4d 10 	jmp	0x209a	; 0x209a <__epilogue_restores__+0x20>

00001b4e <putchar>:
    1b4e:	60 91 c0 07 	lds	r22, 0x07C0
    1b52:	70 91 c1 07 	lds	r23, 0x07C1
    1b56:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <fputc>
    1b5a:	08 95       	ret

00001b5c <puts>:
    1b5c:	0f 93       	push	r16
    1b5e:	1f 93       	push	r17
    1b60:	cf 93       	push	r28
    1b62:	df 93       	push	r29
    1b64:	e0 91 c0 07 	lds	r30, 0x07C0
    1b68:	f0 91 c1 07 	lds	r31, 0x07C1
    1b6c:	23 81       	ldd	r18, Z+3	; 0x03
    1b6e:	21 ff       	sbrs	r18, 1
    1b70:	1b c0       	rjmp	.+54     	; 0x1ba8 <puts+0x4c>
    1b72:	ec 01       	movw	r28, r24
    1b74:	00 e0       	ldi	r16, 0x00	; 0
    1b76:	10 e0       	ldi	r17, 0x00	; 0
    1b78:	89 91       	ld	r24, Y+
    1b7a:	60 91 c0 07 	lds	r22, 0x07C0
    1b7e:	70 91 c1 07 	lds	r23, 0x07C1
    1b82:	db 01       	movw	r26, r22
    1b84:	18 96       	adiw	r26, 0x08	; 8
    1b86:	ed 91       	ld	r30, X+
    1b88:	fc 91       	ld	r31, X
    1b8a:	19 97       	sbiw	r26, 0x09	; 9
    1b8c:	88 23       	and	r24, r24
    1b8e:	31 f0       	breq	.+12     	; 0x1b9c <puts+0x40>
    1b90:	09 95       	icall
    1b92:	89 2b       	or	r24, r25
    1b94:	89 f3       	breq	.-30     	; 0x1b78 <puts+0x1c>
    1b96:	0f ef       	ldi	r16, 0xFF	; 255
    1b98:	1f ef       	ldi	r17, 0xFF	; 255
    1b9a:	ee cf       	rjmp	.-36     	; 0x1b78 <puts+0x1c>
    1b9c:	8a e0       	ldi	r24, 0x0A	; 10
    1b9e:	09 95       	icall
    1ba0:	89 2b       	or	r24, r25
    1ba2:	11 f4       	brne	.+4      	; 0x1ba8 <puts+0x4c>
    1ba4:	c8 01       	movw	r24, r16
    1ba6:	02 c0       	rjmp	.+4      	; 0x1bac <puts+0x50>
    1ba8:	8f ef       	ldi	r24, 0xFF	; 255
    1baa:	9f ef       	ldi	r25, 0xFF	; 255
    1bac:	df 91       	pop	r29
    1bae:	cf 91       	pop	r28
    1bb0:	1f 91       	pop	r17
    1bb2:	0f 91       	pop	r16
    1bb4:	08 95       	ret

00001bb6 <vfprintf>:
    1bb6:	ac e0       	ldi	r26, 0x0C	; 12
    1bb8:	b0 e0       	ldi	r27, 0x00	; 0
    1bba:	e1 ee       	ldi	r30, 0xE1	; 225
    1bbc:	fd e0       	ldi	r31, 0x0D	; 13
    1bbe:	0c 94 21 10 	jmp	0x2042	; 0x2042 <__prologue_saves__>
    1bc2:	7c 01       	movw	r14, r24
    1bc4:	6b 01       	movw	r12, r22
    1bc6:	8a 01       	movw	r16, r20
    1bc8:	fc 01       	movw	r30, r24
    1bca:	17 82       	std	Z+7, r1	; 0x07
    1bcc:	16 82       	std	Z+6, r1	; 0x06
    1bce:	83 81       	ldd	r24, Z+3	; 0x03
    1bd0:	81 ff       	sbrs	r24, 1
    1bd2:	bd c1       	rjmp	.+890    	; 0x1f4e <vfprintf+0x398>
    1bd4:	ce 01       	movw	r24, r28
    1bd6:	01 96       	adiw	r24, 0x01	; 1
    1bd8:	4c 01       	movw	r8, r24
    1bda:	f7 01       	movw	r30, r14
    1bdc:	93 81       	ldd	r25, Z+3	; 0x03
    1bde:	f6 01       	movw	r30, r12
    1be0:	93 fd       	sbrc	r25, 3
    1be2:	85 91       	lpm	r24, Z+
    1be4:	93 ff       	sbrs	r25, 3
    1be6:	81 91       	ld	r24, Z+
    1be8:	6f 01       	movw	r12, r30
    1bea:	88 23       	and	r24, r24
    1bec:	09 f4       	brne	.+2      	; 0x1bf0 <vfprintf+0x3a>
    1bee:	ab c1       	rjmp	.+854    	; 0x1f46 <vfprintf+0x390>
    1bf0:	85 32       	cpi	r24, 0x25	; 37
    1bf2:	39 f4       	brne	.+14     	; 0x1c02 <vfprintf+0x4c>
    1bf4:	93 fd       	sbrc	r25, 3
    1bf6:	85 91       	lpm	r24, Z+
    1bf8:	93 ff       	sbrs	r25, 3
    1bfa:	81 91       	ld	r24, Z+
    1bfc:	6f 01       	movw	r12, r30
    1bfe:	85 32       	cpi	r24, 0x25	; 37
    1c00:	29 f4       	brne	.+10     	; 0x1c0c <vfprintf+0x56>
    1c02:	b7 01       	movw	r22, r14
    1c04:	90 e0       	ldi	r25, 0x00	; 0
    1c06:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <fputc>
    1c0a:	e7 cf       	rjmp	.-50     	; 0x1bda <vfprintf+0x24>
    1c0c:	51 2c       	mov	r5, r1
    1c0e:	31 2c       	mov	r3, r1
    1c10:	20 e0       	ldi	r18, 0x00	; 0
    1c12:	20 32       	cpi	r18, 0x20	; 32
    1c14:	a0 f4       	brcc	.+40     	; 0x1c3e <vfprintf+0x88>
    1c16:	8b 32       	cpi	r24, 0x2B	; 43
    1c18:	69 f0       	breq	.+26     	; 0x1c34 <vfprintf+0x7e>
    1c1a:	30 f4       	brcc	.+12     	; 0x1c28 <vfprintf+0x72>
    1c1c:	80 32       	cpi	r24, 0x20	; 32
    1c1e:	59 f0       	breq	.+22     	; 0x1c36 <vfprintf+0x80>
    1c20:	83 32       	cpi	r24, 0x23	; 35
    1c22:	69 f4       	brne	.+26     	; 0x1c3e <vfprintf+0x88>
    1c24:	20 61       	ori	r18, 0x10	; 16
    1c26:	2c c0       	rjmp	.+88     	; 0x1c80 <vfprintf+0xca>
    1c28:	8d 32       	cpi	r24, 0x2D	; 45
    1c2a:	39 f0       	breq	.+14     	; 0x1c3a <vfprintf+0x84>
    1c2c:	80 33       	cpi	r24, 0x30	; 48
    1c2e:	39 f4       	brne	.+14     	; 0x1c3e <vfprintf+0x88>
    1c30:	21 60       	ori	r18, 0x01	; 1
    1c32:	26 c0       	rjmp	.+76     	; 0x1c80 <vfprintf+0xca>
    1c34:	22 60       	ori	r18, 0x02	; 2
    1c36:	24 60       	ori	r18, 0x04	; 4
    1c38:	23 c0       	rjmp	.+70     	; 0x1c80 <vfprintf+0xca>
    1c3a:	28 60       	ori	r18, 0x08	; 8
    1c3c:	21 c0       	rjmp	.+66     	; 0x1c80 <vfprintf+0xca>
    1c3e:	27 fd       	sbrc	r18, 7
    1c40:	27 c0       	rjmp	.+78     	; 0x1c90 <vfprintf+0xda>
    1c42:	30 ed       	ldi	r19, 0xD0	; 208
    1c44:	38 0f       	add	r19, r24
    1c46:	3a 30       	cpi	r19, 0x0A	; 10
    1c48:	78 f4       	brcc	.+30     	; 0x1c68 <vfprintf+0xb2>
    1c4a:	26 ff       	sbrs	r18, 6
    1c4c:	06 c0       	rjmp	.+12     	; 0x1c5a <vfprintf+0xa4>
    1c4e:	fa e0       	ldi	r31, 0x0A	; 10
    1c50:	5f 9e       	mul	r5, r31
    1c52:	30 0d       	add	r19, r0
    1c54:	11 24       	eor	r1, r1
    1c56:	53 2e       	mov	r5, r19
    1c58:	13 c0       	rjmp	.+38     	; 0x1c80 <vfprintf+0xca>
    1c5a:	8a e0       	ldi	r24, 0x0A	; 10
    1c5c:	38 9e       	mul	r3, r24
    1c5e:	30 0d       	add	r19, r0
    1c60:	11 24       	eor	r1, r1
    1c62:	33 2e       	mov	r3, r19
    1c64:	20 62       	ori	r18, 0x20	; 32
    1c66:	0c c0       	rjmp	.+24     	; 0x1c80 <vfprintf+0xca>
    1c68:	8e 32       	cpi	r24, 0x2E	; 46
    1c6a:	21 f4       	brne	.+8      	; 0x1c74 <vfprintf+0xbe>
    1c6c:	26 fd       	sbrc	r18, 6
    1c6e:	6b c1       	rjmp	.+726    	; 0x1f46 <vfprintf+0x390>
    1c70:	20 64       	ori	r18, 0x40	; 64
    1c72:	06 c0       	rjmp	.+12     	; 0x1c80 <vfprintf+0xca>
    1c74:	8c 36       	cpi	r24, 0x6C	; 108
    1c76:	11 f4       	brne	.+4      	; 0x1c7c <vfprintf+0xc6>
    1c78:	20 68       	ori	r18, 0x80	; 128
    1c7a:	02 c0       	rjmp	.+4      	; 0x1c80 <vfprintf+0xca>
    1c7c:	88 36       	cpi	r24, 0x68	; 104
    1c7e:	41 f4       	brne	.+16     	; 0x1c90 <vfprintf+0xda>
    1c80:	f6 01       	movw	r30, r12
    1c82:	93 fd       	sbrc	r25, 3
    1c84:	85 91       	lpm	r24, Z+
    1c86:	93 ff       	sbrs	r25, 3
    1c88:	81 91       	ld	r24, Z+
    1c8a:	6f 01       	movw	r12, r30
    1c8c:	81 11       	cpse	r24, r1
    1c8e:	c1 cf       	rjmp	.-126    	; 0x1c12 <vfprintf+0x5c>
    1c90:	98 2f       	mov	r25, r24
    1c92:	9f 7d       	andi	r25, 0xDF	; 223
    1c94:	95 54       	subi	r25, 0x45	; 69
    1c96:	93 30       	cpi	r25, 0x03	; 3
    1c98:	28 f4       	brcc	.+10     	; 0x1ca4 <vfprintf+0xee>
    1c9a:	0c 5f       	subi	r16, 0xFC	; 252
    1c9c:	1f 4f       	sbci	r17, 0xFF	; 255
    1c9e:	ff e3       	ldi	r31, 0x3F	; 63
    1ca0:	f9 83       	std	Y+1, r31	; 0x01
    1ca2:	0d c0       	rjmp	.+26     	; 0x1cbe <vfprintf+0x108>
    1ca4:	83 36       	cpi	r24, 0x63	; 99
    1ca6:	31 f0       	breq	.+12     	; 0x1cb4 <vfprintf+0xfe>
    1ca8:	83 37       	cpi	r24, 0x73	; 115
    1caa:	71 f0       	breq	.+28     	; 0x1cc8 <vfprintf+0x112>
    1cac:	83 35       	cpi	r24, 0x53	; 83
    1cae:	09 f0       	breq	.+2      	; 0x1cb2 <vfprintf+0xfc>
    1cb0:	5b c0       	rjmp	.+182    	; 0x1d68 <vfprintf+0x1b2>
    1cb2:	22 c0       	rjmp	.+68     	; 0x1cf8 <vfprintf+0x142>
    1cb4:	f8 01       	movw	r30, r16
    1cb6:	80 81       	ld	r24, Z
    1cb8:	89 83       	std	Y+1, r24	; 0x01
    1cba:	0e 5f       	subi	r16, 0xFE	; 254
    1cbc:	1f 4f       	sbci	r17, 0xFF	; 255
    1cbe:	44 24       	eor	r4, r4
    1cc0:	43 94       	inc	r4
    1cc2:	51 2c       	mov	r5, r1
    1cc4:	54 01       	movw	r10, r8
    1cc6:	15 c0       	rjmp	.+42     	; 0x1cf2 <vfprintf+0x13c>
    1cc8:	38 01       	movw	r6, r16
    1cca:	f2 e0       	ldi	r31, 0x02	; 2
    1ccc:	6f 0e       	add	r6, r31
    1cce:	71 1c       	adc	r7, r1
    1cd0:	f8 01       	movw	r30, r16
    1cd2:	a0 80       	ld	r10, Z
    1cd4:	b1 80       	ldd	r11, Z+1	; 0x01
    1cd6:	26 ff       	sbrs	r18, 6
    1cd8:	03 c0       	rjmp	.+6      	; 0x1ce0 <vfprintf+0x12a>
    1cda:	65 2d       	mov	r22, r5
    1cdc:	70 e0       	ldi	r23, 0x00	; 0
    1cde:	02 c0       	rjmp	.+4      	; 0x1ce4 <vfprintf+0x12e>
    1ce0:	6f ef       	ldi	r22, 0xFF	; 255
    1ce2:	7f ef       	ldi	r23, 0xFF	; 255
    1ce4:	c5 01       	movw	r24, r10
    1ce6:	2c 87       	std	Y+12, r18	; 0x0c
    1ce8:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <strnlen>
    1cec:	2c 01       	movw	r4, r24
    1cee:	83 01       	movw	r16, r6
    1cf0:	2c 85       	ldd	r18, Y+12	; 0x0c
    1cf2:	2f 77       	andi	r18, 0x7F	; 127
    1cf4:	22 2e       	mov	r2, r18
    1cf6:	17 c0       	rjmp	.+46     	; 0x1d26 <vfprintf+0x170>
    1cf8:	38 01       	movw	r6, r16
    1cfa:	f2 e0       	ldi	r31, 0x02	; 2
    1cfc:	6f 0e       	add	r6, r31
    1cfe:	71 1c       	adc	r7, r1
    1d00:	f8 01       	movw	r30, r16
    1d02:	a0 80       	ld	r10, Z
    1d04:	b1 80       	ldd	r11, Z+1	; 0x01
    1d06:	26 ff       	sbrs	r18, 6
    1d08:	03 c0       	rjmp	.+6      	; 0x1d10 <vfprintf+0x15a>
    1d0a:	65 2d       	mov	r22, r5
    1d0c:	70 e0       	ldi	r23, 0x00	; 0
    1d0e:	02 c0       	rjmp	.+4      	; 0x1d14 <vfprintf+0x15e>
    1d10:	6f ef       	ldi	r22, 0xFF	; 255
    1d12:	7f ef       	ldi	r23, 0xFF	; 255
    1d14:	c5 01       	movw	r24, r10
    1d16:	2c 87       	std	Y+12, r18	; 0x0c
    1d18:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <strnlen_P>
    1d1c:	2c 01       	movw	r4, r24
    1d1e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1d20:	20 68       	ori	r18, 0x80	; 128
    1d22:	22 2e       	mov	r2, r18
    1d24:	83 01       	movw	r16, r6
    1d26:	23 fc       	sbrc	r2, 3
    1d28:	1b c0       	rjmp	.+54     	; 0x1d60 <vfprintf+0x1aa>
    1d2a:	83 2d       	mov	r24, r3
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	48 16       	cp	r4, r24
    1d30:	59 06       	cpc	r5, r25
    1d32:	b0 f4       	brcc	.+44     	; 0x1d60 <vfprintf+0x1aa>
    1d34:	b7 01       	movw	r22, r14
    1d36:	80 e2       	ldi	r24, 0x20	; 32
    1d38:	90 e0       	ldi	r25, 0x00	; 0
    1d3a:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <fputc>
    1d3e:	3a 94       	dec	r3
    1d40:	f4 cf       	rjmp	.-24     	; 0x1d2a <vfprintf+0x174>
    1d42:	f5 01       	movw	r30, r10
    1d44:	27 fc       	sbrc	r2, 7
    1d46:	85 91       	lpm	r24, Z+
    1d48:	27 fe       	sbrs	r2, 7
    1d4a:	81 91       	ld	r24, Z+
    1d4c:	5f 01       	movw	r10, r30
    1d4e:	b7 01       	movw	r22, r14
    1d50:	90 e0       	ldi	r25, 0x00	; 0
    1d52:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <fputc>
    1d56:	31 10       	cpse	r3, r1
    1d58:	3a 94       	dec	r3
    1d5a:	f1 e0       	ldi	r31, 0x01	; 1
    1d5c:	4f 1a       	sub	r4, r31
    1d5e:	51 08       	sbc	r5, r1
    1d60:	41 14       	cp	r4, r1
    1d62:	51 04       	cpc	r5, r1
    1d64:	71 f7       	brne	.-36     	; 0x1d42 <vfprintf+0x18c>
    1d66:	e5 c0       	rjmp	.+458    	; 0x1f32 <vfprintf+0x37c>
    1d68:	84 36       	cpi	r24, 0x64	; 100
    1d6a:	11 f0       	breq	.+4      	; 0x1d70 <vfprintf+0x1ba>
    1d6c:	89 36       	cpi	r24, 0x69	; 105
    1d6e:	39 f5       	brne	.+78     	; 0x1dbe <vfprintf+0x208>
    1d70:	f8 01       	movw	r30, r16
    1d72:	27 ff       	sbrs	r18, 7
    1d74:	07 c0       	rjmp	.+14     	; 0x1d84 <vfprintf+0x1ce>
    1d76:	60 81       	ld	r22, Z
    1d78:	71 81       	ldd	r23, Z+1	; 0x01
    1d7a:	82 81       	ldd	r24, Z+2	; 0x02
    1d7c:	93 81       	ldd	r25, Z+3	; 0x03
    1d7e:	0c 5f       	subi	r16, 0xFC	; 252
    1d80:	1f 4f       	sbci	r17, 0xFF	; 255
    1d82:	08 c0       	rjmp	.+16     	; 0x1d94 <vfprintf+0x1de>
    1d84:	60 81       	ld	r22, Z
    1d86:	71 81       	ldd	r23, Z+1	; 0x01
    1d88:	88 27       	eor	r24, r24
    1d8a:	77 fd       	sbrc	r23, 7
    1d8c:	80 95       	com	r24
    1d8e:	98 2f       	mov	r25, r24
    1d90:	0e 5f       	subi	r16, 0xFE	; 254
    1d92:	1f 4f       	sbci	r17, 0xFF	; 255
    1d94:	2f 76       	andi	r18, 0x6F	; 111
    1d96:	b2 2e       	mov	r11, r18
    1d98:	97 ff       	sbrs	r25, 7
    1d9a:	09 c0       	rjmp	.+18     	; 0x1dae <vfprintf+0x1f8>
    1d9c:	90 95       	com	r25
    1d9e:	80 95       	com	r24
    1da0:	70 95       	com	r23
    1da2:	61 95       	neg	r22
    1da4:	7f 4f       	sbci	r23, 0xFF	; 255
    1da6:	8f 4f       	sbci	r24, 0xFF	; 255
    1da8:	9f 4f       	sbci	r25, 0xFF	; 255
    1daa:	20 68       	ori	r18, 0x80	; 128
    1dac:	b2 2e       	mov	r11, r18
    1dae:	2a e0       	ldi	r18, 0x0A	; 10
    1db0:	30 e0       	ldi	r19, 0x00	; 0
    1db2:	a4 01       	movw	r20, r8
    1db4:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <__ultoa_invert>
    1db8:	a8 2e       	mov	r10, r24
    1dba:	a8 18       	sub	r10, r8
    1dbc:	44 c0       	rjmp	.+136    	; 0x1e46 <vfprintf+0x290>
    1dbe:	85 37       	cpi	r24, 0x75	; 117
    1dc0:	29 f4       	brne	.+10     	; 0x1dcc <vfprintf+0x216>
    1dc2:	2f 7e       	andi	r18, 0xEF	; 239
    1dc4:	b2 2e       	mov	r11, r18
    1dc6:	2a e0       	ldi	r18, 0x0A	; 10
    1dc8:	30 e0       	ldi	r19, 0x00	; 0
    1dca:	25 c0       	rjmp	.+74     	; 0x1e16 <vfprintf+0x260>
    1dcc:	f2 2f       	mov	r31, r18
    1dce:	f9 7f       	andi	r31, 0xF9	; 249
    1dd0:	bf 2e       	mov	r11, r31
    1dd2:	8f 36       	cpi	r24, 0x6F	; 111
    1dd4:	c1 f0       	breq	.+48     	; 0x1e06 <vfprintf+0x250>
    1dd6:	18 f4       	brcc	.+6      	; 0x1dde <vfprintf+0x228>
    1dd8:	88 35       	cpi	r24, 0x58	; 88
    1dda:	79 f0       	breq	.+30     	; 0x1dfa <vfprintf+0x244>
    1ddc:	b4 c0       	rjmp	.+360    	; 0x1f46 <vfprintf+0x390>
    1dde:	80 37       	cpi	r24, 0x70	; 112
    1de0:	19 f0       	breq	.+6      	; 0x1de8 <vfprintf+0x232>
    1de2:	88 37       	cpi	r24, 0x78	; 120
    1de4:	21 f0       	breq	.+8      	; 0x1dee <vfprintf+0x238>
    1de6:	af c0       	rjmp	.+350    	; 0x1f46 <vfprintf+0x390>
    1de8:	2f 2f       	mov	r18, r31
    1dea:	20 61       	ori	r18, 0x10	; 16
    1dec:	b2 2e       	mov	r11, r18
    1dee:	b4 fe       	sbrs	r11, 4
    1df0:	0d c0       	rjmp	.+26     	; 0x1e0c <vfprintf+0x256>
    1df2:	8b 2d       	mov	r24, r11
    1df4:	84 60       	ori	r24, 0x04	; 4
    1df6:	b8 2e       	mov	r11, r24
    1df8:	09 c0       	rjmp	.+18     	; 0x1e0c <vfprintf+0x256>
    1dfa:	24 ff       	sbrs	r18, 4
    1dfc:	0a c0       	rjmp	.+20     	; 0x1e12 <vfprintf+0x25c>
    1dfe:	9f 2f       	mov	r25, r31
    1e00:	96 60       	ori	r25, 0x06	; 6
    1e02:	b9 2e       	mov	r11, r25
    1e04:	06 c0       	rjmp	.+12     	; 0x1e12 <vfprintf+0x25c>
    1e06:	28 e0       	ldi	r18, 0x08	; 8
    1e08:	30 e0       	ldi	r19, 0x00	; 0
    1e0a:	05 c0       	rjmp	.+10     	; 0x1e16 <vfprintf+0x260>
    1e0c:	20 e1       	ldi	r18, 0x10	; 16
    1e0e:	30 e0       	ldi	r19, 0x00	; 0
    1e10:	02 c0       	rjmp	.+4      	; 0x1e16 <vfprintf+0x260>
    1e12:	20 e1       	ldi	r18, 0x10	; 16
    1e14:	32 e0       	ldi	r19, 0x02	; 2
    1e16:	f8 01       	movw	r30, r16
    1e18:	b7 fe       	sbrs	r11, 7
    1e1a:	07 c0       	rjmp	.+14     	; 0x1e2a <vfprintf+0x274>
    1e1c:	60 81       	ld	r22, Z
    1e1e:	71 81       	ldd	r23, Z+1	; 0x01
    1e20:	82 81       	ldd	r24, Z+2	; 0x02
    1e22:	93 81       	ldd	r25, Z+3	; 0x03
    1e24:	0c 5f       	subi	r16, 0xFC	; 252
    1e26:	1f 4f       	sbci	r17, 0xFF	; 255
    1e28:	06 c0       	rjmp	.+12     	; 0x1e36 <vfprintf+0x280>
    1e2a:	60 81       	ld	r22, Z
    1e2c:	71 81       	ldd	r23, Z+1	; 0x01
    1e2e:	80 e0       	ldi	r24, 0x00	; 0
    1e30:	90 e0       	ldi	r25, 0x00	; 0
    1e32:	0e 5f       	subi	r16, 0xFE	; 254
    1e34:	1f 4f       	sbci	r17, 0xFF	; 255
    1e36:	a4 01       	movw	r20, r8
    1e38:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <__ultoa_invert>
    1e3c:	a8 2e       	mov	r10, r24
    1e3e:	a8 18       	sub	r10, r8
    1e40:	fb 2d       	mov	r31, r11
    1e42:	ff 77       	andi	r31, 0x7F	; 127
    1e44:	bf 2e       	mov	r11, r31
    1e46:	b6 fe       	sbrs	r11, 6
    1e48:	0b c0       	rjmp	.+22     	; 0x1e60 <vfprintf+0x2aa>
    1e4a:	2b 2d       	mov	r18, r11
    1e4c:	2e 7f       	andi	r18, 0xFE	; 254
    1e4e:	a5 14       	cp	r10, r5
    1e50:	50 f4       	brcc	.+20     	; 0x1e66 <vfprintf+0x2b0>
    1e52:	b4 fe       	sbrs	r11, 4
    1e54:	0a c0       	rjmp	.+20     	; 0x1e6a <vfprintf+0x2b4>
    1e56:	b2 fc       	sbrc	r11, 2
    1e58:	08 c0       	rjmp	.+16     	; 0x1e6a <vfprintf+0x2b4>
    1e5a:	2b 2d       	mov	r18, r11
    1e5c:	2e 7e       	andi	r18, 0xEE	; 238
    1e5e:	05 c0       	rjmp	.+10     	; 0x1e6a <vfprintf+0x2b4>
    1e60:	7a 2c       	mov	r7, r10
    1e62:	2b 2d       	mov	r18, r11
    1e64:	03 c0       	rjmp	.+6      	; 0x1e6c <vfprintf+0x2b6>
    1e66:	7a 2c       	mov	r7, r10
    1e68:	01 c0       	rjmp	.+2      	; 0x1e6c <vfprintf+0x2b6>
    1e6a:	75 2c       	mov	r7, r5
    1e6c:	24 ff       	sbrs	r18, 4
    1e6e:	0d c0       	rjmp	.+26     	; 0x1e8a <vfprintf+0x2d4>
    1e70:	fe 01       	movw	r30, r28
    1e72:	ea 0d       	add	r30, r10
    1e74:	f1 1d       	adc	r31, r1
    1e76:	80 81       	ld	r24, Z
    1e78:	80 33       	cpi	r24, 0x30	; 48
    1e7a:	11 f4       	brne	.+4      	; 0x1e80 <vfprintf+0x2ca>
    1e7c:	29 7e       	andi	r18, 0xE9	; 233
    1e7e:	09 c0       	rjmp	.+18     	; 0x1e92 <vfprintf+0x2dc>
    1e80:	22 ff       	sbrs	r18, 2
    1e82:	06 c0       	rjmp	.+12     	; 0x1e90 <vfprintf+0x2da>
    1e84:	73 94       	inc	r7
    1e86:	73 94       	inc	r7
    1e88:	04 c0       	rjmp	.+8      	; 0x1e92 <vfprintf+0x2dc>
    1e8a:	82 2f       	mov	r24, r18
    1e8c:	86 78       	andi	r24, 0x86	; 134
    1e8e:	09 f0       	breq	.+2      	; 0x1e92 <vfprintf+0x2dc>
    1e90:	73 94       	inc	r7
    1e92:	23 fd       	sbrc	r18, 3
    1e94:	13 c0       	rjmp	.+38     	; 0x1ebc <vfprintf+0x306>
    1e96:	20 ff       	sbrs	r18, 0
    1e98:	06 c0       	rjmp	.+12     	; 0x1ea6 <vfprintf+0x2f0>
    1e9a:	5a 2c       	mov	r5, r10
    1e9c:	73 14       	cp	r7, r3
    1e9e:	18 f4       	brcc	.+6      	; 0x1ea6 <vfprintf+0x2f0>
    1ea0:	53 0c       	add	r5, r3
    1ea2:	57 18       	sub	r5, r7
    1ea4:	73 2c       	mov	r7, r3
    1ea6:	73 14       	cp	r7, r3
    1ea8:	68 f4       	brcc	.+26     	; 0x1ec4 <vfprintf+0x30e>
    1eaa:	b7 01       	movw	r22, r14
    1eac:	80 e2       	ldi	r24, 0x20	; 32
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	2c 87       	std	Y+12, r18	; 0x0c
    1eb2:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <fputc>
    1eb6:	73 94       	inc	r7
    1eb8:	2c 85       	ldd	r18, Y+12	; 0x0c
    1eba:	f5 cf       	rjmp	.-22     	; 0x1ea6 <vfprintf+0x2f0>
    1ebc:	73 14       	cp	r7, r3
    1ebe:	10 f4       	brcc	.+4      	; 0x1ec4 <vfprintf+0x30e>
    1ec0:	37 18       	sub	r3, r7
    1ec2:	01 c0       	rjmp	.+2      	; 0x1ec6 <vfprintf+0x310>
    1ec4:	31 2c       	mov	r3, r1
    1ec6:	24 ff       	sbrs	r18, 4
    1ec8:	12 c0       	rjmp	.+36     	; 0x1eee <vfprintf+0x338>
    1eca:	b7 01       	movw	r22, r14
    1ecc:	80 e3       	ldi	r24, 0x30	; 48
    1ece:	90 e0       	ldi	r25, 0x00	; 0
    1ed0:	2c 87       	std	Y+12, r18	; 0x0c
    1ed2:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <fputc>
    1ed6:	2c 85       	ldd	r18, Y+12	; 0x0c
    1ed8:	22 ff       	sbrs	r18, 2
    1eda:	17 c0       	rjmp	.+46     	; 0x1f0a <vfprintf+0x354>
    1edc:	21 ff       	sbrs	r18, 1
    1ede:	03 c0       	rjmp	.+6      	; 0x1ee6 <vfprintf+0x330>
    1ee0:	88 e5       	ldi	r24, 0x58	; 88
    1ee2:	90 e0       	ldi	r25, 0x00	; 0
    1ee4:	02 c0       	rjmp	.+4      	; 0x1eea <vfprintf+0x334>
    1ee6:	88 e7       	ldi	r24, 0x78	; 120
    1ee8:	90 e0       	ldi	r25, 0x00	; 0
    1eea:	b7 01       	movw	r22, r14
    1eec:	0c c0       	rjmp	.+24     	; 0x1f06 <vfprintf+0x350>
    1eee:	82 2f       	mov	r24, r18
    1ef0:	86 78       	andi	r24, 0x86	; 134
    1ef2:	59 f0       	breq	.+22     	; 0x1f0a <vfprintf+0x354>
    1ef4:	21 fd       	sbrc	r18, 1
    1ef6:	02 c0       	rjmp	.+4      	; 0x1efc <vfprintf+0x346>
    1ef8:	80 e2       	ldi	r24, 0x20	; 32
    1efa:	01 c0       	rjmp	.+2      	; 0x1efe <vfprintf+0x348>
    1efc:	8b e2       	ldi	r24, 0x2B	; 43
    1efe:	27 fd       	sbrc	r18, 7
    1f00:	8d e2       	ldi	r24, 0x2D	; 45
    1f02:	b7 01       	movw	r22, r14
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <fputc>
    1f0a:	a5 14       	cp	r10, r5
    1f0c:	38 f4       	brcc	.+14     	; 0x1f1c <vfprintf+0x366>
    1f0e:	b7 01       	movw	r22, r14
    1f10:	80 e3       	ldi	r24, 0x30	; 48
    1f12:	90 e0       	ldi	r25, 0x00	; 0
    1f14:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <fputc>
    1f18:	5a 94       	dec	r5
    1f1a:	f7 cf       	rjmp	.-18     	; 0x1f0a <vfprintf+0x354>
    1f1c:	aa 94       	dec	r10
    1f1e:	f4 01       	movw	r30, r8
    1f20:	ea 0d       	add	r30, r10
    1f22:	f1 1d       	adc	r31, r1
    1f24:	80 81       	ld	r24, Z
    1f26:	b7 01       	movw	r22, r14
    1f28:	90 e0       	ldi	r25, 0x00	; 0
    1f2a:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <fputc>
    1f2e:	a1 10       	cpse	r10, r1
    1f30:	f5 cf       	rjmp	.-22     	; 0x1f1c <vfprintf+0x366>
    1f32:	33 20       	and	r3, r3
    1f34:	09 f4       	brne	.+2      	; 0x1f38 <vfprintf+0x382>
    1f36:	51 ce       	rjmp	.-862    	; 0x1bda <vfprintf+0x24>
    1f38:	b7 01       	movw	r22, r14
    1f3a:	80 e2       	ldi	r24, 0x20	; 32
    1f3c:	90 e0       	ldi	r25, 0x00	; 0
    1f3e:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <fputc>
    1f42:	3a 94       	dec	r3
    1f44:	f6 cf       	rjmp	.-20     	; 0x1f32 <vfprintf+0x37c>
    1f46:	f7 01       	movw	r30, r14
    1f48:	86 81       	ldd	r24, Z+6	; 0x06
    1f4a:	97 81       	ldd	r25, Z+7	; 0x07
    1f4c:	02 c0       	rjmp	.+4      	; 0x1f52 <vfprintf+0x39c>
    1f4e:	8f ef       	ldi	r24, 0xFF	; 255
    1f50:	9f ef       	ldi	r25, 0xFF	; 255
    1f52:	2c 96       	adiw	r28, 0x0c	; 12
    1f54:	e2 e1       	ldi	r30, 0x12	; 18
    1f56:	0c 94 3d 10 	jmp	0x207a	; 0x207a <__epilogue_restores__>

00001f5a <strnlen_P>:
    1f5a:	fc 01       	movw	r30, r24
    1f5c:	05 90       	lpm	r0, Z+
    1f5e:	61 50       	subi	r22, 0x01	; 1
    1f60:	70 40       	sbci	r23, 0x00	; 0
    1f62:	01 10       	cpse	r0, r1
    1f64:	d8 f7       	brcc	.-10     	; 0x1f5c <strnlen_P+0x2>
    1f66:	80 95       	com	r24
    1f68:	90 95       	com	r25
    1f6a:	8e 0f       	add	r24, r30
    1f6c:	9f 1f       	adc	r25, r31
    1f6e:	08 95       	ret

00001f70 <strnlen>:
    1f70:	fc 01       	movw	r30, r24
    1f72:	61 50       	subi	r22, 0x01	; 1
    1f74:	70 40       	sbci	r23, 0x00	; 0
    1f76:	01 90       	ld	r0, Z+
    1f78:	01 10       	cpse	r0, r1
    1f7a:	d8 f7       	brcc	.-10     	; 0x1f72 <strnlen+0x2>
    1f7c:	80 95       	com	r24
    1f7e:	90 95       	com	r25
    1f80:	8e 0f       	add	r24, r30
    1f82:	9f 1f       	adc	r25, r31
    1f84:	08 95       	ret

00001f86 <__ultoa_invert>:
    1f86:	fa 01       	movw	r30, r20
    1f88:	aa 27       	eor	r26, r26
    1f8a:	28 30       	cpi	r18, 0x08	; 8
    1f8c:	51 f1       	breq	.+84     	; 0x1fe2 <__ultoa_invert+0x5c>
    1f8e:	20 31       	cpi	r18, 0x10	; 16
    1f90:	81 f1       	breq	.+96     	; 0x1ff2 <__ultoa_invert+0x6c>
    1f92:	e8 94       	clt
    1f94:	6f 93       	push	r22
    1f96:	6e 7f       	andi	r22, 0xFE	; 254
    1f98:	6e 5f       	subi	r22, 0xFE	; 254
    1f9a:	7f 4f       	sbci	r23, 0xFF	; 255
    1f9c:	8f 4f       	sbci	r24, 0xFF	; 255
    1f9e:	9f 4f       	sbci	r25, 0xFF	; 255
    1fa0:	af 4f       	sbci	r26, 0xFF	; 255
    1fa2:	b1 e0       	ldi	r27, 0x01	; 1
    1fa4:	3e d0       	rcall	.+124    	; 0x2022 <__ultoa_invert+0x9c>
    1fa6:	b4 e0       	ldi	r27, 0x04	; 4
    1fa8:	3c d0       	rcall	.+120    	; 0x2022 <__ultoa_invert+0x9c>
    1faa:	67 0f       	add	r22, r23
    1fac:	78 1f       	adc	r23, r24
    1fae:	89 1f       	adc	r24, r25
    1fb0:	9a 1f       	adc	r25, r26
    1fb2:	a1 1d       	adc	r26, r1
    1fb4:	68 0f       	add	r22, r24
    1fb6:	79 1f       	adc	r23, r25
    1fb8:	8a 1f       	adc	r24, r26
    1fba:	91 1d       	adc	r25, r1
    1fbc:	a1 1d       	adc	r26, r1
    1fbe:	6a 0f       	add	r22, r26
    1fc0:	71 1d       	adc	r23, r1
    1fc2:	81 1d       	adc	r24, r1
    1fc4:	91 1d       	adc	r25, r1
    1fc6:	a1 1d       	adc	r26, r1
    1fc8:	20 d0       	rcall	.+64     	; 0x200a <__ultoa_invert+0x84>
    1fca:	09 f4       	brne	.+2      	; 0x1fce <__ultoa_invert+0x48>
    1fcc:	68 94       	set
    1fce:	3f 91       	pop	r19
    1fd0:	2a e0       	ldi	r18, 0x0A	; 10
    1fd2:	26 9f       	mul	r18, r22
    1fd4:	11 24       	eor	r1, r1
    1fd6:	30 19       	sub	r19, r0
    1fd8:	30 5d       	subi	r19, 0xD0	; 208
    1fda:	31 93       	st	Z+, r19
    1fdc:	de f6       	brtc	.-74     	; 0x1f94 <__ultoa_invert+0xe>
    1fde:	cf 01       	movw	r24, r30
    1fe0:	08 95       	ret
    1fe2:	46 2f       	mov	r20, r22
    1fe4:	47 70       	andi	r20, 0x07	; 7
    1fe6:	40 5d       	subi	r20, 0xD0	; 208
    1fe8:	41 93       	st	Z+, r20
    1fea:	b3 e0       	ldi	r27, 0x03	; 3
    1fec:	0f d0       	rcall	.+30     	; 0x200c <__ultoa_invert+0x86>
    1fee:	c9 f7       	brne	.-14     	; 0x1fe2 <__ultoa_invert+0x5c>
    1ff0:	f6 cf       	rjmp	.-20     	; 0x1fde <__ultoa_invert+0x58>
    1ff2:	46 2f       	mov	r20, r22
    1ff4:	4f 70       	andi	r20, 0x0F	; 15
    1ff6:	40 5d       	subi	r20, 0xD0	; 208
    1ff8:	4a 33       	cpi	r20, 0x3A	; 58
    1ffa:	18 f0       	brcs	.+6      	; 0x2002 <__ultoa_invert+0x7c>
    1ffc:	49 5d       	subi	r20, 0xD9	; 217
    1ffe:	31 fd       	sbrc	r19, 1
    2000:	40 52       	subi	r20, 0x20	; 32
    2002:	41 93       	st	Z+, r20
    2004:	02 d0       	rcall	.+4      	; 0x200a <__ultoa_invert+0x84>
    2006:	a9 f7       	brne	.-22     	; 0x1ff2 <__ultoa_invert+0x6c>
    2008:	ea cf       	rjmp	.-44     	; 0x1fde <__ultoa_invert+0x58>
    200a:	b4 e0       	ldi	r27, 0x04	; 4
    200c:	a6 95       	lsr	r26
    200e:	97 95       	ror	r25
    2010:	87 95       	ror	r24
    2012:	77 95       	ror	r23
    2014:	67 95       	ror	r22
    2016:	ba 95       	dec	r27
    2018:	c9 f7       	brne	.-14     	; 0x200c <__ultoa_invert+0x86>
    201a:	00 97       	sbiw	r24, 0x00	; 0
    201c:	61 05       	cpc	r22, r1
    201e:	71 05       	cpc	r23, r1
    2020:	08 95       	ret
    2022:	9b 01       	movw	r18, r22
    2024:	ac 01       	movw	r20, r24
    2026:	0a 2e       	mov	r0, r26
    2028:	06 94       	lsr	r0
    202a:	57 95       	ror	r21
    202c:	47 95       	ror	r20
    202e:	37 95       	ror	r19
    2030:	27 95       	ror	r18
    2032:	ba 95       	dec	r27
    2034:	c9 f7       	brne	.-14     	; 0x2028 <__ultoa_invert+0xa2>
    2036:	62 0f       	add	r22, r18
    2038:	73 1f       	adc	r23, r19
    203a:	84 1f       	adc	r24, r20
    203c:	95 1f       	adc	r25, r21
    203e:	a0 1d       	adc	r26, r0
    2040:	08 95       	ret

00002042 <__prologue_saves__>:
    2042:	2f 92       	push	r2
    2044:	3f 92       	push	r3
    2046:	4f 92       	push	r4
    2048:	5f 92       	push	r5
    204a:	6f 92       	push	r6
    204c:	7f 92       	push	r7
    204e:	8f 92       	push	r8
    2050:	9f 92       	push	r9
    2052:	af 92       	push	r10
    2054:	bf 92       	push	r11
    2056:	cf 92       	push	r12
    2058:	df 92       	push	r13
    205a:	ef 92       	push	r14
    205c:	ff 92       	push	r15
    205e:	0f 93       	push	r16
    2060:	1f 93       	push	r17
    2062:	cf 93       	push	r28
    2064:	df 93       	push	r29
    2066:	cd b7       	in	r28, 0x3d	; 61
    2068:	de b7       	in	r29, 0x3e	; 62
    206a:	ca 1b       	sub	r28, r26
    206c:	db 0b       	sbc	r29, r27
    206e:	0f b6       	in	r0, 0x3f	; 63
    2070:	f8 94       	cli
    2072:	de bf       	out	0x3e, r29	; 62
    2074:	0f be       	out	0x3f, r0	; 63
    2076:	cd bf       	out	0x3d, r28	; 61
    2078:	09 94       	ijmp

0000207a <__epilogue_restores__>:
    207a:	2a 88       	ldd	r2, Y+18	; 0x12
    207c:	39 88       	ldd	r3, Y+17	; 0x11
    207e:	48 88       	ldd	r4, Y+16	; 0x10
    2080:	5f 84       	ldd	r5, Y+15	; 0x0f
    2082:	6e 84       	ldd	r6, Y+14	; 0x0e
    2084:	7d 84       	ldd	r7, Y+13	; 0x0d
    2086:	8c 84       	ldd	r8, Y+12	; 0x0c
    2088:	9b 84       	ldd	r9, Y+11	; 0x0b
    208a:	aa 84       	ldd	r10, Y+10	; 0x0a
    208c:	b9 84       	ldd	r11, Y+9	; 0x09
    208e:	c8 84       	ldd	r12, Y+8	; 0x08
    2090:	df 80       	ldd	r13, Y+7	; 0x07
    2092:	ee 80       	ldd	r14, Y+6	; 0x06
    2094:	fd 80       	ldd	r15, Y+5	; 0x05
    2096:	0c 81       	ldd	r16, Y+4	; 0x04
    2098:	1b 81       	ldd	r17, Y+3	; 0x03
    209a:	aa 81       	ldd	r26, Y+2	; 0x02
    209c:	b9 81       	ldd	r27, Y+1	; 0x01
    209e:	ce 0f       	add	r28, r30
    20a0:	d1 1d       	adc	r29, r1
    20a2:	0f b6       	in	r0, 0x3f	; 63
    20a4:	f8 94       	cli
    20a6:	de bf       	out	0x3e, r29	; 62
    20a8:	0f be       	out	0x3f, r0	; 63
    20aa:	cd bf       	out	0x3d, r28	; 61
    20ac:	ed 01       	movw	r28, r26
    20ae:	08 95       	ret

000020b0 <_exit>:
    20b0:	f8 94       	cli

000020b2 <__stop_program>:
    20b2:	ff cf       	rjmp	.-2      	; 0x20b2 <__stop_program>
