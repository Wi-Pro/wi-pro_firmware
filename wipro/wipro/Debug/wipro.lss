
wipro.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000003ba  00800200  000018ca  0000195e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000018ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001c1  008005ba  008005ba  00001d18  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001d18  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000518  00000000  00000000  00001d74  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000058f5  00000000  00000000  0000228c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001831  00000000  00000000  00007b81  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001f3f  00000000  00000000  000093b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000fdc  00000000  00000000  0000b2f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000d99  00000000  00000000  0000c2d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000032a1  00000000  00000000  0000d069  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000468  00000000  00000000  0001030a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#include <util/delay.h>
#include "FPGA.h"

void SPI_FPGA_Init(void)
{
	FPGA_CS_DDR |= (1<<FPGA_SPI_CS);
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
	FPGA_CS_PORT |= (1<<FPGA_SPI_CS);
	
	WR_DDR |= 1<<FPGAWR;
       4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
       8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
       c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
	WR_PORT &= ~(1<<FPGAWR);
      10:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      14:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
	SPI_FPGA_Write(FPGA_Disable);
      18:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      1c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
}

void setAtTiny2313()
{
	char shiftTempBuff[5] = {0x00, 0x1F, 0xF7, 0xD0, 0x00};
	SetShiftRegData(LOGIC, shiftTempBuff);
      20:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      24:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      28:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
	//Modify Values and shift again 
	shiftTempBuff[0] = 0x00;
      2c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
	shiftTempBuff[1] = 0x00;
	shiftTempBuff[2] = 0x00; //setting GND to ZIF19
      30:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
	shiftTempBuff[3] = 0x00;
	shiftTempBuff[4] = 0x00;
      34:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
	SetShiftRegData(PULL_DOWN, shiftTempBuff);
      38:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      3c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      40:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
	shiftTempBuff[0] = 0x00;
	shiftTempBuff[1] = 0x00;
      44:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
	shiftTempBuff[2] = 0x08; //setting GND to ZIF19
      48:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
	shiftTempBuff[3] = 0x00;
	shiftTempBuff[4] = 0x00;
      4c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
	SetShiftRegData(GROUND, shiftTempBuff);
      50:	0c 94 cb 01 	jmp	0x396	; 0x396 <__vector_20>
      54:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      58:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
	shiftTempBuff[0] = 0x00;
	shiftTempBuff[1] = 0x00;
      5c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
	shiftTempBuff[2] = 0x00;
	shiftTempBuff[3] = 0x00;
      60:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
	shiftTempBuff[4] = 0x00;
	SetShiftRegData(PULL_UP, shiftTempBuff);
      64:	0c 94 9d 07 	jmp	0xf3a	; 0xf3a <__vector_25>
      68:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      6c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
	shiftTempBuff[0] = 0x00;
      70:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
	shiftTempBuff[1] = 0x20; //Setting VCC to ZIF29
      74:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
	shiftTempBuff[2] = 0x00;
	shiftTempBuff[3] = 0x00;
      78:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
	shiftTempBuff[4] = 0x00;
	SetShiftRegData(VCC, shiftTempBuff);
      7c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      80:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      84:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
	shiftTempBuff[0] = 0x00;
      88:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
	shiftTempBuff[1] = 0x00;
	shiftTempBuff[2] = 0x00;
      8c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
	shiftTempBuff[3] = 0x04; //Setting VPP to ZIF10
      90:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
	shiftTempBuff[4] = 0x00;
	SetShiftRegData(VPP, shiftTempBuff);
      94:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      98:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      9c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
	
	WriteShiftRegData();
      a0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
}
      a4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      a8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      ac:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      b0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      b4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
	_delay_us(25);
	CONTROL_PORT &= ~(1<<XTAL1);
	_delay_us(100);
	
	//Read data
	DATA_DDR = 0;
      b8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
	WR_PORT |= (1<<FPGAWR);
      bc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      c0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
	CONTROL_PORT &= ~(1<<OE);
	CONTROL_PORT &= ~(1<<BS1_PAGEL);
      c4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      c8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      cc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      d0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
	_delay_us(500);
	SignatureBytes[1] = DATA_PIN;
      d4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      d8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
	printf("0x%02X ", SignatureBytes[1]);
      dc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      e0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
	CONTROL_PORT |= 1<<OE;
      ea:	d1 e2       	ldi	r29, 0x21	; 33
	WR_PORT &= ~(1<<FPGAWR);
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
      f0:	15 e0       	ldi	r17, 0x05	; 5
      f2:	a0 e0       	ldi	r26, 0x00	; 0
      f4:	b2 e0       	ldi	r27, 0x02	; 2
	DATA_DDR = 0xFF;
      f6:	ea ec       	ldi	r30, 0xCA	; 202
      f8:	f8 e1       	ldi	r31, 0x18	; 24
      fa:	02 c0       	rjmp	.+4      	; 0x100 <__do_copy_data+0x10>
      fc:	05 90       	lpm	r0, Z+
      fe:	0d 92       	st	X+, r0
     100:	aa 3b       	cpi	r26, 0xBA	; 186
     102:	b1 07       	cpc	r27, r17
     104:	d9 f7       	brne	.-10     	; 0xfc <__do_copy_data+0xc>

00000106 <__do_clear_bss>:
     106:	27 e0       	ldi	r18, 0x07	; 7
	_delay_us(100);
	
	//Load Address Low Byte
	CONTROL_PORT &= ~(1<<XA1_BS2);
     108:	aa eb       	ldi	r26, 0xBA	; 186
	CONTROL_PORT &= ~(1<<XA0);
     10a:	b5 e0       	ldi	r27, 0x05	; 5
	CONTROL_PORT &= ~(1<<BS1_PAGEL);
     10c:	01 c0       	rjmp	.+2      	; 0x110 <.do_clear_bss_start>

0000010e <.do_clear_bss_loop>:
	DATA_PORT = 0x02;
     10e:	1d 92       	st	X+, r1

00000110 <.do_clear_bss_start>:
     110:	ab 37       	cpi	r26, 0x7B	; 123
     112:	b2 07       	cpc	r27, r18
     114:	e1 f7       	brne	.-8      	; 0x10e <.do_clear_bss_loop>
     116:	0e 94 28 09 	call	0x1250	; 0x1250 <main>
     11a:	0c 94 63 0c 	jmp	0x18c6	; 0x18c6 <_exit>

0000011e <__bad_interrupt>:
     11e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000122 <connectionInit>:
     122:	0e 94 65 04 	call	0x8ca	; 0x8ca <uart2_init>
     126:	0e 94 01 06 	call	0xc02	; 0xc02 <uart_init>
	_delay_us(100);
	CONTROL_PORT |= 1<<XTAL1;
	_delay_us(25);
	CONTROL_PORT &= ~(1<<XTAL1);
     12a:	0e 94 1e 05 	call	0xa3c	; 0xa3c <SPI_Init>
     12e:	08 95       	ret

00000130 <clearFlags>:
     130:	cf 93       	push	r28
     132:	df 93       	push	r29
     134:	80 91 1e 06 	lds	r24, 0x061E
	_delay_us(100);
	
	//Read data
	DATA_DDR = 0;
     138:	88 23       	and	r24, r24
     13a:	89 f1       	breq	.+98     	; 0x19e <clearFlags+0x6e>
	WR_PORT |= (1<<FPGAWR);
     13c:	61 e0       	ldi	r22, 0x01	; 1
     13e:	70 e0       	ldi	r23, 0x00	; 0
     140:	8a eb       	ldi	r24, 0xBA	; 186
	CONTROL_PORT &= ~(1<<OE);
     142:	95 e0       	ldi	r25, 0x05	; 5
	CONTROL_PORT &= ~(1<<BS1_PAGEL);
     144:	0e 94 65 09 	call	0x12ca	; 0x12ca <strcpy>
     148:	ca eb       	ldi	r28, 0xBA	; 186
     14a:	d5 e0       	ldi	r29, 0x05	; 5
     14c:	de 01       	movw	r26, r28
     14e:	0d 90       	ld	r0, X+
     150:	00 20       	and	r0, r0
	_delay_us(500);
	SignatureBytes[2] = DATA_PIN;
     152:	e9 f7       	brne	.-6      	; 0x14e <clearFlags+0x1e>
     154:	11 97       	sbiw	r26, 0x01	; 1
     156:	85 e1       	ldi	r24, 0x15	; 21
     158:	e6 e1       	ldi	r30, 0x16	; 22
	printf("0x%02X ", SignatureBytes[2]);
     15a:	f2 e0       	ldi	r31, 0x02	; 2
     15c:	01 90       	ld	r0, Z+
     15e:	0d 92       	st	X+, r0
     160:	8a 95       	dec	r24
     162:	e1 f7       	brne	.-8      	; 0x15c <clearFlags+0x2c>
     164:	de 01       	movw	r26, r28
     166:	0d 90       	ld	r0, X+
     168:	00 20       	and	r0, r0
	CONTROL_PORT |= 1<<OE;
     16a:	e9 f7       	brne	.-6      	; 0x166 <clearFlags+0x36>
	WR_PORT &= ~(1<<FPGAWR);
     16c:	11 97       	sbiw	r26, 0x01	; 1
     16e:	82 e1       	ldi	r24, 0x12	; 18
     170:	eb e2       	ldi	r30, 0x2B	; 43
     172:	f2 e0       	ldi	r31, 0x02	; 2
     174:	01 90       	ld	r0, Z+
	DATA_DDR = 0xFF;
     176:	0d 92       	st	X+, r0
     178:	8a 95       	dec	r24
     17a:	e1 f7       	brne	.-8      	; 0x174 <clearFlags+0x44>
	DATA_PORT = 0x00;
     17c:	09 90       	ld	r0, Y+
     17e:	00 20       	and	r0, r0
	
	return SignatureBytes;
     180:	e9 f7       	brne	.-6      	; 0x17c <clearFlags+0x4c>
     182:	de 01       	movw	r26, r28
     184:	11 97       	sbiw	r26, 0x01	; 1
     186:	83 e1       	ldi	r24, 0x13	; 19
     188:	ed e3       	ldi	r30, 0x3D	; 61
     18a:	f2 e0       	ldi	r31, 0x02	; 2
     18c:	01 90       	ld	r0, Z+
     18e:	0d 92       	st	X+, r0
}
     190:	8a 95       	dec	r24
     192:	e1 f7       	brne	.-8      	; 0x18c <clearFlags+0x5c>
     194:	8a eb       	ldi	r24, 0xBA	; 186
		strcpy(filepath, GET);
		strcat(filepath, URL);
		strcat(filepath, CLEAR_FLAG);
		strcat(filepath, WIPRO_ID);
		//printf("Clear: %s\n", filepath);
		updateFileEthernet(filepath);
     196:	95 e0       	ldi	r25, 0x05	; 5
     198:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <updateFileEthernet>
     19c:	36 c0       	rjmp	.+108    	; 0x20a <clearFlags+0xda>
	}
	else if(Flags[WIFI])
     19e:	80 91 1f 06 	lds	r24, 0x061F
     1a2:	88 23       	and	r24, r24
     1a4:	91 f1       	breq	.+100    	; 0x20a <clearFlags+0xda>
	{
		strcpy(filepath, HTTP_GET);
     1a6:	ca eb       	ldi	r28, 0xBA	; 186
     1a8:	d5 e0       	ldi	r29, 0x05	; 5
     1aa:	8a e0       	ldi	r24, 0x0A	; 10
     1ac:	e0 e5       	ldi	r30, 0x50	; 80
     1ae:	f2 e0       	ldi	r31, 0x02	; 2
     1b0:	de 01       	movw	r26, r28
     1b2:	01 90       	ld	r0, Z+
     1b4:	0d 92       	st	X+, r0
     1b6:	8a 95       	dec	r24
     1b8:	e1 f7       	brne	.-8      	; 0x1b2 <clearFlags+0x82>
		strcat(filepath, URL); 
     1ba:	de 01       	movw	r26, r28
     1bc:	0d 90       	ld	r0, X+
     1be:	00 20       	and	r0, r0
     1c0:	e9 f7       	brne	.-6      	; 0x1bc <clearFlags+0x8c>
     1c2:	11 97       	sbiw	r26, 0x01	; 1
     1c4:	85 e1       	ldi	r24, 0x15	; 21
     1c6:	e6 e1       	ldi	r30, 0x16	; 22
     1c8:	f2 e0       	ldi	r31, 0x02	; 2
     1ca:	01 90       	ld	r0, Z+
     1cc:	0d 92       	st	X+, r0
     1ce:	8a 95       	dec	r24
     1d0:	e1 f7       	brne	.-8      	; 0x1ca <clearFlags+0x9a>
		strcat(filepath, CLEAR_FLAG);
     1d2:	de 01       	movw	r26, r28
     1d4:	0d 90       	ld	r0, X+
     1d6:	00 20       	and	r0, r0
     1d8:	e9 f7       	brne	.-6      	; 0x1d4 <clearFlags+0xa4>
     1da:	11 97       	sbiw	r26, 0x01	; 1
     1dc:	82 e1       	ldi	r24, 0x12	; 18
     1de:	eb e2       	ldi	r30, 0x2B	; 43
     1e0:	f2 e0       	ldi	r31, 0x02	; 2
     1e2:	01 90       	ld	r0, Z+
     1e4:	0d 92       	st	X+, r0
     1e6:	8a 95       	dec	r24
     1e8:	e1 f7       	brne	.-8      	; 0x1e2 <clearFlags+0xb2>
		strcat(filepath, WIPRO_ID);
     1ea:	09 90       	ld	r0, Y+
     1ec:	00 20       	and	r0, r0
     1ee:	e9 f7       	brne	.-6      	; 0x1ea <clearFlags+0xba>
     1f0:	de 01       	movw	r26, r28
     1f2:	11 97       	sbiw	r26, 0x01	; 1
     1f4:	83 e1       	ldi	r24, 0x13	; 19
     1f6:	ed e3       	ldi	r30, 0x3D	; 61
     1f8:	f2 e0       	ldi	r31, 0x02	; 2
     1fa:	01 90       	ld	r0, Z+
     1fc:	0d 92       	st	X+, r0
     1fe:	8a 95       	dec	r24
     200:	e1 f7       	brne	.-8      	; 0x1fa <clearFlags+0xca>
		updateFileWifi(filepath);	
     202:	8a eb       	ldi	r24, 0xBA	; 186
     204:	95 e0       	ldi	r25, 0x05	; 5
     206:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <updateFileWifi>
	}
	
	memset(filepath, 0x00, 100);
     20a:	84 e6       	ldi	r24, 0x64	; 100
     20c:	ea eb       	ldi	r30, 0xBA	; 186
     20e:	f5 e0       	ldi	r31, 0x05	; 5
     210:	df 01       	movw	r26, r30
     212:	1d 92       	st	X+, r1
     214:	8a 95       	dec	r24
     216:	e9 f7       	brne	.-6      	; 0x212 <clearFlags+0xe2>
	return 1; 
}
     218:	81 e0       	ldi	r24, 0x01	; 1
     21a:	90 e0       	ldi	r25, 0x00	; 0
     21c:	df 91       	pop	r29
     21e:	cf 91       	pop	r28
     220:	08 95       	ret

00000222 <getHexFile>:
	memset(filepath, 0x00, 100);
	printf("Sent!");
}

int getHexFile()
{
     222:	0f 93       	push	r16
     224:	1f 93       	push	r17
	Flags[WIFI] = 1; 
     226:	81 e0       	ldi	r24, 0x01	; 1
     228:	80 93 1f 06 	sts	0x061F, r24
	if(Flags[WIFI])
	{
		strcpy(filepath, URL);
     22c:	85 e1       	ldi	r24, 0x15	; 21
     22e:	e6 e1       	ldi	r30, 0x16	; 22
     230:	f2 e0       	ldi	r31, 0x02	; 2
     232:	aa eb       	ldi	r26, 0xBA	; 186
     234:	b5 e0       	ldi	r27, 0x05	; 5
     236:	01 90       	ld	r0, Z+
     238:	0d 92       	st	X+, r0
     23a:	8a 95       	dec	r24
     23c:	e1 f7       	brne	.-8      	; 0x236 <getHexFile+0x14>
		strcat(filepath, HEX_FILE);
     23e:	aa eb       	ldi	r26, 0xBA	; 186
     240:	b5 e0       	ldi	r27, 0x05	; 5
     242:	0d 90       	ld	r0, X+
     244:	00 20       	and	r0, r0
     246:	e9 f7       	brne	.-6      	; 0x242 <getHexFile+0x20>
     248:	11 97       	sbiw	r26, 0x01	; 1
     24a:	84 e2       	ldi	r24, 0x24	; 36
     24c:	e8 e9       	ldi	r30, 0x98	; 152
     24e:	f2 e0       	ldi	r31, 0x02	; 2
     250:	01 90       	ld	r0, Z+
     252:	0d 92       	st	X+, r0
     254:	8a 95       	dec	r24
     256:	e1 f7       	brne	.-8      	; 0x250 <getHexFile+0x2e>
		//setTestPrint(1);
		printf("Compress Flag Set!");
     258:	8c eb       	ldi	r24, 0xBC	; 188
     25a:	92 e0       	ldi	r25, 0x02	; 2
     25c:	9f 93       	push	r25
     25e:	8f 93       	push	r24
     260:	0e 94 9e 09 	call	0x133c	; 0x133c <printf>
		setCompressFlag(1);
     264:	81 e0       	ldi	r24, 0x01	; 1
     266:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <setCompressFlag>
		getFileWifi(filepath, 1, HEX_FILE_ADDRESS, 1);
     26a:	01 e0       	ldi	r16, 0x01	; 1
     26c:	10 e0       	ldi	r17, 0x00	; 0
     26e:	20 e0       	ldi	r18, 0x00	; 0
     270:	30 e0       	ldi	r19, 0x00	; 0
     272:	a9 01       	movw	r20, r18
     274:	61 e0       	ldi	r22, 0x01	; 1
     276:	70 e0       	ldi	r23, 0x00	; 0
     278:	8a eb       	ldi	r24, 0xBA	; 186
     27a:	95 e0       	ldi	r25, 0x05	; 5
     27c:	0e 94 5b 05 	call	0xab6	; 0xab6 <getFileWifi>
		compressFile(getTransmissionLength()); 
     280:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <getTransmissionLength>
     284:	0e 94 df 08 	call	0x11be	; 0x11be <compressFile>
		//setCompressFlag(0); 
		RAMPrint(HEX_FILE_ADDRESS, 1045);
     288:	45 e1       	ldi	r20, 0x15	; 21
     28a:	54 e0       	ldi	r21, 0x04	; 4
     28c:	60 e0       	ldi	r22, 0x00	; 0
     28e:	70 e0       	ldi	r23, 0x00	; 0
     290:	cb 01       	movw	r24, r22
     292:	0e 94 be 04 	call	0x97c	; 0x97c <RAMPrint>
		//printf("Hex File Downloaded!\n");
	}
	
	return 1; 
     296:	0f 90       	pop	r0
     298:	0f 90       	pop	r0
}
     29a:	81 e0       	ldi	r24, 0x01	; 1
     29c:	90 e0       	ldi	r25, 0x00	; 0
     29e:	1f 91       	pop	r17
     2a0:	0f 91       	pop	r16
     2a2:	08 95       	ret

000002a4 <getFlagStatus>:

int getFlagStatus()
{
     2a4:	0f 93       	push	r16
     2a6:	1f 93       	push	r17
     2a8:	cf 93       	push	r28
     2aa:	df 93       	push	r29
	//Testing 
	TIMSK1 &= ~(1 << TOIE1);
     2ac:	ef e6       	ldi	r30, 0x6F	; 111
     2ae:	f0 e0       	ldi	r31, 0x00	; 0
     2b0:	80 81       	ld	r24, Z
     2b2:	8e 7f       	andi	r24, 0xFE	; 254
     2b4:	80 83       	st	Z, r24
	Flags[ETHERNET] = 0; 
     2b6:	10 92 1e 06 	sts	0x061E, r1
	Flags[WIFI] = 1; 
     2ba:	81 e0       	ldi	r24, 0x01	; 1
     2bc:	80 93 1f 06 	sts	0x061F, r24
		Flags[NETWORK_SCAN] = (RAMReadByte(STATUS_FLAG_ADDRESS + 1) & 0x0F);
		Flags[NETWORK_CONNECT] = (RAMReadByte(STATUS_FLAG_ADDRESS + 2) & 0x0F); 
		//printf("Flag Status: %s\n", flags);  
	}
	else if(Flags[WIFI]){
		strcpy(filepath, URL);
     2c0:	ca eb       	ldi	r28, 0xBA	; 186
     2c2:	d5 e0       	ldi	r29, 0x05	; 5
     2c4:	85 e1       	ldi	r24, 0x15	; 21
     2c6:	e6 e1       	ldi	r30, 0x16	; 22
     2c8:	f2 e0       	ldi	r31, 0x02	; 2
     2ca:	de 01       	movw	r26, r28
     2cc:	01 90       	ld	r0, Z+
     2ce:	0d 92       	st	X+, r0
     2d0:	8a 95       	dec	r24
     2d2:	e1 f7       	brne	.-8      	; 0x2cc <getFlagStatus+0x28>
		strcat(filepath, FLAG_FILE); 
     2d4:	de 01       	movw	r26, r28
     2d6:	0d 90       	ld	r0, X+
     2d8:	00 20       	and	r0, r0
     2da:	e9 f7       	brne	.-6      	; 0x2d6 <getFlagStatus+0x32>
     2dc:	11 97       	sbiw	r26, 0x01	; 1
     2de:	85 e2       	ldi	r24, 0x25	; 37
     2e0:	ef ec       	ldi	r30, 0xCF	; 207
     2e2:	f2 e0       	ldi	r31, 0x02	; 2
     2e4:	01 90       	ld	r0, Z+
     2e6:	0d 92       	st	X+, r0
     2e8:	8a 95       	dec	r24
     2ea:	e1 f7       	brne	.-8      	; 0x2e4 <getFlagStatus+0x40>
		//setTestPrint(1);
		getFileWifi(filepath, 1, STATUS_FLAG_ADDRESS, 0); 
     2ec:	00 e0       	ldi	r16, 0x00	; 0
     2ee:	10 e0       	ldi	r17, 0x00	; 0
     2f0:	20 e0       	ldi	r18, 0x00	; 0
     2f2:	30 e3       	ldi	r19, 0x30	; 48
     2f4:	40 e0       	ldi	r20, 0x00	; 0
     2f6:	50 e0       	ldi	r21, 0x00	; 0
     2f8:	61 e0       	ldi	r22, 0x01	; 1
     2fa:	70 e0       	ldi	r23, 0x00	; 0
     2fc:	ce 01       	movw	r24, r28
     2fe:	0e 94 5b 05 	call	0xab6	; 0xab6 <getFileWifi>
		printf("Ram Print: ");
     302:	84 ef       	ldi	r24, 0xF4	; 244
     304:	92 e0       	ldi	r25, 0x02	; 2
     306:	9f 93       	push	r25
     308:	8f 93       	push	r24
     30a:	0e 94 9e 09 	call	0x133c	; 0x133c <printf>
		RAMPrint(STATUS_FLAG_ADDRESS, 3);
     30e:	43 e0       	ldi	r20, 0x03	; 3
     310:	50 e0       	ldi	r21, 0x00	; 0
     312:	60 e0       	ldi	r22, 0x00	; 0
     314:	70 e3       	ldi	r23, 0x30	; 48
     316:	80 e0       	ldi	r24, 0x00	; 0
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	0e 94 be 04 	call	0x97c	; 0x97c <RAMPrint>
		printf("\n");
     31e:	8a e0       	ldi	r24, 0x0A	; 10
     320:	90 e0       	ldi	r25, 0x00	; 0
     322:	0e 94 b2 09 	call	0x1364	; 0x1364 <putchar>
		Flags[PROGRAM] = (RAMReadByte(STATUS_FLAG_ADDRESS) & 0x0F);
     326:	60 e0       	ldi	r22, 0x00	; 0
     328:	70 e3       	ldi	r23, 0x30	; 48
     32a:	80 e0       	ldi	r24, 0x00	; 0
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	0e 94 2b 05 	call	0xa56	; 0xa56 <RAMReadByte>
     332:	00 e2       	ldi	r16, 0x20	; 32
     334:	16 e0       	ldi	r17, 0x06	; 6
     336:	8f 70       	andi	r24, 0x0F	; 15
     338:	f8 01       	movw	r30, r16
     33a:	80 83       	st	Z, r24
		Flags[NETWORK_SCAN] = (RAMReadByte(STATUS_FLAG_ADDRESS + 1) & 0x0F);
     33c:	61 e0       	ldi	r22, 0x01	; 1
     33e:	70 e3       	ldi	r23, 0x30	; 48
     340:	80 e0       	ldi	r24, 0x00	; 0
     342:	90 e0       	ldi	r25, 0x00	; 0
     344:	0e 94 2b 05 	call	0xa56	; 0xa56 <RAMReadByte>
     348:	8f 70       	andi	r24, 0x0F	; 15
     34a:	80 93 21 06 	sts	0x0621, r24
		Flags[NETWORK_CONNECT] = (RAMReadByte(STATUS_FLAG_ADDRESS + 2) & 0x0F);
     34e:	62 e0       	ldi	r22, 0x02	; 2
     350:	70 e3       	ldi	r23, 0x30	; 48
     352:	80 e0       	ldi	r24, 0x00	; 0
     354:	90 e0       	ldi	r25, 0x00	; 0
     356:	0e 94 2b 05 	call	0xa56	; 0xa56 <RAMReadByte>
     35a:	8f 70       	andi	r24, 0x0F	; 15
     35c:	80 93 22 06 	sts	0x0622, r24
		
	}
	memset(filepath, 0x00, 100); 
     360:	84 e6       	ldi	r24, 0x64	; 100
     362:	fe 01       	movw	r30, r28
     364:	11 92       	st	Z+, r1
     366:	8a 95       	dec	r24
     368:	e9 f7       	brne	.-6      	; 0x364 <getFlagStatus+0xc0>
	//Perform actions based on flags 
	if(Flags[PROGRAM] == 0x01)
     36a:	0f 90       	pop	r0
     36c:	0f 90       	pop	r0
     36e:	f8 01       	movw	r30, r16
     370:	80 81       	ld	r24, Z
     372:	81 30       	cpi	r24, 0x01	; 1
     374:	11 f4       	brne	.+4      	; 0x37a <getFlagStatus+0xd6>
		//printf("Program!\n");
		//PORTD &= ~(1<<CTS);
		//wifiDriverInit(); 
		//PORTD |= (1<<CTS); 
		//_delay_ms(2000); 
		getHexFile();
     376:	0e 94 11 01 	call	0x222	; 0x222 <getHexFile>
		//printf("Network Connect!\n");
		//networkConnect("Wi-Pro", "brightshoe902"); 
		//getFileEthernet()
	}
	//_delay_ms(500);
	clearFlags(); 
     37a:	0e 94 98 00 	call	0x130	; 0x130 <clearFlags>
	TIMSK1 |= (1 << TOIE1);
     37e:	ef e6       	ldi	r30, 0x6F	; 111
     380:	f0 e0       	ldi	r31, 0x00	; 0
     382:	80 81       	ld	r24, Z
     384:	81 60       	ori	r24, 0x01	; 1
     386:	80 83       	st	Z, r24
	return 1; 
}
     388:	81 e0       	ldi	r24, 0x01	; 1
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	df 91       	pop	r29
     38e:	cf 91       	pop	r28
     390:	1f 91       	pop	r17
     392:	0f 91       	pop	r16
     394:	08 95       	ret

00000396 <__vector_20>:

//Timer overflow vector for polling 
ISR(TIMER1_OVF_vect)
{
     396:	1f 92       	push	r1
     398:	0f 92       	push	r0
     39a:	0f b6       	in	r0, 0x3f	; 63
     39c:	0f 92       	push	r0
     39e:	11 24       	eor	r1, r1
     3a0:	2f 93       	push	r18
     3a2:	3f 93       	push	r19
     3a4:	4f 93       	push	r20
     3a6:	5f 93       	push	r21
     3a8:	6f 93       	push	r22
     3aa:	7f 93       	push	r23
     3ac:	8f 93       	push	r24
     3ae:	9f 93       	push	r25
     3b0:	af 93       	push	r26
     3b2:	bf 93       	push	r27
     3b4:	ef 93       	push	r30
     3b6:	ff 93       	push	r31
	cli(); 
     3b8:	f8 94       	cli
	printf("Flag Status\n");
     3ba:	80 e0       	ldi	r24, 0x00	; 0
     3bc:	93 e0       	ldi	r25, 0x03	; 3
     3be:	0e 94 b9 09 	call	0x1372	; 0x1372 <puts>
	getFlagStatus(); 
     3c2:	0e 94 52 01 	call	0x2a4	; 0x2a4 <getFlagStatus>
	TCNT1L = 0x00;
     3c6:	10 92 84 00 	sts	0x0084, r1
	TCNT1H = 0x00;
     3ca:	10 92 85 00 	sts	0x0085, r1
	sei();  
     3ce:	78 94       	sei
}
     3d0:	ff 91       	pop	r31
     3d2:	ef 91       	pop	r30
     3d4:	bf 91       	pop	r27
     3d6:	af 91       	pop	r26
     3d8:	9f 91       	pop	r25
     3da:	8f 91       	pop	r24
     3dc:	7f 91       	pop	r23
     3de:	6f 91       	pop	r22
     3e0:	5f 91       	pop	r21
     3e2:	4f 91       	pop	r20
     3e4:	3f 91       	pop	r19
     3e6:	2f 91       	pop	r18
     3e8:	0f 90       	pop	r0
     3ea:	0f be       	out	0x3f, r0	; 63
     3ec:	0f 90       	pop	r0
     3ee:	1f 90       	pop	r1
     3f0:	18 95       	reti

000003f2 <updateFileEthernet>:
	memset(httpBuff, 0x00, 100); 
	return receiveData; 
}

void updateFileEthernet(char* filepath)
{
     3f2:	cf 93       	push	r28
     3f4:	df 93       	push	r29
	//strncpy(httpBuff, "GET ", 4); 
	strcpy(httpBuff, filepath); 
     3f6:	bc 01       	movw	r22, r24
     3f8:	83 e2       	ldi	r24, 0x23	; 35
     3fa:	96 e0       	ldi	r25, 0x06	; 6
     3fc:	0e 94 65 09 	call	0x12ca	; 0x12ca <strcpy>
	strncat(httpBuff, " HTTP/1.1 \nHost: www.wi-pro.us \n\n", 40); 
     400:	c3 e2       	ldi	r28, 0x23	; 35
     402:	d6 e0       	ldi	r29, 0x06	; 6
     404:	de 01       	movw	r26, r28
     406:	0d 90       	ld	r0, X+
     408:	00 20       	and	r0, r0
     40a:	e9 f7       	brne	.-6      	; 0x406 <updateFileEthernet+0x14>
     40c:	11 97       	sbiw	r26, 0x01	; 1
     40e:	82 e2       	ldi	r24, 0x22	; 34
     410:	ec e0       	ldi	r30, 0x0C	; 12
     412:	f3 e0       	ldi	r31, 0x03	; 3
     414:	01 90       	ld	r0, Z+
     416:	0d 92       	st	X+, r0
     418:	8a 95       	dec	r24
     41a:	e1 f7       	brne	.-8      	; 0x414 <updateFileEthernet+0x22>
	printf("%s", httpBuff); 
     41c:	df 93       	push	r29
     41e:	cf 93       	push	r28
     420:	8f e8       	ldi	r24, 0x8F	; 143
     422:	92 e0       	ldi	r25, 0x02	; 2
     424:	9f 93       	push	r25
     426:	8f 93       	push	r24
     428:	0e 94 9e 09 	call	0x133c	; 0x133c <printf>
	SendData(httpBuff, strlen(httpBuff), 0);
     42c:	fe 01       	movw	r30, r28
     42e:	01 90       	ld	r0, Z+
     430:	00 20       	and	r0, r0
     432:	e9 f7       	brne	.-6      	; 0x42e <updateFileEthernet+0x3c>
     434:	31 97       	sbiw	r30, 0x01	; 1
     436:	bf 01       	movw	r22, r30
     438:	63 52       	subi	r22, 0x23	; 35
     43a:	76 40       	sbci	r23, 0x06	; 6
     43c:	40 e0       	ldi	r20, 0x00	; 0
     43e:	50 e0       	ldi	r21, 0x00	; 0
     440:	ce 01       	movw	r24, r28
     442:	0e 94 23 03 	call	0x646	; 0x646 <SendData>
	memset(httpBuff, 0x00, 100); 
     446:	84 e6       	ldi	r24, 0x64	; 100
     448:	fe 01       	movw	r30, r28
     44a:	11 92       	st	Z+, r1
     44c:	8a 95       	dec	r24
     44e:	e9 f7       	brne	.-6      	; 0x44a <updateFileEthernet+0x58>
     450:	0f 90       	pop	r0
     452:	0f 90       	pop	r0
     454:	0f 90       	pop	r0
     456:	0f 90       	pop	r0
}
     458:	df 91       	pop	r29
     45a:	cf 91       	pop	r28
     45c:	08 95       	ret

0000045e <SPI_EthernetWrite>:
//}

void SPI_EthernetWrite(unsigned int addr,unsigned char data)
{
	// Activate the CS pin
	CS_PORT &= ~(1<<ETH_CS);
     45e:	10 98       	cbi	0x02, 0	; 2
	// Start Wiznet W5100 Write OpCode transmission
	SPDR = WIZNET_WRITE_OPCODE;
     460:	20 ef       	ldi	r18, 0xF0	; 240
     462:	2e bd       	out	0x2e, r18	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     464:	0d b4       	in	r0, 0x2d	; 45
     466:	07 fe       	sbrs	r0, 7
     468:	fd cf       	rjmp	.-6      	; 0x464 <SPI_EthernetWrite+0x6>
	// Start Wiznet W5100 Address High Bytes transmission
	SPDR = (addr & 0xFF00) >> 8;
     46a:	9e bd       	out	0x2e, r25	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     46c:	0d b4       	in	r0, 0x2d	; 45
     46e:	07 fe       	sbrs	r0, 7
     470:	fd cf       	rjmp	.-6      	; 0x46c <SPI_EthernetWrite+0xe>
	// Start Wiznet W5100 Address Low Bytes transmission
	SPDR = addr & 0x00FF;
     472:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     474:	0d b4       	in	r0, 0x2d	; 45
     476:	07 fe       	sbrs	r0, 7
     478:	fd cf       	rjmp	.-6      	; 0x474 <SPI_EthernetWrite+0x16>

	// Start Data transmission
	SPDR = data;
     47a:	6e bd       	out	0x2e, r22	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     47c:	0d b4       	in	r0, 0x2d	; 45
     47e:	07 fe       	sbrs	r0, 7
     480:	fd cf       	rjmp	.-6      	; 0x47c <SPI_EthernetWrite+0x1e>
	// CS pin is not active
	CS_PORT |= (1<<ETH_CS);
     482:	10 9a       	sbi	0x02, 0	; 2
     484:	08 95       	ret

00000486 <SPI_EthernetRead>:
}

unsigned char SPI_EthernetRead(unsigned int addr)
{
	// Activate the CS pin
	CS_PORT &= ~(1<<ETH_CS);
     486:	10 98       	cbi	0x02, 0	; 2
	// Start Wiznet W5100 Read OpCode transmission
	SPDR = WIZNET_READ_OPCODE;
     488:	2f e0       	ldi	r18, 0x0F	; 15
     48a:	2e bd       	out	0x2e, r18	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     48c:	0d b4       	in	r0, 0x2d	; 45
     48e:	07 fe       	sbrs	r0, 7
     490:	fd cf       	rjmp	.-6      	; 0x48c <SPI_EthernetRead+0x6>
	// Start Wiznet W5100 Address High Bytes transmission
	SPDR = (addr & 0xFF00) >> 8;
     492:	9e bd       	out	0x2e, r25	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     494:	0d b4       	in	r0, 0x2d	; 45
     496:	07 fe       	sbrs	r0, 7
     498:	fd cf       	rjmp	.-6      	; 0x494 <SPI_EthernetRead+0xe>
	// Start Wiznet W5100 Address Low Bytes transmission
	SPDR = addr & 0x00FF;
     49a:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     49c:	0d b4       	in	r0, 0x2d	; 45
     49e:	07 fe       	sbrs	r0, 7
     4a0:	fd cf       	rjmp	.-6      	; 0x49c <SPI_EthernetRead+0x16>

	// Send Dummy transmission for reading the data
	SPDR = 0x00;
     4a2:	1e bc       	out	0x2e, r1	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     4a4:	0d b4       	in	r0, 0x2d	; 45
     4a6:	07 fe       	sbrs	r0, 7
     4a8:	fd cf       	rjmp	.-6      	; 0x4a4 <SPI_EthernetRead+0x1e>

	// CS pin is not active
	CS_PORT |= (1<<ETH_CS);
     4aa:	10 9a       	sbi	0x02, 0	; 2
	return(SPDR);
     4ac:	8e b5       	in	r24, 0x2e	; 46
}
     4ae:	08 95       	ret

000004b0 <Server_Connect>:
	//printf("Done Wiznet W5100 Initialized!\n");
	//Memory_Init(); 
}

int Server_Connect(uint8_t socketMode, uint8_t *server_ip_addr, uint8_t *server_port, uint8_t *source_port)
{
     4b0:	bf 92       	push	r11
     4b2:	cf 92       	push	r12
     4b4:	df 92       	push	r13
     4b6:	ef 92       	push	r14
     4b8:	ff 92       	push	r15
     4ba:	0f 93       	push	r16
     4bc:	1f 93       	push	r17
     4be:	cf 93       	push	r28
     4c0:	df 93       	push	r29
     4c2:	b8 2e       	mov	r11, r24
     4c4:	7b 01       	movw	r14, r22
     4c6:	6a 01       	movw	r12, r20
     4c8:	89 01       	movw	r16, r18
	do 
	{
		printf("SPI SR Status: %d\n", SPI_EthernetRead(S0_SR));
     4ca:	c8 e3       	ldi	r28, 0x38	; 56
     4cc:	d3 e0       	ldi	r29, 0x03	; 3
     4ce:	83 e0       	ldi	r24, 0x03	; 3
     4d0:	94 e0       	ldi	r25, 0x04	; 4
     4d2:	0e 94 43 02 	call	0x486	; 0x486 <SPI_EthernetRead>
     4d6:	1f 92       	push	r1
     4d8:	8f 93       	push	r24
     4da:	df 93       	push	r29
     4dc:	cf 93       	push	r28
     4de:	0e 94 9e 09 	call	0x133c	; 0x133c <printf>
		SPI_EthernetWrite(S0_CR, CLOSE);
     4e2:	60 e1       	ldi	r22, 0x10	; 16
     4e4:	81 e0       	ldi	r24, 0x01	; 1
     4e6:	94 e0       	ldi	r25, 0x04	; 4
     4e8:	0e 94 2f 02 	call	0x45e	; 0x45e <SPI_EthernetWrite>
		//SPI_Write(S0_MR, TCP_MODE);
		SPI_EthernetWrite(S0_MR, socketMode);
     4ec:	6b 2d       	mov	r22, r11
     4ee:	80 e0       	ldi	r24, 0x00	; 0
     4f0:	94 e0       	ldi	r25, 0x04	; 4
     4f2:	0e 94 2f 02 	call	0x45e	; 0x45e <SPI_EthernetWrite>
		//printf("Setting Source Port on Socket 0 %d%d\n",source_port[0],source_port[1]);
		SPI_EthernetWrite(S0_SPORT + 0, source_port[0]);
     4f6:	f8 01       	movw	r30, r16
     4f8:	60 81       	ld	r22, Z
     4fa:	84 e0       	ldi	r24, 0x04	; 4
     4fc:	94 e0       	ldi	r25, 0x04	; 4
     4fe:	0e 94 2f 02 	call	0x45e	; 0x45e <SPI_EthernetWrite>
		SPI_EthernetWrite(S0_SPORT + 1, source_port[1]);
     502:	f8 01       	movw	r30, r16
     504:	61 81       	ldd	r22, Z+1	; 0x01
     506:	85 e0       	ldi	r24, 0x05	; 5
     508:	94 e0       	ldi	r25, 0x04	; 4
     50a:	0e 94 2f 02 	call	0x45e	; 0x45e <SPI_EthernetWrite>
		//printf("Reading Source Port on Socket 0 %d%d\n\n",SPI_EthernetRead(S0_SPORT),SPI_EthernetRead(S0_SPORT + 1));
		
		//printf("Setting Socket 0 to Open\n\n");
		SPI_EthernetWrite(S0_CR, OPEN);
     50e:	61 e0       	ldi	r22, 0x01	; 1
     510:	81 e0       	ldi	r24, 0x01	; 1
     512:	94 e0       	ldi	r25, 0x04	; 4
     514:	0e 94 2f 02 	call	0x45e	; 0x45e <SPI_EthernetWrite>
		//printf("SPI SR Status: %d\n", SPI_EthernetRead(S0_SR));
		
	} while (SPI_EthernetRead(S0_SR) != SOCK_INIT);
     518:	83 e0       	ldi	r24, 0x03	; 3
     51a:	94 e0       	ldi	r25, 0x04	; 4
     51c:	0e 94 43 02 	call	0x486	; 0x486 <SPI_EthernetRead>
     520:	0f 90       	pop	r0
     522:	0f 90       	pop	r0
     524:	0f 90       	pop	r0
     526:	0f 90       	pop	r0
     528:	83 31       	cpi	r24, 0x13	; 19
     52a:	89 f6       	brne	.-94     	; 0x4ce <Server_Connect+0x1e>
	
	//Write Server IP to Socket 0 IP Register
	//printf("Setting Server IP Address %d.%d.%d.%d\n",server_ip_addr[0],server_ip_addr[1],\
	server_ip_addr[2],server_ip_addr[3]); 
	SPI_EthernetWrite(S0_DIPR + 0,server_ip_addr[0]);
     52c:	f7 01       	movw	r30, r14
     52e:	60 81       	ld	r22, Z
     530:	8c e0       	ldi	r24, 0x0C	; 12
     532:	94 e0       	ldi	r25, 0x04	; 4
     534:	0e 94 2f 02 	call	0x45e	; 0x45e <SPI_EthernetWrite>
	SPI_EthernetWrite(S0_DIPR + 1, server_ip_addr[1]);
     538:	f7 01       	movw	r30, r14
     53a:	61 81       	ldd	r22, Z+1	; 0x01
     53c:	8d e0       	ldi	r24, 0x0D	; 13
     53e:	94 e0       	ldi	r25, 0x04	; 4
     540:	0e 94 2f 02 	call	0x45e	; 0x45e <SPI_EthernetWrite>
	SPI_EthernetWrite(S0_DIPR + 2,server_ip_addr[2]);
     544:	f7 01       	movw	r30, r14
     546:	62 81       	ldd	r22, Z+2	; 0x02
     548:	8e e0       	ldi	r24, 0x0E	; 14
     54a:	94 e0       	ldi	r25, 0x04	; 4
     54c:	0e 94 2f 02 	call	0x45e	; 0x45e <SPI_EthernetWrite>
	SPI_EthernetWrite(S0_DIPR + 3, server_ip_addr[3]);
     550:	f7 01       	movw	r30, r14
     552:	63 81       	ldd	r22, Z+3	; 0x03
     554:	8f e0       	ldi	r24, 0x0F	; 15
     556:	94 e0       	ldi	r25, 0x04	; 4
     558:	0e 94 2f 02 	call	0x45e	; 0x45e <SPI_EthernetWrite>
	SPI_EthernetRead(S0_DIPR + 2),SPI_EthernetRead(S0_DIPR + 3));
	//printf("SPI SR Status: 0x%02x\n", SPI_EthernetRead(S0_SR));
	
	//Write Server Port to Socket 0 IP Register 
	//printf("Setting Server Port\n");
	SPI_EthernetWrite(S0_DPORT + 0, server_port[0]); 
     55c:	f6 01       	movw	r30, r12
     55e:	60 81       	ld	r22, Z
     560:	80 e1       	ldi	r24, 0x10	; 16
     562:	94 e0       	ldi	r25, 0x04	; 4
     564:	0e 94 2f 02 	call	0x45e	; 0x45e <SPI_EthernetWrite>
	SPI_EthernetWrite(S0_DPORT + 1, server_port[1]);
     568:	f6 01       	movw	r30, r12
     56a:	61 81       	ldd	r22, Z+1	; 0x01
     56c:	81 e1       	ldi	r24, 0x11	; 17
     56e:	94 e0       	ldi	r25, 0x04	; 4
     570:	0e 94 2f 02 	call	0x45e	; 0x45e <SPI_EthernetWrite>
	//printf("Reading S0_DPORT: %d%d\n\n",SPI_EthernetRead(S0_DPORT + 0),SPI_EthernetRead(S0_DPORT + 1)); 
	//printf("SPI SR Status: 0x%02x\n", SPI_EthernetRead(S0_SR));
	
	//Try to connect 
	SPI_EthernetWrite(S0_CR, CONNECT);
     574:	64 e0       	ldi	r22, 0x04	; 4
     576:	81 e0       	ldi	r24, 0x01	; 1
     578:	94 e0       	ldi	r25, 0x04	; 4
     57a:	0e 94 2f 02 	call	0x45e	; 0x45e <SPI_EthernetWrite>
	//while((SPI_EthernetRead(S0_IR) & 0x1F) != 0); 
	//while((SPI_EthernetRead(S0_SR) != SOCK_ESTABLISHED)); 

	//Check to see if connection has been established 
	unsigned int delayCount = 0; 
     57e:	c0 e0       	ldi	r28, 0x00	; 0
     580:	d0 e0       	ldi	r29, 0x00	; 0
	while(SPI_EthernetRead(S0_SR) != SOCK_ESTABLISHED)
	{
		_delay_us(300); 
		delayCount += 1; 
		//Every 3 seconds
		if(delayCount%10000 == 0)
     582:	00 e1       	ldi	r16, 0x10	; 16
     584:	17 e2       	ldi	r17, 0x27	; 39
	//while((SPI_EthernetRead(S0_IR) & 0x1F) != 0); 
	//while((SPI_EthernetRead(S0_SR) != SOCK_ESTABLISHED)); 

	//Check to see if connection has been established 
	unsigned int delayCount = 0; 
	while(SPI_EthernetRead(S0_SR) != SOCK_ESTABLISHED)
     586:	36 c0       	rjmp	.+108    	; 0x5f4 <Server_Connect+0x144>
     588:	87 e5       	ldi	r24, 0x57	; 87
     58a:	92 e0       	ldi	r25, 0x02	; 2
     58c:	01 97       	sbiw	r24, 0x01	; 1
     58e:	f1 f7       	brne	.-4      	; 0x58c <Server_Connect+0xdc>
     590:	00 c0       	rjmp	.+0      	; 0x592 <Server_Connect+0xe2>
     592:	00 00       	nop
	{
		_delay_us(300); 
		delayCount += 1; 
     594:	21 96       	adiw	r28, 0x01	; 1
		//Every 3 seconds
		if(delayCount%10000 == 0)
     596:	9e 01       	movw	r18, r28
     598:	32 95       	swap	r19
     59a:	22 95       	swap	r18
     59c:	2f 70       	andi	r18, 0x0F	; 15
     59e:	23 27       	eor	r18, r19
     5a0:	3f 70       	andi	r19, 0x0F	; 15
     5a2:	23 27       	eor	r18, r19
     5a4:	a7 e4       	ldi	r26, 0x47	; 71
     5a6:	b3 e0       	ldi	r27, 0x03	; 3
     5a8:	0e 94 4b 09 	call	0x1296	; 0x1296 <__umulhisi3>
     5ac:	96 95       	lsr	r25
     5ae:	87 95       	ror	r24
     5b0:	96 95       	lsr	r25
     5b2:	87 95       	ror	r24
     5b4:	96 95       	lsr	r25
     5b6:	87 95       	ror	r24
     5b8:	80 9f       	mul	r24, r16
     5ba:	90 01       	movw	r18, r0
     5bc:	81 9f       	mul	r24, r17
     5be:	30 0d       	add	r19, r0
     5c0:	90 9f       	mul	r25, r16
     5c2:	30 0d       	add	r19, r0
     5c4:	11 24       	eor	r1, r1
     5c6:	c2 17       	cp	r28, r18
     5c8:	d3 07       	cpc	r29, r19
     5ca:	a1 f4       	brne	.+40     	; 0x5f4 <Server_Connect+0x144>
		{
			printf("Trying to Establish Connection...\n");
     5cc:	8b e4       	ldi	r24, 0x4B	; 75
     5ce:	93 e0       	ldi	r25, 0x03	; 3
     5d0:	0e 94 b9 09 	call	0x1372	; 0x1372 <puts>
			//delayCount = 0; 
			//15 seconds
			if(delayCount > 50000)
     5d4:	c1 35       	cpi	r28, 0x51	; 81
     5d6:	93 ec       	ldi	r25, 0xC3	; 195
     5d8:	d9 07       	cpc	r29, r25
     5da:	60 f0       	brcs	.+24     	; 0x5f4 <Server_Connect+0x144>
			{
				printf("Timeout, disconnecting!\n"); 
     5dc:	8d e6       	ldi	r24, 0x6D	; 109
     5de:	93 e0       	ldi	r25, 0x03	; 3
     5e0:	0e 94 b9 09 	call	0x1372	; 0x1372 <puts>
				SPI_EthernetWrite(S0_CR, CLOSE); 
     5e4:	60 e1       	ldi	r22, 0x10	; 16
     5e6:	81 e0       	ldi	r24, 0x01	; 1
     5e8:	94 e0       	ldi	r25, 0x04	; 4
     5ea:	0e 94 2f 02 	call	0x45e	; 0x45e <SPI_EthernetWrite>
				return 0; 
     5ee:	80 e0       	ldi	r24, 0x00	; 0
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	19 c0       	rjmp	.+50     	; 0x626 <Server_Connect+0x176>
	//while((SPI_EthernetRead(S0_IR) & 0x1F) != 0); 
	//while((SPI_EthernetRead(S0_SR) != SOCK_ESTABLISHED)); 

	//Check to see if connection has been established 
	unsigned int delayCount = 0; 
	while(SPI_EthernetRead(S0_SR) != SOCK_ESTABLISHED)
     5f4:	83 e0       	ldi	r24, 0x03	; 3
     5f6:	94 e0       	ldi	r25, 0x04	; 4
     5f8:	0e 94 43 02 	call	0x486	; 0x486 <SPI_EthernetRead>
     5fc:	87 31       	cpi	r24, 0x17	; 23
     5fe:	21 f6       	brne	.-120    	; 0x588 <Server_Connect+0xd8>
				return 0; 
			}
		}
	}
	
	uint8_t sr_status = SPI_EthernetRead(S0_SR);
     600:	83 e0       	ldi	r24, 0x03	; 3
     602:	94 e0       	ldi	r25, 0x04	; 4
     604:	0e 94 43 02 	call	0x486	; 0x486 <SPI_EthernetRead>
	if(sr_status == SOCK_ESTABLISHED)
     608:	87 31       	cpi	r24, 0x17	; 23
     60a:	39 f4       	brne	.+14     	; 0x61a <Server_Connect+0x16a>
	{
		//printf("SPI SR Status: 0x%02x\n", sr_status);
		printf("Connection Succeeded!\n\n");
     60c:	85 e8       	ldi	r24, 0x85	; 133
     60e:	93 e0       	ldi	r25, 0x03	; 3
     610:	0e 94 b9 09 	call	0x1372	; 0x1372 <puts>
		return 1; 
     614:	81 e0       	ldi	r24, 0x01	; 1
     616:	90 e0       	ldi	r25, 0x00	; 0
     618:	06 c0       	rjmp	.+12     	; 0x626 <Server_Connect+0x176>
	}
	//Connection Failed 
	else
	{
		//printf("SPI SR Status: 0x%02x\n", sr_status);
		printf("Could not connect. Exiting...\n\n");
     61a:	8c e9       	ldi	r24, 0x9C	; 156
     61c:	93 e0       	ldi	r25, 0x03	; 3
     61e:	0e 94 b9 09 	call	0x1372	; 0x1372 <puts>
		return 0; 
     622:	80 e0       	ldi	r24, 0x00	; 0
     624:	90 e0       	ldi	r25, 0x00	; 0
	}
}
     626:	df 91       	pop	r29
     628:	cf 91       	pop	r28
     62a:	1f 91       	pop	r17
     62c:	0f 91       	pop	r16
     62e:	ff 90       	pop	r15
     630:	ef 90       	pop	r14
     632:	df 90       	pop	r13
     634:	cf 90       	pop	r12
     636:	bf 90       	pop	r11
     638:	08 95       	ret

0000063a <SocketCommand>:
	return ((SPI_EthernetRead(S0_RX_RSR) & 0x00FF) << 8 ) + SPI_EthernetRead(S0_RX_RSR + 1);
}

void SocketCommand(uint8_t command) 
{
	SPI_EthernetWrite(S0_CR, command);
     63a:	68 2f       	mov	r22, r24
     63c:	81 e0       	ldi	r24, 0x01	; 1
     63e:	94 e0       	ldi	r25, 0x04	; 4
     640:	0e 94 2f 02 	call	0x45e	; 0x45e <SPI_EthernetWrite>
     644:	08 95       	ret

00000646 <SendData>:
	S0_RX_MASK = 0x1FFF;
	S0_RX_BASE = 0x6000;
}

int SendData(const uint8_t *buffer,uint16_t bufferLength, int externRAM)
{
     646:	4f 92       	push	r4
     648:	5f 92       	push	r5
     64a:	6f 92       	push	r6
     64c:	7f 92       	push	r7
     64e:	8f 92       	push	r8
     650:	9f 92       	push	r9
     652:	af 92       	push	r10
     654:	bf 92       	push	r11
     656:	cf 92       	push	r12
     658:	df 92       	push	r13
     65a:	ef 92       	push	r14
     65c:	ff 92       	push	r15
     65e:	0f 93       	push	r16
     660:	1f 93       	push	r17
     662:	cf 93       	push	r28
     664:	df 93       	push	r29
     666:	7c 01       	movw	r14, r24
     668:	6b 01       	movw	r12, r22
     66a:	3a 01       	movw	r6, r20
		
	uint16_t ptr,offaddr,realaddr,txsize,timeout,i,data;
	printf("SR: 0x%02x\n", SPI_EthernetRead(S0_SR));
     66c:	83 e0       	ldi	r24, 0x03	; 3
     66e:	94 e0       	ldi	r25, 0x04	; 4
     670:	0e 94 43 02 	call	0x486	; 0x486 <SPI_EthernetRead>
     674:	1f 92       	push	r1
     676:	8f 93       	push	r24
     678:	8b eb       	ldi	r24, 0xBB	; 187
     67a:	93 e0       	ldi	r25, 0x03	; 3
     67c:	9f 93       	push	r25
     67e:	8f 93       	push	r24
     680:	0e 94 9e 09 	call	0x133c	; 0x133c <printf>
	if(SPI_EthernetRead(S0_SR) != SOCK_ESTABLISHED){
     684:	83 e0       	ldi	r24, 0x03	; 3
     686:	94 e0       	ldi	r25, 0x04	; 4
     688:	0e 94 43 02 	call	0x486	; 0x486 <SPI_EthernetRead>
     68c:	0f 90       	pop	r0
     68e:	0f 90       	pop	r0
     690:	0f 90       	pop	r0
     692:	0f 90       	pop	r0
     694:	87 31       	cpi	r24, 0x17	; 23
     696:	59 f0       	breq	.+22     	; 0x6ae <SendData+0x68>
		while(!Server_Connect(TCP_MODE, gl_server_ip_addr, gl_server_port, gl_source_port));
     698:	20 e0       	ldi	r18, 0x00	; 0
     69a:	32 e0       	ldi	r19, 0x02	; 2
     69c:	42 e0       	ldi	r20, 0x02	; 2
     69e:	52 e0       	ldi	r21, 0x02	; 2
     6a0:	64 e0       	ldi	r22, 0x04	; 4
     6a2:	72 e0       	ldi	r23, 0x02	; 2
     6a4:	81 e0       	ldi	r24, 0x01	; 1
     6a6:	0e 94 58 02 	call	0x4b0	; 0x4b0 <Server_Connect>
     6aa:	89 2b       	or	r24, r25
     6ac:	a9 f3       	breq	.-22     	; 0x698 <SendData+0x52>
	}
	//#if _DEBUG_MODE
	//printf("Send Size: %d\n",bufferLength);
	//#endif
	// Make sure the TX Free Size Register is available
	txsize = SPI_EthernetRead(S0_TX_FSR);
     6ae:	80 e2       	ldi	r24, 0x20	; 32
     6b0:	94 e0       	ldi	r25, 0x04	; 4
     6b2:	0e 94 43 02 	call	0x486	; 0x486 <SPI_EthernetRead>
     6b6:	c8 2f       	mov	r28, r24
     6b8:	d0 e0       	ldi	r29, 0x00	; 0
	txsize = (((txsize & 0x00FF) << 8 ) + SPI_EthernetRead(S0_TX_FSR + 1));
     6ba:	dc 2f       	mov	r29, r28
     6bc:	cc 27       	eor	r28, r28
     6be:	81 e2       	ldi	r24, 0x21	; 33
     6c0:	94 e0       	ldi	r25, 0x04	; 4
     6c2:	0e 94 43 02 	call	0x486	; 0x486 <SPI_EthernetRead>
     6c6:	c8 0f       	add	r28, r24
     6c8:	d1 1d       	adc	r29, r1
	//#if _DEBUG_MODE
	//printf("TX Free Size: %d\n",txsize);
	//#endif
	timeout = 0;
	//Writing our buffer to the transmit buffer
	while (txsize < bufferLength) {
     6ca:	cc 15       	cp	r28, r12
     6cc:	dd 05       	cpc	r29, r13
     6ce:	08 f4       	brcc	.+2      	; 0x6d2 <SendData+0x8c>
     6d0:	a0 c0       	rjmp	.+320    	; 0x812 <SendData+0x1cc>
     6d2:	30 c0       	rjmp	.+96     	; 0x734 <SendData+0xee>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6d4:	8f ec       	ldi	r24, 0xCF	; 207
     6d6:	97 e0       	ldi	r25, 0x07	; 7
     6d8:	01 97       	sbiw	r24, 0x01	; 1
     6da:	f1 f7       	brne	.-4      	; 0x6d8 <SendData+0x92>
     6dc:	00 c0       	rjmp	.+0      	; 0x6de <SendData+0x98>
     6de:	00 00       	nop
		_delay_ms(1);
		txsize = SPI_EthernetRead(S0_TX_FSR);
     6e0:	80 e2       	ldi	r24, 0x20	; 32
     6e2:	94 e0       	ldi	r25, 0x04	; 4
     6e4:	0e 94 43 02 	call	0x486	; 0x486 <SPI_EthernetRead>
     6e8:	c8 2f       	mov	r28, r24
     6ea:	d0 e0       	ldi	r29, 0x00	; 0
		txsize = (((txsize & 0x00FF) << 8 ) + SPI_EthernetRead(S0_TX_FSR + 1));
     6ec:	dc 2f       	mov	r29, r28
     6ee:	cc 27       	eor	r28, r28
     6f0:	81 e2       	ldi	r24, 0x21	; 33
     6f2:	94 e0       	ldi	r25, 0x04	; 4
     6f4:	0e 94 43 02 	call	0x486	; 0x486 <SPI_EthernetRead>
     6f8:	c8 0f       	add	r28, r24
     6fa:	d1 1d       	adc	r29, r1
		printf("TX Size: %d", txsize);
     6fc:	df 93       	push	r29
     6fe:	cf 93       	push	r28
     700:	9f 92       	push	r9
     702:	8f 92       	push	r8
     704:	0e 94 9e 09 	call	0x133c	; 0x133c <printf>
     708:	01 50       	subi	r16, 0x01	; 1
     70a:	11 09       	sbc	r17, r1
		// Timeout for approx 1000 ms
		if (timeout++ > 1000) {
     70c:	0f 90       	pop	r0
     70e:	0f 90       	pop	r0
     710:	0f 90       	pop	r0
     712:	0f 90       	pop	r0
     714:	01 15       	cp	r16, r1
     716:	11 05       	cpc	r17, r1
     718:	51 f4       	brne	.+20     	; 0x72e <SendData+0xe8>
			//#if _DEBUG_MODE
			//printf("TX Free Size Error!\n");
			//#endif
			// Disconnect the connection
			SocketCommand(DISCON);
     71a:	88 e0       	ldi	r24, 0x08	; 8
     71c:	0e 94 1d 03 	call	0x63a	; 0x63a <SocketCommand>
			while(SPI_EthernetRead(S0_CR));
     720:	81 e0       	ldi	r24, 0x01	; 1
     722:	94 e0       	ldi	r25, 0x04	; 4
     724:	0e 94 43 02 	call	0x486	; 0x486 <SPI_EthernetRead>
     728:	81 11       	cpse	r24, r1
     72a:	fa cf       	rjmp	.-12     	; 0x720 <SendData+0xda>
     72c:	6c c0       	rjmp	.+216    	; 0x806 <SendData+0x1c0>
	//#if _DEBUG_MODE
	//printf("TX Free Size: %d\n",txsize);
	//#endif
	timeout = 0;
	//Writing our buffer to the transmit buffer
	while (txsize < bufferLength) {
     72e:	cc 15       	cp	r28, r12
     730:	dd 05       	cpc	r29, r13
     732:	80 f2       	brcs	.-96     	; 0x6d4 <SendData+0x8e>
			return 0;
		}
	}

	// Read the Tx Write Pointer
	ptr = SPI_EthernetRead(S0_TX_WR);
     734:	84 e2       	ldi	r24, 0x24	; 36
     736:	94 e0       	ldi	r25, 0x04	; 4
     738:	0e 94 43 02 	call	0x486	; 0x486 <SPI_EthernetRead>
     73c:	48 2e       	mov	r4, r24
	offaddr = (((ptr & 0x00FF) << 8 ) + SPI_EthernetRead(S0_TX_WR + 1));
     73e:	85 e2       	ldi	r24, 0x25	; 37
     740:	94 e0       	ldi	r25, 0x04	; 4
     742:	0e 94 43 02 	call	0x486	; 0x486 <SPI_EthernetRead>
			return 0;
		}
	}

	// Read the Tx Write Pointer
	ptr = SPI_EthernetRead(S0_TX_WR);
     746:	51 2c       	mov	r5, r1
	offaddr = (((ptr & 0x00FF) << 8 ) + SPI_EthernetRead(S0_TX_WR + 1));
     748:	54 2c       	mov	r5, r4
     74a:	44 24       	eor	r4, r4
     74c:	48 0e       	add	r4, r24
     74e:	51 1c       	adc	r5, r1
	unsigned int startaddr = (((SPI_EthernetRead(S0_TX_RR) << 8) + SPI_EthernetRead(S0_TX_RR + 1)));
     750:	82 e2       	ldi	r24, 0x22	; 34
     752:	94 e0       	ldi	r25, 0x04	; 4
     754:	0e 94 43 02 	call	0x486	; 0x486 <SPI_EthernetRead>
     758:	83 e2       	ldi	r24, 0x23	; 35
     75a:	94 e0       	ldi	r25, 0x04	; 4
     75c:	0e 94 43 02 	call	0x486	; 0x486 <SPI_EthernetRead>
	//printf("Real WR: %d\n", realWR);
	//printf("Real RR: %d\n", realRR); 
	//#endif 
	i = 0; 
	data = 0; 
	printf("Sending...\n\n");
     760:	83 ed       	ldi	r24, 0xD3	; 211
     762:	93 e0       	ldi	r25, 0x03	; 3
     764:	0e 94 b9 09 	call	0x1372	; 0x1372 <puts>
	while(i < bufferLength) {
     768:	c1 14       	cp	r12, r1
     76a:	d1 04       	cpc	r13, r1
     76c:	79 f1       	breq	.+94     	; 0x7cc <SendData+0x186>
     76e:	47 01       	movw	r8, r14
     770:	8c 0c       	add	r8, r12
     772:	9d 1c       	adc	r9, r13
		}
	}

	// Read the Tx Write Pointer
	ptr = SPI_EthernetRead(S0_TX_WR);
	offaddr = (((ptr & 0x00FF) << 8 ) + SPI_EthernetRead(S0_TX_WR + 1));
     774:	82 01       	movw	r16, r4
	//printf("Real RR: %d\n", realRR); 
	//#endif 
	i = 0; 
	data = 0; 
	printf("Sending...\n\n");
	while(i < bufferLength) {
     776:	c0 e0       	ldi	r28, 0x00	; 0
     778:	d4 e0       	ldi	r29, 0x04	; 4

		// Calculate the real W5100 physical Tx Buffer Address
		realaddr = S0_TX_BASE + (offaddr & S0_TX_MASK);
     77a:	a0 90 b9 06 	lds	r10, 0x06B9
     77e:	b0 90 ba 06 	lds	r11, 0x06BA
     782:	a0 22       	and	r10, r16
     784:	b1 22       	and	r11, r17
     786:	80 91 bb 06 	lds	r24, 0x06BB
     78a:	90 91 bc 06 	lds	r25, 0x06BC
     78e:	a8 0e       	add	r10, r24
     790:	b9 1e       	adc	r11, r25
		//printf("TX Real Address: %d\n", realaddr);
		// Copy the application data to the W5100 Tx Buffer
		if(externRAM)
     792:	61 14       	cp	r6, r1
     794:	71 04       	cpc	r7, r1
     796:	51 f0       	breq	.+20     	; 0x7ac <SendData+0x166>
		{
			//Grab the byte from external RAM and write it to the Wiznet TX Buffer 
			data = RAMReadByte(WIFI_QSTRING_ADDRESS + i);
     798:	be 01       	movw	r22, r28
     79a:	80 e0       	ldi	r24, 0x00	; 0
     79c:	90 e0       	ldi	r25, 0x00	; 0
     79e:	0e 94 2b 05 	call	0xa56	; 0xa56 <RAMReadByte>
			//_delay_us(10);
			//printf("%c", data);
			SPI_EthernetWrite(realaddr, data);
     7a2:	68 2f       	mov	r22, r24
     7a4:	c5 01       	movw	r24, r10
     7a6:	0e 94 2f 02 	call	0x45e	; 0x45e <SPI_EthernetWrite>
     7aa:	05 c0       	rjmp	.+10     	; 0x7b6 <SendData+0x170>
			//_delay_us(10);
		}
		else
		{
			//printf("%c", *buffer);
			SPI_EthernetWrite(realaddr,*buffer);	
     7ac:	f7 01       	movw	r30, r14
     7ae:	60 81       	ld	r22, Z
     7b0:	c5 01       	movw	r24, r10
     7b2:	0e 94 2f 02 	call	0x45e	; 0x45e <SPI_EthernetWrite>
		}
		offaddr++;
     7b6:	0f 5f       	subi	r16, 0xFF	; 255
     7b8:	1f 4f       	sbci	r17, 0xFF	; 255
		buffer++;
     7ba:	ff ef       	ldi	r31, 0xFF	; 255
     7bc:	ef 1a       	sub	r14, r31
     7be:	ff 0a       	sbc	r15, r31
     7c0:	21 96       	adiw	r28, 0x01	; 1
	//printf("Real RR: %d\n", realRR); 
	//#endif 
	i = 0; 
	data = 0; 
	printf("Sending...\n\n");
	while(i < bufferLength) {
     7c2:	e8 14       	cp	r14, r8
     7c4:	f9 04       	cpc	r15, r9
     7c6:	c9 f6       	brne	.-78     	; 0x77a <SendData+0x134>
     7c8:	4c 0c       	add	r4, r12
     7ca:	5d 1c       	adc	r5, r13
		}
		offaddr++;
		buffer++;
		i++; 
	}
		SPI_EthernetWrite(realaddr + 1, 0x00);
     7cc:	60 e0       	ldi	r22, 0x00	; 0
     7ce:	c5 01       	movw	r24, r10
     7d0:	01 96       	adiw	r24, 0x01	; 1
     7d2:	0e 94 2f 02 	call	0x45e	; 0x45e <SPI_EthernetWrite>

	// Increase the S0_TX_WR value, so it points to the next transmit
	//printf("Offset After: %d\n", offaddr);
	ptr = SPI_EthernetRead(S0_TX_WR);
     7d6:	84 e2       	ldi	r24, 0x24	; 36
     7d8:	94 e0       	ldi	r25, 0x04	; 4
     7da:	0e 94 43 02 	call	0x486	; 0x486 <SPI_EthernetRead>
	//realWR = S0_TX_BASE + (offaddr & S0_TX_MASK);
	//printf("Real WR: %d\n", realWR);
	//printf("%d\n", (offaddr & 0xFF00) >> 8);
	//printf("%d\n", (offaddr & 0x00FF));
	//SPI_Write(S0_TX_WR,(offaddr & 0xFF00) >> 8 );
	SPI_EthernetWrite(S0_TX_WR, 0xFF);
     7de:	6f ef       	ldi	r22, 0xFF	; 255
     7e0:	84 e2       	ldi	r24, 0x24	; 36
     7e2:	94 e0       	ldi	r25, 0x04	; 4
     7e4:	0e 94 2f 02 	call	0x45e	; 0x45e <SPI_EthernetWrite>
	SPI_EthernetWrite(S0_TX_WR + 1,(offaddr & 0x00FF));
     7e8:	64 2d       	mov	r22, r4
     7ea:	85 e2       	ldi	r24, 0x25	; 37
     7ec:	94 e0       	ldi	r25, 0x04	; 4
     7ee:	0e 94 2f 02 	call	0x45e	; 0x45e <SPI_EthernetWrite>
	//realRR = S0_TX_BASE + (startaddr & S0_TX_MASK);
	//printf("Real WR: %d\n", realWR);
	//printf("Real RR: %d\n", realRR);
	
	// Now Send the SEND command
	SocketCommand(SEND);
     7f2:	80 e2       	ldi	r24, 0x20	; 32
     7f4:	0e 94 1d 03 	call	0x63a	; 0x63a <SocketCommand>
	//printf("WR Low: %d\n", SPI_Read(S0_TX_WR));
	//printf("WR High: %d\n", SPI_Read(S0_TX_WR + 1));
	// Wait for Sending Process
	while(SPI_EthernetRead(S0_CR));
     7f8:	81 e0       	ldi	r24, 0x01	; 1
     7fa:	94 e0       	ldi	r25, 0x04	; 4
     7fc:	0e 94 43 02 	call	0x486	; 0x486 <SPI_EthernetRead>
     800:	81 11       	cpse	r24, r1
     802:	fa cf       	rjmp	.-12     	; 0x7f8 <SendData+0x1b2>
     804:	03 c0       	rjmp	.+6      	; 0x80c <SendData+0x1c6>
			//printf("TX Free Size Error!\n");
			//#endif
			// Disconnect the connection
			SocketCommand(DISCON);
			while(SPI_EthernetRead(S0_CR));
			return 0;
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	2c c0       	rjmp	.+88     	; 0x864 <SendData+0x21e>
	//printf("WR Low: %d\n", SPI_Read(S0_TX_WR));
	//printf("WR High: %d\n", SPI_Read(S0_TX_WR + 1));
	// Wait for Sending Process
	while(SPI_EthernetRead(S0_CR));
	//while(!(SPI_EthernetRead(S0_IR) & (1<<SIR_SEND_OK))); 
	return 1;
     80c:	81 e0       	ldi	r24, 0x01	; 1
     80e:	90 e0       	ldi	r25, 0x00	; 0
     810:	29 c0       	rjmp	.+82     	; 0x864 <SendData+0x21e>
     812:	8f ec       	ldi	r24, 0xCF	; 207
     814:	97 e0       	ldi	r25, 0x07	; 7
     816:	01 97       	sbiw	r24, 0x01	; 1
     818:	f1 f7       	brne	.-4      	; 0x816 <SendData+0x1d0>
     81a:	00 c0       	rjmp	.+0      	; 0x81c <SendData+0x1d6>
     81c:	00 00       	nop
	//#endif
	timeout = 0;
	//Writing our buffer to the transmit buffer
	while (txsize < bufferLength) {
		_delay_ms(1);
		txsize = SPI_EthernetRead(S0_TX_FSR);
     81e:	80 e2       	ldi	r24, 0x20	; 32
     820:	94 e0       	ldi	r25, 0x04	; 4
     822:	0e 94 43 02 	call	0x486	; 0x486 <SPI_EthernetRead>
     826:	c8 2f       	mov	r28, r24
     828:	d0 e0       	ldi	r29, 0x00	; 0
		txsize = (((txsize & 0x00FF) << 8 ) + SPI_EthernetRead(S0_TX_FSR + 1));
     82a:	dc 2f       	mov	r29, r28
     82c:	cc 27       	eor	r28, r28
     82e:	81 e2       	ldi	r24, 0x21	; 33
     830:	94 e0       	ldi	r25, 0x04	; 4
     832:	0e 94 43 02 	call	0x486	; 0x486 <SPI_EthernetRead>
     836:	c8 0f       	add	r28, r24
     838:	d1 1d       	adc	r29, r1
		printf("TX Size: %d", txsize);
     83a:	df 93       	push	r29
     83c:	cf 93       	push	r28
     83e:	87 ec       	ldi	r24, 0xC7	; 199
     840:	93 e0       	ldi	r25, 0x03	; 3
     842:	9f 93       	push	r25
     844:	8f 93       	push	r24
     846:	0e 94 9e 09 	call	0x133c	; 0x133c <printf>
     84a:	0f 90       	pop	r0
     84c:	0f 90       	pop	r0
     84e:	0f 90       	pop	r0
     850:	0f 90       	pop	r0
     852:	09 ee       	ldi	r16, 0xE9	; 233
     854:	13 e0       	ldi	r17, 0x03	; 3
     856:	0f 2e       	mov	r0, r31
     858:	f7 ec       	ldi	r31, 0xC7	; 199
     85a:	8f 2e       	mov	r8, r31
     85c:	f3 e0       	ldi	r31, 0x03	; 3
     85e:	9f 2e       	mov	r9, r31
     860:	f0 2d       	mov	r31, r0
     862:	65 cf       	rjmp	.-310    	; 0x72e <SendData+0xe8>
	//printf("WR High: %d\n", SPI_Read(S0_TX_WR + 1));
	// Wait for Sending Process
	while(SPI_EthernetRead(S0_CR));
	//while(!(SPI_EthernetRead(S0_IR) & (1<<SIR_SEND_OK))); 
	return 1;
}
     864:	df 91       	pop	r29
     866:	cf 91       	pop	r28
     868:	1f 91       	pop	r17
     86a:	0f 91       	pop	r16
     86c:	ff 90       	pop	r15
     86e:	ef 90       	pop	r14
     870:	df 90       	pop	r13
     872:	cf 90       	pop	r12
     874:	bf 90       	pop	r11
     876:	af 90       	pop	r10
     878:	9f 90       	pop	r9
     87a:	8f 90       	pop	r8
     87c:	7f 90       	pop	r7
     87e:	6f 90       	pop	r6
     880:	5f 90       	pop	r5
     882:	4f 90       	pop	r4
     884:	08 95       	ret

00000886 <uart_sendStream>:
	putchar('m');
}


int uart_sendStream(char ch,FILE *stream)
{
     886:	cf 93       	push	r28
     888:	c8 2f       	mov	r28, r24
	if (ch == '\n')
     88a:	8a 30       	cpi	r24, 0x0A	; 10
     88c:	19 f4       	brne	.+6      	; 0x894 <uart_sendStream+0xe>
	uart_sendStream('\r', stream);
     88e:	8d e0       	ldi	r24, 0x0D	; 13
     890:	0e 94 43 04 	call	0x886	; 0x886 <uart_sendStream>
	while (!(UCSR2A & (1<<UDRE2)));
     894:	e0 ed       	ldi	r30, 0xD0	; 208
     896:	f0 e0       	ldi	r31, 0x00	; 0
     898:	90 81       	ld	r25, Z
     89a:	95 ff       	sbrs	r25, 5
     89c:	fd cf       	rjmp	.-6      	; 0x898 <uart_sendStream+0x12>
	UDR2=ch;
     89e:	c0 93 d6 00 	sts	0x00D6, r28
	return 0;
}
     8a2:	80 e0       	ldi	r24, 0x00	; 0
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	cf 91       	pop	r28
     8a8:	08 95       	ret

000008aa <uart_receiveStream>:

int uart_receiveStream(FILE *stream)
{
     8aa:	cf 93       	push	r28
     8ac:	bc 01       	movw	r22, r24
	unsigned char ch;
	while (!(UCSR2A & (1<<RXC2)));
     8ae:	e0 ed       	ldi	r30, 0xD0	; 208
     8b0:	f0 e0       	ldi	r31, 0x00	; 0
     8b2:	80 81       	ld	r24, Z
     8b4:	88 23       	and	r24, r24
     8b6:	ec f7       	brge	.-6      	; 0x8b2 <uart_receiveStream+0x8>
	ch=UDR2;
     8b8:	c0 91 d6 00 	lds	r28, 0x00D6

	/* Echo the Output Back to terminal */
	uart_sendStream(ch,stream);
     8bc:	8c 2f       	mov	r24, r28
     8be:	0e 94 43 04 	call	0x886	; 0x886 <uart_sendStream>

	return ch;
}
     8c2:	8c 2f       	mov	r24, r28
     8c4:	90 e0       	ldi	r25, 0x00	; 0
     8c6:	cf 91       	pop	r28
     8c8:	08 95       	ret

000008ca <uart2_init>:

FILE uart_stream = FDEV_SETUP_STREAM(uart_sendStream, uart_receiveStream, _FDEV_SETUP_RW);

void uart2_init()
{
	UBRR2H = (((F_CPU/BAUD_RATE)/16)-1)>>8;	// set baud rate
     8ca:	10 92 d5 00 	sts	0x00D5, r1
	UBRR2L = (((F_CPU/BAUD_RATE)/16)-1);
     8ce:	83 e3       	ldi	r24, 0x33	; 51
     8d0:	80 93 d4 00 	sts	0x00D4, r24
	UCSR2B = (1<<RXEN2)|(1<<TXEN2); 		// enable Rx & Tx
     8d4:	88 e1       	ldi	r24, 0x18	; 24
     8d6:	80 93 d1 00 	sts	0x00D1, r24
	UCSR2C=  (1<<UCSZ21)|(1<<UCSZ20);  	       // config USART; 8N1
     8da:	86 e0       	ldi	r24, 0x06	; 6
     8dc:	80 93 d2 00 	sts	0x00D2, r24
	//DDRD |= (1<<PORTD1)|(1<<PORTD0);
	// Define Output/Input Stream
	stdout = stdin = &uart_stream;
     8e0:	88 e0       	ldi	r24, 0x08	; 8
     8e2:	92 e0       	ldi	r25, 0x02	; 2
     8e4:	90 93 76 07 	sts	0x0776, r25
     8e8:	80 93 75 07 	sts	0x0775, r24
     8ec:	90 93 78 07 	sts	0x0778, r25
     8f0:	80 93 77 07 	sts	0x0777, r24
     8f4:	08 95       	ret

000008f6 <setRAMStatus>:
}

void setRAMStatus(char mode)
{
	// Activate the CS pin
	RAM_PORT &= ~(1<<RAM_CS);
     8f6:	a3 98       	cbi	0x14, 3	; 20
	SPDR = WRSR;
     8f8:	91 e0       	ldi	r25, 0x01	; 1
     8fa:	9e bd       	out	0x2e, r25	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     8fc:	0d b4       	in	r0, 0x2d	; 45
     8fe:	07 fe       	sbrs	r0, 7
     900:	fd cf       	rjmp	.-6      	; 0x8fc <setRAMStatus+0x6>
	// Start Data transmission
	SPDR = mode;
     902:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     904:	0d b4       	in	r0, 0x2d	; 45
     906:	07 fe       	sbrs	r0, 7
     908:	fd cf       	rjmp	.-6      	; 0x904 <setRAMStatus+0xe>
	// CS pin is not active
	RAM_PORT |= (1<<RAM_CS);
     90a:	a3 9a       	sbi	0x14, 3	; 20
     90c:	08 95       	ret

0000090e <SPI_WriteAddress>:
}

void SPI_WriteAddress(uint32_t address)
{
     90e:	26 2f       	mov	r18, r22
     910:	97 2f       	mov	r25, r23
     912:	48 2f       	mov	r20, r24
	SPDR = WRITE;
     914:	82 e0       	ldi	r24, 0x02	; 2
     916:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     918:	0d b4       	in	r0, 0x2d	; 45
     91a:	07 fe       	sbrs	r0, 7
     91c:	fd cf       	rjmp	.-6      	; 0x918 <SPI_WriteAddress+0xa>
	// Start Wiznet W5100 Address High Bytes transmission
	SPDR = (address & 0xFF0000) >> 16;
     91e:	4e bd       	out	0x2e, r20	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     920:	0d b4       	in	r0, 0x2d	; 45
     922:	07 fe       	sbrs	r0, 7
     924:	fd cf       	rjmp	.-6      	; 0x920 <SPI_WriteAddress+0x12>
	// Start Wiznet W5100 Address Low Bytes transmission
	SPDR = (address & 0x00FF00) >> 8;
     926:	89 2f       	mov	r24, r25
     928:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     92a:	0d b4       	in	r0, 0x2d	; 45
     92c:	07 fe       	sbrs	r0, 7
     92e:	fd cf       	rjmp	.-6      	; 0x92a <SPI_WriteAddress+0x1c>
	SPDR = (address & 0x0000FF);
     930:	2e bd       	out	0x2e, r18	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     932:	0d b4       	in	r0, 0x2d	; 45
     934:	07 fe       	sbrs	r0, 7
     936:	fd cf       	rjmp	.-6      	; 0x932 <SPI_WriteAddress+0x24>
}
     938:	08 95       	ret

0000093a <SPI_WriteData>:

void SPI_WriteData(char data)
{
	// Start Data transmission
	SPDR = data;
     93a:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     93c:	0d b4       	in	r0, 0x2d	; 45
     93e:	07 fe       	sbrs	r0, 7
     940:	fd cf       	rjmp	.-6      	; 0x93c <SPI_WriteData+0x2>
}
     942:	08 95       	ret

00000944 <SPI_ReadAddress>:

void SPI_ReadAddress(uint32_t address)
{
     944:	26 2f       	mov	r18, r22
     946:	97 2f       	mov	r25, r23
     948:	48 2f       	mov	r20, r24
	SPDR = READ;
     94a:	83 e0       	ldi	r24, 0x03	; 3
     94c:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     94e:	0d b4       	in	r0, 0x2d	; 45
     950:	07 fe       	sbrs	r0, 7
     952:	fd cf       	rjmp	.-6      	; 0x94e <SPI_ReadAddress+0xa>
	SPDR = (address & 0xFF0000) >> 16;
     954:	4e bd       	out	0x2e, r20	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     956:	0d b4       	in	r0, 0x2d	; 45
     958:	07 fe       	sbrs	r0, 7
     95a:	fd cf       	rjmp	.-6      	; 0x956 <SPI_ReadAddress+0x12>
	// Start Wiznet W5100 Address Low Bytes transmission
	SPDR = (address & 0x00FF00) >> 8;
     95c:	89 2f       	mov	r24, r25
     95e:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     960:	0d b4       	in	r0, 0x2d	; 45
     962:	07 fe       	sbrs	r0, 7
     964:	fd cf       	rjmp	.-6      	; 0x960 <SPI_ReadAddress+0x1c>
	SPDR = (address & 0x0000FF);
     966:	2e bd       	out	0x2e, r18	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     968:	0d b4       	in	r0, 0x2d	; 45
     96a:	07 fe       	sbrs	r0, 7
     96c:	fd cf       	rjmp	.-6      	; 0x968 <SPI_ReadAddress+0x24>
}
     96e:	08 95       	ret

00000970 <SPI_ReadData>:

char SPI_ReadData()
{
	// Send Dummy transmission for reading the data
	SPDR = 0x00;
     970:	1e bc       	out	0x2e, r1	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     972:	0d b4       	in	r0, 0x2d	; 45
     974:	07 fe       	sbrs	r0, 7
     976:	fd cf       	rjmp	.-6      	; 0x972 <SPI_ReadData+0x2>
	return(SPDR);
     978:	8e b5       	in	r24, 0x2e	; 46
}
     97a:	08 95       	ret

0000097c <RAMPrint>:
	//printf("%d\n", buffer);
	return buffer; 
}

void RAMPrint(uint32_t startAddress, uint16_t length)
{
     97c:	ef 92       	push	r14
     97e:	ff 92       	push	r15
     980:	0f 93       	push	r16
     982:	1f 93       	push	r17
     984:	cf 93       	push	r28
     986:	df 93       	push	r29
     988:	c6 2f       	mov	r28, r22
     98a:	d7 2f       	mov	r29, r23
     98c:	18 2f       	mov	r17, r24
     98e:	09 2f       	mov	r16, r25
     990:	7a 01       	movw	r14, r20
	//char* data = ""; 
	setRAMStatus(SEQ);
     992:	80 e4       	ldi	r24, 0x40	; 64
     994:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <setRAMStatus>
	RAM_PORT &= ~(1<<RAM_CS);
     998:	a3 98       	cbi	0x14, 3	; 20
	SPI_ReadAddress(startAddress);
     99a:	6c 2f       	mov	r22, r28
     99c:	7d 2f       	mov	r23, r29
     99e:	81 2f       	mov	r24, r17
     9a0:	90 2f       	mov	r25, r16
     9a2:	0e 94 a2 04 	call	0x944	; 0x944 <SPI_ReadAddress>
	printf("Address: 0x%06x\n", startAddress);
     9a6:	0f 93       	push	r16
     9a8:	1f 93       	push	r17
     9aa:	df 93       	push	r29
     9ac:	cf 93       	push	r28
     9ae:	80 e1       	ldi	r24, 0x10	; 16
     9b0:	94 e0       	ldi	r25, 0x04	; 4
     9b2:	9f 93       	push	r25
     9b4:	8f 93       	push	r24
     9b6:	0e 94 9e 09 	call	0x133c	; 0x133c <printf>
	int i; 
	for(i=0; i<length; i++)
     9ba:	0f 90       	pop	r0
     9bc:	0f 90       	pop	r0
     9be:	0f 90       	pop	r0
     9c0:	0f 90       	pop	r0
     9c2:	0f 90       	pop	r0
     9c4:	0f 90       	pop	r0
     9c6:	e1 14       	cp	r14, r1
     9c8:	f1 04       	cpc	r15, r1
     9ca:	a9 f0       	breq	.+42     	; 0x9f6 <RAMPrint+0x7a>
     9cc:	c0 e0       	ldi	r28, 0x00	; 0
     9ce:	d0 e0       	ldi	r29, 0x00	; 0
	{
		printf("0x%02X ", SPI_ReadData());
     9d0:	01 e2       	ldi	r16, 0x21	; 33
     9d2:	14 e0       	ldi	r17, 0x04	; 4
     9d4:	0e 94 b8 04 	call	0x970	; 0x970 <SPI_ReadData>
     9d8:	1f 92       	push	r1
     9da:	8f 93       	push	r24
     9dc:	1f 93       	push	r17
     9de:	0f 93       	push	r16
     9e0:	0e 94 9e 09 	call	0x133c	; 0x133c <printf>
	setRAMStatus(SEQ);
	RAM_PORT &= ~(1<<RAM_CS);
	SPI_ReadAddress(startAddress);
	printf("Address: 0x%06x\n", startAddress);
	int i; 
	for(i=0; i<length; i++)
     9e4:	21 96       	adiw	r28, 0x01	; 1
     9e6:	0f 90       	pop	r0
     9e8:	0f 90       	pop	r0
     9ea:	0f 90       	pop	r0
     9ec:	0f 90       	pop	r0
     9ee:	ce 15       	cp	r28, r14
     9f0:	df 05       	cpc	r29, r15
     9f2:	81 f7       	brne	.-32     	; 0x9d4 <RAMPrint+0x58>
     9f4:	02 c0       	rjmp	.+4      	; 0x9fa <RAMPrint+0x7e>
     9f6:	e1 2c       	mov	r14, r1
     9f8:	f1 2c       	mov	r15, r1
	{
		printf("0x%02X ", SPI_ReadData());
	}
	RAM_PORT |= (1<<RAM_CS); 
     9fa:	a3 9a       	sbi	0x14, 3	; 20
	printf("\nSize: %d\n", i); 
     9fc:	ff 92       	push	r15
     9fe:	ef 92       	push	r14
     a00:	89 e2       	ldi	r24, 0x29	; 41
     a02:	94 e0       	ldi	r25, 0x04	; 4
     a04:	9f 93       	push	r25
     a06:	8f 93       	push	r24
     a08:	0e 94 9e 09 	call	0x133c	; 0x133c <printf>
     a0c:	0f 90       	pop	r0
     a0e:	0f 90       	pop	r0
     a10:	0f 90       	pop	r0
     a12:	0f 90       	pop	r0
}
     a14:	df 91       	pop	r29
     a16:	cf 91       	pop	r28
     a18:	1f 91       	pop	r17
     a1a:	0f 91       	pop	r16
     a1c:	ff 90       	pop	r15
     a1e:	ef 90       	pop	r14
     a20:	08 95       	ret

00000a22 <RAMWriteByte>:

void RAMWriteByte(char data, uint32_t address)
{
     a22:	cf 93       	push	r28
     a24:	c8 2f       	mov	r28, r24
	RAM_PORT &= ~(1<<RAM_CS);
     a26:	a3 98       	cbi	0x14, 3	; 20
	SPI_WriteAddress(address);
     a28:	cb 01       	movw	r24, r22
     a2a:	ba 01       	movw	r22, r20
     a2c:	0e 94 87 04 	call	0x90e	; 0x90e <SPI_WriteAddress>
	SPI_WriteData(data);
     a30:	8c 2f       	mov	r24, r28
     a32:	0e 94 9d 04 	call	0x93a	; 0x93a <SPI_WriteData>
	RAM_PORT |= (1<<RAM_CS);
     a36:	a3 9a       	sbi	0x14, 3	; 20
}
     a38:	cf 91       	pop	r28
     a3a:	08 95       	ret

00000a3c <SPI_Init>:


void SPI_Init()
{
	// Set MOSI ,SCK, and SS as output, others as input
	SPI_DDR = (1<<MOSI)|(1<<SCK)|(1<<SS);
     a3c:	87 e0       	ldi	r24, 0x07	; 7
     a3e:	84 b9       	out	0x04, r24	; 4
	// CS pin is not active
	RAM_DDR |= (1<<RAM_CS);
     a40:	9b 9a       	sbi	0x13, 3	; 19
	RAM_PORT |= (1<<RAM_CS);
     a42:	a3 9a       	sbi	0x14, 3	; 20
	
	// Enable SPI, Master Mode 0, set the clock rate fck/16
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
     a44:	81 e5       	ldi	r24, 0x51	; 81
     a46:	8c bd       	out	0x2c, r24	; 44
	RAMWriteByte(0x32, 0000);
     a48:	40 e0       	ldi	r20, 0x00	; 0
     a4a:	50 e0       	ldi	r21, 0x00	; 0
     a4c:	ba 01       	movw	r22, r20
     a4e:	82 e3       	ldi	r24, 0x32	; 50
     a50:	0e 94 11 05 	call	0xa22	; 0xa22 <RAMWriteByte>
     a54:	08 95       	ret

00000a56 <RAMReadByte>:
	RAM_PORT |= (1<<RAM_CS);
}

char RAMReadByte(uint32_t address)
{
	RAM_PORT &= ~(1<<RAM_CS);
     a56:	a3 98       	cbi	0x14, 3	; 20
	SPI_ReadAddress(address);
     a58:	0e 94 a2 04 	call	0x944	; 0x944 <SPI_ReadAddress>
	char data = SPI_ReadData();
     a5c:	0e 94 b8 04 	call	0x970	; 0x970 <SPI_ReadData>
	RAM_PORT |= (1<<RAM_CS);
     a60:	a3 9a       	sbi	0x14, 3	; 20
	return data; 
}
     a62:	08 95       	ret

00000a64 <serverConnect>:
	else
		return 1; 
}

int serverConnect(char* serverDNS, unsigned char* port)
{
     a64:	0f 93       	push	r16
     a66:	1f 93       	push	r17
     a68:	cf 93       	push	r28
     a6a:	df 93       	push	r29
     a6c:	ec 01       	movw	r28, r24
     a6e:	8b 01       	movw	r16, r22
	enableReceiveINT(); 
     a70:	0e 94 45 06 	call	0xc8a	; 0xc8a <enableReceiveINT>
	strcat(serverDNS, " ");
     a74:	fe 01       	movw	r30, r28
     a76:	01 90       	ld	r0, Z+
     a78:	00 20       	and	r0, r0
     a7a:	e9 f7       	brne	.-6      	; 0xa76 <serverConnect+0x12>
     a7c:	31 97       	sbiw	r30, 0x01	; 1
     a7e:	80 e2       	ldi	r24, 0x20	; 32
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	91 83       	std	Z+1, r25	; 0x01
     a84:	80 83       	st	Z, r24
	strcat(serverDNS, port); 
     a86:	b8 01       	movw	r22, r16
     a88:	ce 01       	movw	r24, r28
     a8a:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <strcat>
	sendCommand(NOPREFIX, TCP_CLIENT, serverDNS);
     a8e:	ae 01       	movw	r20, r28
     a90:	60 eb       	ldi	r22, 0xB0	; 176
     a92:	74 e0       	ldi	r23, 0x04	; 4
     a94:	8f ef       	ldi	r24, 0xFF	; 255
     a96:	0e 94 1e 07 	call	0xe3c	; 0xe3c <sendCommand>
	if(errorCheck())
     a9a:	0e 94 00 07 	call	0xe00	; 0xe00 <errorCheck>
     a9e:	21 e0       	ldi	r18, 0x01	; 1
     aa0:	30 e0       	ldi	r19, 0x00	; 0
     aa2:	89 2b       	or	r24, r25
     aa4:	11 f0       	breq	.+4      	; 0xaaa <serverConnect+0x46>
     aa6:	20 e0       	ldi	r18, 0x00	; 0
     aa8:	30 e0       	ldi	r19, 0x00	; 0
		return 0; 
	else
		return 1; 
}
     aaa:	c9 01       	movw	r24, r18
     aac:	df 91       	pop	r29
     aae:	cf 91       	pop	r28
     ab0:	1f 91       	pop	r17
     ab2:	0f 91       	pop	r16
     ab4:	08 95       	ret

00000ab6 <getFileWifi>:
	j+=strlen(footer)-1; 
	return j; 
}

char* getFileWifi(char* filepath, int externRAM, uint32_t RAMAddress, int multiReceive)
{ 
     ab6:	2f 92       	push	r2
     ab8:	3f 92       	push	r3
     aba:	4f 92       	push	r4
     abc:	5f 92       	push	r5
     abe:	6f 92       	push	r6
     ac0:	7f 92       	push	r7
     ac2:	8f 92       	push	r8
     ac4:	9f 92       	push	r9
     ac6:	af 92       	push	r10
     ac8:	bf 92       	push	r11
     aca:	cf 92       	push	r12
     acc:	df 92       	push	r13
     ace:	ef 92       	push	r14
     ad0:	ff 92       	push	r15
     ad2:	0f 93       	push	r16
     ad4:	1f 93       	push	r17
     ad6:	cf 93       	push	r28
     ad8:	df 93       	push	r29
     ada:	ec 01       	movw	r28, r24
     adc:	6b 01       	movw	r12, r22
     ade:	49 01       	movw	r8, r18
     ae0:	5a 01       	movw	r10, r20
	//printf("Filepath: %s\n", filepath);
	//enableReceiveINT();
	//setTestPrint(1); 
	enableReceiveINT();   
     ae2:	0e 94 45 06 	call	0xc8a	; 0xc8a <enableReceiveINT>
	PORTD &= ~(1<<CTS);
     ae6:	5c 98       	cbi	0x0b, 4	; 11
	setReceiveCounter(0);
     ae8:	80 e0       	ldi	r24, 0x00	; 0
     aea:	90 e0       	ldi	r25, 0x00	; 0
     aec:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <setReceiveCounter>
	uint16_t i = 0; 
	char* receiveHeader; 
	//setCompressFlag(1);
	PORTD |= (1<<CTS);
     af0:	5c 9a       	sbi	0x0b, 4	; 11
	sendCommand(NOPREFIX, HTTP_GET, filepath);
     af2:	ae 01       	movw	r20, r28
     af4:	60 e5       	ldi	r22, 0x50	; 80
     af6:	72 e0       	ldi	r23, 0x02	; 2
     af8:	8f ef       	ldi	r24, 0xFF	; 255
     afa:	0e 94 1e 07 	call	0xe3c	; 0xe3c <sendCommand>
	receiveStatus();
     afe:	0e 94 56 06 	call	0xcac	; 0xcac <receiveStatus>
	//enableReceiveINT();
	//setTestPrint(1); 
	enableReceiveINT();   
	PORTD &= ~(1<<CTS);
	setReceiveCounter(0);
	uint16_t i = 0; 
     b02:	e1 2c       	mov	r14, r1
     b04:	f1 2c       	mov	r15, r1
			printf("RAM Address: %d\n", RAMAddress+i); 
		}
		sendCommand(NOPREFIX, STREAM_READ, "0 10000");
		receiveStatus();
		receiveHeader = getMessageHeader(); 
		printf("Tran Length: %d\n", receiveHeader); 
     b06:	0f 2e       	mov	r0, r31
     b08:	fa e5       	ldi	r31, 0x5A	; 90
     b0a:	2f 2e       	mov	r2, r31
     b0c:	f2 e0       	ldi	r31, 0x02	; 2
     b0e:	3f 2e       	mov	r3, r31
     b10:	f0 2d       	mov	r31, r0
	PORTD |= (1<<CTS);
	sendCommand(NOPREFIX, HTTP_GET, filepath);
	receiveStatus();
	do 
	{
		if(externRAM){
     b12:	c1 14       	cp	r12, r1
     b14:	d1 04       	cpc	r13, r1
     b16:	d1 f0       	breq	.+52     	; 0xb4c <getFileWifi+0x96>
			updateRAMAddress(RAMAddress + i);
     b18:	24 01       	movw	r4, r8
     b1a:	35 01       	movw	r6, r10
     b1c:	4e 0c       	add	r4, r14
     b1e:	5f 1c       	adc	r5, r15
     b20:	61 1c       	adc	r6, r1
     b22:	71 1c       	adc	r7, r1
     b24:	c3 01       	movw	r24, r6
     b26:	b2 01       	movw	r22, r4
     b28:	0e 94 15 07 	call	0xe2a	; 0xe2a <updateRAMAddress>
			printf("RAM Address: %d\n", RAMAddress+i); 
     b2c:	7f 92       	push	r7
     b2e:	6f 92       	push	r6
     b30:	5f 92       	push	r5
     b32:	4f 92       	push	r4
     b34:	ab ed       	ldi	r26, 0xDB	; 219
     b36:	b4 e0       	ldi	r27, 0x04	; 4
     b38:	bf 93       	push	r27
     b3a:	af 93       	push	r26
     b3c:	0e 94 9e 09 	call	0x133c	; 0x133c <printf>
     b40:	0f 90       	pop	r0
     b42:	0f 90       	pop	r0
     b44:	0f 90       	pop	r0
     b46:	0f 90       	pop	r0
     b48:	0f 90       	pop	r0
     b4a:	0f 90       	pop	r0
		}
		sendCommand(NOPREFIX, STREAM_READ, "0 10000");
     b4c:	4c ee       	ldi	r20, 0xEC	; 236
     b4e:	54 e0       	ldi	r21, 0x04	; 4
     b50:	64 ef       	ldi	r22, 0xF4	; 244
     b52:	74 e0       	ldi	r23, 0x04	; 4
     b54:	8f ef       	ldi	r24, 0xFF	; 255
     b56:	0e 94 1e 07 	call	0xe3c	; 0xe3c <sendCommand>
		receiveStatus();
     b5a:	0e 94 56 06 	call	0xcac	; 0xcac <receiveStatus>
		receiveHeader = getMessageHeader(); 
     b5e:	0e 94 fd 06 	call	0xdfa	; 0xdfa <getMessageHeader>
     b62:	ec 01       	movw	r28, r24
		printf("Tran Length: %d\n", receiveHeader); 
     b64:	df 93       	push	r29
     b66:	cf 93       	push	r28
     b68:	3f 92       	push	r3
     b6a:	2f 92       	push	r2
     b6c:	0e 94 9e 09 	call	0x133c	; 0x133c <printf>
		if(receiveHeader[errorCode] == '1'){
     b70:	0f 90       	pop	r0
     b72:	0f 90       	pop	r0
     b74:	0f 90       	pop	r0
     b76:	0f 90       	pop	r0
     b78:	89 81       	ldd	r24, Y+1	; 0x01
     b7a:	81 33       	cpi	r24, 0x31	; 49
     b7c:	39 f0       	breq	.+14     	; 0xb8c <getFileWifi+0xd6>
			break; 
		}
		i += getTransmissionLength(); 
     b7e:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <getTransmissionLength>
     b82:	e8 0e       	add	r14, r24
     b84:	f9 1e       	adc	r15, r25
	} while (multiReceive);
     b86:	01 15       	cp	r16, r1
     b88:	11 05       	cpc	r17, r1
     b8a:	19 f6       	brne	.-122    	; 0xb12 <getFileWifi+0x5c>
	
	disableReceiveINT(); 
     b8c:	0e 94 4e 06 	call	0xc9c	; 0xc9c <disableReceiveINT>
	//_delay_ms(3000);  
	sendCommand(NOPREFIX, STREAM_CLOSE, NOVAL);
     b90:	4d e2       	ldi	r20, 0x2D	; 45
     b92:	53 e0       	ldi	r21, 0x03	; 3
     b94:	60 e0       	ldi	r22, 0x00	; 0
     b96:	75 e0       	ldi	r23, 0x05	; 5
     b98:	8f ef       	ldi	r24, 0xFF	; 255
     b9a:	0e 94 1e 07 	call	0xe3c	; 0xe3c <sendCommand>
	//receiveStatus(); 
	return 1; 
}
     b9e:	81 e0       	ldi	r24, 0x01	; 1
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	df 91       	pop	r29
     ba4:	cf 91       	pop	r28
     ba6:	1f 91       	pop	r17
     ba8:	0f 91       	pop	r16
     baa:	ff 90       	pop	r15
     bac:	ef 90       	pop	r14
     bae:	df 90       	pop	r13
     bb0:	cf 90       	pop	r12
     bb2:	bf 90       	pop	r11
     bb4:	af 90       	pop	r10
     bb6:	9f 90       	pop	r9
     bb8:	8f 90       	pop	r8
     bba:	7f 90       	pop	r7
     bbc:	6f 90       	pop	r6
     bbe:	5f 90       	pop	r5
     bc0:	4f 90       	pop	r4
     bc2:	3f 90       	pop	r3
     bc4:	2f 90       	pop	r2
     bc6:	08 95       	ret

00000bc8 <updateFileWifi>:

void updateFileWifi(char* filepath)
{
     bc8:	cf 93       	push	r28
     bca:	df 93       	push	r29
     bcc:	ec 01       	movw	r28, r24
	disableReceiveINT(); 
     bce:	0e 94 4e 06 	call	0xc9c	; 0xc9c <disableReceiveINT>
	sendCommand(NOPREFIX, filepath, NOVAL);
     bd2:	4d e2       	ldi	r20, 0x2D	; 45
     bd4:	53 e0       	ldi	r21, 0x03	; 3
     bd6:	be 01       	movw	r22, r28
     bd8:	8f ef       	ldi	r24, 0xFF	; 255
     bda:	0e 94 1e 07 	call	0xe3c	; 0xe3c <sendCommand>
	sendCommand(NOPREFIX, STREAM_CLOSE, NOVAL); 	
     bde:	4d e2       	ldi	r20, 0x2D	; 45
     be0:	53 e0       	ldi	r21, 0x03	; 3
     be2:	60 e0       	ldi	r22, 0x00	; 0
     be4:	75 e0       	ldi	r23, 0x05	; 5
     be6:	8f ef       	ldi	r24, 0xFF	; 255
     be8:	0e 94 1e 07 	call	0xe3c	; 0xe3c <sendCommand>
}
     bec:	df 91       	pop	r29
     bee:	cf 91       	pop	r28
     bf0:	08 95       	ret

00000bf2 <setCompressFlag>:
}

void setCompressFlag(uint8_t compress)
{
	//PORTD &= ~(1<<CTS); 
	compressFlag = compress;
     bf2:	80 93 d3 06 	sts	0x06D3, r24
     bf6:	08 95       	ret

00000bf8 <setReceiveCounter>:
	//PORTD |= (1<<CTS); 
}

void setReceiveCounter(int val)
{
	i = val; 
     bf8:	90 93 d1 06 	sts	0x06D1, r25
     bfc:	80 93 d0 06 	sts	0x06D0, r24
     c00:	08 95       	ret

00000c02 <uart_init>:
	multiReceiveFlag = receiveFlag; 
}

void uart_init()
{
	UBRR0H = (((F_CPU/BAUD_RATE)/16)-1)>>8;	// set baud rate
     c02:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (((F_CPU/BAUD_RATE)/16)-1);
     c06:	87 e0       	ldi	r24, 0x07	; 7
     c08:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0B = (1<<RXEN0)|(1<<TXEN0); // enable Rx & Tx
     c0c:	e1 ec       	ldi	r30, 0xC1	; 193
     c0e:	f0 e0       	ldi	r31, 0x00	; 0
     c10:	88 e1       	ldi	r24, 0x18	; 24
     c12:	80 83       	st	Z, r24
	UCSR0C =  (1<<UCSZ01)|(1<<UCSZ00); // config USART; 8N1
     c14:	86 e0       	ldi	r24, 0x06	; 6
     c16:	80 93 c2 00 	sts	0x00C2, r24
	UCSR0B |= (1<<RXCIE0);	//Enable Receive Interrupt 
     c1a:	80 81       	ld	r24, Z
     c1c:	80 68       	ori	r24, 0x80	; 128
     c1e:	80 83       	st	Z, r24
     c20:	08 95       	ret

00000c22 <uart_send>:
	}
	return count; 
}

int uart_send(char* data, unsigned int length)
{
     c22:	cf 93       	push	r28
     c24:	df 93       	push	r29
	//printf("Uart Send Function: %s\nAddress: %p", data, data);
	uint8_t i = 0;
	//UCSR1B |= (1<<RXCIE1);
	receiveWifiFlag = 0;
     c26:	10 92 dc 06 	sts	0x06DC, r1
	memset(headerBuffer, 0x00, endHeader);
     c2a:	29 e0       	ldi	r18, 0x09	; 9
     c2c:	e3 ec       	ldi	r30, 0xC3	; 195
     c2e:	f6 e0       	ldi	r31, 0x06	; 6
     c30:	df 01       	movw	r26, r30
     c32:	1d 92       	st	X+, r1
     c34:	2a 95       	dec	r18
     c36:	e9 f7       	brne	.-6      	; 0xc32 <uart_send+0x10>
	//PORTD |= (1<<RTS);
	//while(!(PIND & (1<<CTS))){
		//_delay_us(100);
		//printf("Waiting..\n");
	//} 
	while(i < length){
     c38:	61 15       	cp	r22, r1
     c3a:	71 05       	cpc	r23, r1
     c3c:	a9 f0       	breq	.+42     	; 0xc68 <uart_send+0x46>
     c3e:	20 e0       	ldi	r18, 0x00	; 0
     c40:	30 e0       	ldi	r19, 0x00	; 0
}

int uart_send(char* data, unsigned int length)
{
	//printf("Uart Send Function: %s\nAddress: %p", data, data);
	uint8_t i = 0;
     c42:	50 e0       	ldi	r21, 0x00	; 0
	//while(!(PIND & (1<<CTS))){
		//_delay_us(100);
		//printf("Waiting..\n");
	//} 
	while(i < length){
		while(!(UCSR0A & (1<<UDRE0)));
     c44:	e0 ec       	ldi	r30, 0xC0	; 192
     c46:	f0 e0       	ldi	r31, 0x00	; 0
		UDR0 = data[i];
     c48:	a6 ec       	ldi	r26, 0xC6	; 198
     c4a:	b0 e0       	ldi	r27, 0x00	; 0
	//while(!(PIND & (1<<CTS))){
		//_delay_us(100);
		//printf("Waiting..\n");
	//} 
	while(i < length){
		while(!(UCSR0A & (1<<UDRE0)));
     c4c:	40 81       	ld	r20, Z
     c4e:	45 ff       	sbrs	r20, 5
     c50:	fd cf       	rjmp	.-6      	; 0xc4c <uart_send+0x2a>
		UDR0 = data[i];
     c52:	ec 01       	movw	r28, r24
     c54:	c2 0f       	add	r28, r18
     c56:	d3 1f       	adc	r29, r19
     c58:	28 81       	ld	r18, Y
     c5a:	2c 93       	st	X, r18
		i++;
     c5c:	5f 5f       	subi	r21, 0xFF	; 255
	//PORTD |= (1<<RTS);
	//while(!(PIND & (1<<CTS))){
		//_delay_us(100);
		//printf("Waiting..\n");
	//} 
	while(i < length){
     c5e:	25 2f       	mov	r18, r21
     c60:	30 e0       	ldi	r19, 0x00	; 0
     c62:	26 17       	cp	r18, r22
     c64:	37 07       	cpc	r19, r23
     c66:	90 f3       	brcs	.-28     	; 0xc4c <uart_send+0x2a>
		while(!(UCSR0A & (1<<UDRE0)));
		UDR0 = data[i];
		i++;
	}
	//while(!(PIND & (1<<CTS))){_delay_us(100);}
	printf("Sent!\n");
     c68:	82 e9       	ldi	r24, 0x92	; 146
     c6a:	92 e0       	ldi	r25, 0x02	; 2
     c6c:	0e 94 b9 09 	call	0x1372	; 0x1372 <puts>
	return 0;
}
     c70:	80 e0       	ldi	r24, 0x00	; 0
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	df 91       	pop	r29
     c76:	cf 91       	pop	r28
     c78:	08 95       	ret

00000c7a <uart_receiveChar>:
}

unsigned char uart_receiveChar()
{
	//printf("Receiving...\n");
	while (!(UCSR0A & (1<<RXC0)));
     c7a:	e0 ec       	ldi	r30, 0xC0	; 192
     c7c:	f0 e0       	ldi	r31, 0x00	; 0
     c7e:	80 81       	ld	r24, Z
     c80:	88 23       	and	r24, r24
     c82:	ec f7       	brge	.-6      	; 0xc7e <uart_receiveChar+0x4>
	return UDR0; 
     c84:	80 91 c6 00 	lds	r24, 0x00C6
}
     c88:	08 95       	ret

00000c8a <enableReceiveINT>:

int enableReceiveINT()
{
	UCSR0B |= (1<<RXCIE0);
     c8a:	e1 ec       	ldi	r30, 0xC1	; 193
     c8c:	f0 e0       	ldi	r31, 0x00	; 0
     c8e:	80 81       	ld	r24, Z
     c90:	80 68       	ori	r24, 0x80	; 128
     c92:	80 83       	st	Z, r24
	sei(); 
     c94:	78 94       	sei
	return 1; 
}
     c96:	81 e0       	ldi	r24, 0x01	; 1
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	08 95       	ret

00000c9c <disableReceiveINT>:

int disableReceiveINT()
{
	UCSR0B &= ~(1<<RXCIE0);
     c9c:	e1 ec       	ldi	r30, 0xC1	; 193
     c9e:	f0 e0       	ldi	r31, 0x00	; 0
     ca0:	80 81       	ld	r24, Z
     ca2:	8f 77       	andi	r24, 0x7F	; 127
     ca4:	80 83       	st	Z, r24
	return 1; 
}
     ca6:	81 e0       	ldi	r24, 0x01	; 1
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	08 95       	ret

00000cac <receiveStatus>:
	return ""; 
}

int receiveStatus()
{
	while(receiveWifiFlag == 0)
     cac:	80 91 dc 06 	lds	r24, 0x06DC
     cb0:	81 11       	cpse	r24, r1
     cb2:	08 c0       	rjmp	.+16     	; 0xcc4 <receiveStatus+0x18>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     cb4:	81 e2       	ldi	r24, 0x21	; 33
     cb6:	8a 95       	dec	r24
     cb8:	f1 f7       	brne	.-4      	; 0xcb6 <receiveStatus+0xa>
     cba:	00 00       	nop
     cbc:	80 91 dc 06 	lds	r24, 0x06DC
     cc0:	88 23       	and	r24, r24
     cc2:	c1 f3       	breq	.-16     	; 0xcb4 <receiveStatus+0x8>
		//printf("Receive Flag: %d\n", receiveWifiFlag);
		//printf("Loooop\n");
	}
	
	return 1; 
}
     cc4:	81 e0       	ldi	r24, 0x01	; 1
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	08 95       	ret

00000cca <buildTransmissionLength>:

unsigned int buildTransmissionLength()
{
     cca:	0f 93       	push	r16
     ccc:	1f 93       	push	r17
     cce:	cf 93       	push	r28
     cd0:	df 93       	push	r29
	if(testPrint)
     cd2:	80 91 ce 06 	lds	r24, 0x06CE
     cd6:	90 91 cf 06 	lds	r25, 0x06CF
     cda:	89 2b       	or	r24, r25
     cdc:	f1 f0       	breq	.+60     	; 0xd1a <buildTransmissionLength+0x50>
     cde:	c0 e0       	ldi	r28, 0x00	; 0
     ce0:	d0 e0       	ldi	r29, 0x00	; 0
	{
		//printf("Header: ");
		for(int i = 0; i < endHeader; i++)
		{
			printf("Value: 0x%02x, Address: %p\n", headerBuffer[i], headerBuffer + i);
     ce2:	01 e1       	ldi	r16, 0x11	; 17
     ce4:	15 e0       	ldi	r17, 0x05	; 5
     ce6:	fe 01       	movw	r30, r28
     ce8:	ed 53       	subi	r30, 0x3D	; 61
     cea:	f9 4f       	sbci	r31, 0xF9	; 249
     cec:	80 81       	ld	r24, Z
     cee:	ff 93       	push	r31
     cf0:	ef 93       	push	r30
     cf2:	1f 92       	push	r1
     cf4:	8f 93       	push	r24
     cf6:	1f 93       	push	r17
     cf8:	0f 93       	push	r16
     cfa:	0e 94 9e 09 	call	0x133c	; 0x133c <printf>
unsigned int buildTransmissionLength()
{
	if(testPrint)
	{
		//printf("Header: ");
		for(int i = 0; i < endHeader; i++)
     cfe:	21 96       	adiw	r28, 0x01	; 1
     d00:	0f 90       	pop	r0
     d02:	0f 90       	pop	r0
     d04:	0f 90       	pop	r0
     d06:	0f 90       	pop	r0
     d08:	0f 90       	pop	r0
     d0a:	0f 90       	pop	r0
     d0c:	c9 30       	cpi	r28, 0x09	; 9
     d0e:	d1 05       	cpc	r29, r1
     d10:	51 f7       	brne	.-44     	; 0xce6 <buildTransmissionLength+0x1c>
		{
			printf("Value: 0x%02x, Address: %p\n", headerBuffer[i], headerBuffer + i);
			//printf("0x%02x ", receiveBuffer[i]);
		}
		printf("\n");
     d12:	8a e0       	ldi	r24, 0x0A	; 10
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	0e 94 b2 09 	call	0x1364	; 0x1364 <putchar>
	}
	transLength = 0; 
     d1a:	10 92 d5 06 	sts	0x06D5, r1
     d1e:	10 92 d4 06 	sts	0x06D4, r1
	transLength += (headerBuffer[ones] & 0x0F);
     d22:	20 91 c9 06 	lds	r18, 0x06C9
     d26:	80 91 d4 06 	lds	r24, 0x06D4
     d2a:	90 91 d5 06 	lds	r25, 0x06D5
     d2e:	2f 70       	andi	r18, 0x0F	; 15
     d30:	82 0f       	add	r24, r18
     d32:	91 1d       	adc	r25, r1
     d34:	90 93 d5 06 	sts	0x06D5, r25
     d38:	80 93 d4 06 	sts	0x06D4, r24
	transLength += (headerBuffer[tens] & 0x0F) * 10; 
     d3c:	80 91 c8 06 	lds	r24, 0x06C8
     d40:	20 91 d4 06 	lds	r18, 0x06D4
     d44:	30 91 d5 06 	lds	r19, 0x06D5
     d48:	8f 70       	andi	r24, 0x0F	; 15
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	ac 01       	movw	r20, r24
     d4e:	44 0f       	add	r20, r20
     d50:	55 1f       	adc	r21, r21
     d52:	88 0f       	add	r24, r24
     d54:	99 1f       	adc	r25, r25
     d56:	88 0f       	add	r24, r24
     d58:	99 1f       	adc	r25, r25
     d5a:	88 0f       	add	r24, r24
     d5c:	99 1f       	adc	r25, r25
     d5e:	84 0f       	add	r24, r20
     d60:	95 1f       	adc	r25, r21
     d62:	82 0f       	add	r24, r18
     d64:	93 1f       	adc	r25, r19
     d66:	90 93 d5 06 	sts	0x06D5, r25
     d6a:	80 93 d4 06 	sts	0x06D4, r24
	transLength += (headerBuffer[hundreds] & 0x0F) * 100; 
     d6e:	20 91 c7 06 	lds	r18, 0x06C7
     d72:	80 91 d4 06 	lds	r24, 0x06D4
     d76:	90 91 d5 06 	lds	r25, 0x06D5
     d7a:	2f 70       	andi	r18, 0x0F	; 15
     d7c:	34 e6       	ldi	r19, 0x64	; 100
     d7e:	23 9f       	mul	r18, r19
     d80:	80 0d       	add	r24, r0
     d82:	91 1d       	adc	r25, r1
     d84:	11 24       	eor	r1, r1
     d86:	90 93 d5 06 	sts	0x06D5, r25
     d8a:	80 93 d4 06 	sts	0x06D4, r24
	transLength += (headerBuffer[thousands] & 0x0F) * 1000; 
     d8e:	60 91 c6 06 	lds	r22, 0x06C6
     d92:	80 91 d4 06 	lds	r24, 0x06D4
     d96:	90 91 d5 06 	lds	r25, 0x06D5
     d9a:	6f 70       	andi	r22, 0x0F	; 15
     d9c:	48 ee       	ldi	r20, 0xE8	; 232
     d9e:	53 e0       	ldi	r21, 0x03	; 3
     da0:	64 9f       	mul	r22, r20
     da2:	90 01       	movw	r18, r0
     da4:	65 9f       	mul	r22, r21
     da6:	30 0d       	add	r19, r0
     da8:	11 24       	eor	r1, r1
     daa:	82 0f       	add	r24, r18
     dac:	93 1f       	adc	r25, r19
     dae:	90 93 d5 06 	sts	0x06D5, r25
     db2:	80 93 d4 06 	sts	0x06D4, r24
	transLength += (headerBuffer[tenThousands] & 0x0F) * 10000; 
     db6:	60 91 c5 06 	lds	r22, 0x06C5
     dba:	80 91 d4 06 	lds	r24, 0x06D4
     dbe:	90 91 d5 06 	lds	r25, 0x06D5
     dc2:	6f 70       	andi	r22, 0x0F	; 15
     dc4:	40 e1       	ldi	r20, 0x10	; 16
     dc6:	57 e2       	ldi	r21, 0x27	; 39
     dc8:	64 9f       	mul	r22, r20
     dca:	90 01       	movw	r18, r0
     dcc:	65 9f       	mul	r22, r21
     dce:	30 0d       	add	r19, r0
     dd0:	11 24       	eor	r1, r1
     dd2:	82 0f       	add	r24, r18
     dd4:	93 1f       	adc	r25, r19
     dd6:	90 93 d5 06 	sts	0x06D5, r25
     dda:	80 93 d4 06 	sts	0x06D4, r24
	//if(transLength < MaxRecSize)
	return transLength; 
     dde:	80 91 d4 06 	lds	r24, 0x06D4
     de2:	90 91 d5 06 	lds	r25, 0x06D5
	//else
		////8 is the length of the header 
		//return MaxRecSize - 8; 
}
     de6:	df 91       	pop	r29
     de8:	cf 91       	pop	r28
     dea:	1f 91       	pop	r17
     dec:	0f 91       	pop	r16
     dee:	08 95       	ret

00000df0 <getTransmissionLength>:

uint16_t getTransmissionLength()
{
	return transLength; 
     df0:	80 91 d4 06 	lds	r24, 0x06D4
     df4:	90 91 d5 06 	lds	r25, 0x06D5
}
     df8:	08 95       	ret

00000dfa <getMessageHeader>:

char* getMessageHeader()
{
	return headerBuffer; 
}
     dfa:	83 ec       	ldi	r24, 0xC3	; 195
     dfc:	96 e0       	ldi	r25, 0x06	; 6
     dfe:	08 95       	ret

00000e00 <errorCheck>:

int errorCheck() 
{
	while(!receiveWifiFlag & 1)
     e00:	80 91 dc 06 	lds	r24, 0x06DC
     e04:	81 11       	cpse	r24, r1
     e06:	08 c0       	rjmp	.+16     	; 0xe18 <errorCheck+0x18>
     e08:	81 e2       	ldi	r24, 0x21	; 33
     e0a:	8a 95       	dec	r24
     e0c:	f1 f7       	brne	.-4      	; 0xe0a <errorCheck+0xa>
     e0e:	00 00       	nop
     e10:	80 91 dc 06 	lds	r24, 0x06DC
     e14:	88 23       	and	r24, r24
     e16:	c1 f3       	breq	.-16     	; 0xe08 <errorCheck+0x8>
		_delay_us(100);
	}
	
	char* header = getMessageHeader();
	//0 denotes a successful command 
	if(header[errorCode] != '0')
     e18:	81 e0       	ldi	r24, 0x01	; 1
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	20 91 c4 06 	lds	r18, 0x06C4
     e20:	20 33       	cpi	r18, 0x30	; 48
     e22:	11 f4       	brne	.+4      	; 0xe28 <errorCheck+0x28>
     e24:	80 e0       	ldi	r24, 0x00	; 0
     e26:	90 e0       	ldi	r25, 0x00	; 0
		return 1; 
	else 
		return 0; 
}
     e28:	08 95       	ret

00000e2a <updateRAMAddress>:

void updateRAMAddress(uint32_t address)
{
	RAMAddress = address; 
     e2a:	60 93 d6 06 	sts	0x06D6, r22
     e2e:	70 93 d7 06 	sts	0x06D7, r23
     e32:	80 93 d8 06 	sts	0x06D8, r24
     e36:	90 93 d9 06 	sts	0x06D9, r25
     e3a:	08 95       	ret

00000e3c <sendCommand>:
}

unsigned int sendCommand(int8_t prefix, char* command, char* value)
{
     e3c:	0f 93       	push	r16
     e3e:	1f 93       	push	r17
     e40:	cf 93       	push	r28
     e42:	df 93       	push	r29
     e44:	ea 01       	movw	r28, r20
	//char* fullCommand = (char *)malloc(MaxSendSize);
	switch(prefix)
     e46:	81 30       	cpi	r24, 0x01	; 1
     e48:	31 f0       	breq	.+12     	; 0xe56 <sendCommand+0x1a>
     e4a:	82 30       	cpi	r24, 0x02	; 2
     e4c:	71 f0       	breq	.+28     	; 0xe6a <sendCommand+0x2e>
     e4e:	8f 3f       	cpi	r24, 0xFF	; 255
     e50:	09 f0       	breq	.+2      	; 0xe54 <sendCommand+0x18>
     e52:	6c c0       	rjmp	.+216    	; 0xf2c <sendCommand+0xf0>
     e54:	17 c0       	rjmp	.+46     	; 0xe84 <sendCommand+0x48>
	{
		case NOPREFIX: 
			break; 
		case GET:
			strcpy(fullCommand, "get "); 
     e56:	85 e0       	ldi	r24, 0x05	; 5
     e58:	e5 e5       	ldi	r30, 0x55	; 85
     e5a:	f2 e0       	ldi	r31, 0x02	; 2
     e5c:	ad ed       	ldi	r26, 0xDD	; 221
     e5e:	b6 e0       	ldi	r27, 0x06	; 6
     e60:	01 90       	ld	r0, Z+
     e62:	0d 92       	st	X+, r0
     e64:	8a 95       	dec	r24
     e66:	e1 f7       	brne	.-8      	; 0xe60 <sendCommand+0x24>
			//strcat(fullCommand, "get ");
			break; 
     e68:	0d c0       	rjmp	.+26     	; 0xe84 <sendCommand+0x48>
		case SET: 
			strcat(fullCommand, "set ");
     e6a:	ad ed       	ldi	r26, 0xDD	; 221
     e6c:	b6 e0       	ldi	r27, 0x06	; 6
     e6e:	0d 90       	ld	r0, X+
     e70:	00 20       	and	r0, r0
     e72:	e9 f7       	brne	.-6      	; 0xe6e <sendCommand+0x32>
     e74:	11 97       	sbiw	r26, 0x01	; 1
     e76:	85 e0       	ldi	r24, 0x05	; 5
     e78:	ed e2       	ldi	r30, 0x2D	; 45
     e7a:	f5 e0       	ldi	r31, 0x05	; 5
     e7c:	01 90       	ld	r0, Z+
     e7e:	0d 92       	st	X+, r0
     e80:	8a 95       	dec	r24
     e82:	e1 f7       	brne	.-8      	; 0xe7c <sendCommand+0x40>
			return 0; 
			break; 
	}
	//printf("Command: %s Length: %d, Address: %p\n", fullCommand, strlen(fullCommand), fullCommand);
	//printf("Command: %s Length: %d, Address: %p\n", command, strlen(command),  command);
	strcat(fullCommand, command);
     e84:	8d ed       	ldi	r24, 0xDD	; 221
     e86:	96 e0       	ldi	r25, 0x06	; 6
     e88:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <strcat>
	//printf("Full Command: %s", fullCommand);	
	if(value != NOVAL)
     e8c:	83 e0       	ldi	r24, 0x03	; 3
     e8e:	cd 32       	cpi	r28, 0x2D	; 45
     e90:	d8 07       	cpc	r29, r24
     e92:	79 f0       	breq	.+30     	; 0xeb2 <sendCommand+0x76>
	{
		strcat(fullCommand, " ");
     e94:	ed ed       	ldi	r30, 0xDD	; 221
     e96:	f6 e0       	ldi	r31, 0x06	; 6
     e98:	01 90       	ld	r0, Z+
     e9a:	00 20       	and	r0, r0
     e9c:	e9 f7       	brne	.-6      	; 0xe98 <sendCommand+0x5c>
     e9e:	31 97       	sbiw	r30, 0x01	; 1
     ea0:	80 e2       	ldi	r24, 0x20	; 32
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	91 83       	std	Z+1, r25	; 0x01
     ea6:	80 83       	st	Z, r24
		strcat(fullCommand, value);
     ea8:	be 01       	movw	r22, r28
     eaa:	8d ed       	ldi	r24, 0xDD	; 221
     eac:	96 e0       	ldi	r25, 0x06	; 6
     eae:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <strcat>
	}
	
	//printf("fullCommand: %s\n", fullCommand);
	strcat(fullCommand, ENDCOMMAND);
     eb2:	cd ed       	ldi	r28, 0xDD	; 221
     eb4:	d6 e0       	ldi	r29, 0x06	; 6
     eb6:	fe 01       	movw	r30, r28
     eb8:	01 90       	ld	r0, Z+
     eba:	00 20       	and	r0, r0
     ebc:	e9 f7       	brne	.-6      	; 0xeb8 <sendCommand+0x7c>
     ebe:	31 97       	sbiw	r30, 0x01	; 1
     ec0:	8d e0       	ldi	r24, 0x0D	; 13
     ec2:	9a e0       	ldi	r25, 0x0A	; 10
     ec4:	a0 e0       	ldi	r26, 0x00	; 0
     ec6:	80 83       	st	Z, r24
     ec8:	91 83       	std	Z+1, r25	; 0x01
     eca:	a2 83       	std	Z+2, r26	; 0x02
	uint16_t length = strlen(fullCommand);
     ecc:	fe 01       	movw	r30, r28
     ece:	01 90       	ld	r0, Z+
     ed0:	00 20       	and	r0, r0
     ed2:	e9 f7       	brne	.-6      	; 0xece <sendCommand+0x92>
     ed4:	31 97       	sbiw	r30, 0x01	; 1
     ed6:	8f 01       	movw	r16, r30
     ed8:	0d 5d       	subi	r16, 0xDD	; 221
     eda:	16 40       	sbci	r17, 0x06	; 6
	printf("Command: %s Length: %d, Address: %p\n", fullCommand, length, fullCommand);
     edc:	df 93       	push	r29
     ede:	cf 93       	push	r28
     ee0:	1f 93       	push	r17
     ee2:	0f 93       	push	r16
     ee4:	df 93       	push	r29
     ee6:	cf 93       	push	r28
     ee8:	82 e3       	ldi	r24, 0x32	; 50
     eea:	95 e0       	ldi	r25, 0x05	; 5
     eec:	9f 93       	push	r25
     eee:	8f 93       	push	r24
     ef0:	0e 94 9e 09 	call	0x133c	; 0x133c <printf>
	uart_send(fullCommand, length);
     ef4:	b8 01       	movw	r22, r16
     ef6:	ce 01       	movw	r24, r28
     ef8:	0e 94 11 06 	call	0xc22	; 0xc22 <uart_send>
	memset(fullCommand, 0x00, 100);
     efc:	84 e6       	ldi	r24, 0x64	; 100
     efe:	fe 01       	movw	r30, r28
     f00:	11 92       	st	Z+, r1
     f02:	8a 95       	dec	r24
     f04:	e9 f7       	brne	.-6      	; 0xf00 <sendCommand+0xc4>
	//PORTD |= (1<<RTS);
	printf("Freed!\n");
     f06:	87 e5       	ldi	r24, 0x57	; 87
     f08:	95 e0       	ldi	r25, 0x05	; 5
     f0a:	0e 94 b9 09 	call	0x1372	; 0x1372 <puts>
	printf("Returning!\n");
     f0e:	8e e5       	ldi	r24, 0x5E	; 94
     f10:	95 e0       	ldi	r25, 0x05	; 5
     f12:	0e 94 b9 09 	call	0x1372	; 0x1372 <puts>
	return 1; 
     f16:	8d b7       	in	r24, 0x3d	; 61
     f18:	9e b7       	in	r25, 0x3e	; 62
     f1a:	08 96       	adiw	r24, 0x08	; 8
     f1c:	0f b6       	in	r0, 0x3f	; 63
     f1e:	f8 94       	cli
     f20:	9e bf       	out	0x3e, r25	; 62
     f22:	0f be       	out	0x3f, r0	; 63
     f24:	8d bf       	out	0x3d, r24	; 61
     f26:	81 e0       	ldi	r24, 0x01	; 1
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	02 c0       	rjmp	.+4      	; 0xf30 <sendCommand+0xf4>
			break; 
		case SET: 
			strcat(fullCommand, "set ");
			break; 
		default:
			return 0; 
     f2c:	80 e0       	ldi	r24, 0x00	; 0
     f2e:	90 e0       	ldi	r25, 0x00	; 0
	memset(fullCommand, 0x00, 100);
	//PORTD |= (1<<RTS);
	printf("Freed!\n");
	printf("Returning!\n");
	return 1; 
}
     f30:	df 91       	pop	r29
     f32:	cf 91       	pop	r28
     f34:	1f 91       	pop	r17
     f36:	0f 91       	pop	r16
     f38:	08 95       	ret

00000f3a <__vector_25>:
	//PORTD |= (1<<CTS);
	//sei();
//}

ISR(USART0_RX_vect)
{
     f3a:	1f 92       	push	r1
     f3c:	0f 92       	push	r0
     f3e:	0f b6       	in	r0, 0x3f	; 63
     f40:	0f 92       	push	r0
     f42:	11 24       	eor	r1, r1
     f44:	2f 93       	push	r18
     f46:	3f 93       	push	r19
     f48:	4f 93       	push	r20
     f4a:	5f 93       	push	r21
     f4c:	6f 93       	push	r22
     f4e:	7f 93       	push	r23
     f50:	8f 93       	push	r24
     f52:	9f 93       	push	r25
     f54:	af 93       	push	r26
     f56:	bf 93       	push	r27
     f58:	cf 93       	push	r28
     f5a:	df 93       	push	r29
     f5c:	ef 93       	push	r30
     f5e:	ff 93       	push	r31
	cli();
     f60:	f8 94       	cli
	//if(testPrint)
		//printf("Interrupt!\n");
	if(!bufferStart)
     f62:	80 91 da 06 	lds	r24, 0x06DA
     f66:	90 91 db 06 	lds	r25, 0x06DB
     f6a:	89 2b       	or	r24, r25
     f6c:	e9 f4       	brne	.+58     	; 0xfa8 <__vector_25+0x6e>
	{
		buff = uart_receiveChar();
     f6e:	0e 94 3d 06 	call	0xc7a	; 0xc7a <uart_receiveChar>
     f72:	80 93 cc 06 	sts	0x06CC, r24
		//Header always begins with letter 'R'
		if(buff == headerStartVal)
     f76:	80 91 cc 06 	lds	r24, 0x06CC
     f7a:	82 35       	cpi	r24, 0x52	; 82
     f7c:	09 f0       	breq	.+2      	; 0xf80 <__vector_25+0x46>
     f7e:	f6 c0       	rjmp	.+492    	; 0x116c <__vector_25+0x232>
		{
			//PORTD &= ~(1<<RTS);
			//if(testPrint)
				//printf("Beginning Found @ %d\n", i); 
				
			i = 0;
     f80:	10 92 d1 06 	sts	0x06D1, r1
     f84:	10 92 d0 06 	sts	0x06D0, r1
			headerBuffer[i] = buff; 
     f88:	e0 91 d0 06 	lds	r30, 0x06D0
     f8c:	f0 91 d1 06 	lds	r31, 0x06D1
     f90:	80 91 cc 06 	lds	r24, 0x06CC
     f94:	ed 53       	subi	r30, 0x3D	; 61
     f96:	f9 4f       	sbci	r31, 0xF9	; 249
     f98:	80 83       	st	Z, r24
			
				//if(testPrint)
					//printf("Header: %c @ address %p", headerBuffer[i], headerBuffer); 
					
			bufferStart = 1;
     f9a:	81 e0       	ldi	r24, 0x01	; 1
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	90 93 db 06 	sts	0x06DB, r25
     fa2:	80 93 da 06 	sts	0x06DA, r24
     fa6:	e2 c0       	rjmp	.+452    	; 0x116c <__vector_25+0x232>
	
	else
	{
		//printf("Beginning of buffer.\n");
		//Grab Receive Header
		if(i < endHeader)
     fa8:	80 91 d0 06 	lds	r24, 0x06D0
     fac:	90 91 d1 06 	lds	r25, 0x06D1
     fb0:	09 97       	sbiw	r24, 0x09	; 9
     fb2:	50 f4       	brcc	.+20     	; 0xfc8 <__vector_25+0x8e>
		{
			//PORTD &= ~(1<<RTS);
			headerBuffer[i] = uart_receiveChar();
     fb4:	c0 91 d0 06 	lds	r28, 0x06D0
     fb8:	d0 91 d1 06 	lds	r29, 0x06D1
     fbc:	0e 94 3d 06 	call	0xc7a	; 0xc7a <uart_receiveChar>
     fc0:	cd 53       	subi	r28, 0x3D	; 61
     fc2:	d9 4f       	sbci	r29, 0xF9	; 249
     fc4:	88 83       	st	Y, r24
     fc6:	d2 c0       	rjmp	.+420    	; 0x116c <__vector_25+0x232>
				//printf("Header: %c @ address %p\n", headerBuffer[i], headerBuffer + i);
			//i++; 
			//RAMWriteByte(uart_receiveChar(), i);
			//PORTD |= (1<<RTS); 
		}
		else if(i == endHeader)
     fc8:	80 91 d0 06 	lds	r24, 0x06D0
     fcc:	90 91 d1 06 	lds	r25, 0x06D1
     fd0:	09 97       	sbiw	r24, 0x09	; 9
     fd2:	b9 f4       	brne	.+46     	; 0x1002 <__vector_25+0xc8>
		{
			transLength = buildTransmissionLength();
     fd4:	0e 94 65 06 	call	0xcca	; 0xcca <buildTransmissionLength>
     fd8:	90 93 d5 06 	sts	0x06D5, r25
     fdc:	80 93 d4 06 	sts	0x06D4, r24
			//i++; 
			//if(testPrint)
				printf("Transmission Length: %d\n", transLength);
     fe0:	80 91 d4 06 	lds	r24, 0x06D4
     fe4:	90 91 d5 06 	lds	r25, 0x06D5
     fe8:	9f 93       	push	r25
     fea:	8f 93       	push	r24
     fec:	89 e6       	ldi	r24, 0x69	; 105
     fee:	95 e0       	ldi	r25, 0x05	; 5
     ff0:	9f 93       	push	r25
     ff2:	8f 93       	push	r24
     ff4:	0e 94 9e 09 	call	0x133c	; 0x133c <printf>
     ff8:	0f 90       	pop	r0
     ffa:	0f 90       	pop	r0
     ffc:	0f 90       	pop	r0
     ffe:	0f 90       	pop	r0
    1000:	b5 c0       	rjmp	.+362    	; 0x116c <__vector_25+0x232>
		}
		else
		{
			if(i < transLength + endHeader)
    1002:	20 91 d4 06 	lds	r18, 0x06D4
    1006:	30 91 d5 06 	lds	r19, 0x06D5
    100a:	80 91 d0 06 	lds	r24, 0x06D0
    100e:	90 91 d1 06 	lds	r25, 0x06D1
    1012:	27 5f       	subi	r18, 0xF7	; 247
    1014:	3f 4f       	sbci	r19, 0xFF	; 255
    1016:	82 17       	cp	r24, r18
    1018:	93 07       	cpc	r25, r19
    101a:	08 f0       	brcs	.+2      	; 0x101e <__vector_25+0xe4>
    101c:	6d c0       	rjmp	.+218    	; 0x10f8 <__vector_25+0x1be>
			{
				//printf("Translength: %d", transLength);
				buff = uart_receiveChar();
    101e:	0e 94 3d 06 	call	0xc7a	; 0xc7a <uart_receiveChar>
    1022:	80 93 cc 06 	sts	0x06CC, r24
				if(compressFlag == 1)
    1026:	80 91 d3 06 	lds	r24, 0x06D3
    102a:	81 30       	cpi	r24, 0x01	; 1
    102c:	09 f0       	breq	.+2      	; 0x1030 <__vector_25+0xf6>
    102e:	4b c0       	rjmp	.+150    	; 0x10c6 <__vector_25+0x18c>
				{
					//printf("Compressing!\n");
					//PORTD &= ~(1<<CTS);
					if(buff == ':')
    1030:	80 91 cc 06 	lds	r24, 0x06CC
    1034:	8a 33       	cpi	r24, 0x3A	; 58
    1036:	c9 f4       	brne	.+50     	; 0x106a <__vector_25+0x130>
					{
						//PORTD &= ~(1<<RTS);
						RAMWriteByte(buff, RAMAddress + i - endHeader -1);
    1038:	20 91 d0 06 	lds	r18, 0x06D0
    103c:	30 91 d1 06 	lds	r19, 0x06D1
    1040:	40 91 d6 06 	lds	r20, 0x06D6
    1044:	50 91 d7 06 	lds	r21, 0x06D7
    1048:	60 91 d8 06 	lds	r22, 0x06D8
    104c:	70 91 d9 06 	lds	r23, 0x06D9
    1050:	80 91 cc 06 	lds	r24, 0x06CC
    1054:	4a 50       	subi	r20, 0x0A	; 10
    1056:	51 09       	sbc	r21, r1
    1058:	61 09       	sbc	r22, r1
    105a:	71 09       	sbc	r23, r1
    105c:	42 0f       	add	r20, r18
    105e:	53 1f       	adc	r21, r19
    1060:	61 1d       	adc	r22, r1
    1062:	71 1d       	adc	r23, r1
    1064:	0e 94 11 05 	call	0xa22	; 0xa22 <RAMWriteByte>
    1068:	81 c0       	rjmp	.+258    	; 0x116c <__vector_25+0x232>
					}
					else if(!secondNibble)
    106a:	80 91 d2 06 	lds	r24, 0x06D2
    106e:	81 11       	cpse	r24, r1
    1070:	0a c0       	rjmp	.+20     	; 0x1086 <__vector_25+0x14c>
					{
						//Mask the ASCII Nibble 
						compressBuff = (buff & 0x0F);
    1072:	80 91 cc 06 	lds	r24, 0x06CC
						//Shift it into the upper nibble  
						compressBuff <<= 4; 
    1076:	82 95       	swap	r24
    1078:	80 7f       	andi	r24, 0xF0	; 240
    107a:	80 93 cd 06 	sts	0x06CD, r24
						secondNibble =  1;
    107e:	81 e0       	ldi	r24, 0x01	; 1
    1080:	80 93 d2 06 	sts	0x06D2, r24
    1084:	73 c0       	rjmp	.+230    	; 0x116c <__vector_25+0x232>
					}
					else
					{
						compressBuff |= buff; 
    1086:	90 91 cc 06 	lds	r25, 0x06CC
    108a:	80 91 cd 06 	lds	r24, 0x06CD
    108e:	89 2b       	or	r24, r25
    1090:	80 93 cd 06 	sts	0x06CD, r24
						RAMWriteByte(compressBuff, RAMAddress + i - endHeader -1);
    1094:	20 91 d0 06 	lds	r18, 0x06D0
    1098:	30 91 d1 06 	lds	r19, 0x06D1
    109c:	40 91 d6 06 	lds	r20, 0x06D6
    10a0:	50 91 d7 06 	lds	r21, 0x06D7
    10a4:	60 91 d8 06 	lds	r22, 0x06D8
    10a8:	70 91 d9 06 	lds	r23, 0x06D9
    10ac:	4a 50       	subi	r20, 0x0A	; 10
    10ae:	51 09       	sbc	r21, r1
    10b0:	61 09       	sbc	r22, r1
    10b2:	71 09       	sbc	r23, r1
    10b4:	42 0f       	add	r20, r18
    10b6:	53 1f       	adc	r21, r19
    10b8:	61 1d       	adc	r22, r1
    10ba:	71 1d       	adc	r23, r1
    10bc:	0e 94 11 05 	call	0xa22	; 0xa22 <RAMWriteByte>
						secondNibble = 0; 
    10c0:	10 92 d2 06 	sts	0x06D2, r1
    10c4:	53 c0       	rjmp	.+166    	; 0x116c <__vector_25+0x232>
					}
				}
				else
				{
					RAMWriteByte(buff, RAMAddress + i - endHeader -1);	
    10c6:	20 91 d0 06 	lds	r18, 0x06D0
    10ca:	30 91 d1 06 	lds	r19, 0x06D1
    10ce:	40 91 d6 06 	lds	r20, 0x06D6
    10d2:	50 91 d7 06 	lds	r21, 0x06D7
    10d6:	60 91 d8 06 	lds	r22, 0x06D8
    10da:	70 91 d9 06 	lds	r23, 0x06D9
    10de:	80 91 cc 06 	lds	r24, 0x06CC
    10e2:	4a 50       	subi	r20, 0x0A	; 10
    10e4:	51 09       	sbc	r21, r1
    10e6:	61 09       	sbc	r22, r1
    10e8:	71 09       	sbc	r23, r1
    10ea:	42 0f       	add	r20, r18
    10ec:	53 1f       	adc	r21, r19
    10ee:	61 1d       	adc	r22, r1
    10f0:	71 1d       	adc	r23, r1
    10f2:	0e 94 11 05 	call	0xa22	; 0xa22 <RAMWriteByte>
    10f6:	3a c0       	rjmp	.+116    	; 0x116c <__vector_25+0x232>
			}

			else
			{
				//printf("End of String!\n");
				RAMWriteByte(0x00, RAMAddress + i - endHeader -1);
    10f8:	80 91 d0 06 	lds	r24, 0x06D0
    10fc:	90 91 d1 06 	lds	r25, 0x06D1
    1100:	40 91 d6 06 	lds	r20, 0x06D6
    1104:	50 91 d7 06 	lds	r21, 0x06D7
    1108:	60 91 d8 06 	lds	r22, 0x06D8
    110c:	70 91 d9 06 	lds	r23, 0x06D9
    1110:	4a 50       	subi	r20, 0x0A	; 10
    1112:	51 09       	sbc	r21, r1
    1114:	61 09       	sbc	r22, r1
    1116:	71 09       	sbc	r23, r1
    1118:	48 0f       	add	r20, r24
    111a:	59 1f       	adc	r21, r25
    111c:	61 1d       	adc	r22, r1
    111e:	71 1d       	adc	r23, r1
    1120:	80 e0       	ldi	r24, 0x00	; 0
    1122:	0e 94 11 05 	call	0xa22	; 0xa22 <RAMWriteByte>
				//cli();
				i = 0;
    1126:	10 92 d1 06 	sts	0x06D1, r1
    112a:	10 92 d0 06 	sts	0x06D0, r1
				bufferStart = 0;
    112e:	10 92 db 06 	sts	0x06DB, r1
    1132:	10 92 da 06 	sts	0x06DA, r1
				compressFlag = 0; 
    1136:	10 92 d3 06 	sts	0x06D3, r1
				secondNibble = 0; 
    113a:	10 92 d2 06 	sts	0x06D2, r1
				compressBuff = 0x00; 
    113e:	10 92 cd 06 	sts	0x06CD, r1
				//done receiving
				receiveWifiFlag = 1;
    1142:	81 e0       	ldi	r24, 0x01	; 1
    1144:	80 93 dc 06 	sts	0x06DC, r24
				printf("Transmission Length: %d\n", buildTransmissionLength());
    1148:	0e 94 65 06 	call	0xcca	; 0xcca <buildTransmissionLength>
    114c:	9f 93       	push	r25
    114e:	8f 93       	push	r24
    1150:	89 e6       	ldi	r24, 0x69	; 105
    1152:	95 e0       	ldi	r25, 0x05	; 5
    1154:	9f 93       	push	r25
    1156:	8f 93       	push	r24
    1158:	0e 94 9e 09 	call	0x133c	; 0x133c <printf>
				printf("Done Receiving!\n");
    115c:	82 e8       	ldi	r24, 0x82	; 130
    115e:	95 e0       	ldi	r25, 0x05	; 5
    1160:	0e 94 b9 09 	call	0x1372	; 0x1372 <puts>
    1164:	0f 90       	pop	r0
    1166:	0f 90       	pop	r0
    1168:	0f 90       	pop	r0
    116a:	0f 90       	pop	r0
		}
		//printf("%d\n", i); 
		//i++; 
	}
	//if(bufferStart && !receiveWifiFlag)
	i++; 
    116c:	80 91 d0 06 	lds	r24, 0x06D0
    1170:	90 91 d1 06 	lds	r25, 0x06D1
    1174:	01 96       	adiw	r24, 0x01	; 1
    1176:	90 93 d1 06 	sts	0x06D1, r25
    117a:	80 93 d0 06 	sts	0x06D0, r24
		
	//PORTD |= (1<<CTS); 
	sei(); 
    117e:	78 94       	sei
}
    1180:	ff 91       	pop	r31
    1182:	ef 91       	pop	r30
    1184:	df 91       	pop	r29
    1186:	cf 91       	pop	r28
    1188:	bf 91       	pop	r27
    118a:	af 91       	pop	r26
    118c:	9f 91       	pop	r25
    118e:	8f 91       	pop	r24
    1190:	7f 91       	pop	r23
    1192:	6f 91       	pop	r22
    1194:	5f 91       	pop	r21
    1196:	4f 91       	pop	r20
    1198:	3f 91       	pop	r19
    119a:	2f 91       	pop	r18
    119c:	0f 90       	pop	r0
    119e:	0f be       	out	0x3f, r0	; 63
    11a0:	0f 90       	pop	r0
    11a2:	1f 90       	pop	r1
    11a4:	18 95       	reti

000011a6 <hexInit>:
				   ':', 0x10, 0x00, 0x10, 0x00, 0x12, 0xC0, 0x11, 0xC0, 0x10, 0xC0, 0x0F, 0xC0, 0x0E, 0xC0, 0x0D, 0xC0, 0x0C, 0xC0, 0x0B, 0xC0, 0x6C,
				   ':', 0x00, 0x00, 0x00, 0x01, 0xFF};

void hexInit()
{
	RAMOffset = 0; 
    11a6:	10 92 74 07 	sts	0x0774, r1
    11aa:	10 92 73 07 	sts	0x0773, r1
	memset(hexRow, 0x00, 50); 
    11ae:	82 e3       	ldi	r24, 0x32	; 50
    11b0:	e1 e4       	ldi	r30, 0x41	; 65
    11b2:	f7 e0       	ldi	r31, 0x07	; 7
    11b4:	df 01       	movw	r26, r30
    11b6:	1d 92       	st	X+, r1
    11b8:	8a 95       	dec	r24
    11ba:	e9 f7       	brne	.-6      	; 0x11b6 <hexInit+0x10>
    11bc:	08 95       	ret

000011be <compressFile>:


//Converts ASCII to Hex in external RAM 
//Length should be the transmission length given from the Wi-Fi module 
int compressFile(uint16_t length)
{
    11be:	af 92       	push	r10
    11c0:	bf 92       	push	r11
    11c2:	cf 92       	push	r12
    11c4:	df 92       	push	r13
    11c6:	ef 92       	push	r14
    11c8:	ff 92       	push	r15
    11ca:	0f 93       	push	r16
    11cc:	1f 93       	push	r17
    11ce:	cf 93       	push	r28
    11d0:	df 93       	push	r29
    11d2:	6c 01       	movw	r12, r24
	uint8_t upperNibble; 
	uint8_t lowerNibble; 
	uint8_t hexVal; 
	uint16_t j; 
	
	for(int i=0; i<length; i++)
    11d4:	00 97       	sbiw	r24, 0x00	; 0
    11d6:	79 f1       	breq	.+94     	; 0x1236 <compressFile+0x78>
    11d8:	01 e0       	ldi	r16, 0x01	; 1
    11da:	10 e0       	ldi	r17, 0x00	; 0
    11dc:	c0 e0       	ldi	r28, 0x00	; 0
    11de:	d0 e0       	ldi	r29, 0x00	; 0
    11e0:	78 01       	movw	r14, r16
    11e2:	81 e0       	ldi	r24, 0x01	; 1
    11e4:	e8 1a       	sub	r14, r24
    11e6:	f1 08       	sbc	r15, r1
	{
		upperNibble = RAMReadByte(HEX_FILE_ADDRESS + i);
    11e8:	be 01       	movw	r22, r28
    11ea:	88 27       	eor	r24, r24
    11ec:	77 fd       	sbrc	r23, 7
    11ee:	80 95       	com	r24
    11f0:	98 2f       	mov	r25, r24
    11f2:	0e 94 2b 05 	call	0xa56	; 0xa56 <RAMReadByte>
		//If it's a colon, leave it alone as it is the start code 
		if(upperNibble == ':'){
    11f6:	8a 33       	cpi	r24, 0x3A	; 58
    11f8:	c1 f0       	breq	.+48     	; 0x122a <compressFile+0x6c>
			j++;
			continue;
		}
		
		upperNibble &= 0x0F;
    11fa:	8f 70       	andi	r24, 0x0F	; 15
		upperNibble <<= upperNibble;  
    11fc:	28 2f       	mov	r18, r24
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	59 01       	movw	r10, r18
    1202:	02 c0       	rjmp	.+4      	; 0x1208 <compressFile+0x4a>
    1204:	aa 0c       	add	r10, r10
    1206:	bb 1c       	adc	r11, r11
    1208:	8a 95       	dec	r24
    120a:	e2 f7       	brpl	.-8      	; 0x1204 <compressFile+0x46>
		hexVal = upperNibble; 
		
		lowerNibble = RAMReadByte(HEX_FILE_ADDRESS + 1 + i);
    120c:	21 96       	adiw	r28, 0x01	; 1
    120e:	be 01       	movw	r22, r28
    1210:	88 27       	eor	r24, r24
    1212:	77 fd       	sbrc	r23, 7
    1214:	80 95       	com	r24
    1216:	98 2f       	mov	r25, r24
    1218:	0e 94 2b 05 	call	0xa56	; 0xa56 <RAMReadByte>
		lowerNibble &= 0x0F;
		hexVal |= lowerNibble; 
		
		//Backfill the already converted ASCII value's addresses with the new hex value 
		RAMWriteByte(hexVal, HEX_FILE_ADDRESS + j); 
    121c:	a7 01       	movw	r20, r14
    121e:	60 e0       	ldi	r22, 0x00	; 0
    1220:	70 e0       	ldi	r23, 0x00	; 0
		upperNibble &= 0x0F;
		upperNibble <<= upperNibble;  
		hexVal = upperNibble; 
		
		lowerNibble = RAMReadByte(HEX_FILE_ADDRESS + 1 + i);
		lowerNibble &= 0x0F;
    1222:	8f 70       	andi	r24, 0x0F	; 15
		hexVal |= lowerNibble; 
		
		//Backfill the already converted ASCII value's addresses with the new hex value 
		RAMWriteByte(hexVal, HEX_FILE_ADDRESS + j); 
    1224:	8a 29       	or	r24, r10
    1226:	0e 94 11 05 	call	0xa22	; 0xa22 <RAMWriteByte>
	uint8_t upperNibble; 
	uint8_t lowerNibble; 
	uint8_t hexVal; 
	uint16_t j; 
	
	for(int i=0; i<length; i++)
    122a:	21 96       	adiw	r28, 0x01	; 1
    122c:	0f 5f       	subi	r16, 0xFF	; 255
    122e:	1f 4f       	sbci	r17, 0xFF	; 255
    1230:	cc 15       	cp	r28, r12
    1232:	dd 05       	cpc	r29, r13
    1234:	a8 f2       	brcs	.-86     	; 0x11e0 <compressFile+0x22>
		//hence why the for loop does not have i+=2 
		i++;  
	}
	
	return 1; 
    1236:	81 e0       	ldi	r24, 0x01	; 1
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	df 91       	pop	r29
    123c:	cf 91       	pop	r28
    123e:	1f 91       	pop	r17
    1240:	0f 91       	pop	r16
    1242:	ff 90       	pop	r15
    1244:	ef 90       	pop	r14
    1246:	df 90       	pop	r13
    1248:	cf 90       	pop	r12
    124a:	bf 90       	pop	r11
    124c:	af 90       	pop	r10
    124e:	08 95       	ret

00001250 <main>:
#include "Program/AVR.h"

int main(void)
{
	char* SignatureBytes;
	connectionInit(); 
    1250:	0e 94 91 00 	call	0x122	; 0x122 <connectionInit>
	hexInit();
    1254:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <hexInit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1258:	2f e3       	ldi	r18, 0x3F	; 63
    125a:	8d e0       	ldi	r24, 0x0D	; 13
    125c:	93 e0       	ldi	r25, 0x03	; 3
    125e:	21 50       	subi	r18, 0x01	; 1
    1260:	80 40       	sbci	r24, 0x00	; 0
    1262:	90 40       	sbci	r25, 0x00	; 0
    1264:	e1 f7       	brne	.-8      	; 0x125e <main+0xe>
    1266:	00 c0       	rjmp	.+0      	; 0x1268 <main+0x18>
    1268:	00 00       	nop
	//setMachineMode();
	_delay_ms(1000);
	if(serverConnect("www.wi-pro.us", "80"))
    126a:	62 e9       	ldi	r22, 0x92	; 146
    126c:	75 e0       	ldi	r23, 0x05	; 5
    126e:	8d e1       	ldi	r24, 0x1D	; 29
    1270:	92 e0       	ldi	r25, 0x02	; 2
    1272:	0e 94 32 05 	call	0xa64	; 0xa64 <serverConnect>
    1276:	89 2b       	or	r24, r25
    1278:	29 f0       	breq	.+10     	; 0x1284 <main+0x34>
	{
		printf("Connected!!\n");
    127a:	85 e9       	ldi	r24, 0x95	; 149
    127c:	95 e0       	ldi	r25, 0x05	; 5
    127e:	0e 94 b9 09 	call	0x1372	; 0x1372 <puts>
    1282:	04 c0       	rjmp	.+8      	; 0x128c <main+0x3c>
	}  
	else
	{
		printf("Connection Failed\n"); 
    1284:	81 ea       	ldi	r24, 0xA1	; 161
    1286:	95 e0       	ldi	r25, 0x05	; 5
    1288:	0e 94 b9 09 	call	0x1372	; 0x1372 <puts>
		//ReadFlash();
		//printf("\nDone!\n\n");
	//}
	//ExitParallelProgrammingMode();
	
	printf("Done!\n"); 
    128c:	83 eb       	ldi	r24, 0xB3	; 179
    128e:	95 e0       	ldi	r25, 0x05	; 5
    1290:	0e 94 b9 09 	call	0x1372	; 0x1372 <puts>
    1294:	ff cf       	rjmp	.-2      	; 0x1294 <main+0x44>

00001296 <__umulhisi3>:
    1296:	a2 9f       	mul	r26, r18
    1298:	b0 01       	movw	r22, r0
    129a:	b3 9f       	mul	r27, r19
    129c:	c0 01       	movw	r24, r0
    129e:	a3 9f       	mul	r26, r19
    12a0:	70 0d       	add	r23, r0
    12a2:	81 1d       	adc	r24, r1
    12a4:	11 24       	eor	r1, r1
    12a6:	91 1d       	adc	r25, r1
    12a8:	b2 9f       	mul	r27, r18
    12aa:	70 0d       	add	r23, r0
    12ac:	81 1d       	adc	r24, r1
    12ae:	11 24       	eor	r1, r1
    12b0:	91 1d       	adc	r25, r1
    12b2:	08 95       	ret

000012b4 <strcat>:
    12b4:	fb 01       	movw	r30, r22
    12b6:	dc 01       	movw	r26, r24
    12b8:	0d 90       	ld	r0, X+
    12ba:	00 20       	and	r0, r0
    12bc:	e9 f7       	brne	.-6      	; 0x12b8 <strcat+0x4>
    12be:	11 97       	sbiw	r26, 0x01	; 1
    12c0:	01 90       	ld	r0, Z+
    12c2:	0d 92       	st	X+, r0
    12c4:	00 20       	and	r0, r0
    12c6:	e1 f7       	brne	.-8      	; 0x12c0 <strcat+0xc>
    12c8:	08 95       	ret

000012ca <strcpy>:
    12ca:	fb 01       	movw	r30, r22
    12cc:	dc 01       	movw	r26, r24
    12ce:	01 90       	ld	r0, Z+
    12d0:	0d 92       	st	X+, r0
    12d2:	00 20       	and	r0, r0
    12d4:	e1 f7       	brne	.-8      	; 0x12ce <strcpy+0x4>
    12d6:	08 95       	ret

000012d8 <fputc>:
    12d8:	0f 93       	push	r16
    12da:	1f 93       	push	r17
    12dc:	cf 93       	push	r28
    12de:	df 93       	push	r29
    12e0:	18 2f       	mov	r17, r24
    12e2:	09 2f       	mov	r16, r25
    12e4:	eb 01       	movw	r28, r22
    12e6:	8b 81       	ldd	r24, Y+3	; 0x03
    12e8:	81 fd       	sbrc	r24, 1
    12ea:	03 c0       	rjmp	.+6      	; 0x12f2 <fputc+0x1a>
    12ec:	8f ef       	ldi	r24, 0xFF	; 255
    12ee:	9f ef       	ldi	r25, 0xFF	; 255
    12f0:	20 c0       	rjmp	.+64     	; 0x1332 <fputc+0x5a>
    12f2:	82 ff       	sbrs	r24, 2
    12f4:	10 c0       	rjmp	.+32     	; 0x1316 <fputc+0x3e>
    12f6:	4e 81       	ldd	r20, Y+6	; 0x06
    12f8:	5f 81       	ldd	r21, Y+7	; 0x07
    12fa:	2c 81       	ldd	r18, Y+4	; 0x04
    12fc:	3d 81       	ldd	r19, Y+5	; 0x05
    12fe:	42 17       	cp	r20, r18
    1300:	53 07       	cpc	r21, r19
    1302:	7c f4       	brge	.+30     	; 0x1322 <fputc+0x4a>
    1304:	e8 81       	ld	r30, Y
    1306:	f9 81       	ldd	r31, Y+1	; 0x01
    1308:	9f 01       	movw	r18, r30
    130a:	2f 5f       	subi	r18, 0xFF	; 255
    130c:	3f 4f       	sbci	r19, 0xFF	; 255
    130e:	39 83       	std	Y+1, r19	; 0x01
    1310:	28 83       	st	Y, r18
    1312:	10 83       	st	Z, r17
    1314:	06 c0       	rjmp	.+12     	; 0x1322 <fputc+0x4a>
    1316:	e8 85       	ldd	r30, Y+8	; 0x08
    1318:	f9 85       	ldd	r31, Y+9	; 0x09
    131a:	81 2f       	mov	r24, r17
    131c:	09 95       	icall
    131e:	89 2b       	or	r24, r25
    1320:	29 f7       	brne	.-54     	; 0x12ec <fputc+0x14>
    1322:	2e 81       	ldd	r18, Y+6	; 0x06
    1324:	3f 81       	ldd	r19, Y+7	; 0x07
    1326:	2f 5f       	subi	r18, 0xFF	; 255
    1328:	3f 4f       	sbci	r19, 0xFF	; 255
    132a:	3f 83       	std	Y+7, r19	; 0x07
    132c:	2e 83       	std	Y+6, r18	; 0x06
    132e:	81 2f       	mov	r24, r17
    1330:	90 2f       	mov	r25, r16
    1332:	df 91       	pop	r29
    1334:	cf 91       	pop	r28
    1336:	1f 91       	pop	r17
    1338:	0f 91       	pop	r16
    133a:	08 95       	ret

0000133c <printf>:
    133c:	a0 e0       	ldi	r26, 0x00	; 0
    133e:	b0 e0       	ldi	r27, 0x00	; 0
    1340:	e4 ea       	ldi	r30, 0xA4	; 164
    1342:	f9 e0       	ldi	r31, 0x09	; 9
    1344:	0c 94 3c 0c 	jmp	0x1878	; 0x1878 <__prologue_saves__+0x20>
    1348:	fe 01       	movw	r30, r28
    134a:	35 96       	adiw	r30, 0x05	; 5
    134c:	61 91       	ld	r22, Z+
    134e:	71 91       	ld	r23, Z+
    1350:	af 01       	movw	r20, r30
    1352:	80 91 77 07 	lds	r24, 0x0777
    1356:	90 91 78 07 	lds	r25, 0x0778
    135a:	0e 94 e6 09 	call	0x13cc	; 0x13cc <vfprintf>
    135e:	e2 e0       	ldi	r30, 0x02	; 2
    1360:	0c 94 58 0c 	jmp	0x18b0	; 0x18b0 <__epilogue_restores__+0x20>

00001364 <putchar>:
    1364:	60 91 77 07 	lds	r22, 0x0777
    1368:	70 91 78 07 	lds	r23, 0x0778
    136c:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <fputc>
    1370:	08 95       	ret

00001372 <puts>:
    1372:	0f 93       	push	r16
    1374:	1f 93       	push	r17
    1376:	cf 93       	push	r28
    1378:	df 93       	push	r29
    137a:	e0 91 77 07 	lds	r30, 0x0777
    137e:	f0 91 78 07 	lds	r31, 0x0778
    1382:	23 81       	ldd	r18, Z+3	; 0x03
    1384:	21 ff       	sbrs	r18, 1
    1386:	1b c0       	rjmp	.+54     	; 0x13be <puts+0x4c>
    1388:	ec 01       	movw	r28, r24
    138a:	00 e0       	ldi	r16, 0x00	; 0
    138c:	10 e0       	ldi	r17, 0x00	; 0
    138e:	89 91       	ld	r24, Y+
    1390:	60 91 77 07 	lds	r22, 0x0777
    1394:	70 91 78 07 	lds	r23, 0x0778
    1398:	db 01       	movw	r26, r22
    139a:	18 96       	adiw	r26, 0x08	; 8
    139c:	ed 91       	ld	r30, X+
    139e:	fc 91       	ld	r31, X
    13a0:	19 97       	sbiw	r26, 0x09	; 9
    13a2:	88 23       	and	r24, r24
    13a4:	31 f0       	breq	.+12     	; 0x13b2 <puts+0x40>
    13a6:	09 95       	icall
    13a8:	89 2b       	or	r24, r25
    13aa:	89 f3       	breq	.-30     	; 0x138e <puts+0x1c>
    13ac:	0f ef       	ldi	r16, 0xFF	; 255
    13ae:	1f ef       	ldi	r17, 0xFF	; 255
    13b0:	ee cf       	rjmp	.-36     	; 0x138e <puts+0x1c>
    13b2:	8a e0       	ldi	r24, 0x0A	; 10
    13b4:	09 95       	icall
    13b6:	89 2b       	or	r24, r25
    13b8:	11 f4       	brne	.+4      	; 0x13be <puts+0x4c>
    13ba:	c8 01       	movw	r24, r16
    13bc:	02 c0       	rjmp	.+4      	; 0x13c2 <puts+0x50>
    13be:	8f ef       	ldi	r24, 0xFF	; 255
    13c0:	9f ef       	ldi	r25, 0xFF	; 255
    13c2:	df 91       	pop	r29
    13c4:	cf 91       	pop	r28
    13c6:	1f 91       	pop	r17
    13c8:	0f 91       	pop	r16
    13ca:	08 95       	ret

000013cc <vfprintf>:
    13cc:	ac e0       	ldi	r26, 0x0C	; 12
    13ce:	b0 e0       	ldi	r27, 0x00	; 0
    13d0:	ec ee       	ldi	r30, 0xEC	; 236
    13d2:	f9 e0       	ldi	r31, 0x09	; 9
    13d4:	0c 94 2c 0c 	jmp	0x1858	; 0x1858 <__prologue_saves__>
    13d8:	7c 01       	movw	r14, r24
    13da:	6b 01       	movw	r12, r22
    13dc:	8a 01       	movw	r16, r20
    13de:	fc 01       	movw	r30, r24
    13e0:	17 82       	std	Z+7, r1	; 0x07
    13e2:	16 82       	std	Z+6, r1	; 0x06
    13e4:	83 81       	ldd	r24, Z+3	; 0x03
    13e6:	81 ff       	sbrs	r24, 1
    13e8:	bd c1       	rjmp	.+890    	; 0x1764 <vfprintf+0x398>
    13ea:	ce 01       	movw	r24, r28
    13ec:	01 96       	adiw	r24, 0x01	; 1
    13ee:	4c 01       	movw	r8, r24
    13f0:	f7 01       	movw	r30, r14
    13f2:	93 81       	ldd	r25, Z+3	; 0x03
    13f4:	f6 01       	movw	r30, r12
    13f6:	93 fd       	sbrc	r25, 3
    13f8:	85 91       	lpm	r24, Z+
    13fa:	93 ff       	sbrs	r25, 3
    13fc:	81 91       	ld	r24, Z+
    13fe:	6f 01       	movw	r12, r30
    1400:	88 23       	and	r24, r24
    1402:	09 f4       	brne	.+2      	; 0x1406 <vfprintf+0x3a>
    1404:	ab c1       	rjmp	.+854    	; 0x175c <vfprintf+0x390>
    1406:	85 32       	cpi	r24, 0x25	; 37
    1408:	39 f4       	brne	.+14     	; 0x1418 <vfprintf+0x4c>
    140a:	93 fd       	sbrc	r25, 3
    140c:	85 91       	lpm	r24, Z+
    140e:	93 ff       	sbrs	r25, 3
    1410:	81 91       	ld	r24, Z+
    1412:	6f 01       	movw	r12, r30
    1414:	85 32       	cpi	r24, 0x25	; 37
    1416:	29 f4       	brne	.+10     	; 0x1422 <vfprintf+0x56>
    1418:	b7 01       	movw	r22, r14
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <fputc>
    1420:	e7 cf       	rjmp	.-50     	; 0x13f0 <vfprintf+0x24>
    1422:	51 2c       	mov	r5, r1
    1424:	31 2c       	mov	r3, r1
    1426:	20 e0       	ldi	r18, 0x00	; 0
    1428:	20 32       	cpi	r18, 0x20	; 32
    142a:	a0 f4       	brcc	.+40     	; 0x1454 <vfprintf+0x88>
    142c:	8b 32       	cpi	r24, 0x2B	; 43
    142e:	69 f0       	breq	.+26     	; 0x144a <vfprintf+0x7e>
    1430:	30 f4       	brcc	.+12     	; 0x143e <vfprintf+0x72>
    1432:	80 32       	cpi	r24, 0x20	; 32
    1434:	59 f0       	breq	.+22     	; 0x144c <vfprintf+0x80>
    1436:	83 32       	cpi	r24, 0x23	; 35
    1438:	69 f4       	brne	.+26     	; 0x1454 <vfprintf+0x88>
    143a:	20 61       	ori	r18, 0x10	; 16
    143c:	2c c0       	rjmp	.+88     	; 0x1496 <vfprintf+0xca>
    143e:	8d 32       	cpi	r24, 0x2D	; 45
    1440:	39 f0       	breq	.+14     	; 0x1450 <vfprintf+0x84>
    1442:	80 33       	cpi	r24, 0x30	; 48
    1444:	39 f4       	brne	.+14     	; 0x1454 <vfprintf+0x88>
    1446:	21 60       	ori	r18, 0x01	; 1
    1448:	26 c0       	rjmp	.+76     	; 0x1496 <vfprintf+0xca>
    144a:	22 60       	ori	r18, 0x02	; 2
    144c:	24 60       	ori	r18, 0x04	; 4
    144e:	23 c0       	rjmp	.+70     	; 0x1496 <vfprintf+0xca>
    1450:	28 60       	ori	r18, 0x08	; 8
    1452:	21 c0       	rjmp	.+66     	; 0x1496 <vfprintf+0xca>
    1454:	27 fd       	sbrc	r18, 7
    1456:	27 c0       	rjmp	.+78     	; 0x14a6 <vfprintf+0xda>
    1458:	30 ed       	ldi	r19, 0xD0	; 208
    145a:	38 0f       	add	r19, r24
    145c:	3a 30       	cpi	r19, 0x0A	; 10
    145e:	78 f4       	brcc	.+30     	; 0x147e <vfprintf+0xb2>
    1460:	26 ff       	sbrs	r18, 6
    1462:	06 c0       	rjmp	.+12     	; 0x1470 <vfprintf+0xa4>
    1464:	fa e0       	ldi	r31, 0x0A	; 10
    1466:	5f 9e       	mul	r5, r31
    1468:	30 0d       	add	r19, r0
    146a:	11 24       	eor	r1, r1
    146c:	53 2e       	mov	r5, r19
    146e:	13 c0       	rjmp	.+38     	; 0x1496 <vfprintf+0xca>
    1470:	8a e0       	ldi	r24, 0x0A	; 10
    1472:	38 9e       	mul	r3, r24
    1474:	30 0d       	add	r19, r0
    1476:	11 24       	eor	r1, r1
    1478:	33 2e       	mov	r3, r19
    147a:	20 62       	ori	r18, 0x20	; 32
    147c:	0c c0       	rjmp	.+24     	; 0x1496 <vfprintf+0xca>
    147e:	8e 32       	cpi	r24, 0x2E	; 46
    1480:	21 f4       	brne	.+8      	; 0x148a <vfprintf+0xbe>
    1482:	26 fd       	sbrc	r18, 6
    1484:	6b c1       	rjmp	.+726    	; 0x175c <vfprintf+0x390>
    1486:	20 64       	ori	r18, 0x40	; 64
    1488:	06 c0       	rjmp	.+12     	; 0x1496 <vfprintf+0xca>
    148a:	8c 36       	cpi	r24, 0x6C	; 108
    148c:	11 f4       	brne	.+4      	; 0x1492 <vfprintf+0xc6>
    148e:	20 68       	ori	r18, 0x80	; 128
    1490:	02 c0       	rjmp	.+4      	; 0x1496 <vfprintf+0xca>
    1492:	88 36       	cpi	r24, 0x68	; 104
    1494:	41 f4       	brne	.+16     	; 0x14a6 <vfprintf+0xda>
    1496:	f6 01       	movw	r30, r12
    1498:	93 fd       	sbrc	r25, 3
    149a:	85 91       	lpm	r24, Z+
    149c:	93 ff       	sbrs	r25, 3
    149e:	81 91       	ld	r24, Z+
    14a0:	6f 01       	movw	r12, r30
    14a2:	81 11       	cpse	r24, r1
    14a4:	c1 cf       	rjmp	.-126    	; 0x1428 <vfprintf+0x5c>
    14a6:	98 2f       	mov	r25, r24
    14a8:	9f 7d       	andi	r25, 0xDF	; 223
    14aa:	95 54       	subi	r25, 0x45	; 69
    14ac:	93 30       	cpi	r25, 0x03	; 3
    14ae:	28 f4       	brcc	.+10     	; 0x14ba <vfprintf+0xee>
    14b0:	0c 5f       	subi	r16, 0xFC	; 252
    14b2:	1f 4f       	sbci	r17, 0xFF	; 255
    14b4:	ff e3       	ldi	r31, 0x3F	; 63
    14b6:	f9 83       	std	Y+1, r31	; 0x01
    14b8:	0d c0       	rjmp	.+26     	; 0x14d4 <vfprintf+0x108>
    14ba:	83 36       	cpi	r24, 0x63	; 99
    14bc:	31 f0       	breq	.+12     	; 0x14ca <vfprintf+0xfe>
    14be:	83 37       	cpi	r24, 0x73	; 115
    14c0:	71 f0       	breq	.+28     	; 0x14de <vfprintf+0x112>
    14c2:	83 35       	cpi	r24, 0x53	; 83
    14c4:	09 f0       	breq	.+2      	; 0x14c8 <vfprintf+0xfc>
    14c6:	5b c0       	rjmp	.+182    	; 0x157e <vfprintf+0x1b2>
    14c8:	22 c0       	rjmp	.+68     	; 0x150e <vfprintf+0x142>
    14ca:	f8 01       	movw	r30, r16
    14cc:	80 81       	ld	r24, Z
    14ce:	89 83       	std	Y+1, r24	; 0x01
    14d0:	0e 5f       	subi	r16, 0xFE	; 254
    14d2:	1f 4f       	sbci	r17, 0xFF	; 255
    14d4:	44 24       	eor	r4, r4
    14d6:	43 94       	inc	r4
    14d8:	51 2c       	mov	r5, r1
    14da:	54 01       	movw	r10, r8
    14dc:	15 c0       	rjmp	.+42     	; 0x1508 <vfprintf+0x13c>
    14de:	38 01       	movw	r6, r16
    14e0:	f2 e0       	ldi	r31, 0x02	; 2
    14e2:	6f 0e       	add	r6, r31
    14e4:	71 1c       	adc	r7, r1
    14e6:	f8 01       	movw	r30, r16
    14e8:	a0 80       	ld	r10, Z
    14ea:	b1 80       	ldd	r11, Z+1	; 0x01
    14ec:	26 ff       	sbrs	r18, 6
    14ee:	03 c0       	rjmp	.+6      	; 0x14f6 <vfprintf+0x12a>
    14f0:	65 2d       	mov	r22, r5
    14f2:	70 e0       	ldi	r23, 0x00	; 0
    14f4:	02 c0       	rjmp	.+4      	; 0x14fa <vfprintf+0x12e>
    14f6:	6f ef       	ldi	r22, 0xFF	; 255
    14f8:	7f ef       	ldi	r23, 0xFF	; 255
    14fa:	c5 01       	movw	r24, r10
    14fc:	2c 87       	std	Y+12, r18	; 0x0c
    14fe:	0e 94 c3 0b 	call	0x1786	; 0x1786 <strnlen>
    1502:	2c 01       	movw	r4, r24
    1504:	83 01       	movw	r16, r6
    1506:	2c 85       	ldd	r18, Y+12	; 0x0c
    1508:	2f 77       	andi	r18, 0x7F	; 127
    150a:	22 2e       	mov	r2, r18
    150c:	17 c0       	rjmp	.+46     	; 0x153c <vfprintf+0x170>
    150e:	38 01       	movw	r6, r16
    1510:	f2 e0       	ldi	r31, 0x02	; 2
    1512:	6f 0e       	add	r6, r31
    1514:	71 1c       	adc	r7, r1
    1516:	f8 01       	movw	r30, r16
    1518:	a0 80       	ld	r10, Z
    151a:	b1 80       	ldd	r11, Z+1	; 0x01
    151c:	26 ff       	sbrs	r18, 6
    151e:	03 c0       	rjmp	.+6      	; 0x1526 <vfprintf+0x15a>
    1520:	65 2d       	mov	r22, r5
    1522:	70 e0       	ldi	r23, 0x00	; 0
    1524:	02 c0       	rjmp	.+4      	; 0x152a <vfprintf+0x15e>
    1526:	6f ef       	ldi	r22, 0xFF	; 255
    1528:	7f ef       	ldi	r23, 0xFF	; 255
    152a:	c5 01       	movw	r24, r10
    152c:	2c 87       	std	Y+12, r18	; 0x0c
    152e:	0e 94 b8 0b 	call	0x1770	; 0x1770 <strnlen_P>
    1532:	2c 01       	movw	r4, r24
    1534:	2c 85       	ldd	r18, Y+12	; 0x0c
    1536:	20 68       	ori	r18, 0x80	; 128
    1538:	22 2e       	mov	r2, r18
    153a:	83 01       	movw	r16, r6
    153c:	23 fc       	sbrc	r2, 3
    153e:	1b c0       	rjmp	.+54     	; 0x1576 <vfprintf+0x1aa>
    1540:	83 2d       	mov	r24, r3
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	48 16       	cp	r4, r24
    1546:	59 06       	cpc	r5, r25
    1548:	b0 f4       	brcc	.+44     	; 0x1576 <vfprintf+0x1aa>
    154a:	b7 01       	movw	r22, r14
    154c:	80 e2       	ldi	r24, 0x20	; 32
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <fputc>
    1554:	3a 94       	dec	r3
    1556:	f4 cf       	rjmp	.-24     	; 0x1540 <vfprintf+0x174>
    1558:	f5 01       	movw	r30, r10
    155a:	27 fc       	sbrc	r2, 7
    155c:	85 91       	lpm	r24, Z+
    155e:	27 fe       	sbrs	r2, 7
    1560:	81 91       	ld	r24, Z+
    1562:	5f 01       	movw	r10, r30
    1564:	b7 01       	movw	r22, r14
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <fputc>
    156c:	31 10       	cpse	r3, r1
    156e:	3a 94       	dec	r3
    1570:	f1 e0       	ldi	r31, 0x01	; 1
    1572:	4f 1a       	sub	r4, r31
    1574:	51 08       	sbc	r5, r1
    1576:	41 14       	cp	r4, r1
    1578:	51 04       	cpc	r5, r1
    157a:	71 f7       	brne	.-36     	; 0x1558 <vfprintf+0x18c>
    157c:	e5 c0       	rjmp	.+458    	; 0x1748 <vfprintf+0x37c>
    157e:	84 36       	cpi	r24, 0x64	; 100
    1580:	11 f0       	breq	.+4      	; 0x1586 <vfprintf+0x1ba>
    1582:	89 36       	cpi	r24, 0x69	; 105
    1584:	39 f5       	brne	.+78     	; 0x15d4 <vfprintf+0x208>
    1586:	f8 01       	movw	r30, r16
    1588:	27 ff       	sbrs	r18, 7
    158a:	07 c0       	rjmp	.+14     	; 0x159a <vfprintf+0x1ce>
    158c:	60 81       	ld	r22, Z
    158e:	71 81       	ldd	r23, Z+1	; 0x01
    1590:	82 81       	ldd	r24, Z+2	; 0x02
    1592:	93 81       	ldd	r25, Z+3	; 0x03
    1594:	0c 5f       	subi	r16, 0xFC	; 252
    1596:	1f 4f       	sbci	r17, 0xFF	; 255
    1598:	08 c0       	rjmp	.+16     	; 0x15aa <vfprintf+0x1de>
    159a:	60 81       	ld	r22, Z
    159c:	71 81       	ldd	r23, Z+1	; 0x01
    159e:	88 27       	eor	r24, r24
    15a0:	77 fd       	sbrc	r23, 7
    15a2:	80 95       	com	r24
    15a4:	98 2f       	mov	r25, r24
    15a6:	0e 5f       	subi	r16, 0xFE	; 254
    15a8:	1f 4f       	sbci	r17, 0xFF	; 255
    15aa:	2f 76       	andi	r18, 0x6F	; 111
    15ac:	b2 2e       	mov	r11, r18
    15ae:	97 ff       	sbrs	r25, 7
    15b0:	09 c0       	rjmp	.+18     	; 0x15c4 <vfprintf+0x1f8>
    15b2:	90 95       	com	r25
    15b4:	80 95       	com	r24
    15b6:	70 95       	com	r23
    15b8:	61 95       	neg	r22
    15ba:	7f 4f       	sbci	r23, 0xFF	; 255
    15bc:	8f 4f       	sbci	r24, 0xFF	; 255
    15be:	9f 4f       	sbci	r25, 0xFF	; 255
    15c0:	20 68       	ori	r18, 0x80	; 128
    15c2:	b2 2e       	mov	r11, r18
    15c4:	2a e0       	ldi	r18, 0x0A	; 10
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	a4 01       	movw	r20, r8
    15ca:	0e 94 ce 0b 	call	0x179c	; 0x179c <__ultoa_invert>
    15ce:	a8 2e       	mov	r10, r24
    15d0:	a8 18       	sub	r10, r8
    15d2:	44 c0       	rjmp	.+136    	; 0x165c <vfprintf+0x290>
    15d4:	85 37       	cpi	r24, 0x75	; 117
    15d6:	29 f4       	brne	.+10     	; 0x15e2 <vfprintf+0x216>
    15d8:	2f 7e       	andi	r18, 0xEF	; 239
    15da:	b2 2e       	mov	r11, r18
    15dc:	2a e0       	ldi	r18, 0x0A	; 10
    15de:	30 e0       	ldi	r19, 0x00	; 0
    15e0:	25 c0       	rjmp	.+74     	; 0x162c <vfprintf+0x260>
    15e2:	f2 2f       	mov	r31, r18
    15e4:	f9 7f       	andi	r31, 0xF9	; 249
    15e6:	bf 2e       	mov	r11, r31
    15e8:	8f 36       	cpi	r24, 0x6F	; 111
    15ea:	c1 f0       	breq	.+48     	; 0x161c <vfprintf+0x250>
    15ec:	18 f4       	brcc	.+6      	; 0x15f4 <vfprintf+0x228>
    15ee:	88 35       	cpi	r24, 0x58	; 88
    15f0:	79 f0       	breq	.+30     	; 0x1610 <vfprintf+0x244>
    15f2:	b4 c0       	rjmp	.+360    	; 0x175c <vfprintf+0x390>
    15f4:	80 37       	cpi	r24, 0x70	; 112
    15f6:	19 f0       	breq	.+6      	; 0x15fe <vfprintf+0x232>
    15f8:	88 37       	cpi	r24, 0x78	; 120
    15fa:	21 f0       	breq	.+8      	; 0x1604 <vfprintf+0x238>
    15fc:	af c0       	rjmp	.+350    	; 0x175c <vfprintf+0x390>
    15fe:	2f 2f       	mov	r18, r31
    1600:	20 61       	ori	r18, 0x10	; 16
    1602:	b2 2e       	mov	r11, r18
    1604:	b4 fe       	sbrs	r11, 4
    1606:	0d c0       	rjmp	.+26     	; 0x1622 <vfprintf+0x256>
    1608:	8b 2d       	mov	r24, r11
    160a:	84 60       	ori	r24, 0x04	; 4
    160c:	b8 2e       	mov	r11, r24
    160e:	09 c0       	rjmp	.+18     	; 0x1622 <vfprintf+0x256>
    1610:	24 ff       	sbrs	r18, 4
    1612:	0a c0       	rjmp	.+20     	; 0x1628 <vfprintf+0x25c>
    1614:	9f 2f       	mov	r25, r31
    1616:	96 60       	ori	r25, 0x06	; 6
    1618:	b9 2e       	mov	r11, r25
    161a:	06 c0       	rjmp	.+12     	; 0x1628 <vfprintf+0x25c>
    161c:	28 e0       	ldi	r18, 0x08	; 8
    161e:	30 e0       	ldi	r19, 0x00	; 0
    1620:	05 c0       	rjmp	.+10     	; 0x162c <vfprintf+0x260>
    1622:	20 e1       	ldi	r18, 0x10	; 16
    1624:	30 e0       	ldi	r19, 0x00	; 0
    1626:	02 c0       	rjmp	.+4      	; 0x162c <vfprintf+0x260>
    1628:	20 e1       	ldi	r18, 0x10	; 16
    162a:	32 e0       	ldi	r19, 0x02	; 2
    162c:	f8 01       	movw	r30, r16
    162e:	b7 fe       	sbrs	r11, 7
    1630:	07 c0       	rjmp	.+14     	; 0x1640 <vfprintf+0x274>
    1632:	60 81       	ld	r22, Z
    1634:	71 81       	ldd	r23, Z+1	; 0x01
    1636:	82 81       	ldd	r24, Z+2	; 0x02
    1638:	93 81       	ldd	r25, Z+3	; 0x03
    163a:	0c 5f       	subi	r16, 0xFC	; 252
    163c:	1f 4f       	sbci	r17, 0xFF	; 255
    163e:	06 c0       	rjmp	.+12     	; 0x164c <vfprintf+0x280>
    1640:	60 81       	ld	r22, Z
    1642:	71 81       	ldd	r23, Z+1	; 0x01
    1644:	80 e0       	ldi	r24, 0x00	; 0
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	0e 5f       	subi	r16, 0xFE	; 254
    164a:	1f 4f       	sbci	r17, 0xFF	; 255
    164c:	a4 01       	movw	r20, r8
    164e:	0e 94 ce 0b 	call	0x179c	; 0x179c <__ultoa_invert>
    1652:	a8 2e       	mov	r10, r24
    1654:	a8 18       	sub	r10, r8
    1656:	fb 2d       	mov	r31, r11
    1658:	ff 77       	andi	r31, 0x7F	; 127
    165a:	bf 2e       	mov	r11, r31
    165c:	b6 fe       	sbrs	r11, 6
    165e:	0b c0       	rjmp	.+22     	; 0x1676 <vfprintf+0x2aa>
    1660:	2b 2d       	mov	r18, r11
    1662:	2e 7f       	andi	r18, 0xFE	; 254
    1664:	a5 14       	cp	r10, r5
    1666:	50 f4       	brcc	.+20     	; 0x167c <vfprintf+0x2b0>
    1668:	b4 fe       	sbrs	r11, 4
    166a:	0a c0       	rjmp	.+20     	; 0x1680 <vfprintf+0x2b4>
    166c:	b2 fc       	sbrc	r11, 2
    166e:	08 c0       	rjmp	.+16     	; 0x1680 <vfprintf+0x2b4>
    1670:	2b 2d       	mov	r18, r11
    1672:	2e 7e       	andi	r18, 0xEE	; 238
    1674:	05 c0       	rjmp	.+10     	; 0x1680 <vfprintf+0x2b4>
    1676:	7a 2c       	mov	r7, r10
    1678:	2b 2d       	mov	r18, r11
    167a:	03 c0       	rjmp	.+6      	; 0x1682 <vfprintf+0x2b6>
    167c:	7a 2c       	mov	r7, r10
    167e:	01 c0       	rjmp	.+2      	; 0x1682 <vfprintf+0x2b6>
    1680:	75 2c       	mov	r7, r5
    1682:	24 ff       	sbrs	r18, 4
    1684:	0d c0       	rjmp	.+26     	; 0x16a0 <vfprintf+0x2d4>
    1686:	fe 01       	movw	r30, r28
    1688:	ea 0d       	add	r30, r10
    168a:	f1 1d       	adc	r31, r1
    168c:	80 81       	ld	r24, Z
    168e:	80 33       	cpi	r24, 0x30	; 48
    1690:	11 f4       	brne	.+4      	; 0x1696 <vfprintf+0x2ca>
    1692:	29 7e       	andi	r18, 0xE9	; 233
    1694:	09 c0       	rjmp	.+18     	; 0x16a8 <vfprintf+0x2dc>
    1696:	22 ff       	sbrs	r18, 2
    1698:	06 c0       	rjmp	.+12     	; 0x16a6 <vfprintf+0x2da>
    169a:	73 94       	inc	r7
    169c:	73 94       	inc	r7
    169e:	04 c0       	rjmp	.+8      	; 0x16a8 <vfprintf+0x2dc>
    16a0:	82 2f       	mov	r24, r18
    16a2:	86 78       	andi	r24, 0x86	; 134
    16a4:	09 f0       	breq	.+2      	; 0x16a8 <vfprintf+0x2dc>
    16a6:	73 94       	inc	r7
    16a8:	23 fd       	sbrc	r18, 3
    16aa:	13 c0       	rjmp	.+38     	; 0x16d2 <vfprintf+0x306>
    16ac:	20 ff       	sbrs	r18, 0
    16ae:	06 c0       	rjmp	.+12     	; 0x16bc <vfprintf+0x2f0>
    16b0:	5a 2c       	mov	r5, r10
    16b2:	73 14       	cp	r7, r3
    16b4:	18 f4       	brcc	.+6      	; 0x16bc <vfprintf+0x2f0>
    16b6:	53 0c       	add	r5, r3
    16b8:	57 18       	sub	r5, r7
    16ba:	73 2c       	mov	r7, r3
    16bc:	73 14       	cp	r7, r3
    16be:	68 f4       	brcc	.+26     	; 0x16da <vfprintf+0x30e>
    16c0:	b7 01       	movw	r22, r14
    16c2:	80 e2       	ldi	r24, 0x20	; 32
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	2c 87       	std	Y+12, r18	; 0x0c
    16c8:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <fputc>
    16cc:	73 94       	inc	r7
    16ce:	2c 85       	ldd	r18, Y+12	; 0x0c
    16d0:	f5 cf       	rjmp	.-22     	; 0x16bc <vfprintf+0x2f0>
    16d2:	73 14       	cp	r7, r3
    16d4:	10 f4       	brcc	.+4      	; 0x16da <vfprintf+0x30e>
    16d6:	37 18       	sub	r3, r7
    16d8:	01 c0       	rjmp	.+2      	; 0x16dc <vfprintf+0x310>
    16da:	31 2c       	mov	r3, r1
    16dc:	24 ff       	sbrs	r18, 4
    16de:	12 c0       	rjmp	.+36     	; 0x1704 <vfprintf+0x338>
    16e0:	b7 01       	movw	r22, r14
    16e2:	80 e3       	ldi	r24, 0x30	; 48
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	2c 87       	std	Y+12, r18	; 0x0c
    16e8:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <fputc>
    16ec:	2c 85       	ldd	r18, Y+12	; 0x0c
    16ee:	22 ff       	sbrs	r18, 2
    16f0:	17 c0       	rjmp	.+46     	; 0x1720 <vfprintf+0x354>
    16f2:	21 ff       	sbrs	r18, 1
    16f4:	03 c0       	rjmp	.+6      	; 0x16fc <vfprintf+0x330>
    16f6:	88 e5       	ldi	r24, 0x58	; 88
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	02 c0       	rjmp	.+4      	; 0x1700 <vfprintf+0x334>
    16fc:	88 e7       	ldi	r24, 0x78	; 120
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	b7 01       	movw	r22, r14
    1702:	0c c0       	rjmp	.+24     	; 0x171c <vfprintf+0x350>
    1704:	82 2f       	mov	r24, r18
    1706:	86 78       	andi	r24, 0x86	; 134
    1708:	59 f0       	breq	.+22     	; 0x1720 <vfprintf+0x354>
    170a:	21 fd       	sbrc	r18, 1
    170c:	02 c0       	rjmp	.+4      	; 0x1712 <vfprintf+0x346>
    170e:	80 e2       	ldi	r24, 0x20	; 32
    1710:	01 c0       	rjmp	.+2      	; 0x1714 <vfprintf+0x348>
    1712:	8b e2       	ldi	r24, 0x2B	; 43
    1714:	27 fd       	sbrc	r18, 7
    1716:	8d e2       	ldi	r24, 0x2D	; 45
    1718:	b7 01       	movw	r22, r14
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <fputc>
    1720:	a5 14       	cp	r10, r5
    1722:	38 f4       	brcc	.+14     	; 0x1732 <vfprintf+0x366>
    1724:	b7 01       	movw	r22, r14
    1726:	80 e3       	ldi	r24, 0x30	; 48
    1728:	90 e0       	ldi	r25, 0x00	; 0
    172a:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <fputc>
    172e:	5a 94       	dec	r5
    1730:	f7 cf       	rjmp	.-18     	; 0x1720 <vfprintf+0x354>
    1732:	aa 94       	dec	r10
    1734:	f4 01       	movw	r30, r8
    1736:	ea 0d       	add	r30, r10
    1738:	f1 1d       	adc	r31, r1
    173a:	80 81       	ld	r24, Z
    173c:	b7 01       	movw	r22, r14
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <fputc>
    1744:	a1 10       	cpse	r10, r1
    1746:	f5 cf       	rjmp	.-22     	; 0x1732 <vfprintf+0x366>
    1748:	33 20       	and	r3, r3
    174a:	09 f4       	brne	.+2      	; 0x174e <vfprintf+0x382>
    174c:	51 ce       	rjmp	.-862    	; 0x13f0 <vfprintf+0x24>
    174e:	b7 01       	movw	r22, r14
    1750:	80 e2       	ldi	r24, 0x20	; 32
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <fputc>
    1758:	3a 94       	dec	r3
    175a:	f6 cf       	rjmp	.-20     	; 0x1748 <vfprintf+0x37c>
    175c:	f7 01       	movw	r30, r14
    175e:	86 81       	ldd	r24, Z+6	; 0x06
    1760:	97 81       	ldd	r25, Z+7	; 0x07
    1762:	02 c0       	rjmp	.+4      	; 0x1768 <vfprintf+0x39c>
    1764:	8f ef       	ldi	r24, 0xFF	; 255
    1766:	9f ef       	ldi	r25, 0xFF	; 255
    1768:	2c 96       	adiw	r28, 0x0c	; 12
    176a:	e2 e1       	ldi	r30, 0x12	; 18
    176c:	0c 94 48 0c 	jmp	0x1890	; 0x1890 <__epilogue_restores__>

00001770 <strnlen_P>:
    1770:	fc 01       	movw	r30, r24
    1772:	05 90       	lpm	r0, Z+
    1774:	61 50       	subi	r22, 0x01	; 1
    1776:	70 40       	sbci	r23, 0x00	; 0
    1778:	01 10       	cpse	r0, r1
    177a:	d8 f7       	brcc	.-10     	; 0x1772 <strnlen_P+0x2>
    177c:	80 95       	com	r24
    177e:	90 95       	com	r25
    1780:	8e 0f       	add	r24, r30
    1782:	9f 1f       	adc	r25, r31
    1784:	08 95       	ret

00001786 <strnlen>:
    1786:	fc 01       	movw	r30, r24
    1788:	61 50       	subi	r22, 0x01	; 1
    178a:	70 40       	sbci	r23, 0x00	; 0
    178c:	01 90       	ld	r0, Z+
    178e:	01 10       	cpse	r0, r1
    1790:	d8 f7       	brcc	.-10     	; 0x1788 <strnlen+0x2>
    1792:	80 95       	com	r24
    1794:	90 95       	com	r25
    1796:	8e 0f       	add	r24, r30
    1798:	9f 1f       	adc	r25, r31
    179a:	08 95       	ret

0000179c <__ultoa_invert>:
    179c:	fa 01       	movw	r30, r20
    179e:	aa 27       	eor	r26, r26
    17a0:	28 30       	cpi	r18, 0x08	; 8
    17a2:	51 f1       	breq	.+84     	; 0x17f8 <__ultoa_invert+0x5c>
    17a4:	20 31       	cpi	r18, 0x10	; 16
    17a6:	81 f1       	breq	.+96     	; 0x1808 <__ultoa_invert+0x6c>
    17a8:	e8 94       	clt
    17aa:	6f 93       	push	r22
    17ac:	6e 7f       	andi	r22, 0xFE	; 254
    17ae:	6e 5f       	subi	r22, 0xFE	; 254
    17b0:	7f 4f       	sbci	r23, 0xFF	; 255
    17b2:	8f 4f       	sbci	r24, 0xFF	; 255
    17b4:	9f 4f       	sbci	r25, 0xFF	; 255
    17b6:	af 4f       	sbci	r26, 0xFF	; 255
    17b8:	b1 e0       	ldi	r27, 0x01	; 1
    17ba:	3e d0       	rcall	.+124    	; 0x1838 <__ultoa_invert+0x9c>
    17bc:	b4 e0       	ldi	r27, 0x04	; 4
    17be:	3c d0       	rcall	.+120    	; 0x1838 <__ultoa_invert+0x9c>
    17c0:	67 0f       	add	r22, r23
    17c2:	78 1f       	adc	r23, r24
    17c4:	89 1f       	adc	r24, r25
    17c6:	9a 1f       	adc	r25, r26
    17c8:	a1 1d       	adc	r26, r1
    17ca:	68 0f       	add	r22, r24
    17cc:	79 1f       	adc	r23, r25
    17ce:	8a 1f       	adc	r24, r26
    17d0:	91 1d       	adc	r25, r1
    17d2:	a1 1d       	adc	r26, r1
    17d4:	6a 0f       	add	r22, r26
    17d6:	71 1d       	adc	r23, r1
    17d8:	81 1d       	adc	r24, r1
    17da:	91 1d       	adc	r25, r1
    17dc:	a1 1d       	adc	r26, r1
    17de:	20 d0       	rcall	.+64     	; 0x1820 <__ultoa_invert+0x84>
    17e0:	09 f4       	brne	.+2      	; 0x17e4 <__ultoa_invert+0x48>
    17e2:	68 94       	set
    17e4:	3f 91       	pop	r19
    17e6:	2a e0       	ldi	r18, 0x0A	; 10
    17e8:	26 9f       	mul	r18, r22
    17ea:	11 24       	eor	r1, r1
    17ec:	30 19       	sub	r19, r0
    17ee:	30 5d       	subi	r19, 0xD0	; 208
    17f0:	31 93       	st	Z+, r19
    17f2:	de f6       	brtc	.-74     	; 0x17aa <__ultoa_invert+0xe>
    17f4:	cf 01       	movw	r24, r30
    17f6:	08 95       	ret
    17f8:	46 2f       	mov	r20, r22
    17fa:	47 70       	andi	r20, 0x07	; 7
    17fc:	40 5d       	subi	r20, 0xD0	; 208
    17fe:	41 93       	st	Z+, r20
    1800:	b3 e0       	ldi	r27, 0x03	; 3
    1802:	0f d0       	rcall	.+30     	; 0x1822 <__ultoa_invert+0x86>
    1804:	c9 f7       	brne	.-14     	; 0x17f8 <__ultoa_invert+0x5c>
    1806:	f6 cf       	rjmp	.-20     	; 0x17f4 <__ultoa_invert+0x58>
    1808:	46 2f       	mov	r20, r22
    180a:	4f 70       	andi	r20, 0x0F	; 15
    180c:	40 5d       	subi	r20, 0xD0	; 208
    180e:	4a 33       	cpi	r20, 0x3A	; 58
    1810:	18 f0       	brcs	.+6      	; 0x1818 <__ultoa_invert+0x7c>
    1812:	49 5d       	subi	r20, 0xD9	; 217
    1814:	31 fd       	sbrc	r19, 1
    1816:	40 52       	subi	r20, 0x20	; 32
    1818:	41 93       	st	Z+, r20
    181a:	02 d0       	rcall	.+4      	; 0x1820 <__ultoa_invert+0x84>
    181c:	a9 f7       	brne	.-22     	; 0x1808 <__ultoa_invert+0x6c>
    181e:	ea cf       	rjmp	.-44     	; 0x17f4 <__ultoa_invert+0x58>
    1820:	b4 e0       	ldi	r27, 0x04	; 4
    1822:	a6 95       	lsr	r26
    1824:	97 95       	ror	r25
    1826:	87 95       	ror	r24
    1828:	77 95       	ror	r23
    182a:	67 95       	ror	r22
    182c:	ba 95       	dec	r27
    182e:	c9 f7       	brne	.-14     	; 0x1822 <__ultoa_invert+0x86>
    1830:	00 97       	sbiw	r24, 0x00	; 0
    1832:	61 05       	cpc	r22, r1
    1834:	71 05       	cpc	r23, r1
    1836:	08 95       	ret
    1838:	9b 01       	movw	r18, r22
    183a:	ac 01       	movw	r20, r24
    183c:	0a 2e       	mov	r0, r26
    183e:	06 94       	lsr	r0
    1840:	57 95       	ror	r21
    1842:	47 95       	ror	r20
    1844:	37 95       	ror	r19
    1846:	27 95       	ror	r18
    1848:	ba 95       	dec	r27
    184a:	c9 f7       	brne	.-14     	; 0x183e <__ultoa_invert+0xa2>
    184c:	62 0f       	add	r22, r18
    184e:	73 1f       	adc	r23, r19
    1850:	84 1f       	adc	r24, r20
    1852:	95 1f       	adc	r25, r21
    1854:	a0 1d       	adc	r26, r0
    1856:	08 95       	ret

00001858 <__prologue_saves__>:
    1858:	2f 92       	push	r2
    185a:	3f 92       	push	r3
    185c:	4f 92       	push	r4
    185e:	5f 92       	push	r5
    1860:	6f 92       	push	r6
    1862:	7f 92       	push	r7
    1864:	8f 92       	push	r8
    1866:	9f 92       	push	r9
    1868:	af 92       	push	r10
    186a:	bf 92       	push	r11
    186c:	cf 92       	push	r12
    186e:	df 92       	push	r13
    1870:	ef 92       	push	r14
    1872:	ff 92       	push	r15
    1874:	0f 93       	push	r16
    1876:	1f 93       	push	r17
    1878:	cf 93       	push	r28
    187a:	df 93       	push	r29
    187c:	cd b7       	in	r28, 0x3d	; 61
    187e:	de b7       	in	r29, 0x3e	; 62
    1880:	ca 1b       	sub	r28, r26
    1882:	db 0b       	sbc	r29, r27
    1884:	0f b6       	in	r0, 0x3f	; 63
    1886:	f8 94       	cli
    1888:	de bf       	out	0x3e, r29	; 62
    188a:	0f be       	out	0x3f, r0	; 63
    188c:	cd bf       	out	0x3d, r28	; 61
    188e:	09 94       	ijmp

00001890 <__epilogue_restores__>:
    1890:	2a 88       	ldd	r2, Y+18	; 0x12
    1892:	39 88       	ldd	r3, Y+17	; 0x11
    1894:	48 88       	ldd	r4, Y+16	; 0x10
    1896:	5f 84       	ldd	r5, Y+15	; 0x0f
    1898:	6e 84       	ldd	r6, Y+14	; 0x0e
    189a:	7d 84       	ldd	r7, Y+13	; 0x0d
    189c:	8c 84       	ldd	r8, Y+12	; 0x0c
    189e:	9b 84       	ldd	r9, Y+11	; 0x0b
    18a0:	aa 84       	ldd	r10, Y+10	; 0x0a
    18a2:	b9 84       	ldd	r11, Y+9	; 0x09
    18a4:	c8 84       	ldd	r12, Y+8	; 0x08
    18a6:	df 80       	ldd	r13, Y+7	; 0x07
    18a8:	ee 80       	ldd	r14, Y+6	; 0x06
    18aa:	fd 80       	ldd	r15, Y+5	; 0x05
    18ac:	0c 81       	ldd	r16, Y+4	; 0x04
    18ae:	1b 81       	ldd	r17, Y+3	; 0x03
    18b0:	aa 81       	ldd	r26, Y+2	; 0x02
    18b2:	b9 81       	ldd	r27, Y+1	; 0x01
    18b4:	ce 0f       	add	r28, r30
    18b6:	d1 1d       	adc	r29, r1
    18b8:	0f b6       	in	r0, 0x3f	; 63
    18ba:	f8 94       	cli
    18bc:	de bf       	out	0x3e, r29	; 62
    18be:	0f be       	out	0x3f, r0	; 63
    18c0:	cd bf       	out	0x3d, r28	; 61
    18c2:	ed 01       	movw	r28, r26
    18c4:	08 95       	ret

000018c6 <_exit>:
    18c6:	f8 94       	cli

000018c8 <__stop_program>:
    18c8:	ff cf       	rjmp	.-2      	; 0x18c8 <__stop_program>
