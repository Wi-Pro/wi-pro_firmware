
wipro.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000007c6  00800200  00002aaa  00002b3e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002aaa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001e7  008009c6  008009c6  00003304  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003304  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000560  00000000  00000000  00003360  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00006483  00000000  00000000  000038c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001949  00000000  00000000  00009d43  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00003811  00000000  00000000  0000b68c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00001304  00000000  00000000  0000eea0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000eaf  00000000  00000000  000101a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00003fff  00000000  00000000  00011053  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000004e8  00000000  00000000  00015052  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
       6:	00 00       	nop
       8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
       a:	00 00       	nop
       c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
       e:	00 00       	nop
      10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
      12:	00 00       	nop
      14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
      16:	00 00       	nop
      18:	87 c2       	rjmp	.+1294   	; 0x528 <__vector_6>
      1a:	00 00       	nop
      1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
      1e:	00 00       	nop
      20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
      22:	00 00       	nop
      24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
      26:	00 00       	nop
      28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
      2e:	00 00       	nop
      30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
      32:	00 00       	nop
      34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
      36:	00 00       	nop
      38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
      3e:	00 00       	nop
      40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
      42:	00 00       	nop
      44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
      46:	00 00       	nop
      48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
      4e:	00 00       	nop
      50:	30 c2       	rjmp	.+1120   	; 0x4b2 <__vector_20>
      52:	00 00       	nop
      54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
      56:	00 00       	nop
      58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
      5e:	00 00       	nop
      60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 17 0b 	jmp	0x162e	; 0x162e <__vector_25>
      68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
      6e:	00 00       	nop
      70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
      72:	00 00       	nop
      74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
      76:	00 00       	nop
      78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
      7e:	00 00       	nop
      80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
      82:	00 00       	nop
      84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
      86:	00 00       	nop
      88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
      8e:	00 00       	nop
      90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
      92:	00 00       	nop
      94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
      96:	00 00       	nop
      98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
      be:	00 00       	nop
      c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
      da:	00 00       	nop
      dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
      de:	00 00       	nop
      e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
      f0:	19 e0       	ldi	r17, 0x09	; 9
      f2:	a0 e0       	ldi	r26, 0x00	; 0
      f4:	b2 e0       	ldi	r27, 0x02	; 2
      f6:	ea ea       	ldi	r30, 0xAA	; 170
      f8:	fa e2       	ldi	r31, 0x2A	; 42
      fa:	00 e0       	ldi	r16, 0x00	; 0
      fc:	0b bf       	out	0x3b, r16	; 59
      fe:	02 c0       	rjmp	.+4      	; 0x104 <__do_copy_data+0x14>
     100:	07 90       	elpm	r0, Z+
     102:	0d 92       	st	X+, r0
     104:	a6 3c       	cpi	r26, 0xC6	; 198
     106:	b1 07       	cpc	r27, r17
     108:	d9 f7       	brne	.-10     	; 0x100 <__do_copy_data+0x10>

0000010a <__do_clear_bss>:
     10a:	2b e0       	ldi	r18, 0x0B	; 11
     10c:	a6 ec       	ldi	r26, 0xC6	; 198
     10e:	b9 e0       	ldi	r27, 0x09	; 9
     110:	01 c0       	rjmp	.+2      	; 0x114 <.do_clear_bss_start>

00000112 <.do_clear_bss_loop>:
     112:	1d 92       	st	X+, r1

00000114 <.do_clear_bss_start>:
     114:	ad 3a       	cpi	r26, 0xAD	; 173
     116:	b2 07       	cpc	r27, r18
     118:	e1 f7       	brne	.-8      	; 0x112 <.do_clear_bss_loop>
     11a:	0e 94 1c 12 	call	0x2438	; 0x2438 <main>
     11e:	0c 94 53 15 	jmp	0x2aa6	; 0x2aa6 <_exit>

00000122 <__bad_interrupt>:
     122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <flagInit>:
	RAMPrint(WIFI_QSTRING_ADDRESS, qLength);
	//RAMRead(WIFI_QSTRING_ADDRESS, qLength, buffer);
	SendData(WIFI_QSTRING_ADDRESS, qLength, 1);
	memset(filepath, 0x00, 100);
	printf("Sent!");
}
     124:	10 92 31 0a 	sts	0x0A31, r1
     128:	10 92 32 0a 	sts	0x0A32, r1
     12c:	10 92 33 0a 	sts	0x0A33, r1
     130:	10 92 34 0a 	sts	0x0A34, r1
     134:	10 92 35 0a 	sts	0x0A35, r1
     138:	10 92 36 0a 	sts	0x0A36, r1
     13c:	65 99       	sbic	0x0c, 5	; 12
     13e:	08 c0       	rjmp	.+16     	; 0x150 <flagInit+0x2c>
     140:	85 e3       	ldi	r24, 0x35	; 53
     142:	92 e0       	ldi	r25, 0x02	; 2
     144:	0e 94 c4 12 	call	0x2588	; 0x2588 <puts>
     148:	28 d2       	rcall	.+1104   	; 0x59a <ethernetInit>
     14a:	81 e0       	ldi	r24, 0x01	; 1
     14c:	80 93 31 0a 	sts	0x0A31, r24
     150:	08 95       	ret

00000152 <pollingInit>:
     152:	e1 e8       	ldi	r30, 0x81	; 129
     154:	f0 e0       	ldi	r31, 0x00	; 0
     156:	80 81       	ld	r24, Z
     158:	84 60       	ori	r24, 0x04	; 4
     15a:	80 83       	st	Z, r24
     15c:	10 92 84 00 	sts	0x0084, r1
     160:	10 92 85 00 	sts	0x0085, r1
     164:	81 e0       	ldi	r24, 0x01	; 1
     166:	80 93 6f 00 	sts	0x006F, r24
     16a:	08 95       	ret

0000016c <ethernetPlugInit>:
     16c:	80 e2       	ldi	r24, 0x20	; 32
     16e:	8d bb       	out	0x1d, r24	; 29
     170:	84 e0       	ldi	r24, 0x04	; 4
     172:	80 93 6a 00 	sts	0x006A, r24
     176:	08 95       	ret

00000178 <connectionInit>:
     178:	2a d6       	rcall	.+3156   	; 0xdce <uart2_init>
     17a:	0e 94 96 09 	call	0x132c	; 0x132c <uart_init>
     17e:	db d6       	rcall	.+3510   	; 0xf36 <SPI_Init>
     180:	d1 df       	rcall	.-94     	; 0x124 <flagInit>
     182:	f4 df       	rcall	.-24     	; 0x16c <ethernetPlugInit>
     184:	84 e6       	ldi	r24, 0x64	; 100
     186:	e9 ec       	ldi	r30, 0xC9	; 201
     188:	f9 e0       	ldi	r31, 0x09	; 9
     18a:	df 01       	movw	r26, r30
     18c:	1d 92       	st	X+, r1
     18e:	8a 95       	dec	r24
     190:	e9 f7       	brne	.-6      	; 0x18c <connectionInit+0x14>
     192:	81 e0       	ldi	r24, 0x01	; 1
     194:	80 93 32 0a 	sts	0x0A32, r24
     198:	08 95       	ret

0000019a <clearFlags>:
     19a:	cf 93       	push	r28
     19c:	df 93       	push	r29
     19e:	80 91 31 0a 	lds	r24, 0x0A31
     1a2:	88 23       	and	r24, r24
     1a4:	b9 f1       	breq	.+110    	; 0x214 <clearFlags+0x7a>
     1a6:	c9 ec       	ldi	r28, 0xC9	; 201
     1a8:	d9 e0       	ldi	r29, 0x09	; 9
     1aa:	84 e6       	ldi	r24, 0x64	; 100
     1ac:	de 01       	movw	r26, r28
     1ae:	1d 92       	st	X+, r1
     1b0:	8a 95       	dec	r24
     1b2:	e9 f7       	brne	.-6      	; 0x1ae <clearFlags+0x14>
     1b4:	85 e0       	ldi	r24, 0x05	; 5
     1b6:	e7 e4       	ldi	r30, 0x47	; 71
     1b8:	f2 e0       	ldi	r31, 0x02	; 2
     1ba:	de 01       	movw	r26, r28
     1bc:	01 90       	ld	r0, Z+
     1be:	0d 92       	st	X+, r0
     1c0:	8a 95       	dec	r24
     1c2:	e1 f7       	brne	.-8      	; 0x1bc <clearFlags+0x22>
     1c4:	de 01       	movw	r26, r28
     1c6:	0d 90       	ld	r0, X+
     1c8:	00 20       	and	r0, r0
     1ca:	e9 f7       	brne	.-6      	; 0x1c6 <clearFlags+0x2c>
     1cc:	11 97       	sbiw	r26, 0x01	; 1
     1ce:	85 e1       	ldi	r24, 0x15	; 21
     1d0:	ec e4       	ldi	r30, 0x4C	; 76
     1d2:	f2 e0       	ldi	r31, 0x02	; 2
     1d4:	01 90       	ld	r0, Z+
     1d6:	0d 92       	st	X+, r0
     1d8:	8a 95       	dec	r24
     1da:	e1 f7       	brne	.-8      	; 0x1d4 <clearFlags+0x3a>
     1dc:	de 01       	movw	r26, r28
     1de:	0d 90       	ld	r0, X+
     1e0:	00 20       	and	r0, r0
     1e2:	e9 f7       	brne	.-6      	; 0x1de <clearFlags+0x44>
     1e4:	11 97       	sbiw	r26, 0x01	; 1
     1e6:	82 e1       	ldi	r24, 0x12	; 18
     1e8:	e1 e6       	ldi	r30, 0x61	; 97
     1ea:	f2 e0       	ldi	r31, 0x02	; 2
     1ec:	01 90       	ld	r0, Z+
     1ee:	0d 92       	st	X+, r0
     1f0:	8a 95       	dec	r24
     1f2:	e1 f7       	brne	.-8      	; 0x1ec <clearFlags+0x52>
     1f4:	09 90       	ld	r0, Y+
     1f6:	00 20       	and	r0, r0
     1f8:	e9 f7       	brne	.-6      	; 0x1f4 <clearFlags+0x5a>
     1fa:	de 01       	movw	r26, r28
     1fc:	11 97       	sbiw	r26, 0x01	; 1
     1fe:	83 e1       	ldi	r24, 0x13	; 19
     200:	e3 e7       	ldi	r30, 0x73	; 115
     202:	f2 e0       	ldi	r31, 0x02	; 2
     204:	01 90       	ld	r0, Z+
     206:	0d 92       	st	X+, r0
     208:	8a 95       	dec	r24
     20a:	e1 f7       	brne	.-8      	; 0x204 <clearFlags+0x6a>
     20c:	89 ec       	ldi	r24, 0xC9	; 201
     20e:	99 e0       	ldi	r25, 0x09	; 9
     210:	d9 d1       	rcall	.+946    	; 0x5c4 <updateFileEthernet>
     212:	36 c0       	rjmp	.+108    	; 0x280 <clearFlags+0xe6>
     214:	80 91 32 0a 	lds	r24, 0x0A32
     218:	88 23       	and	r24, r24
     21a:	91 f1       	breq	.+100    	; 0x280 <clearFlags+0xe6>
     21c:	c9 ec       	ldi	r28, 0xC9	; 201
     21e:	d9 e0       	ldi	r29, 0x09	; 9
     220:	8a e0       	ldi	r24, 0x0A	; 10
     222:	e6 e8       	ldi	r30, 0x86	; 134
     224:	f2 e0       	ldi	r31, 0x02	; 2
     226:	de 01       	movw	r26, r28
     228:	01 90       	ld	r0, Z+
     22a:	0d 92       	st	X+, r0
     22c:	8a 95       	dec	r24
     22e:	e1 f7       	brne	.-8      	; 0x228 <clearFlags+0x8e>
     230:	de 01       	movw	r26, r28
     232:	0d 90       	ld	r0, X+
     234:	00 20       	and	r0, r0
     236:	e9 f7       	brne	.-6      	; 0x232 <clearFlags+0x98>
     238:	11 97       	sbiw	r26, 0x01	; 1
     23a:	85 e1       	ldi	r24, 0x15	; 21
     23c:	ec e4       	ldi	r30, 0x4C	; 76
     23e:	f2 e0       	ldi	r31, 0x02	; 2
     240:	01 90       	ld	r0, Z+
     242:	0d 92       	st	X+, r0
     244:	8a 95       	dec	r24
     246:	e1 f7       	brne	.-8      	; 0x240 <clearFlags+0xa6>
     248:	de 01       	movw	r26, r28
     24a:	0d 90       	ld	r0, X+
     24c:	00 20       	and	r0, r0
     24e:	e9 f7       	brne	.-6      	; 0x24a <clearFlags+0xb0>
     250:	11 97       	sbiw	r26, 0x01	; 1
     252:	82 e1       	ldi	r24, 0x12	; 18
     254:	e1 e6       	ldi	r30, 0x61	; 97
     256:	f2 e0       	ldi	r31, 0x02	; 2
     258:	01 90       	ld	r0, Z+
     25a:	0d 92       	st	X+, r0
     25c:	8a 95       	dec	r24
     25e:	e1 f7       	brne	.-8      	; 0x258 <clearFlags+0xbe>
     260:	09 90       	ld	r0, Y+
     262:	00 20       	and	r0, r0
     264:	e9 f7       	brne	.-6      	; 0x260 <clearFlags+0xc6>
     266:	de 01       	movw	r26, r28
     268:	11 97       	sbiw	r26, 0x01	; 1
     26a:	83 e1       	ldi	r24, 0x13	; 19
     26c:	e3 e7       	ldi	r30, 0x73	; 115
     26e:	f2 e0       	ldi	r31, 0x02	; 2
     270:	01 90       	ld	r0, Z+
     272:	0d 92       	st	X+, r0
     274:	8a 95       	dec	r24
     276:	e1 f7       	brne	.-8      	; 0x270 <clearFlags+0xd6>
     278:	89 ec       	ldi	r24, 0xC9	; 201
     27a:	99 e0       	ldi	r25, 0x09	; 9
     27c:	0e 94 7f 09 	call	0x12fe	; 0x12fe <updateFileWifi>
     280:	84 e6       	ldi	r24, 0x64	; 100
     282:	e9 ec       	ldi	r30, 0xC9	; 201
     284:	f9 e0       	ldi	r31, 0x09	; 9
     286:	df 01       	movw	r26, r30
     288:	1d 92       	st	X+, r1
     28a:	8a 95       	dec	r24
     28c:	e9 f7       	brne	.-6      	; 0x288 <clearFlags+0xee>
     28e:	81 e0       	ldi	r24, 0x01	; 1
     290:	90 e0       	ldi	r25, 0x00	; 0
     292:	df 91       	pop	r29
     294:	cf 91       	pop	r28
     296:	08 95       	ret

00000298 <getHexFile>:

int getHexFile()
{
     298:	0f 93       	push	r16
     29a:	1f 93       	push	r17
     29c:	cf 93       	push	r28
     29e:	df 93       	push	r29
	//Flags[WIFI] = 1; 
	if(Flags[WIFI])
     2a0:	80 91 32 0a 	lds	r24, 0x0A32
     2a4:	88 23       	and	r24, r24
     2a6:	09 f4       	brne	.+2      	; 0x2aa <getHexFile+0x12>
     2a8:	59 c0       	rjmp	.+178    	; 0x35c <getHexFile+0xc4>
	{
		uint16_t transLength; 
		strcpy(filepath, URL);
     2aa:	c9 ec       	ldi	r28, 0xC9	; 201
     2ac:	d9 e0       	ldi	r29, 0x09	; 9
     2ae:	85 e1       	ldi	r24, 0x15	; 21
     2b0:	ec e4       	ldi	r30, 0x4C	; 76
     2b2:	f2 e0       	ldi	r31, 0x02	; 2
     2b4:	de 01       	movw	r26, r28
     2b6:	01 90       	ld	r0, Z+
     2b8:	0d 92       	st	X+, r0
     2ba:	8a 95       	dec	r24
     2bc:	e1 f7       	brne	.-8      	; 0x2b6 <getHexFile+0x1e>
		strcat(filepath, HEX_FILE);
     2be:	de 01       	movw	r26, r28
     2c0:	0d 90       	ld	r0, X+
     2c2:	00 20       	and	r0, r0
     2c4:	e9 f7       	brne	.-6      	; 0x2c0 <getHexFile+0x28>
     2c6:	11 97       	sbiw	r26, 0x01	; 1
     2c8:	84 e2       	ldi	r24, 0x24	; 36
     2ca:	ee ec       	ldi	r30, 0xCE	; 206
     2cc:	f2 e0       	ldi	r31, 0x02	; 2
     2ce:	01 90       	ld	r0, Z+
     2d0:	0d 92       	st	X+, r0
     2d2:	8a 95       	dec	r24
     2d4:	e1 f7       	brne	.-8      	; 0x2ce <getHexFile+0x36>
		//setTestPrint(1);
		//printf("Compress Flag Set!");
		//setCompressFlag(1);
		transLength = getFileWifi(filepath, 1, HEX_FILE_ADDRESS, 1);
     2d6:	01 e0       	ldi	r16, 0x01	; 1
     2d8:	10 e0       	ldi	r17, 0x00	; 0
     2da:	20 e0       	ldi	r18, 0x00	; 0
     2dc:	30 e0       	ldi	r19, 0x00	; 0
     2de:	a9 01       	movw	r20, r18
     2e0:	61 e0       	ldi	r22, 0x01	; 1
     2e2:	70 e0       	ldi	r23, 0x00	; 0
     2e4:	ce 01       	movw	r24, r28
     2e6:	8b d7       	rcall	.+3862   	; 0x11fe <getFileWifi>
     2e8:	08 2f       	mov	r16, r24
     2ea:	19 2f       	mov	r17, r25
		printf("Uncompressed Trans Length: %d\n", transLength); 
     2ec:	9f 93       	push	r25
     2ee:	8f 93       	push	r24
     2f0:	22 ef       	ldi	r18, 0xF2	; 242
     2f2:	32 e0       	ldi	r19, 0x02	; 2
     2f4:	3f 93       	push	r19
     2f6:	2f 93       	push	r18
     2f8:	0e 94 ae 12 	call	0x255c	; 0x255c <printf>
		//RAMPrint(HEX_FILE_ADDRESS, 100);
		compressFile(transLength); 
     2fc:	80 2f       	mov	r24, r16
     2fe:	91 2f       	mov	r25, r17
     300:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <compressFile>
		memset(filepath, 0x00, 100);
     304:	84 e6       	ldi	r24, 0x64	; 100
     306:	fe 01       	movw	r30, r28
     308:	11 92       	st	Z+, r1
     30a:	8a 95       	dec	r24
     30c:	e9 f7       	brne	.-6      	; 0x308 <getHexFile+0x70>
		strcpy(filepath, URL);
     30e:	85 e1       	ldi	r24, 0x15	; 21
     310:	ec e4       	ldi	r30, 0x4C	; 76
     312:	f2 e0       	ldi	r31, 0x02	; 2
     314:	de 01       	movw	r26, r28
     316:	01 90       	ld	r0, Z+
     318:	0d 92       	st	X+, r0
     31a:	8a 95       	dec	r24
     31c:	e1 f7       	brne	.-8      	; 0x316 <getHexFile+0x7e>
		strcat(filepath, DEVICE_FILE);
     31e:	09 90       	ld	r0, Y+
     320:	00 20       	and	r0, r0
     322:	e9 f7       	brne	.-6      	; 0x31e <getHexFile+0x86>
     324:	de 01       	movw	r26, r28
     326:	11 97       	sbiw	r26, 0x01	; 1
     328:	87 e2       	ldi	r24, 0x27	; 39
     32a:	e1 e1       	ldi	r30, 0x11	; 17
     32c:	f3 e0       	ldi	r31, 0x03	; 3
     32e:	01 90       	ld	r0, Z+
     330:	0d 92       	st	X+, r0
     332:	8a 95       	dec	r24
     334:	e1 f7       	brne	.-8      	; 0x32e <getHexFile+0x96>
		getFileWifi(filepath, 1, STATUS_FLAG_ADDRESS + DEVICE_ID, 1); 
     336:	01 e0       	ldi	r16, 0x01	; 1
     338:	10 e0       	ldi	r17, 0x00	; 0
     33a:	25 e0       	ldi	r18, 0x05	; 5
     33c:	30 e3       	ldi	r19, 0x30	; 48
     33e:	40 e0       	ldi	r20, 0x00	; 0
     340:	50 e0       	ldi	r21, 0x00	; 0
     342:	61 e0       	ldi	r22, 0x01	; 1
     344:	70 e0       	ldi	r23, 0x00	; 0
     346:	89 ec       	ldi	r24, 0xC9	; 201
     348:	99 e0       	ldi	r25, 0x09	; 9
     34a:	59 d7       	rcall	.+3762   	; 0x11fe <getFileWifi>
		//writeHexFileTest(); 
		printf("Compressed!\n"); 
     34c:	88 e3       	ldi	r24, 0x38	; 56
     34e:	93 e0       	ldi	r25, 0x03	; 3
     350:	0e 94 c4 12 	call	0x2588	; 0x2588 <puts>
     354:	0f 90       	pop	r0
     356:	0f 90       	pop	r0
     358:	0f 90       	pop	r0
     35a:	0f 90       	pop	r0
		//Program(ATtiny2313); 
		//printf("Hex File Downloaded!\n");
	}
	
	return 1; 
}
     35c:	81 e0       	ldi	r24, 0x01	; 1
     35e:	90 e0       	ldi	r25, 0x00	; 0
     360:	df 91       	pop	r29
     362:	cf 91       	pop	r28
     364:	1f 91       	pop	r17
     366:	0f 91       	pop	r16
     368:	08 95       	ret

0000036a <getFlagStatus>:

int getFlagStatus()
{
     36a:	0f 93       	push	r16
     36c:	1f 93       	push	r17
     36e:	cf 93       	push	r28
     370:	df 93       	push	r29
	TIMSK1 &= ~(1 << TOIE1);
     372:	ef e6       	ldi	r30, 0x6F	; 111
     374:	f0 e0       	ldi	r31, 0x00	; 0
     376:	80 81       	ld	r24, Z
     378:	8e 7f       	andi	r24, 0xFE	; 254
     37a:	80 83       	st	Z, r24
		Flags[PROGRAM] = (RAMReadByte(STATUS_FLAG_ADDRESS) & 0x0F);
		Flags[NETWORK_SCAN] = (RAMReadByte(STATUS_FLAG_ADDRESS + 1) & 0x0F);
		Flags[NETWORK_CONNECT] = (RAMReadByte(STATUS_FLAG_ADDRESS + 2) & 0x0F); 
		//printf("Flag Status: %s\n", flags);  
	}
	else if(Flags[WIFI]){
     37c:	80 91 32 0a 	lds	r24, 0x0A32
     380:	88 23       	and	r24, r24
     382:	09 f4       	brne	.+2      	; 0x386 <getFlagStatus+0x1c>
     384:	4c c0       	rjmp	.+152    	; 0x41e <getFlagStatus+0xb4>
		strcpy(filepath, URL);
     386:	85 e1       	ldi	r24, 0x15	; 21
     388:	ec e4       	ldi	r30, 0x4C	; 76
     38a:	f2 e0       	ldi	r31, 0x02	; 2
     38c:	a9 ec       	ldi	r26, 0xC9	; 201
     38e:	b9 e0       	ldi	r27, 0x09	; 9
     390:	01 90       	ld	r0, Z+
     392:	0d 92       	st	X+, r0
     394:	8a 95       	dec	r24
     396:	e1 f7       	brne	.-8      	; 0x390 <getFlagStatus+0x26>
		strcat(filepath, FLAG_FILE); 
     398:	a9 ec       	ldi	r26, 0xC9	; 201
     39a:	b9 e0       	ldi	r27, 0x09	; 9
     39c:	0d 90       	ld	r0, X+
     39e:	00 20       	and	r0, r0
     3a0:	e9 f7       	brne	.-6      	; 0x39c <getFlagStatus+0x32>
     3a2:	11 97       	sbiw	r26, 0x01	; 1
     3a4:	85 e2       	ldi	r24, 0x25	; 37
     3a6:	e4 e4       	ldi	r30, 0x44	; 68
     3a8:	f3 e0       	ldi	r31, 0x03	; 3
     3aa:	01 90       	ld	r0, Z+
     3ac:	0d 92       	st	X+, r0
     3ae:	8a 95       	dec	r24
     3b0:	e1 f7       	brne	.-8      	; 0x3aa <getFlagStatus+0x40>
		//setTestPrint(1);
		getFileWifi(filepath, 1, STATUS_FLAG_ADDRESS, 0);
     3b2:	00 e0       	ldi	r16, 0x00	; 0
     3b4:	10 e0       	ldi	r17, 0x00	; 0
     3b6:	20 e0       	ldi	r18, 0x00	; 0
     3b8:	30 e3       	ldi	r19, 0x30	; 48
     3ba:	40 e0       	ldi	r20, 0x00	; 0
     3bc:	50 e0       	ldi	r21, 0x00	; 0
     3be:	61 e0       	ldi	r22, 0x01	; 1
     3c0:	70 e0       	ldi	r23, 0x00	; 0
     3c2:	89 ec       	ldi	r24, 0xC9	; 201
     3c4:	99 e0       	ldi	r25, 0x09	; 9
     3c6:	1b d7       	rcall	.+3638   	; 0x11fe <getFileWifi>
		printf("Ram Print: ");
     3c8:	89 e6       	ldi	r24, 0x69	; 105
     3ca:	93 e0       	ldi	r25, 0x03	; 3
     3cc:	9f 93       	push	r25
     3ce:	8f 93       	push	r24
     3d0:	0e 94 ae 12 	call	0x255c	; 0x255c <printf>
		RAMPrint(STATUS_FLAG_ADDRESS, 3);
     3d4:	43 e0       	ldi	r20, 0x03	; 3
     3d6:	50 e0       	ldi	r21, 0x00	; 0
     3d8:	60 e0       	ldi	r22, 0x00	; 0
     3da:	70 e3       	ldi	r23, 0x30	; 48
     3dc:	80 e0       	ldi	r24, 0x00	; 0
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	4f d5       	rcall	.+2718   	; 0xe80 <RAMPrint>
		printf("\n");
     3e2:	8a e0       	ldi	r24, 0x0A	; 10
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	0e 94 bf 12 	call	0x257e	; 0x257e <putchar>
		Flags[PROGRAM] = (RAMReadByte(STATUS_FLAG_ADDRESS) & 0x0F);
     3ea:	60 e0       	ldi	r22, 0x00	; 0
     3ec:	70 e3       	ldi	r23, 0x30	; 48
     3ee:	80 e0       	ldi	r24, 0x00	; 0
     3f0:	90 e0       	ldi	r25, 0x00	; 0
     3f2:	af d5       	rcall	.+2910   	; 0xf52 <RAMReadByte>
     3f4:	8f 70       	andi	r24, 0x0F	; 15
     3f6:	80 93 33 0a 	sts	0x0A33, r24
		Flags[NETWORK_SCAN] = (RAMReadByte(STATUS_FLAG_ADDRESS + 1) & 0x0F);
     3fa:	61 e0       	ldi	r22, 0x01	; 1
     3fc:	70 e3       	ldi	r23, 0x30	; 48
     3fe:	80 e0       	ldi	r24, 0x00	; 0
     400:	90 e0       	ldi	r25, 0x00	; 0
     402:	a7 d5       	rcall	.+2894   	; 0xf52 <RAMReadByte>
     404:	8f 70       	andi	r24, 0x0F	; 15
     406:	80 93 34 0a 	sts	0x0A34, r24
		Flags[NETWORK_CONNECT] = (RAMReadByte(STATUS_FLAG_ADDRESS + 2) & 0x0F);
     40a:	62 e0       	ldi	r22, 0x02	; 2
     40c:	70 e3       	ldi	r23, 0x30	; 48
     40e:	80 e0       	ldi	r24, 0x00	; 0
     410:	90 e0       	ldi	r25, 0x00	; 0
     412:	9f d5       	rcall	.+2878   	; 0xf52 <RAMReadByte>
     414:	8f 70       	andi	r24, 0x0F	; 15
     416:	80 93 35 0a 	sts	0x0A35, r24
     41a:	0f 90       	pop	r0
     41c:	0f 90       	pop	r0
		
	}
	memset(filepath, 0x00, 100); 
     41e:	84 e6       	ldi	r24, 0x64	; 100
     420:	e9 ec       	ldi	r30, 0xC9	; 201
     422:	f9 e0       	ldi	r31, 0x09	; 9
     424:	df 01       	movw	r26, r30
     426:	1d 92       	st	X+, r1
     428:	8a 95       	dec	r24
     42a:	e9 f7       	brne	.-6      	; 0x426 <getFlagStatus+0xbc>
	//Perform actions based on flags 
	if(Flags[PROGRAM] == 0x01)
     42c:	80 91 33 0a 	lds	r24, 0x0A33
     430:	81 30       	cpi	r24, 0x01	; 1
     432:	91 f5       	brne	.+100    	; 0x498 <getFlagStatus+0x12e>
	{
		//Program Function 
		printf("Program!\n");
     434:	85 e7       	ldi	r24, 0x75	; 117
     436:	93 e0       	ldi	r25, 0x03	; 3
     438:	0e 94 c4 12 	call	0x2588	; 0x2588 <puts>
		//PORTD &= ~(1<<CTS);
		//wifiDriverInit(); 
		//PORTD |= (1<<CTS); 
		//_delay_ms(2000); 
		getHexFile();
     43c:	2d df       	rcall	.-422    	; 0x298 <getHexFile>
		Flags[DEVICE_ID] = (RAMReadByte(STATUS_FLAG_ADDRESS + DEVICE_ID) & 0x0F);
     43e:	65 e0       	ldi	r22, 0x05	; 5
     440:	70 e3       	ldi	r23, 0x30	; 48
     442:	80 e0       	ldi	r24, 0x00	; 0
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	85 d5       	rcall	.+2826   	; 0xf52 <RAMReadByte>
     448:	8f 70       	andi	r24, 0x0F	; 15
     44a:	c6 e3       	ldi	r28, 0x36	; 54
     44c:	da e0       	ldi	r29, 0x0A	; 10
     44e:	88 83       	st	Y, r24
		printf("Device ID: %d\n", Flags[DEVICE_ID]); 
     450:	1f 92       	push	r1
     452:	8f 93       	push	r24
     454:	8e e7       	ldi	r24, 0x7E	; 126
     456:	93 e0       	ldi	r25, 0x03	; 3
     458:	9f 93       	push	r25
     45a:	8f 93       	push	r24
     45c:	0e 94 ae 12 	call	0x255c	; 0x255c <printf>
		//printf("Signature Byte: 0x%08X\n", signatureBytes); 
		switch(Flags[DEVICE_ID])
     460:	0f 90       	pop	r0
     462:	0f 90       	pop	r0
     464:	0f 90       	pop	r0
     466:	0f 90       	pop	r0
     468:	88 81       	ld	r24, Y
     46a:	82 30       	cpi	r24, 0x02	; 2
     46c:	19 f0       	breq	.+6      	; 0x474 <getFlagStatus+0x10a>
     46e:	83 30       	cpi	r24, 0x03	; 3
     470:	41 f0       	breq	.+16     	; 0x482 <getFlagStatus+0x118>
     472:	0e c0       	rjmp	.+28     	; 0x490 <getFlagStatus+0x126>
		{
			case ATtiny2313_ID:
				Program(ATtiny2313);
     474:	6a e0       	ldi	r22, 0x0A	; 10
     476:	71 e9       	ldi	r23, 0x91	; 145
     478:	8e e1       	ldi	r24, 0x1E	; 30
     47a:	90 e0       	ldi	r25, 0x00	; 0
     47c:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <Program>
				break;
     480:	0b c0       	rjmp	.+22     	; 0x498 <getFlagStatus+0x12e>
			case ATmega324PA_ID: 
				Program(ATmega324PA);
     482:	61 e1       	ldi	r22, 0x11	; 17
     484:	75 e9       	ldi	r23, 0x95	; 149
     486:	8e e1       	ldi	r24, 0x1E	; 30
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <Program>
				break;
     48e:	04 c0       	rjmp	.+8      	; 0x498 <getFlagStatus+0x12e>
			default:
				printf("Error, bad device ID!\n");
     490:	8d e8       	ldi	r24, 0x8D	; 141
     492:	93 e0       	ldi	r25, 0x03	; 3
     494:	0e 94 c4 12 	call	0x2588	; 0x2588 <puts>
		//printf("Network Connect!\n");
		//networkConnect("Wi-Pro", "brightshoe902"); 
		//getFileEthernet()
	}
	//_delay_ms(500);
	clearFlags(); 
     498:	80 de       	rcall	.-768    	; 0x19a <clearFlags>
	TIMSK1 |= (1 << TOIE1);
     49a:	ef e6       	ldi	r30, 0x6F	; 111
     49c:	f0 e0       	ldi	r31, 0x00	; 0
     49e:	80 81       	ld	r24, Z
     4a0:	81 60       	ori	r24, 0x01	; 1
     4a2:	80 83       	st	Z, r24
	return 1; 
}
     4a4:	81 e0       	ldi	r24, 0x01	; 1
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	df 91       	pop	r29
     4aa:	cf 91       	pop	r28
     4ac:	1f 91       	pop	r17
     4ae:	0f 91       	pop	r16
     4b0:	08 95       	ret

000004b2 <__vector_20>:

//Timer overflow vector for polling 
ISR(TIMER1_OVF_vect)
{
     4b2:	1f 92       	push	r1
     4b4:	0f 92       	push	r0
     4b6:	0f b6       	in	r0, 0x3f	; 63
     4b8:	0f 92       	push	r0
     4ba:	11 24       	eor	r1, r1
     4bc:	0b b6       	in	r0, 0x3b	; 59
     4be:	0f 92       	push	r0
     4c0:	2f 93       	push	r18
     4c2:	3f 93       	push	r19
     4c4:	4f 93       	push	r20
     4c6:	5f 93       	push	r21
     4c8:	6f 93       	push	r22
     4ca:	7f 93       	push	r23
     4cc:	8f 93       	push	r24
     4ce:	9f 93       	push	r25
     4d0:	af 93       	push	r26
     4d2:	bf 93       	push	r27
     4d4:	cf 93       	push	r28
     4d6:	df 93       	push	r29
     4d8:	ef 93       	push	r30
     4da:	ff 93       	push	r31
	//cli(); 
	TIMSK1 &= ~(1 << TOIE1);
     4dc:	cf e6       	ldi	r28, 0x6F	; 111
     4de:	d0 e0       	ldi	r29, 0x00	; 0
     4e0:	88 81       	ld	r24, Y
     4e2:	8e 7f       	andi	r24, 0xFE	; 254
     4e4:	88 83       	st	Y, r24
	printf("Flag Status\n");
     4e6:	83 ea       	ldi	r24, 0xA3	; 163
     4e8:	93 e0       	ldi	r25, 0x03	; 3
     4ea:	0e 94 c4 12 	call	0x2588	; 0x2588 <puts>
	getFlagStatus(); 
     4ee:	3d df       	rcall	.-390    	; 0x36a <getFlagStatus>
	TCNT1L = 0x00;
     4f0:	10 92 84 00 	sts	0x0084, r1
	TCNT1H = 0x00;
     4f4:	10 92 85 00 	sts	0x0085, r1
	TIMSK1 |= (1 << TOIE1);
     4f8:	88 81       	ld	r24, Y
     4fa:	81 60       	ori	r24, 0x01	; 1
     4fc:	88 83       	st	Y, r24
	//sei();  
}
     4fe:	ff 91       	pop	r31
     500:	ef 91       	pop	r30
     502:	df 91       	pop	r29
     504:	cf 91       	pop	r28
     506:	bf 91       	pop	r27
     508:	af 91       	pop	r26
     50a:	9f 91       	pop	r25
     50c:	8f 91       	pop	r24
     50e:	7f 91       	pop	r23
     510:	6f 91       	pop	r22
     512:	5f 91       	pop	r21
     514:	4f 91       	pop	r20
     516:	3f 91       	pop	r19
     518:	2f 91       	pop	r18
     51a:	0f 90       	pop	r0
     51c:	0b be       	out	0x3b, r0	; 59
     51e:	0f 90       	pop	r0
     520:	0f be       	out	0x3f, r0	; 63
     522:	0f 90       	pop	r0
     524:	1f 90       	pop	r1
     526:	18 95       	reti

00000528 <__vector_6>:

ISR(INT5_vect)
{
     528:	1f 92       	push	r1
     52a:	0f 92       	push	r0
     52c:	0f b6       	in	r0, 0x3f	; 63
     52e:	0f 92       	push	r0
     530:	11 24       	eor	r1, r1
     532:	0b b6       	in	r0, 0x3b	; 59
     534:	0f 92       	push	r0
     536:	2f 93       	push	r18
     538:	3f 93       	push	r19
     53a:	4f 93       	push	r20
     53c:	5f 93       	push	r21
     53e:	6f 93       	push	r22
     540:	7f 93       	push	r23
     542:	8f 93       	push	r24
     544:	9f 93       	push	r25
     546:	af 93       	push	r26
     548:	bf 93       	push	r27
     54a:	ef 93       	push	r30
     54c:	ff 93       	push	r31
	cli();
     54e:	f8 94       	cli
	if(PINE & (1<<INT5))
     550:	65 9b       	sbis	0x0c, 5	; 12
     552:	07 c0       	rjmp	.+14     	; 0x562 <__vector_6+0x3a>
	{
		Flags[ETHERNET] = 0; 
     554:	10 92 31 0a 	sts	0x0A31, r1
		//checkWifiStatus(); 
		printf("Rising Edge!\n");
     558:	8f ea       	ldi	r24, 0xAF	; 175
     55a:	93 e0       	ldi	r25, 0x03	; 3
     55c:	0e 94 c4 12 	call	0x2588	; 0x2588 <puts>
     560:	08 c0       	rjmp	.+16     	; 0x572 <__vector_6+0x4a>
	}
	else
	{
		Flags[ETHERNET] = 1; 
     562:	81 e0       	ldi	r24, 0x01	; 1
     564:	80 93 31 0a 	sts	0x0A31, r24
		ethernetInit();
     568:	18 d0       	rcall	.+48     	; 0x59a <ethernetInit>
		printf("Falling Edge!\n");
     56a:	8c eb       	ldi	r24, 0xBC	; 188
     56c:	93 e0       	ldi	r25, 0x03	; 3
     56e:	0e 94 c4 12 	call	0x2588	; 0x2588 <puts>
	}
	sei();
     572:	78 94       	sei
}
     574:	ff 91       	pop	r31
     576:	ef 91       	pop	r30
     578:	bf 91       	pop	r27
     57a:	af 91       	pop	r26
     57c:	9f 91       	pop	r25
     57e:	8f 91       	pop	r24
     580:	7f 91       	pop	r23
     582:	6f 91       	pop	r22
     584:	5f 91       	pop	r21
     586:	4f 91       	pop	r20
     588:	3f 91       	pop	r19
     58a:	2f 91       	pop	r18
     58c:	0f 90       	pop	r0
     58e:	0b be       	out	0x3b, r0	; 59
     590:	0f 90       	pop	r0
     592:	0f be       	out	0x3f, r0	; 63
     594:	0f 90       	pop	r0
     596:	1f 90       	pop	r1
     598:	18 95       	reti

0000059a <ethernetInit>:
	//EnableEthernetInterrupt(); 
	SendData(httpBuff, strlen(httpBuff), 0);
	ReceiveData(RAMAddress, receiveData, receiveLength, 1, externRAM);
	memset(httpBuff, 0x00, 100); 
	return receiveData; 
}
     59a:	28 e0       	ldi	r18, 0x08	; 8
     59c:	32 e0       	ldi	r19, 0x02	; 2
     59e:	4c e0       	ldi	r20, 0x0C	; 12
     5a0:	52 e0       	ldi	r21, 0x02	; 2
     5a2:	60 e1       	ldi	r22, 0x10	; 16
     5a4:	72 e0       	ldi	r23, 0x02	; 2
     5a6:	84 e1       	ldi	r24, 0x14	; 20
     5a8:	92 e0       	ldi	r25, 0x02	; 2
     5aa:	6a d0       	rcall	.+212    	; 0x680 <NetworkSetup>
     5ac:	20 e0       	ldi	r18, 0x00	; 0
     5ae:	32 e0       	ldi	r19, 0x02	; 2
     5b0:	42 e0       	ldi	r20, 0x02	; 2
     5b2:	52 e0       	ldi	r21, 0x02	; 2
     5b4:	64 e0       	ldi	r22, 0x04	; 4
     5b6:	72 e0       	ldi	r23, 0x02	; 2
     5b8:	81 e0       	ldi	r24, 0x01	; 1
     5ba:	f5 d1       	rcall	.+1002   	; 0x9a6 <Server_Connect>
     5bc:	89 2b       	or	r24, r25
     5be:	b1 f3       	breq	.-20     	; 0x5ac <ethernetInit+0x12>
     5c0:	91 c2       	rjmp	.+1314   	; 0xae4 <MemoryInit>
     5c2:	08 95       	ret

000005c4 <updateFileEthernet>:

void updateFileEthernet(char* filepath)
{
     5c4:	cf 93       	push	r28
     5c6:	df 93       	push	r29
	//strncpy(httpBuff, "GET ", 4); 
	strcpy(httpBuff, filepath); 
     5c8:	bc 01       	movw	r22, r24
     5ca:	87 e3       	ldi	r24, 0x37	; 55
     5cc:	9a e0       	ldi	r25, 0x0A	; 10
     5ce:	0e 94 75 12 	call	0x24ea	; 0x24ea <strcpy>
	strncat(httpBuff, " HTTP/1.1 \nHost: www.wi-pro.us \n\n", 40); 
     5d2:	c7 e3       	ldi	r28, 0x37	; 55
     5d4:	da e0       	ldi	r29, 0x0A	; 10
     5d6:	de 01       	movw	r26, r28
     5d8:	0d 90       	ld	r0, X+
     5da:	00 20       	and	r0, r0
     5dc:	e9 f7       	brne	.-6      	; 0x5d8 <updateFileEthernet+0x14>
     5de:	11 97       	sbiw	r26, 0x01	; 1
     5e0:	82 e2       	ldi	r24, 0x22	; 34
     5e2:	ea ec       	ldi	r30, 0xCA	; 202
     5e4:	f3 e0       	ldi	r31, 0x03	; 3
     5e6:	01 90       	ld	r0, Z+
     5e8:	0d 92       	st	X+, r0
     5ea:	8a 95       	dec	r24
     5ec:	e1 f7       	brne	.-8      	; 0x5e6 <updateFileEthernet+0x22>
	printf("%s", httpBuff); 
     5ee:	df 93       	push	r29
     5f0:	cf 93       	push	r28
     5f2:	85 ec       	ldi	r24, 0xC5	; 197
     5f4:	92 e0       	ldi	r25, 0x02	; 2
     5f6:	9f 93       	push	r25
     5f8:	8f 93       	push	r24
     5fa:	0e 94 ae 12 	call	0x255c	; 0x255c <printf>
	SendData(httpBuff, strlen(httpBuff), 0);
     5fe:	fe 01       	movw	r30, r28
     600:	01 90       	ld	r0, Z+
     602:	00 20       	and	r0, r0
     604:	e9 f7       	brne	.-6      	; 0x600 <updateFileEthernet+0x3c>
     606:	31 97       	sbiw	r30, 0x01	; 1
     608:	bf 01       	movw	r22, r30
     60a:	67 53       	subi	r22, 0x37	; 55
     60c:	7a 40       	sbci	r23, 0x0A	; 10
     60e:	40 e0       	ldi	r20, 0x00	; 0
     610:	50 e0       	ldi	r21, 0x00	; 0
     612:	ce 01       	movw	r24, r28
     614:	8b d2       	rcall	.+1302   	; 0xb2c <SendData>
	memset(httpBuff, 0x00, 100); 
     616:	84 e6       	ldi	r24, 0x64	; 100
     618:	fe 01       	movw	r30, r28
     61a:	11 92       	st	Z+, r1
     61c:	8a 95       	dec	r24
     61e:	e9 f7       	brne	.-6      	; 0x61a <updateFileEthernet+0x56>
     620:	0f 90       	pop	r0
     622:	0f 90       	pop	r0
     624:	0f 90       	pop	r0
     626:	0f 90       	pop	r0
}
     628:	df 91       	pop	r29
     62a:	cf 91       	pop	r28
     62c:	08 95       	ret

0000062e <SPI_EthernetWrite>:
}

uint16_t ReceiveSize(void)
{
	return ((SPI_EthernetRead(S0_RX_RSR) & 0x00FF) << 8 ) + SPI_EthernetRead(S0_RX_RSR + 1);
}
     62e:	74 98       	cbi	0x0e, 4	; 14
     630:	20 ef       	ldi	r18, 0xF0	; 240
     632:	2e bd       	out	0x2e, r18	; 46
     634:	0d b4       	in	r0, 0x2d	; 45
     636:	07 fe       	sbrs	r0, 7
     638:	fd cf       	rjmp	.-6      	; 0x634 <SPI_EthernetWrite+0x6>
     63a:	9e bd       	out	0x2e, r25	; 46
     63c:	0d b4       	in	r0, 0x2d	; 45
     63e:	07 fe       	sbrs	r0, 7
     640:	fd cf       	rjmp	.-6      	; 0x63c <SPI_EthernetWrite+0xe>
     642:	8e bd       	out	0x2e, r24	; 46
     644:	0d b4       	in	r0, 0x2d	; 45
     646:	07 fe       	sbrs	r0, 7
     648:	fd cf       	rjmp	.-6      	; 0x644 <SPI_EthernetWrite+0x16>
     64a:	6e bd       	out	0x2e, r22	; 46
     64c:	0d b4       	in	r0, 0x2d	; 45
     64e:	07 fe       	sbrs	r0, 7
     650:	fd cf       	rjmp	.-6      	; 0x64c <SPI_EthernetWrite+0x1e>
     652:	74 9a       	sbi	0x0e, 4	; 14
     654:	08 95       	ret

00000656 <SPI_EthernetRead>:
     656:	74 98       	cbi	0x0e, 4	; 14
     658:	2f e0       	ldi	r18, 0x0F	; 15
     65a:	2e bd       	out	0x2e, r18	; 46
     65c:	0d b4       	in	r0, 0x2d	; 45
     65e:	07 fe       	sbrs	r0, 7
     660:	fd cf       	rjmp	.-6      	; 0x65c <SPI_EthernetRead+0x6>
     662:	9e bd       	out	0x2e, r25	; 46
     664:	0d b4       	in	r0, 0x2d	; 45
     666:	07 fe       	sbrs	r0, 7
     668:	fd cf       	rjmp	.-6      	; 0x664 <SPI_EthernetRead+0xe>
     66a:	8e bd       	out	0x2e, r24	; 46
     66c:	0d b4       	in	r0, 0x2d	; 45
     66e:	07 fe       	sbrs	r0, 7
     670:	fd cf       	rjmp	.-6      	; 0x66c <SPI_EthernetRead+0x16>
     672:	1e bc       	out	0x2e, r1	; 46
     674:	0d b4       	in	r0, 0x2d	; 45
     676:	07 fe       	sbrs	r0, 7
     678:	fd cf       	rjmp	.-6      	; 0x674 <SPI_EthernetRead+0x1e>
     67a:	74 9a       	sbi	0x0e, 4	; 14
     67c:	8e b5       	in	r24, 0x2e	; 46
     67e:	08 95       	ret

00000680 <NetworkSetup>:
     680:	bf 92       	push	r11
     682:	cf 92       	push	r12
     684:	df 92       	push	r13
     686:	ef 92       	push	r14
     688:	ff 92       	push	r15
     68a:	0f 93       	push	r16
     68c:	1f 93       	push	r17
     68e:	cf 93       	push	r28
     690:	df 93       	push	r29
     692:	ec 01       	movw	r28, r24
     694:	7b 01       	movw	r14, r22
     696:	6a 01       	movw	r12, r20
     698:	89 01       	movw	r16, r18
     69a:	6c 9a       	sbi	0x0d, 4	; 13
     69c:	87 e0       	ldi	r24, 0x07	; 7
     69e:	84 b9       	out	0x04, r24	; 4
     6a0:	74 9a       	sbi	0x0e, 4	; 14
     6a2:	80 e5       	ldi	r24, 0x50	; 80
     6a4:	8c bd       	out	0x2c, r24	; 44
     6a6:	86 ef       	ldi	r24, 0xF6	; 246
     6a8:	93 e0       	ldi	r25, 0x03	; 3
     6aa:	0e 94 c4 12 	call	0x2588	; 0x2588 <puts>
     6ae:	88 e0       	ldi	r24, 0x08	; 8
     6b0:	94 e0       	ldi	r25, 0x04	; 4
     6b2:	0e 94 c4 12 	call	0x2588	; 0x2588 <puts>
     6b6:	60 e8       	ldi	r22, 0x80	; 128
     6b8:	80 e0       	ldi	r24, 0x00	; 0
     6ba:	90 e0       	ldi	r25, 0x00	; 0
     6bc:	b8 df       	rcall	.-144    	; 0x62e <SPI_EthernetWrite>
     6be:	8f ec       	ldi	r24, 0xCF	; 207
     6c0:	97 e0       	ldi	r25, 0x07	; 7
     6c2:	01 97       	sbiw	r24, 0x01	; 1
     6c4:	f1 f7       	brne	.-4      	; 0x6c2 <NetworkSetup+0x42>
     6c6:	00 c0       	rjmp	.+0      	; 0x6c8 <NetworkSetup+0x48>
     6c8:	00 00       	nop
     6ca:	80 e0       	ldi	r24, 0x00	; 0
     6cc:	90 e0       	ldi	r25, 0x00	; 0
     6ce:	c3 df       	rcall	.-122    	; 0x656 <SPI_EthernetRead>
     6d0:	1f 92       	push	r1
     6d2:	8f 93       	push	r24
     6d4:	81 e2       	ldi	r24, 0x21	; 33
     6d6:	94 e0       	ldi	r25, 0x04	; 4
     6d8:	9f 93       	push	r25
     6da:	8f 93       	push	r24
     6dc:	0e 94 ae 12 	call	0x255c	; 0x255c <printf>
     6e0:	f8 01       	movw	r30, r16
     6e2:	83 81       	ldd	r24, Z+3	; 0x03
     6e4:	1f 92       	push	r1
     6e6:	8f 93       	push	r24
     6e8:	82 81       	ldd	r24, Z+2	; 0x02
     6ea:	1f 92       	push	r1
     6ec:	8f 93       	push	r24
     6ee:	81 81       	ldd	r24, Z+1	; 0x01
     6f0:	1f 92       	push	r1
     6f2:	8f 93       	push	r24
     6f4:	80 81       	ld	r24, Z
     6f6:	1f 92       	push	r1
     6f8:	8f 93       	push	r24
     6fa:	82 e3       	ldi	r24, 0x32	; 50
     6fc:	94 e0       	ldi	r25, 0x04	; 4
     6fe:	9f 93       	push	r25
     700:	8f 93       	push	r24
     702:	0e 94 ae 12 	call	0x255c	; 0x255c <printf>
     706:	f8 01       	movw	r30, r16
     708:	60 81       	ld	r22, Z
     70a:	81 e0       	ldi	r24, 0x01	; 1
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	8f df       	rcall	.-226    	; 0x62e <SPI_EthernetWrite>
     710:	f8 01       	movw	r30, r16
     712:	61 81       	ldd	r22, Z+1	; 0x01
     714:	82 e0       	ldi	r24, 0x02	; 2
     716:	90 e0       	ldi	r25, 0x00	; 0
     718:	8a df       	rcall	.-236    	; 0x62e <SPI_EthernetWrite>
     71a:	f8 01       	movw	r30, r16
     71c:	62 81       	ldd	r22, Z+2	; 0x02
     71e:	83 e0       	ldi	r24, 0x03	; 3
     720:	90 e0       	ldi	r25, 0x00	; 0
     722:	85 df       	rcall	.-246    	; 0x62e <SPI_EthernetWrite>
     724:	f8 01       	movw	r30, r16
     726:	63 81       	ldd	r22, Z+3	; 0x03
     728:	84 e0       	ldi	r24, 0x04	; 4
     72a:	90 e0       	ldi	r25, 0x00	; 0
     72c:	80 df       	rcall	.-256    	; 0x62e <SPI_EthernetWrite>
     72e:	8f ec       	ldi	r24, 0xCF	; 207
     730:	97 e0       	ldi	r25, 0x07	; 7
     732:	01 97       	sbiw	r24, 0x01	; 1
     734:	f1 f7       	brne	.-4      	; 0x732 <NetworkSetup+0xb2>
     736:	00 c0       	rjmp	.+0      	; 0x738 <NetworkSetup+0xb8>
     738:	00 00       	nop
     73a:	84 e0       	ldi	r24, 0x04	; 4
     73c:	90 e0       	ldi	r25, 0x00	; 0
     73e:	8b df       	rcall	.-234    	; 0x656 <SPI_EthernetRead>
     740:	b8 2e       	mov	r11, r24
     742:	83 e0       	ldi	r24, 0x03	; 3
     744:	90 e0       	ldi	r25, 0x00	; 0
     746:	87 df       	rcall	.-242    	; 0x656 <SPI_EthernetRead>
     748:	08 2f       	mov	r16, r24
     74a:	82 e0       	ldi	r24, 0x02	; 2
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	83 df       	rcall	.-250    	; 0x656 <SPI_EthernetRead>
     750:	18 2f       	mov	r17, r24
     752:	81 e0       	ldi	r24, 0x01	; 1
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	7f df       	rcall	.-258    	; 0x656 <SPI_EthernetRead>
     758:	1f 92       	push	r1
     75a:	bf 92       	push	r11
     75c:	1f 92       	push	r1
     75e:	0f 93       	push	r16
     760:	1f 92       	push	r1
     762:	1f 93       	push	r17
     764:	1f 92       	push	r1
     766:	8f 93       	push	r24
     768:	87 e5       	ldi	r24, 0x57	; 87
     76a:	94 e0       	ldi	r25, 0x04	; 4
     76c:	9f 93       	push	r25
     76e:	8f 93       	push	r24
     770:	0e 94 ae 12 	call	0x255c	; 0x255c <printf>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	1f 92       	push	r1
     778:	8f 93       	push	r24
     77a:	8c 81       	ldd	r24, Y+4	; 0x04
     77c:	1f 92       	push	r1
     77e:	8f 93       	push	r24
     780:	8b 81       	ldd	r24, Y+3	; 0x03
     782:	1f 92       	push	r1
     784:	8f 93       	push	r24
     786:	8a 81       	ldd	r24, Y+2	; 0x02
     788:	1f 92       	push	r1
     78a:	8f 93       	push	r24
     78c:	89 81       	ldd	r24, Y+1	; 0x01
     78e:	1f 92       	push	r1
     790:	8f 93       	push	r24
     792:	88 81       	ld	r24, Y
     794:	1f 92       	push	r1
     796:	8f 93       	push	r24
     798:	82 e7       	ldi	r24, 0x72	; 114
     79a:	94 e0       	ldi	r25, 0x04	; 4
     79c:	9f 93       	push	r25
     79e:	8f 93       	push	r24
     7a0:	0e 94 ae 12 	call	0x255c	; 0x255c <printf>
     7a4:	ed b7       	in	r30, 0x3d	; 61
     7a6:	fe b7       	in	r31, 0x3e	; 62
     7a8:	b6 96       	adiw	r30, 0x26	; 38
     7aa:	0f b6       	in	r0, 0x3f	; 63
     7ac:	f8 94       	cli
     7ae:	fe bf       	out	0x3e, r31	; 62
     7b0:	0f be       	out	0x3f, r0	; 63
     7b2:	ed bf       	out	0x3d, r30	; 61
     7b4:	68 81       	ld	r22, Y
     7b6:	89 e0       	ldi	r24, 0x09	; 9
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	39 df       	rcall	.-398    	; 0x62e <SPI_EthernetWrite>
     7bc:	69 81       	ldd	r22, Y+1	; 0x01
     7be:	8a e0       	ldi	r24, 0x0A	; 10
     7c0:	90 e0       	ldi	r25, 0x00	; 0
     7c2:	35 df       	rcall	.-406    	; 0x62e <SPI_EthernetWrite>
     7c4:	6a 81       	ldd	r22, Y+2	; 0x02
     7c6:	8b e0       	ldi	r24, 0x0B	; 11
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	31 df       	rcall	.-414    	; 0x62e <SPI_EthernetWrite>
     7cc:	6b 81       	ldd	r22, Y+3	; 0x03
     7ce:	8c e0       	ldi	r24, 0x0C	; 12
     7d0:	90 e0       	ldi	r25, 0x00	; 0
     7d2:	2d df       	rcall	.-422    	; 0x62e <SPI_EthernetWrite>
     7d4:	6c 81       	ldd	r22, Y+4	; 0x04
     7d6:	8d e0       	ldi	r24, 0x0D	; 13
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	29 df       	rcall	.-430    	; 0x62e <SPI_EthernetWrite>
     7dc:	6d 81       	ldd	r22, Y+5	; 0x05
     7de:	8e e0       	ldi	r24, 0x0E	; 14
     7e0:	90 e0       	ldi	r25, 0x00	; 0
     7e2:	25 df       	rcall	.-438    	; 0x62e <SPI_EthernetWrite>
     7e4:	8f ec       	ldi	r24, 0xCF	; 207
     7e6:	97 e0       	ldi	r25, 0x07	; 7
     7e8:	01 97       	sbiw	r24, 0x01	; 1
     7ea:	f1 f7       	brne	.-4      	; 0x7e8 <NetworkSetup+0x168>
     7ec:	00 c0       	rjmp	.+0      	; 0x7ee <NetworkSetup+0x16e>
     7ee:	00 00       	nop
     7f0:	8e e0       	ldi	r24, 0x0E	; 14
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	30 df       	rcall	.-416    	; 0x656 <SPI_EthernetRead>
     7f6:	b8 2e       	mov	r11, r24
     7f8:	8d e0       	ldi	r24, 0x0D	; 13
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	2c df       	rcall	.-424    	; 0x656 <SPI_EthernetRead>
     7fe:	08 2f       	mov	r16, r24
     800:	8c e0       	ldi	r24, 0x0C	; 12
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	28 df       	rcall	.-432    	; 0x656 <SPI_EthernetRead>
     806:	18 2f       	mov	r17, r24
     808:	8b e0       	ldi	r24, 0x0B	; 11
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	24 df       	rcall	.-440    	; 0x656 <SPI_EthernetRead>
     80e:	d8 2f       	mov	r29, r24
     810:	8a e0       	ldi	r24, 0x0A	; 10
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	20 df       	rcall	.-448    	; 0x656 <SPI_EthernetRead>
     816:	c8 2f       	mov	r28, r24
     818:	89 e0       	ldi	r24, 0x09	; 9
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	1c df       	rcall	.-456    	; 0x656 <SPI_EthernetRead>
     81e:	1f 92       	push	r1
     820:	bf 92       	push	r11
     822:	1f 92       	push	r1
     824:	0f 93       	push	r16
     826:	1f 92       	push	r1
     828:	1f 93       	push	r17
     82a:	1f 92       	push	r1
     82c:	df 93       	push	r29
     82e:	1f 92       	push	r1
     830:	cf 93       	push	r28
     832:	1f 92       	push	r1
     834:	8f 93       	push	r24
     836:	88 ea       	ldi	r24, 0xA8	; 168
     838:	94 e0       	ldi	r25, 0x04	; 4
     83a:	9f 93       	push	r25
     83c:	8f 93       	push	r24
     83e:	0e 94 ae 12 	call	0x255c	; 0x255c <printf>
     842:	f6 01       	movw	r30, r12
     844:	83 81       	ldd	r24, Z+3	; 0x03
     846:	1f 92       	push	r1
     848:	8f 93       	push	r24
     84a:	82 81       	ldd	r24, Z+2	; 0x02
     84c:	1f 92       	push	r1
     84e:	8f 93       	push	r24
     850:	81 81       	ldd	r24, Z+1	; 0x01
     852:	1f 92       	push	r1
     854:	8f 93       	push	r24
     856:	80 81       	ld	r24, Z
     858:	1f 92       	push	r1
     85a:	8f 93       	push	r24
     85c:	85 ed       	ldi	r24, 0xD5	; 213
     85e:	94 e0       	ldi	r25, 0x04	; 4
     860:	9f 93       	push	r25
     862:	8f 93       	push	r24
     864:	0e 94 ae 12 	call	0x255c	; 0x255c <printf>
     868:	f6 01       	movw	r30, r12
     86a:	60 81       	ld	r22, Z
     86c:	85 e0       	ldi	r24, 0x05	; 5
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	de de       	rcall	.-580    	; 0x62e <SPI_EthernetWrite>
     872:	f6 01       	movw	r30, r12
     874:	61 81       	ldd	r22, Z+1	; 0x01
     876:	86 e0       	ldi	r24, 0x06	; 6
     878:	90 e0       	ldi	r25, 0x00	; 0
     87a:	d9 de       	rcall	.-590    	; 0x62e <SPI_EthernetWrite>
     87c:	f6 01       	movw	r30, r12
     87e:	62 81       	ldd	r22, Z+2	; 0x02
     880:	87 e0       	ldi	r24, 0x07	; 7
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	d4 de       	rcall	.-600    	; 0x62e <SPI_EthernetWrite>
     886:	f6 01       	movw	r30, r12
     888:	63 81       	ldd	r22, Z+3	; 0x03
     88a:	88 e0       	ldi	r24, 0x08	; 8
     88c:	90 e0       	ldi	r25, 0x00	; 0
     88e:	cf de       	rcall	.-610    	; 0x62e <SPI_EthernetWrite>
     890:	8f ec       	ldi	r24, 0xCF	; 207
     892:	97 e0       	ldi	r25, 0x07	; 7
     894:	01 97       	sbiw	r24, 0x01	; 1
     896:	f1 f7       	brne	.-4      	; 0x894 <NetworkSetup+0x214>
     898:	00 c0       	rjmp	.+0      	; 0x89a <NetworkSetup+0x21a>
     89a:	00 00       	nop
     89c:	88 e0       	ldi	r24, 0x08	; 8
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	da de       	rcall	.-588    	; 0x656 <SPI_EthernetRead>
     8a2:	18 2f       	mov	r17, r24
     8a4:	87 e0       	ldi	r24, 0x07	; 7
     8a6:	90 e0       	ldi	r25, 0x00	; 0
     8a8:	d6 de       	rcall	.-596    	; 0x656 <SPI_EthernetRead>
     8aa:	d8 2f       	mov	r29, r24
     8ac:	86 e0       	ldi	r24, 0x06	; 6
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	d2 de       	rcall	.-604    	; 0x656 <SPI_EthernetRead>
     8b2:	c8 2f       	mov	r28, r24
     8b4:	85 e0       	ldi	r24, 0x05	; 5
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	ce de       	rcall	.-612    	; 0x656 <SPI_EthernetRead>
     8ba:	1f 92       	push	r1
     8bc:	1f 93       	push	r17
     8be:	1f 92       	push	r1
     8c0:	df 93       	push	r29
     8c2:	1f 92       	push	r1
     8c4:	cf 93       	push	r28
     8c6:	1f 92       	push	r1
     8c8:	8f 93       	push	r24
     8ca:	8b ef       	ldi	r24, 0xFB	; 251
     8cc:	94 e0       	ldi	r25, 0x04	; 4
     8ce:	9f 93       	push	r25
     8d0:	8f 93       	push	r24
     8d2:	0e 94 ae 12 	call	0x255c	; 0x255c <printf>
     8d6:	ed b7       	in	r30, 0x3d	; 61
     8d8:	fe b7       	in	r31, 0x3e	; 62
     8da:	b2 96       	adiw	r30, 0x22	; 34
     8dc:	0f b6       	in	r0, 0x3f	; 63
     8de:	f8 94       	cli
     8e0:	fe bf       	out	0x3e, r31	; 62
     8e2:	0f be       	out	0x3f, r0	; 63
     8e4:	ed bf       	out	0x3d, r30	; 61
     8e6:	f7 01       	movw	r30, r14
     8e8:	83 81       	ldd	r24, Z+3	; 0x03
     8ea:	1f 92       	push	r1
     8ec:	8f 93       	push	r24
     8ee:	82 81       	ldd	r24, Z+2	; 0x02
     8f0:	1f 92       	push	r1
     8f2:	8f 93       	push	r24
     8f4:	81 81       	ldd	r24, Z+1	; 0x01
     8f6:	1f 92       	push	r1
     8f8:	8f 93       	push	r24
     8fa:	80 81       	ld	r24, Z
     8fc:	1f 92       	push	r1
     8fe:	8f 93       	push	r24
     900:	87 e1       	ldi	r24, 0x17	; 23
     902:	95 e0       	ldi	r25, 0x05	; 5
     904:	9f 93       	push	r25
     906:	8f 93       	push	r24
     908:	0e 94 ae 12 	call	0x255c	; 0x255c <printf>
     90c:	f7 01       	movw	r30, r14
     90e:	60 81       	ld	r22, Z
     910:	8f e0       	ldi	r24, 0x0F	; 15
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	8c de       	rcall	.-744    	; 0x62e <SPI_EthernetWrite>
     916:	f7 01       	movw	r30, r14
     918:	61 81       	ldd	r22, Z+1	; 0x01
     91a:	80 e1       	ldi	r24, 0x10	; 16
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	87 de       	rcall	.-754    	; 0x62e <SPI_EthernetWrite>
     920:	f7 01       	movw	r30, r14
     922:	62 81       	ldd	r22, Z+2	; 0x02
     924:	81 e1       	ldi	r24, 0x11	; 17
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	82 de       	rcall	.-764    	; 0x62e <SPI_EthernetWrite>
     92a:	f7 01       	movw	r30, r14
     92c:	63 81       	ldd	r22, Z+3	; 0x03
     92e:	82 e1       	ldi	r24, 0x12	; 18
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	7d de       	rcall	.-774    	; 0x62e <SPI_EthernetWrite>
     934:	8f ec       	ldi	r24, 0xCF	; 207
     936:	97 e0       	ldi	r25, 0x07	; 7
     938:	01 97       	sbiw	r24, 0x01	; 1
     93a:	f1 f7       	brne	.-4      	; 0x938 <NetworkSetup+0x2b8>
     93c:	00 c0       	rjmp	.+0      	; 0x93e <NetworkSetup+0x2be>
     93e:	00 00       	nop
     940:	82 e1       	ldi	r24, 0x12	; 18
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	88 de       	rcall	.-752    	; 0x656 <SPI_EthernetRead>
     946:	18 2f       	mov	r17, r24
     948:	81 e1       	ldi	r24, 0x11	; 17
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	84 de       	rcall	.-760    	; 0x656 <SPI_EthernetRead>
     94e:	d8 2f       	mov	r29, r24
     950:	80 e1       	ldi	r24, 0x10	; 16
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	80 de       	rcall	.-768    	; 0x656 <SPI_EthernetRead>
     956:	c8 2f       	mov	r28, r24
     958:	8f e0       	ldi	r24, 0x0F	; 15
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	7c de       	rcall	.-776    	; 0x656 <SPI_EthernetRead>
     95e:	1f 92       	push	r1
     960:	1f 93       	push	r17
     962:	1f 92       	push	r1
     964:	df 93       	push	r29
     966:	1f 92       	push	r1
     968:	cf 93       	push	r28
     96a:	1f 92       	push	r1
     96c:	8f 93       	push	r24
     96e:	87 e3       	ldi	r24, 0x37	; 55
     970:	95 e0       	ldi	r25, 0x05	; 5
     972:	9f 93       	push	r25
     974:	8f 93       	push	r24
     976:	0e 94 ae 12 	call	0x255c	; 0x255c <printf>
     97a:	83 e5       	ldi	r24, 0x53	; 83
     97c:	95 e0       	ldi	r25, 0x05	; 5
     97e:	0e 94 c4 12 	call	0x2588	; 0x2588 <puts>
     982:	ed b7       	in	r30, 0x3d	; 61
     984:	fe b7       	in	r31, 0x3e	; 62
     986:	74 96       	adiw	r30, 0x14	; 20
     988:	0f b6       	in	r0, 0x3f	; 63
     98a:	f8 94       	cli
     98c:	fe bf       	out	0x3e, r31	; 62
     98e:	0f be       	out	0x3f, r0	; 63
     990:	ed bf       	out	0x3d, r30	; 61
     992:	df 91       	pop	r29
     994:	cf 91       	pop	r28
     996:	1f 91       	pop	r17
     998:	0f 91       	pop	r16
     99a:	ff 90       	pop	r15
     99c:	ef 90       	pop	r14
     99e:	df 90       	pop	r13
     9a0:	cf 90       	pop	r12
     9a2:	bf 90       	pop	r11
     9a4:	08 95       	ret

000009a6 <Server_Connect>:
     9a6:	df 92       	push	r13
     9a8:	ef 92       	push	r14
     9aa:	ff 92       	push	r15
     9ac:	0f 93       	push	r16
     9ae:	1f 93       	push	r17
     9b0:	cf 93       	push	r28
     9b2:	df 93       	push	r29
     9b4:	d8 2e       	mov	r13, r24
     9b6:	8b 01       	movw	r16, r22
     9b8:	7a 01       	movw	r14, r20
     9ba:	e9 01       	movw	r28, r18
     9bc:	60 e1       	ldi	r22, 0x10	; 16
     9be:	81 e0       	ldi	r24, 0x01	; 1
     9c0:	94 e0       	ldi	r25, 0x04	; 4
     9c2:	35 de       	rcall	.-918    	; 0x62e <SPI_EthernetWrite>
     9c4:	6d 2d       	mov	r22, r13
     9c6:	80 e0       	ldi	r24, 0x00	; 0
     9c8:	94 e0       	ldi	r25, 0x04	; 4
     9ca:	31 de       	rcall	.-926    	; 0x62e <SPI_EthernetWrite>
     9cc:	68 81       	ld	r22, Y
     9ce:	84 e0       	ldi	r24, 0x04	; 4
     9d0:	94 e0       	ldi	r25, 0x04	; 4
     9d2:	2d de       	rcall	.-934    	; 0x62e <SPI_EthernetWrite>
     9d4:	69 81       	ldd	r22, Y+1	; 0x01
     9d6:	85 e0       	ldi	r24, 0x05	; 5
     9d8:	94 e0       	ldi	r25, 0x04	; 4
     9da:	29 de       	rcall	.-942    	; 0x62e <SPI_EthernetWrite>
     9dc:	61 e0       	ldi	r22, 0x01	; 1
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	94 e0       	ldi	r25, 0x04	; 4
     9e2:	25 de       	rcall	.-950    	; 0x62e <SPI_EthernetWrite>
     9e4:	83 e0       	ldi	r24, 0x03	; 3
     9e6:	94 e0       	ldi	r25, 0x04	; 4
     9e8:	36 de       	rcall	.-916    	; 0x656 <SPI_EthernetRead>
     9ea:	83 31       	cpi	r24, 0x13	; 19
     9ec:	39 f7       	brne	.-50     	; 0x9bc <Server_Connect+0x16>
     9ee:	f8 01       	movw	r30, r16
     9f0:	60 81       	ld	r22, Z
     9f2:	8c e0       	ldi	r24, 0x0C	; 12
     9f4:	94 e0       	ldi	r25, 0x04	; 4
     9f6:	1b de       	rcall	.-970    	; 0x62e <SPI_EthernetWrite>
     9f8:	f8 01       	movw	r30, r16
     9fa:	61 81       	ldd	r22, Z+1	; 0x01
     9fc:	8d e0       	ldi	r24, 0x0D	; 13
     9fe:	94 e0       	ldi	r25, 0x04	; 4
     a00:	16 de       	rcall	.-980    	; 0x62e <SPI_EthernetWrite>
     a02:	f8 01       	movw	r30, r16
     a04:	62 81       	ldd	r22, Z+2	; 0x02
     a06:	8e e0       	ldi	r24, 0x0E	; 14
     a08:	94 e0       	ldi	r25, 0x04	; 4
     a0a:	11 de       	rcall	.-990    	; 0x62e <SPI_EthernetWrite>
     a0c:	f8 01       	movw	r30, r16
     a0e:	63 81       	ldd	r22, Z+3	; 0x03
     a10:	8f e0       	ldi	r24, 0x0F	; 15
     a12:	94 e0       	ldi	r25, 0x04	; 4
     a14:	0c de       	rcall	.-1000   	; 0x62e <SPI_EthernetWrite>
     a16:	f7 01       	movw	r30, r14
     a18:	60 81       	ld	r22, Z
     a1a:	80 e1       	ldi	r24, 0x10	; 16
     a1c:	94 e0       	ldi	r25, 0x04	; 4
     a1e:	07 de       	rcall	.-1010   	; 0x62e <SPI_EthernetWrite>
     a20:	f7 01       	movw	r30, r14
     a22:	61 81       	ldd	r22, Z+1	; 0x01
     a24:	81 e1       	ldi	r24, 0x11	; 17
     a26:	94 e0       	ldi	r25, 0x04	; 4
     a28:	02 de       	rcall	.-1020   	; 0x62e <SPI_EthernetWrite>
     a2a:	64 e0       	ldi	r22, 0x04	; 4
     a2c:	81 e0       	ldi	r24, 0x01	; 1
     a2e:	94 e0       	ldi	r25, 0x04	; 4
     a30:	fe dd       	rcall	.-1028   	; 0x62e <SPI_EthernetWrite>
     a32:	c0 e0       	ldi	r28, 0x00	; 0
     a34:	d0 e0       	ldi	r29, 0x00	; 0
     a36:	00 e1       	ldi	r16, 0x10	; 16
     a38:	17 e2       	ldi	r17, 0x27	; 39
     a3a:	35 c0       	rjmp	.+106    	; 0xaa6 <Server_Connect+0x100>
     a3c:	87 e5       	ldi	r24, 0x57	; 87
     a3e:	92 e0       	ldi	r25, 0x02	; 2
     a40:	01 97       	sbiw	r24, 0x01	; 1
     a42:	f1 f7       	brne	.-4      	; 0xa40 <Server_Connect+0x9a>
     a44:	00 c0       	rjmp	.+0      	; 0xa46 <Server_Connect+0xa0>
     a46:	00 00       	nop
     a48:	21 96       	adiw	r28, 0x01	; 1
     a4a:	9e 01       	movw	r18, r28
     a4c:	32 95       	swap	r19
     a4e:	22 95       	swap	r18
     a50:	2f 70       	andi	r18, 0x0F	; 15
     a52:	23 27       	eor	r18, r19
     a54:	3f 70       	andi	r19, 0x0F	; 15
     a56:	23 27       	eor	r18, r19
     a58:	a7 e4       	ldi	r26, 0x47	; 71
     a5a:	b3 e0       	ldi	r27, 0x03	; 3
     a5c:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <__umulhisi3>
     a60:	96 95       	lsr	r25
     a62:	87 95       	ror	r24
     a64:	96 95       	lsr	r25
     a66:	87 95       	ror	r24
     a68:	96 95       	lsr	r25
     a6a:	87 95       	ror	r24
     a6c:	80 9f       	mul	r24, r16
     a6e:	90 01       	movw	r18, r0
     a70:	81 9f       	mul	r24, r17
     a72:	30 0d       	add	r19, r0
     a74:	90 9f       	mul	r25, r16
     a76:	30 0d       	add	r19, r0
     a78:	11 24       	eor	r1, r1
     a7a:	c2 17       	cp	r28, r18
     a7c:	d3 07       	cpc	r29, r19
     a7e:	99 f4       	brne	.+38     	; 0xaa6 <Server_Connect+0x100>
     a80:	82 e7       	ldi	r24, 0x72	; 114
     a82:	95 e0       	ldi	r25, 0x05	; 5
     a84:	0e 94 c4 12 	call	0x2588	; 0x2588 <puts>
     a88:	c1 35       	cpi	r28, 0x51	; 81
     a8a:	93 ec       	ldi	r25, 0xC3	; 195
     a8c:	d9 07       	cpc	r29, r25
     a8e:	58 f0       	brcs	.+22     	; 0xaa6 <Server_Connect+0x100>
     a90:	84 e9       	ldi	r24, 0x94	; 148
     a92:	95 e0       	ldi	r25, 0x05	; 5
     a94:	0e 94 c4 12 	call	0x2588	; 0x2588 <puts>
     a98:	60 e1       	ldi	r22, 0x10	; 16
     a9a:	81 e0       	ldi	r24, 0x01	; 1
     a9c:	94 e0       	ldi	r25, 0x04	; 4
     a9e:	c7 dd       	rcall	.-1138   	; 0x62e <SPI_EthernetWrite>
     aa0:	80 e0       	ldi	r24, 0x00	; 0
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	17 c0       	rjmp	.+46     	; 0xad4 <Server_Connect+0x12e>
     aa6:	83 e0       	ldi	r24, 0x03	; 3
     aa8:	94 e0       	ldi	r25, 0x04	; 4
     aaa:	d5 dd       	rcall	.-1110   	; 0x656 <SPI_EthernetRead>
     aac:	87 31       	cpi	r24, 0x17	; 23
     aae:	31 f6       	brne	.-116    	; 0xa3c <Server_Connect+0x96>
     ab0:	83 e0       	ldi	r24, 0x03	; 3
     ab2:	94 e0       	ldi	r25, 0x04	; 4
     ab4:	d0 dd       	rcall	.-1120   	; 0x656 <SPI_EthernetRead>
     ab6:	87 31       	cpi	r24, 0x17	; 23
     ab8:	39 f4       	brne	.+14     	; 0xac8 <Server_Connect+0x122>
     aba:	8c ea       	ldi	r24, 0xAC	; 172
     abc:	95 e0       	ldi	r25, 0x05	; 5
     abe:	0e 94 c4 12 	call	0x2588	; 0x2588 <puts>
     ac2:	81 e0       	ldi	r24, 0x01	; 1
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	06 c0       	rjmp	.+12     	; 0xad4 <Server_Connect+0x12e>
     ac8:	83 ec       	ldi	r24, 0xC3	; 195
     aca:	95 e0       	ldi	r25, 0x05	; 5
     acc:	0e 94 c4 12 	call	0x2588	; 0x2588 <puts>
     ad0:	80 e0       	ldi	r24, 0x00	; 0
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	df 91       	pop	r29
     ad6:	cf 91       	pop	r28
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	df 90       	pop	r13
     ae2:	08 95       	ret

00000ae4 <MemoryInit>:
     ae4:	63 e0       	ldi	r22, 0x03	; 3
     ae6:	8a e1       	ldi	r24, 0x1A	; 26
     ae8:	90 e0       	ldi	r25, 0x00	; 0
     aea:	a1 dd       	rcall	.-1214   	; 0x62e <SPI_EthernetWrite>
     aec:	63 e0       	ldi	r22, 0x03	; 3
     aee:	8b e1       	ldi	r24, 0x1B	; 27
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	9d dd       	rcall	.-1222   	; 0x62e <SPI_EthernetWrite>
     af4:	8f ef       	ldi	r24, 0xFF	; 255
     af6:	9f e1       	ldi	r25, 0x1F	; 31
     af8:	90 93 ce 0a 	sts	0x0ACE, r25
     afc:	80 93 cd 0a 	sts	0x0ACD, r24
     b00:	20 e0       	ldi	r18, 0x00	; 0
     b02:	30 e4       	ldi	r19, 0x40	; 64
     b04:	30 93 d0 0a 	sts	0x0AD0, r19
     b08:	20 93 cf 0a 	sts	0x0ACF, r18
     b0c:	90 93 d4 0a 	sts	0x0AD4, r25
     b10:	80 93 d3 0a 	sts	0x0AD3, r24
     b14:	80 e0       	ldi	r24, 0x00	; 0
     b16:	90 e6       	ldi	r25, 0x60	; 96
     b18:	90 93 d2 0a 	sts	0x0AD2, r25
     b1c:	80 93 d1 0a 	sts	0x0AD1, r24
     b20:	08 95       	ret

00000b22 <SocketCommand>:

void SocketCommand(uint8_t command) 
{
	SPI_EthernetWrite(S0_CR, command);
     b22:	68 2f       	mov	r22, r24
     b24:	81 e0       	ldi	r24, 0x01	; 1
     b26:	94 e0       	ldi	r25, 0x04	; 4
     b28:	82 cd       	rjmp	.-1276   	; 0x62e <SPI_EthernetWrite>
     b2a:	08 95       	ret

00000b2c <SendData>:
	S0_RX_MASK = 0x1FFF;
	S0_RX_BASE = 0x6000;
}

int SendData(const uint8_t *buffer,uint16_t bufferLength, int externRAM)
{
     b2c:	4f 92       	push	r4
     b2e:	5f 92       	push	r5
     b30:	6f 92       	push	r6
     b32:	7f 92       	push	r7
     b34:	8f 92       	push	r8
     b36:	9f 92       	push	r9
     b38:	af 92       	push	r10
     b3a:	bf 92       	push	r11
     b3c:	cf 92       	push	r12
     b3e:	df 92       	push	r13
     b40:	ef 92       	push	r14
     b42:	ff 92       	push	r15
     b44:	0f 93       	push	r16
     b46:	1f 93       	push	r17
     b48:	cf 93       	push	r28
     b4a:	df 93       	push	r29
     b4c:	7c 01       	movw	r14, r24
     b4e:	6b 01       	movw	r12, r22
     b50:	3a 01       	movw	r6, r20
		
	uint16_t ptr,offaddr,realaddr,txsize,timeout,i,data;
	printf("SR: 0x%02x\n", SPI_EthernetRead(S0_SR));
     b52:	83 e0       	ldi	r24, 0x03	; 3
     b54:	94 e0       	ldi	r25, 0x04	; 4
     b56:	7f dd       	rcall	.-1282   	; 0x656 <SPI_EthernetRead>
     b58:	1f 92       	push	r1
     b5a:	8f 93       	push	r24
     b5c:	82 ee       	ldi	r24, 0xE2	; 226
     b5e:	95 e0       	ldi	r25, 0x05	; 5
     b60:	9f 93       	push	r25
     b62:	8f 93       	push	r24
     b64:	0e 94 ae 12 	call	0x255c	; 0x255c <printf>
	if(SPI_EthernetRead(S0_SR) != SOCK_ESTABLISHED){
     b68:	83 e0       	ldi	r24, 0x03	; 3
     b6a:	94 e0       	ldi	r25, 0x04	; 4
     b6c:	74 dd       	rcall	.-1304   	; 0x656 <SPI_EthernetRead>
     b6e:	0f 90       	pop	r0
     b70:	0f 90       	pop	r0
     b72:	0f 90       	pop	r0
     b74:	0f 90       	pop	r0
     b76:	87 31       	cpi	r24, 0x17	; 23
     b78:	51 f0       	breq	.+20     	; 0xb8e <SendData+0x62>
		while(!Server_Connect(TCP_MODE, gl_server_ip_addr, gl_server_port, gl_source_port));
     b7a:	2a e1       	ldi	r18, 0x1A	; 26
     b7c:	32 e0       	ldi	r19, 0x02	; 2
     b7e:	4c e1       	ldi	r20, 0x1C	; 28
     b80:	52 e0       	ldi	r21, 0x02	; 2
     b82:	6e e1       	ldi	r22, 0x1E	; 30
     b84:	72 e0       	ldi	r23, 0x02	; 2
     b86:	81 e0       	ldi	r24, 0x01	; 1
     b88:	0e df       	rcall	.-484    	; 0x9a6 <Server_Connect>
     b8a:	89 2b       	or	r24, r25
     b8c:	b1 f3       	breq	.-20     	; 0xb7a <SendData+0x4e>
	}
	//#if _DEBUG_MODE
	//printf("Send Size: %d\n",bufferLength);
	//#endif
	// Make sure the TX Free Size Register is available
	txsize = SPI_EthernetRead(S0_TX_FSR);
     b8e:	80 e2       	ldi	r24, 0x20	; 32
     b90:	94 e0       	ldi	r25, 0x04	; 4
     b92:	61 dd       	rcall	.-1342   	; 0x656 <SPI_EthernetRead>
     b94:	c8 2f       	mov	r28, r24
     b96:	d0 e0       	ldi	r29, 0x00	; 0
	txsize = (((txsize & 0x00FF) << 8 ) + SPI_EthernetRead(S0_TX_FSR + 1));
     b98:	dc 2f       	mov	r29, r28
     b9a:	cc 27       	eor	r28, r28
     b9c:	81 e2       	ldi	r24, 0x21	; 33
     b9e:	94 e0       	ldi	r25, 0x04	; 4
     ba0:	5a dd       	rcall	.-1356   	; 0x656 <SPI_EthernetRead>
     ba2:	c8 0f       	add	r28, r24
     ba4:	d1 1d       	adc	r29, r1
	//#if _DEBUG_MODE
	//printf("TX Free Size: %d\n",txsize);
	//#endif
	timeout = 0;
	//Writing our buffer to the transmit buffer
	while (txsize < bufferLength) {
     ba6:	cc 15       	cp	r28, r12
     ba8:	dd 05       	cpc	r29, r13
     baa:	08 f4       	brcc	.+2      	; 0xbae <SendData+0x82>
     bac:	8f c0       	rjmp	.+286    	; 0xccc <SendData+0x1a0>
     bae:	2c c0       	rjmp	.+88     	; 0xc08 <SendData+0xdc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     bb0:	8f ec       	ldi	r24, 0xCF	; 207
     bb2:	97 e0       	ldi	r25, 0x07	; 7
     bb4:	01 97       	sbiw	r24, 0x01	; 1
     bb6:	f1 f7       	brne	.-4      	; 0xbb4 <SendData+0x88>
     bb8:	00 c0       	rjmp	.+0      	; 0xbba <SendData+0x8e>
     bba:	00 00       	nop
		_delay_ms(1);
		txsize = SPI_EthernetRead(S0_TX_FSR);
     bbc:	80 e2       	ldi	r24, 0x20	; 32
     bbe:	94 e0       	ldi	r25, 0x04	; 4
     bc0:	4a dd       	rcall	.-1388   	; 0x656 <SPI_EthernetRead>
     bc2:	c8 2f       	mov	r28, r24
     bc4:	d0 e0       	ldi	r29, 0x00	; 0
		txsize = (((txsize & 0x00FF) << 8 ) + SPI_EthernetRead(S0_TX_FSR + 1));
     bc6:	dc 2f       	mov	r29, r28
     bc8:	cc 27       	eor	r28, r28
     bca:	81 e2       	ldi	r24, 0x21	; 33
     bcc:	94 e0       	ldi	r25, 0x04	; 4
     bce:	43 dd       	rcall	.-1402   	; 0x656 <SPI_EthernetRead>
     bd0:	c8 0f       	add	r28, r24
     bd2:	d1 1d       	adc	r29, r1
		printf("TX Size: %d", txsize);
     bd4:	df 93       	push	r29
     bd6:	cf 93       	push	r28
     bd8:	9f 92       	push	r9
     bda:	8f 92       	push	r8
     bdc:	0e 94 ae 12 	call	0x255c	; 0x255c <printf>
     be0:	01 50       	subi	r16, 0x01	; 1
     be2:	11 09       	sbc	r17, r1
		// Timeout for approx 1000 ms
		if (timeout++ > 1000) {
     be4:	0f 90       	pop	r0
     be6:	0f 90       	pop	r0
     be8:	0f 90       	pop	r0
     bea:	0f 90       	pop	r0
     bec:	01 15       	cp	r16, r1
     bee:	11 05       	cpc	r17, r1
     bf0:	41 f4       	brne	.+16     	; 0xc02 <SendData+0xd6>
			//#if _DEBUG_MODE
			//printf("TX Free Size Error!\n");
			//#endif
			// Disconnect the connection
			SocketCommand(DISCON);
     bf2:	88 e0       	ldi	r24, 0x08	; 8
     bf4:	96 df       	rcall	.-212    	; 0xb22 <SocketCommand>
			while(SPI_EthernetRead(S0_CR));
     bf6:	81 e0       	ldi	r24, 0x01	; 1
     bf8:	94 e0       	ldi	r25, 0x04	; 4
     bfa:	2d dd       	rcall	.-1446   	; 0x656 <SPI_EthernetRead>
     bfc:	81 11       	cpse	r24, r1
     bfe:	fb cf       	rjmp	.-10     	; 0xbf6 <SendData+0xca>
     c00:	5f c0       	rjmp	.+190    	; 0xcc0 <SendData+0x194>
	//#if _DEBUG_MODE
	//printf("TX Free Size: %d\n",txsize);
	//#endif
	timeout = 0;
	//Writing our buffer to the transmit buffer
	while (txsize < bufferLength) {
     c02:	cc 15       	cp	r28, r12
     c04:	dd 05       	cpc	r29, r13
     c06:	a0 f2       	brcs	.-88     	; 0xbb0 <SendData+0x84>
			return 0;
		}
	}

	// Read the Tx Write Pointer
	ptr = SPI_EthernetRead(S0_TX_WR);
     c08:	84 e2       	ldi	r24, 0x24	; 36
     c0a:	94 e0       	ldi	r25, 0x04	; 4
     c0c:	24 dd       	rcall	.-1464   	; 0x656 <SPI_EthernetRead>
     c0e:	48 2e       	mov	r4, r24
	offaddr = (((ptr & 0x00FF) << 8 ) + SPI_EthernetRead(S0_TX_WR + 1));
     c10:	85 e2       	ldi	r24, 0x25	; 37
     c12:	94 e0       	ldi	r25, 0x04	; 4
     c14:	20 dd       	rcall	.-1472   	; 0x656 <SPI_EthernetRead>
			return 0;
		}
	}

	// Read the Tx Write Pointer
	ptr = SPI_EthernetRead(S0_TX_WR);
     c16:	51 2c       	mov	r5, r1
	offaddr = (((ptr & 0x00FF) << 8 ) + SPI_EthernetRead(S0_TX_WR + 1));
     c18:	54 2c       	mov	r5, r4
     c1a:	44 24       	eor	r4, r4
     c1c:	48 0e       	add	r4, r24
     c1e:	51 1c       	adc	r5, r1
	unsigned int startaddr = (((SPI_EthernetRead(S0_TX_RR) << 8) + SPI_EthernetRead(S0_TX_RR + 1)));
     c20:	82 e2       	ldi	r24, 0x22	; 34
     c22:	94 e0       	ldi	r25, 0x04	; 4
     c24:	18 dd       	rcall	.-1488   	; 0x656 <SPI_EthernetRead>
     c26:	83 e2       	ldi	r24, 0x23	; 35
     c28:	94 e0       	ldi	r25, 0x04	; 4
     c2a:	15 dd       	rcall	.-1494   	; 0x656 <SPI_EthernetRead>
	//printf("Real WR: %d\n", realWR);
	//printf("Real RR: %d\n", realRR); 
	//#endif 
	i = 0; 
	data = 0; 
	printf("Sending...\n\n");
     c2c:	8a ef       	ldi	r24, 0xFA	; 250
     c2e:	95 e0       	ldi	r25, 0x05	; 5
     c30:	0e 94 c4 12 	call	0x2588	; 0x2588 <puts>
	while(i < bufferLength) {
     c34:	c1 14       	cp	r12, r1
     c36:	d1 04       	cpc	r13, r1
     c38:	61 f1       	breq	.+88     	; 0xc92 <SendData+0x166>
     c3a:	47 01       	movw	r8, r14
     c3c:	8c 0c       	add	r8, r12
     c3e:	9d 1c       	adc	r9, r13
		}
	}

	// Read the Tx Write Pointer
	ptr = SPI_EthernetRead(S0_TX_WR);
	offaddr = (((ptr & 0x00FF) << 8 ) + SPI_EthernetRead(S0_TX_WR + 1));
     c40:	82 01       	movw	r16, r4
	//printf("Real RR: %d\n", realRR); 
	//#endif 
	i = 0; 
	data = 0; 
	printf("Sending...\n\n");
	while(i < bufferLength) {
     c42:	c0 e0       	ldi	r28, 0x00	; 0
     c44:	d4 e0       	ldi	r29, 0x04	; 4

		// Calculate the real W5100 physical Tx Buffer Address
		realaddr = S0_TX_BASE + (offaddr & S0_TX_MASK);
     c46:	a0 90 cd 0a 	lds	r10, 0x0ACD
     c4a:	b0 90 ce 0a 	lds	r11, 0x0ACE
     c4e:	a0 22       	and	r10, r16
     c50:	b1 22       	and	r11, r17
     c52:	80 91 cf 0a 	lds	r24, 0x0ACF
     c56:	90 91 d0 0a 	lds	r25, 0x0AD0
     c5a:	a8 0e       	add	r10, r24
     c5c:	b9 1e       	adc	r11, r25
		//printf("TX Real Address: %d\n", realaddr);
		// Copy the application data to the W5100 Tx Buffer
		if(externRAM)
     c5e:	61 14       	cp	r6, r1
     c60:	71 04       	cpc	r7, r1
     c62:	41 f0       	breq	.+16     	; 0xc74 <SendData+0x148>
		{
			//Grab the byte from external RAM and write it to the Wiznet TX Buffer 
			data = RAMReadByte(WIFI_QSTRING_ADDRESS + i);
     c64:	be 01       	movw	r22, r28
     c66:	80 e0       	ldi	r24, 0x00	; 0
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	73 d1       	rcall	.+742    	; 0xf52 <RAMReadByte>
			//_delay_us(10);
			//printf("%c", data);
			SPI_EthernetWrite(realaddr, data);
     c6c:	68 2f       	mov	r22, r24
     c6e:	c5 01       	movw	r24, r10
     c70:	de dc       	rcall	.-1604   	; 0x62e <SPI_EthernetWrite>
     c72:	04 c0       	rjmp	.+8      	; 0xc7c <SendData+0x150>
			//_delay_us(10);
		}
		else
		{
			//printf("%c", *buffer);
			SPI_EthernetWrite(realaddr,*buffer);	
     c74:	f7 01       	movw	r30, r14
     c76:	60 81       	ld	r22, Z
     c78:	c5 01       	movw	r24, r10
     c7a:	d9 dc       	rcall	.-1614   	; 0x62e <SPI_EthernetWrite>
		}
		offaddr++;
     c7c:	0f 5f       	subi	r16, 0xFF	; 255
     c7e:	1f 4f       	sbci	r17, 0xFF	; 255
		buffer++;
     c80:	ff ef       	ldi	r31, 0xFF	; 255
     c82:	ef 1a       	sub	r14, r31
     c84:	ff 0a       	sbc	r15, r31
     c86:	21 96       	adiw	r28, 0x01	; 1
	//printf("Real RR: %d\n", realRR); 
	//#endif 
	i = 0; 
	data = 0; 
	printf("Sending...\n\n");
	while(i < bufferLength) {
     c88:	e8 14       	cp	r14, r8
     c8a:	f9 04       	cpc	r15, r9
     c8c:	e1 f6       	brne	.-72     	; 0xc46 <SendData+0x11a>
     c8e:	4c 0c       	add	r4, r12
     c90:	5d 1c       	adc	r5, r13
		}
		offaddr++;
		buffer++;
		i++; 
	}
		SPI_EthernetWrite(realaddr + 1, 0x00);
     c92:	60 e0       	ldi	r22, 0x00	; 0
     c94:	c5 01       	movw	r24, r10
     c96:	01 96       	adiw	r24, 0x01	; 1
     c98:	ca dc       	rcall	.-1644   	; 0x62e <SPI_EthernetWrite>

	// Increase the S0_TX_WR value, so it points to the next transmit
	//printf("Offset After: %d\n", offaddr);
	ptr = SPI_EthernetRead(S0_TX_WR);
     c9a:	84 e2       	ldi	r24, 0x24	; 36
     c9c:	94 e0       	ldi	r25, 0x04	; 4
     c9e:	db dc       	rcall	.-1610   	; 0x656 <SPI_EthernetRead>
	//realWR = S0_TX_BASE + (offaddr & S0_TX_MASK);
	//printf("Real WR: %d\n", realWR);
	//printf("%d\n", (offaddr & 0xFF00) >> 8);
	//printf("%d\n", (offaddr & 0x00FF));
	//SPI_Write(S0_TX_WR,(offaddr & 0xFF00) >> 8 );
	SPI_EthernetWrite(S0_TX_WR, 0xFF);
     ca0:	6f ef       	ldi	r22, 0xFF	; 255
     ca2:	84 e2       	ldi	r24, 0x24	; 36
     ca4:	94 e0       	ldi	r25, 0x04	; 4
     ca6:	c3 dc       	rcall	.-1658   	; 0x62e <SPI_EthernetWrite>
	SPI_EthernetWrite(S0_TX_WR + 1,(offaddr & 0x00FF));
     ca8:	64 2d       	mov	r22, r4
     caa:	85 e2       	ldi	r24, 0x25	; 37
     cac:	94 e0       	ldi	r25, 0x04	; 4
     cae:	bf dc       	rcall	.-1666   	; 0x62e <SPI_EthernetWrite>
	//realRR = S0_TX_BASE + (startaddr & S0_TX_MASK);
	//printf("Real WR: %d\n", realWR);
	//printf("Real RR: %d\n", realRR);
	
	// Now Send the SEND command
	SocketCommand(SEND);
     cb0:	80 e2       	ldi	r24, 0x20	; 32
     cb2:	37 df       	rcall	.-402    	; 0xb22 <SocketCommand>
	//printf("WR Low: %d\n", SPI_Read(S0_TX_WR));
	//printf("WR High: %d\n", SPI_Read(S0_TX_WR + 1));
	// Wait for Sending Process
	while(SPI_EthernetRead(S0_CR));
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	94 e0       	ldi	r25, 0x04	; 4
     cb8:	ce dc       	rcall	.-1636   	; 0x656 <SPI_EthernetRead>
     cba:	81 11       	cpse	r24, r1
     cbc:	fb cf       	rjmp	.-10     	; 0xcb4 <SendData+0x188>
     cbe:	03 c0       	rjmp	.+6      	; 0xcc6 <SendData+0x19a>
			//printf("TX Free Size Error!\n");
			//#endif
			// Disconnect the connection
			SocketCommand(DISCON);
			while(SPI_EthernetRead(S0_CR));
			return 0;
     cc0:	80 e0       	ldi	r24, 0x00	; 0
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	2a c0       	rjmp	.+84     	; 0xd1a <SendData+0x1ee>
	//printf("WR Low: %d\n", SPI_Read(S0_TX_WR));
	//printf("WR High: %d\n", SPI_Read(S0_TX_WR + 1));
	// Wait for Sending Process
	while(SPI_EthernetRead(S0_CR));
	//while(!(SPI_EthernetRead(S0_IR) & (1<<SIR_SEND_OK))); 
	return 1;
     cc6:	81 e0       	ldi	r24, 0x01	; 1
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	27 c0       	rjmp	.+78     	; 0xd1a <SendData+0x1ee>
     ccc:	8f ec       	ldi	r24, 0xCF	; 207
     cce:	97 e0       	ldi	r25, 0x07	; 7
     cd0:	01 97       	sbiw	r24, 0x01	; 1
     cd2:	f1 f7       	brne	.-4      	; 0xcd0 <SendData+0x1a4>
     cd4:	00 c0       	rjmp	.+0      	; 0xcd6 <SendData+0x1aa>
     cd6:	00 00       	nop
	//#endif
	timeout = 0;
	//Writing our buffer to the transmit buffer
	while (txsize < bufferLength) {
		_delay_ms(1);
		txsize = SPI_EthernetRead(S0_TX_FSR);
     cd8:	80 e2       	ldi	r24, 0x20	; 32
     cda:	94 e0       	ldi	r25, 0x04	; 4
     cdc:	bc dc       	rcall	.-1672   	; 0x656 <SPI_EthernetRead>
     cde:	c8 2f       	mov	r28, r24
     ce0:	d0 e0       	ldi	r29, 0x00	; 0
		txsize = (((txsize & 0x00FF) << 8 ) + SPI_EthernetRead(S0_TX_FSR + 1));
     ce2:	dc 2f       	mov	r29, r28
     ce4:	cc 27       	eor	r28, r28
     ce6:	81 e2       	ldi	r24, 0x21	; 33
     ce8:	94 e0       	ldi	r25, 0x04	; 4
     cea:	b5 dc       	rcall	.-1686   	; 0x656 <SPI_EthernetRead>
     cec:	c8 0f       	add	r28, r24
     cee:	d1 1d       	adc	r29, r1
		printf("TX Size: %d", txsize);
     cf0:	df 93       	push	r29
     cf2:	cf 93       	push	r28
     cf4:	8e ee       	ldi	r24, 0xEE	; 238
     cf6:	95 e0       	ldi	r25, 0x05	; 5
     cf8:	9f 93       	push	r25
     cfa:	8f 93       	push	r24
     cfc:	0e 94 ae 12 	call	0x255c	; 0x255c <printf>
     d00:	0f 90       	pop	r0
     d02:	0f 90       	pop	r0
     d04:	0f 90       	pop	r0
     d06:	0f 90       	pop	r0
     d08:	09 ee       	ldi	r16, 0xE9	; 233
     d0a:	13 e0       	ldi	r17, 0x03	; 3
     d0c:	0f 2e       	mov	r0, r31
     d0e:	fe ee       	ldi	r31, 0xEE	; 238
     d10:	8f 2e       	mov	r8, r31
     d12:	f5 e0       	ldi	r31, 0x05	; 5
     d14:	9f 2e       	mov	r9, r31
     d16:	f0 2d       	mov	r31, r0
     d18:	74 cf       	rjmp	.-280    	; 0xc02 <SendData+0xd6>
	//printf("WR High: %d\n", SPI_Read(S0_TX_WR + 1));
	// Wait for Sending Process
	while(SPI_EthernetRead(S0_CR));
	//while(!(SPI_EthernetRead(S0_IR) & (1<<SIR_SEND_OK))); 
	return 1;
}
     d1a:	df 91       	pop	r29
     d1c:	cf 91       	pop	r28
     d1e:	1f 91       	pop	r17
     d20:	0f 91       	pop	r16
     d22:	ff 90       	pop	r15
     d24:	ef 90       	pop	r14
     d26:	df 90       	pop	r13
     d28:	cf 90       	pop	r12
     d2a:	bf 90       	pop	r11
     d2c:	af 90       	pop	r10
     d2e:	9f 90       	pop	r9
     d30:	8f 90       	pop	r8
     d32:	7f 90       	pop	r7
     d34:	6f 90       	pop	r6
     d36:	5f 90       	pop	r5
     d38:	4f 90       	pop	r4
     d3a:	08 95       	ret

00000d3c <SPI_FPGA_Write>:
	}
}

void SPI_FPGA_Write(unsigned char SPI_Data)
{
	FPGA_CS_PORT &= ~(1<<FPGA_SPI_CS);
     d3c:	a4 98       	cbi	0x14, 4	; 20
	// Start Write transmission
	SPDR = SPI_Data;
     d3e:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     d40:	0d b4       	in	r0, 0x2d	; 45
     d42:	07 fe       	sbrs	r0, 7
     d44:	fd cf       	rjmp	.-6      	; 0xd40 <SPI_FPGA_Write+0x4>
	FPGA_CS_PORT |= (1<<FPGA_SPI_CS);
     d46:	a4 9a       	sbi	0x14, 4	; 20
     d48:	08 95       	ret

00000d4a <SPI_FPGA_Init>:
#include "FPGA.h"
#include "../../Program/AVR.h"

void SPI_FPGA_Init(void)
{
	FPGA_CS_DDR |= (1<<FPGA_SPI_CS);
     d4a:	9c 9a       	sbi	0x13, 4	; 19
	FPGA_CS_PORT |= (1<<FPGA_SPI_CS);
     d4c:	a4 9a       	sbi	0x14, 4	; 20
	
	WR_DDR |= 1<<FPGAWR;
     d4e:	e4 e0       	ldi	r30, 0x04	; 4
     d50:	f1 e0       	ldi	r31, 0x01	; 1
     d52:	80 81       	ld	r24, Z
     d54:	84 60       	ori	r24, 0x04	; 4
     d56:	80 83       	st	Z, r24
	WR_PORT &= ~(1<<FPGAWR);
     d58:	e5 e0       	ldi	r30, 0x05	; 5
     d5a:	f1 e0       	ldi	r31, 0x01	; 1
     d5c:	80 81       	ld	r24, Z
     d5e:	8b 7f       	andi	r24, 0xFB	; 251
     d60:	80 83       	st	Z, r24
	SPI_FPGA_Write(FPGA_Disable);
     d62:	80 e0       	ldi	r24, 0x00	; 0
     d64:	eb cf       	rjmp	.-42     	; 0xd3c <SPI_FPGA_Write>
     d66:	08 95       	ret

00000d68 <FPGA_Write>:
}

void FPGA_Write(uint32_t TargetMicrocontroller)
{
	switch (TargetMicrocontroller)
     d68:	6a 30       	cpi	r22, 0x0A	; 10
     d6a:	21 e9       	ldi	r18, 0x91	; 145
     d6c:	72 07       	cpc	r23, r18
     d6e:	2e e1       	ldi	r18, 0x1E	; 30
     d70:	82 07       	cpc	r24, r18
     d72:	91 05       	cpc	r25, r1
     d74:	31 f0       	breq	.+12     	; 0xd82 <FPGA_Write+0x1a>
     d76:	61 31       	cpi	r22, 0x11	; 17
     d78:	75 49       	sbci	r23, 0x95	; 149
     d7a:	8e 41       	sbci	r24, 0x1E	; 30
     d7c:	91 05       	cpc	r25, r1
     d7e:	21 f0       	breq	.+8      	; 0xd88 <FPGA_Write+0x20>
     d80:	08 95       	ret
	{
		case ATtiny2313 :
			SPI_FPGA_Write(FPGA_ATtiny2313_Mapping);
     d82:	81 e0       	ldi	r24, 0x01	; 1
     d84:	db cf       	rjmp	.-74     	; 0xd3c <SPI_FPGA_Write>
		break;
     d86:	08 95       	ret
		case ATmega324PA :
			SPI_FPGA_Write(FPGA_ATmega324PA_Mapping);
     d88:	82 e0       	ldi	r24, 0x02	; 2
     d8a:	d8 cf       	rjmp	.-80     	; 0xd3c <SPI_FPGA_Write>
     d8c:	08 95       	ret

00000d8e <uart_sendStream>:
	// ANSI turn off all attribute: me=\E[0m
	putchar(27);
	putchar('[');
	putchar('0');
	putchar('m');
}
     d8e:	cf 93       	push	r28
     d90:	c8 2f       	mov	r28, r24
     d92:	8a 30       	cpi	r24, 0x0A	; 10
     d94:	11 f4       	brne	.+4      	; 0xd9a <uart_sendStream+0xc>
     d96:	8d e0       	ldi	r24, 0x0D	; 13
     d98:	fa df       	rcall	.-12     	; 0xd8e <uart_sendStream>
     d9a:	e0 ed       	ldi	r30, 0xD0	; 208
     d9c:	f0 e0       	ldi	r31, 0x00	; 0
     d9e:	90 81       	ld	r25, Z
     da0:	95 ff       	sbrs	r25, 5
     da2:	fd cf       	rjmp	.-6      	; 0xd9e <uart_sendStream+0x10>
     da4:	c0 93 d6 00 	sts	0x00D6, r28
     da8:	80 e0       	ldi	r24, 0x00	; 0
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	cf 91       	pop	r28
     dae:	08 95       	ret

00000db0 <uart_receiveStream>:
     db0:	cf 93       	push	r28
     db2:	bc 01       	movw	r22, r24
     db4:	e0 ed       	ldi	r30, 0xD0	; 208
     db6:	f0 e0       	ldi	r31, 0x00	; 0
     db8:	80 81       	ld	r24, Z
     dba:	88 23       	and	r24, r24
     dbc:	ec f7       	brge	.-6      	; 0xdb8 <uart_receiveStream+0x8>
     dbe:	c0 91 d6 00 	lds	r28, 0x00D6
     dc2:	8c 2f       	mov	r24, r28
     dc4:	e4 df       	rcall	.-56     	; 0xd8e <uart_sendStream>
     dc6:	8c 2f       	mov	r24, r28
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	cf 91       	pop	r28
     dcc:	08 95       	ret

00000dce <uart2_init>:

FILE uart_stream = FDEV_SETUP_STREAM(uart_sendStream, uart_receiveStream, _FDEV_SETUP_RW);

void uart2_init()
{
	UBRR2H = (((F_CPU/BAUD_RATE)/16)-1)>>8;	// set baud rate
     dce:	10 92 d5 00 	sts	0x00D5, r1
	UBRR2L = (((F_CPU/BAUD_RATE)/16)-1);
     dd2:	83 e3       	ldi	r24, 0x33	; 51
     dd4:	80 93 d4 00 	sts	0x00D4, r24
	UCSR2B = (1<<RXEN2)|(1<<TXEN2); 		// enable Rx & Tx
     dd8:	88 e1       	ldi	r24, 0x18	; 24
     dda:	80 93 d1 00 	sts	0x00D1, r24
	UCSR2C=  (1<<UCSZ21)|(1<<UCSZ20);  	       // config USART; 8N1
     dde:	86 e0       	ldi	r24, 0x06	; 6
     de0:	80 93 d2 00 	sts	0x00D2, r24
	//DDRD |= (1<<PORTD1)|(1<<PORTD0);
	// Define Output/Input Stream
	stdout = stdin = &uart_stream;
     de4:	82 e2       	ldi	r24, 0x22	; 34
     de6:	92 e0       	ldi	r25, 0x02	; 2
     de8:	90 93 a8 0b 	sts	0x0BA8, r25
     dec:	80 93 a7 0b 	sts	0x0BA7, r24
     df0:	90 93 aa 0b 	sts	0x0BAA, r25
     df4:	80 93 a9 0b 	sts	0x0BA9, r24
     df8:	08 95       	ret

00000dfa <setRAMStatus>:
		*(buffer + i) = SPI_ReadData();
	}
	RAM_PORT |= (1<<RAM_CS); 
	//printf("%d\n", buffer);
	return buffer; 
}
     dfa:	a3 98       	cbi	0x14, 3	; 20
     dfc:	91 e0       	ldi	r25, 0x01	; 1
     dfe:	9e bd       	out	0x2e, r25	; 46
     e00:	0d b4       	in	r0, 0x2d	; 45
     e02:	07 fe       	sbrs	r0, 7
     e04:	fd cf       	rjmp	.-6      	; 0xe00 <setRAMStatus+0x6>
     e06:	8e bd       	out	0x2e, r24	; 46
     e08:	0d b4       	in	r0, 0x2d	; 45
     e0a:	07 fe       	sbrs	r0, 7
     e0c:	fd cf       	rjmp	.-6      	; 0xe08 <setRAMStatus+0xe>
     e0e:	a3 9a       	sbi	0x14, 3	; 20
     e10:	08 95       	ret

00000e12 <SPI_WriteAddress>:
     e12:	26 2f       	mov	r18, r22
     e14:	97 2f       	mov	r25, r23
     e16:	48 2f       	mov	r20, r24
     e18:	82 e0       	ldi	r24, 0x02	; 2
     e1a:	8e bd       	out	0x2e, r24	; 46
     e1c:	0d b4       	in	r0, 0x2d	; 45
     e1e:	07 fe       	sbrs	r0, 7
     e20:	fd cf       	rjmp	.-6      	; 0xe1c <SPI_WriteAddress+0xa>
     e22:	4e bd       	out	0x2e, r20	; 46
     e24:	0d b4       	in	r0, 0x2d	; 45
     e26:	07 fe       	sbrs	r0, 7
     e28:	fd cf       	rjmp	.-6      	; 0xe24 <SPI_WriteAddress+0x12>
     e2a:	89 2f       	mov	r24, r25
     e2c:	8e bd       	out	0x2e, r24	; 46
     e2e:	0d b4       	in	r0, 0x2d	; 45
     e30:	07 fe       	sbrs	r0, 7
     e32:	fd cf       	rjmp	.-6      	; 0xe2e <SPI_WriteAddress+0x1c>
     e34:	2e bd       	out	0x2e, r18	; 46
     e36:	0d b4       	in	r0, 0x2d	; 45
     e38:	07 fe       	sbrs	r0, 7
     e3a:	fd cf       	rjmp	.-6      	; 0xe36 <SPI_WriteAddress+0x24>
     e3c:	08 95       	ret

00000e3e <SPI_WriteData>:
     e3e:	8e bd       	out	0x2e, r24	; 46
     e40:	0d b4       	in	r0, 0x2d	; 45
     e42:	07 fe       	sbrs	r0, 7
     e44:	fd cf       	rjmp	.-6      	; 0xe40 <SPI_WriteData+0x2>
     e46:	08 95       	ret

00000e48 <SPI_ReadAddress>:
     e48:	26 2f       	mov	r18, r22
     e4a:	97 2f       	mov	r25, r23
     e4c:	48 2f       	mov	r20, r24
     e4e:	83 e0       	ldi	r24, 0x03	; 3
     e50:	8e bd       	out	0x2e, r24	; 46
     e52:	0d b4       	in	r0, 0x2d	; 45
     e54:	07 fe       	sbrs	r0, 7
     e56:	fd cf       	rjmp	.-6      	; 0xe52 <SPI_ReadAddress+0xa>
     e58:	4e bd       	out	0x2e, r20	; 46
     e5a:	0d b4       	in	r0, 0x2d	; 45
     e5c:	07 fe       	sbrs	r0, 7
     e5e:	fd cf       	rjmp	.-6      	; 0xe5a <SPI_ReadAddress+0x12>
     e60:	89 2f       	mov	r24, r25
     e62:	8e bd       	out	0x2e, r24	; 46
     e64:	0d b4       	in	r0, 0x2d	; 45
     e66:	07 fe       	sbrs	r0, 7
     e68:	fd cf       	rjmp	.-6      	; 0xe64 <SPI_ReadAddress+0x1c>
     e6a:	2e bd       	out	0x2e, r18	; 46
     e6c:	0d b4       	in	r0, 0x2d	; 45
     e6e:	07 fe       	sbrs	r0, 7
     e70:	fd cf       	rjmp	.-6      	; 0xe6c <SPI_ReadAddress+0x24>
     e72:	08 95       	ret

00000e74 <SPI_ReadData>:
     e74:	1e bc       	out	0x2e, r1	; 46
     e76:	0d b4       	in	r0, 0x2d	; 45
     e78:	07 fe       	sbrs	r0, 7
     e7a:	fd cf       	rjmp	.-6      	; 0xe76 <SPI_ReadData+0x2>
     e7c:	8e b5       	in	r24, 0x2e	; 46
     e7e:	08 95       	ret

00000e80 <RAMPrint>:

void RAMPrint(uint32_t startAddress, uint16_t length)
{
     e80:	ef 92       	push	r14
     e82:	ff 92       	push	r15
     e84:	0f 93       	push	r16
     e86:	1f 93       	push	r17
     e88:	cf 93       	push	r28
     e8a:	df 93       	push	r29
     e8c:	c6 2f       	mov	r28, r22
     e8e:	d7 2f       	mov	r29, r23
     e90:	18 2f       	mov	r17, r24
     e92:	09 2f       	mov	r16, r25
     e94:	7a 01       	movw	r14, r20
	//char* data = ""; 
	setRAMStatus(SEQ);
     e96:	80 e4       	ldi	r24, 0x40	; 64
     e98:	b0 df       	rcall	.-160    	; 0xdfa <setRAMStatus>
	RAM_PORT &= ~(1<<RAM_CS);
     e9a:	a3 98       	cbi	0x14, 3	; 20
	SPI_ReadAddress(startAddress);
     e9c:	6c 2f       	mov	r22, r28
     e9e:	7d 2f       	mov	r23, r29
     ea0:	81 2f       	mov	r24, r17
     ea2:	90 2f       	mov	r25, r16
     ea4:	d1 df       	rcall	.-94     	; 0xe48 <SPI_ReadAddress>
	printf("Address: 0x%06x\n", startAddress);
     ea6:	0f 93       	push	r16
     ea8:	1f 93       	push	r17
     eaa:	df 93       	push	r29
     eac:	cf 93       	push	r28
     eae:	87 e3       	ldi	r24, 0x37	; 55
     eb0:	96 e0       	ldi	r25, 0x06	; 6
     eb2:	9f 93       	push	r25
     eb4:	8f 93       	push	r24
     eb6:	0e 94 ae 12 	call	0x255c	; 0x255c <printf>
	int i; 
	for(i=0; i<length; i++)
     eba:	0f 90       	pop	r0
     ebc:	0f 90       	pop	r0
     ebe:	0f 90       	pop	r0
     ec0:	0f 90       	pop	r0
     ec2:	0f 90       	pop	r0
     ec4:	0f 90       	pop	r0
     ec6:	e1 14       	cp	r14, r1
     ec8:	f1 04       	cpc	r15, r1
     eca:	a1 f0       	breq	.+40     	; 0xef4 <RAMPrint+0x74>
     ecc:	c0 e0       	ldi	r28, 0x00	; 0
     ece:	d0 e0       	ldi	r29, 0x00	; 0
	{
		printf("0x%02X ", SPI_ReadData());
     ed0:	08 e4       	ldi	r16, 0x48	; 72
     ed2:	16 e0       	ldi	r17, 0x06	; 6
     ed4:	cf df       	rcall	.-98     	; 0xe74 <SPI_ReadData>
     ed6:	1f 92       	push	r1
     ed8:	8f 93       	push	r24
     eda:	1f 93       	push	r17
     edc:	0f 93       	push	r16
     ede:	0e 94 ae 12 	call	0x255c	; 0x255c <printf>
	setRAMStatus(SEQ);
	RAM_PORT &= ~(1<<RAM_CS);
	SPI_ReadAddress(startAddress);
	printf("Address: 0x%06x\n", startAddress);
	int i; 
	for(i=0; i<length; i++)
     ee2:	21 96       	adiw	r28, 0x01	; 1
     ee4:	0f 90       	pop	r0
     ee6:	0f 90       	pop	r0
     ee8:	0f 90       	pop	r0
     eea:	0f 90       	pop	r0
     eec:	ce 15       	cp	r28, r14
     eee:	df 05       	cpc	r29, r15
     ef0:	89 f7       	brne	.-30     	; 0xed4 <RAMPrint+0x54>
     ef2:	02 c0       	rjmp	.+4      	; 0xef8 <RAMPrint+0x78>
     ef4:	e1 2c       	mov	r14, r1
     ef6:	f1 2c       	mov	r15, r1
	{
		printf("0x%02X ", SPI_ReadData());
	}
	RAM_PORT |= (1<<RAM_CS); 
     ef8:	a3 9a       	sbi	0x14, 3	; 20
	printf("\nSize: %d\n", i); 
     efa:	ff 92       	push	r15
     efc:	ef 92       	push	r14
     efe:	80 e5       	ldi	r24, 0x50	; 80
     f00:	96 e0       	ldi	r25, 0x06	; 6
     f02:	9f 93       	push	r25
     f04:	8f 93       	push	r24
     f06:	0e 94 ae 12 	call	0x255c	; 0x255c <printf>
     f0a:	0f 90       	pop	r0
     f0c:	0f 90       	pop	r0
     f0e:	0f 90       	pop	r0
     f10:	0f 90       	pop	r0
}
     f12:	df 91       	pop	r29
     f14:	cf 91       	pop	r28
     f16:	1f 91       	pop	r17
     f18:	0f 91       	pop	r16
     f1a:	ff 90       	pop	r15
     f1c:	ef 90       	pop	r14
     f1e:	08 95       	ret

00000f20 <RAMWriteByte>:

void RAMWriteByte(char data, uint32_t address)
{
     f20:	cf 93       	push	r28
     f22:	c8 2f       	mov	r28, r24
	RAM_PORT &= ~(1<<RAM_CS);
     f24:	a3 98       	cbi	0x14, 3	; 20
	SPI_WriteAddress(address);
     f26:	cb 01       	movw	r24, r22
     f28:	ba 01       	movw	r22, r20
     f2a:	73 df       	rcall	.-282    	; 0xe12 <SPI_WriteAddress>
	SPI_WriteData(data);
     f2c:	8c 2f       	mov	r24, r28
     f2e:	87 df       	rcall	.-242    	; 0xe3e <SPI_WriteData>
	RAM_PORT |= (1<<RAM_CS);
     f30:	a3 9a       	sbi	0x14, 3	; 20
}
     f32:	cf 91       	pop	r28
     f34:	08 95       	ret

00000f36 <SPI_Init>:


void SPI_Init()
{
	// Set MOSI ,SCK, and SS as output, others as input
	SPI_DDR |= (1<<MOSI)|(1<<SCK)|(1<<SS)|(1<<HOLD);
     f36:	84 b1       	in	r24, 0x04	; 4
     f38:	87 68       	ori	r24, 0x87	; 135
     f3a:	84 b9       	out	0x04, r24	; 4
	//Set MISO as Input
	//SPI_DDR &= ~(1<<MISO);
	
	SPI_PORT |= (1<<HOLD);
     f3c:	2f 9a       	sbi	0x05, 7	; 5
	// CS pin is not active
	RAM_DDR |= (1<<RAM_CS);
     f3e:	9b 9a       	sbi	0x13, 3	; 19
	RAM_PORT |= (1<<RAM_CS);
     f40:	a3 9a       	sbi	0x14, 3	; 20
	// Enable SPI, Master Mode 0, set the clock rate fck/16
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
     f42:	81 e5       	ldi	r24, 0x51	; 81
     f44:	8c bd       	out	0x2c, r24	; 44
	RAMWriteByte(0x32, 0000);
     f46:	40 e0       	ldi	r20, 0x00	; 0
     f48:	50 e0       	ldi	r21, 0x00	; 0
     f4a:	ba 01       	movw	r22, r20
     f4c:	82 e3       	ldi	r24, 0x32	; 50
     f4e:	e8 cf       	rjmp	.-48     	; 0xf20 <RAMWriteByte>
     f50:	08 95       	ret

00000f52 <RAMReadByte>:
	RAM_PORT |= (1<<RAM_CS);
}

char RAMReadByte(uint32_t address)
{
	RAM_PORT &= ~(1<<RAM_CS);
     f52:	a3 98       	cbi	0x14, 3	; 20
	SPI_ReadAddress(address);
     f54:	79 df       	rcall	.-270    	; 0xe48 <SPI_ReadAddress>
	char data = SPI_ReadData();
     f56:	8e df       	rcall	.-228    	; 0xe74 <SPI_ReadData>
	RAM_PORT |= (1<<RAM_CS);
     f58:	a3 9a       	sbi	0x14, 3	; 20
	return data; 
}
     f5a:	08 95       	ret

00000f5c <SPI_Switching_Circuitry_Init>:
		for(int j=0; j<SOCKET_SIZE/8; j++)
		{
			ShiftRegData[i][j] = 0x00; 
		}
	}
}
     f5c:	e4 e0       	ldi	r30, 0x04	; 4
     f5e:	f1 e0       	ldi	r31, 0x01	; 1
     f60:	80 81       	ld	r24, Z
     f62:	88 63       	ori	r24, 0x38	; 56
     f64:	80 83       	st	Z, r24
     f66:	e5 e0       	ldi	r30, 0x05	; 5
     f68:	f1 e0       	ldi	r31, 0x01	; 1
     f6a:	80 81       	ld	r24, Z
     f6c:	80 62       	ori	r24, 0x20	; 32
     f6e:	80 83       	st	Z, r24
     f70:	80 81       	ld	r24, Z
     f72:	87 7e       	andi	r24, 0xE7	; 231
     f74:	80 83       	st	Z, r24
     f76:	08 95       	ret

00000f78 <SPI_Switching_Circuitry_Write>:
     f78:	8e bd       	out	0x2e, r24	; 46
     f7a:	0d b4       	in	r0, 0x2d	; 45
     f7c:	07 fe       	sbrs	r0, 7
     f7e:	fd cf       	rjmp	.-6      	; 0xf7a <SPI_Switching_Circuitry_Write+0x2>
     f80:	08 95       	ret

00000f82 <SetShiftRegData>:


void SetShiftRegData(uint8_t pinType, char data[SOCKET_SIZE/8])
{
     f82:	db 01       	movw	r26, r22
	//MSB gets shifted out first 
	for(int i=0; i<SOCKET_SIZE/8; i++)
	{
		ShiftRegData[pinType][i] = *(data + i); 
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	fc 01       	movw	r30, r24
     f88:	ee 0f       	add	r30, r30
     f8a:	ff 1f       	adc	r31, r31
     f8c:	ee 0f       	add	r30, r30
     f8e:	ff 1f       	adc	r31, r31
     f90:	e8 0f       	add	r30, r24
     f92:	f9 1f       	adc	r31, r25
     f94:	eb 52       	subi	r30, 0x2B	; 43
     f96:	f5 4f       	sbci	r31, 0xF5	; 245


void SetShiftRegData(uint8_t pinType, char data[SOCKET_SIZE/8])
{
	//MSB gets shifted out first 
	for(int i=0; i<SOCKET_SIZE/8; i++)
     f98:	80 e0       	ldi	r24, 0x00	; 0
     f9a:	90 e0       	ldi	r25, 0x00	; 0
	{
		ShiftRegData[pinType][i] = *(data + i); 
     f9c:	2d 91       	ld	r18, X+
     f9e:	21 93       	st	Z+, r18


void SetShiftRegData(uint8_t pinType, char data[SOCKET_SIZE/8])
{
	//MSB gets shifted out first 
	for(int i=0; i<SOCKET_SIZE/8; i++)
     fa0:	01 96       	adiw	r24, 0x01	; 1
     fa2:	85 30       	cpi	r24, 0x05	; 5
     fa4:	91 05       	cpc	r25, r1
     fa6:	d1 f7       	brne	.-12     	; 0xf9c <SetShiftRegData+0x1a>
	{
		ShiftRegData[pinType][i] = *(data + i); 
	}
}
     fa8:	08 95       	ret

00000faa <WriteShiftRegData>:

void WriteShiftRegData()
{
     faa:	af 92       	push	r10
     fac:	bf 92       	push	r11
     fae:	cf 92       	push	r12
     fb0:	df 92       	push	r13
     fb2:	ef 92       	push	r14
     fb4:	ff 92       	push	r15
     fb6:	0f 93       	push	r16
     fb8:	1f 93       	push	r17
     fba:	cf 93       	push	r28
     fbc:	df 93       	push	r29
     fbe:	0f 2e       	mov	r0, r31
     fc0:	fa ed       	ldi	r31, 0xDA	; 218
     fc2:	ef 2e       	mov	r14, r31
     fc4:	fa e0       	ldi	r31, 0x0A	; 10
     fc6:	ff 2e       	mov	r15, r31
     fc8:	f0 2d       	mov	r31, r0
     fca:	0f 2e       	mov	r0, r31
     fcc:	f3 ef       	ldi	r31, 0xF3	; 243
     fce:	cf 2e       	mov	r12, r31
     fd0:	fa e0       	ldi	r31, 0x0A	; 10
     fd2:	df 2e       	mov	r13, r31
     fd4:	f0 2d       	mov	r31, r0
     fd6:	a1 2c       	mov	r10, r1
     fd8:	b1 2c       	mov	r11, r1
     fda:	0e c0       	rjmp	.+28     	; 0xff8 <WriteShiftRegData+0x4e>
	
	for(int i=1; i<(PIN_TYPES); i++)
	{
		for(int j=0; j<SOCKET_SIZE/8; j++)
		{
			SPI_Switching_Circuitry_Write(ShiftRegData[i][j]); 
     fdc:	f8 01       	movw	r30, r16
     fde:	81 91       	ld	r24, Z+
     fe0:	8f 01       	movw	r16, r30
     fe2:	ca df       	rcall	.-108    	; 0xf78 <SPI_Switching_Circuitry_Write>
	//}
	//SR_CNTRL_PORT |= (1<<MAXCS);
	
	for(int i=1; i<(PIN_TYPES); i++)
	{
		for(int j=0; j<SOCKET_SIZE/8; j++)
     fe4:	21 96       	adiw	r28, 0x01	; 1
     fe6:	c5 30       	cpi	r28, 0x05	; 5
     fe8:	d1 05       	cpc	r29, r1
     fea:	c1 f7       	brne	.-16     	; 0xfdc <WriteShiftRegData+0x32>
     fec:	f5 e0       	ldi	r31, 0x05	; 5
     fee:	ef 0e       	add	r14, r31
     ff0:	f1 1c       	adc	r15, r1
	//{
		//SPI_Switching_Circuitry_Write(ShiftRegData[i][j]);
	//}
	//SR_CNTRL_PORT |= (1<<MAXCS);
	
	for(int i=1; i<(PIN_TYPES); i++)
     ff2:	ec 14       	cp	r14, r12
     ff4:	fd 04       	cpc	r15, r13
     ff6:	21 f0       	breq	.+8      	; 0x1000 <WriteShiftRegData+0x56>
		ShiftRegData[pinType][i] = *(data + i); 
	}
}

void WriteShiftRegData()
{
     ff8:	87 01       	movw	r16, r14
     ffa:	ca 2d       	mov	r28, r10
     ffc:	db 2d       	mov	r29, r11
     ffe:	ee cf       	rjmp	.-36     	; 0xfdc <WriteShiftRegData+0x32>
		{
			SPI_Switching_Circuitry_Write(ShiftRegData[i][j]); 
		}
	}
	
	SR_CNTRL_PORT |= (1<<SRCS);
    1000:	e5 e0       	ldi	r30, 0x05	; 5
    1002:	f1 e0       	ldi	r31, 0x01	; 1
    1004:	80 81       	ld	r24, Z
    1006:	80 61       	ori	r24, 0x10	; 16
    1008:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    100a:	f5 e3       	ldi	r31, 0x35	; 53
    100c:	fa 95       	dec	r31
    100e:	f1 f7       	brne	.-4      	; 0x100c <WriteShiftRegData+0x62>
    1010:	00 00       	nop
	_delay_us(20);
	SR_CNTRL_PORT &= ~(1<<SRCS);
    1012:	e5 e0       	ldi	r30, 0x05	; 5
    1014:	f1 e0       	ldi	r31, 0x01	; 1
    1016:	80 81       	ld	r24, Z
    1018:	8f 7e       	andi	r24, 0xEF	; 239
    101a:	80 83       	st	Z, r24
}
    101c:	df 91       	pop	r29
    101e:	cf 91       	pop	r28
    1020:	1f 91       	pop	r17
    1022:	0f 91       	pop	r16
    1024:	ff 90       	pop	r15
    1026:	ef 90       	pop	r14
    1028:	df 90       	pop	r13
    102a:	cf 90       	pop	r12
    102c:	bf 90       	pop	r11
    102e:	af 90       	pop	r10
    1030:	08 95       	ret

00001032 <setAtTiny2313>:

void setAtTiny2313()
{
    1032:	cf 93       	push	r28
    1034:	df 93       	push	r29
    1036:	00 d0       	rcall	.+0      	; 0x1038 <setAtTiny2313+0x6>
    1038:	00 d0       	rcall	.+0      	; 0x103a <setAtTiny2313+0x8>
    103a:	1f 92       	push	r1
    103c:	cd b7       	in	r28, 0x3d	; 61
    103e:	de b7       	in	r29, 0x3e	; 62
	//char shiftTempBuff[5] = {0x00, 0x1F, 0xF7, 0xD0, 0xFF};
	char shiftTempBuff[5] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
    1040:	85 e0       	ldi	r24, 0x05	; 5
    1042:	e0 e3       	ldi	r30, 0x30	; 48
    1044:	f2 e0       	ldi	r31, 0x02	; 2
    1046:	de 01       	movw	r26, r28
    1048:	11 96       	adiw	r26, 0x01	; 1
    104a:	01 90       	ld	r0, Z+
    104c:	0d 92       	st	X+, r0
    104e:	8a 95       	dec	r24
    1050:	e1 f7       	brne	.-8      	; 0x104a <setAtTiny2313+0x18>
	SetShiftRegData(PULL_DOWN, shiftTempBuff);
    1052:	be 01       	movw	r22, r28
    1054:	6f 5f       	subi	r22, 0xFF	; 255
    1056:	7f 4f       	sbci	r23, 0xFF	; 255
    1058:	81 e0       	ldi	r24, 0x01	; 1
    105a:	93 df       	rcall	.-218    	; 0xf82 <SetShiftRegData>
	//Modify Values and shift again
	shiftTempBuff[0] = 0x00;
    105c:	19 82       	std	Y+1, r1	; 0x01
	shiftTempBuff[1] = 0x00;
    105e:	1a 82       	std	Y+2, r1	; 0x02
	shiftTempBuff[2] = 0x08; //setting GND to ZIF19
    1060:	88 e0       	ldi	r24, 0x08	; 8
    1062:	8b 83       	std	Y+3, r24	; 0x03
	shiftTempBuff[3] = 0x00;
    1064:	1c 82       	std	Y+4, r1	; 0x04
	shiftTempBuff[4] = 0x00;
    1066:	1d 82       	std	Y+5, r1	; 0x05
	SetShiftRegData(GROUND, shiftTempBuff);
    1068:	be 01       	movw	r22, r28
    106a:	6f 5f       	subi	r22, 0xFF	; 255
    106c:	7f 4f       	sbci	r23, 0xFF	; 255
    106e:	82 e0       	ldi	r24, 0x02	; 2
    1070:	88 df       	rcall	.-240    	; 0xf82 <SetShiftRegData>
	shiftTempBuff[0] = 0x00;
    1072:	19 82       	std	Y+1, r1	; 0x01
	shiftTempBuff[1] = 0x00;
    1074:	1a 82       	std	Y+2, r1	; 0x02
	shiftTempBuff[2] = 0x00;
    1076:	1b 82       	std	Y+3, r1	; 0x03
	shiftTempBuff[3] = 0x00;
    1078:	1c 82       	std	Y+4, r1	; 0x04
	shiftTempBuff[4] = 0x00;
    107a:	1d 82       	std	Y+5, r1	; 0x05
	SetShiftRegData(PULL_UP, shiftTempBuff);
    107c:	be 01       	movw	r22, r28
    107e:	6f 5f       	subi	r22, 0xFF	; 255
    1080:	7f 4f       	sbci	r23, 0xFF	; 255
    1082:	83 e0       	ldi	r24, 0x03	; 3
    1084:	7e df       	rcall	.-260    	; 0xf82 <SetShiftRegData>
	shiftTempBuff[0] = 0x00;
    1086:	19 82       	std	Y+1, r1	; 0x01
	shiftTempBuff[1] = 0x20; //Setting VCC to ZIF29
    1088:	80 e2       	ldi	r24, 0x20	; 32
    108a:	8a 83       	std	Y+2, r24	; 0x02
	shiftTempBuff[2] = 0x00;
    108c:	1b 82       	std	Y+3, r1	; 0x03
	shiftTempBuff[3] = 0x00;
    108e:	1c 82       	std	Y+4, r1	; 0x04
	shiftTempBuff[4] = 0x00;
    1090:	1d 82       	std	Y+5, r1	; 0x05
	SetShiftRegData(VCC, shiftTempBuff);
    1092:	be 01       	movw	r22, r28
    1094:	6f 5f       	subi	r22, 0xFF	; 255
    1096:	7f 4f       	sbci	r23, 0xFF	; 255
    1098:	84 e0       	ldi	r24, 0x04	; 4
    109a:	73 df       	rcall	.-282    	; 0xf82 <SetShiftRegData>
	shiftTempBuff[0] = 0x00;
    109c:	19 82       	std	Y+1, r1	; 0x01
	shiftTempBuff[1] = 0x00;
    109e:	1a 82       	std	Y+2, r1	; 0x02
	shiftTempBuff[2] = 0x00;
    10a0:	1b 82       	std	Y+3, r1	; 0x03
	shiftTempBuff[3] = 0x04; //Setting VPP to ZIF10
    10a2:	84 e0       	ldi	r24, 0x04	; 4
    10a4:	8c 83       	std	Y+4, r24	; 0x04
	shiftTempBuff[4] = 0x00;
    10a6:	1d 82       	std	Y+5, r1	; 0x05
	SetShiftRegData(VPP, shiftTempBuff);
    10a8:	be 01       	movw	r22, r28
    10aa:	6f 5f       	subi	r22, 0xFF	; 255
    10ac:	7f 4f       	sbci	r23, 0xFF	; 255
    10ae:	85 e0       	ldi	r24, 0x05	; 5
    10b0:	68 df       	rcall	.-304    	; 0xf82 <SetShiftRegData>
	//shiftTempBuff[2] = 0xF7;
	//shiftTempBuff[3] = 0xD0; //Setting up Logic
	//shiftTempBuff[4] = 0x00;
	//SetShiftRegData(LOGIC, shiftTempBuff);
	
	WriteShiftRegData();
    10b2:	7b df       	rcall	.-266    	; 0xfaa <WriteShiftRegData>
}
    10b4:	0f 90       	pop	r0
    10b6:	0f 90       	pop	r0
    10b8:	0f 90       	pop	r0
    10ba:	0f 90       	pop	r0
    10bc:	0f 90       	pop	r0
    10be:	df 91       	pop	r29
    10c0:	cf 91       	pop	r28
    10c2:	08 95       	ret

000010c4 <setAtMega324PA>:

void setAtMega324PA()
{
    10c4:	cf 93       	push	r28
    10c6:	df 93       	push	r29
    10c8:	00 d0       	rcall	.+0      	; 0x10ca <setAtMega324PA+0x6>
    10ca:	00 d0       	rcall	.+0      	; 0x10cc <setAtMega324PA+0x8>
    10cc:	1f 92       	push	r1
    10ce:	cd b7       	in	r28, 0x3d	; 61
    10d0:	de b7       	in	r29, 0x3e	; 62
	char shiftTempBuff[5] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
    10d2:	85 e0       	ldi	r24, 0x05	; 5
    10d4:	e0 e3       	ldi	r30, 0x30	; 48
    10d6:	f2 e0       	ldi	r31, 0x02	; 2
    10d8:	de 01       	movw	r26, r28
    10da:	11 96       	adiw	r26, 0x01	; 1
    10dc:	01 90       	ld	r0, Z+
    10de:	0d 92       	st	X+, r0
    10e0:	8a 95       	dec	r24
    10e2:	e1 f7       	brne	.-8      	; 0x10dc <setAtMega324PA+0x18>
	SetShiftRegData(PULL_DOWN, shiftTempBuff);
    10e4:	be 01       	movw	r22, r28
    10e6:	6f 5f       	subi	r22, 0xFF	; 255
    10e8:	7f 4f       	sbci	r23, 0xFF	; 255
    10ea:	81 e0       	ldi	r24, 0x01	; 1
    10ec:	4a df       	rcall	.-364    	; 0xf82 <SetShiftRegData>
	//Modify Values and shift again
	shiftTempBuff[0] = 0x00;
    10ee:	19 82       	std	Y+1, r1	; 0x01
	shiftTempBuff[1] = 0x40;
    10f0:	80 e4       	ldi	r24, 0x40	; 64
    10f2:	8a 83       	std	Y+2, r24	; 0x02
	shiftTempBuff[2] = 0x00; //setting GND to ZIF19
    10f4:	1b 82       	std	Y+3, r1	; 0x03
	shiftTempBuff[3] = 0x04;
    10f6:	84 e0       	ldi	r24, 0x04	; 4
    10f8:	8c 83       	std	Y+4, r24	; 0x04
	shiftTempBuff[4] = 0x00;
    10fa:	1d 82       	std	Y+5, r1	; 0x05
	SetShiftRegData(GROUND, shiftTempBuff);
    10fc:	be 01       	movw	r22, r28
    10fe:	6f 5f       	subi	r22, 0xFF	; 255
    1100:	7f 4f       	sbci	r23, 0xFF	; 255
    1102:	82 e0       	ldi	r24, 0x02	; 2
    1104:	3e df       	rcall	.-388    	; 0xf82 <SetShiftRegData>
	shiftTempBuff[0] = 0x00;
    1106:	19 82       	std	Y+1, r1	; 0x01
	shiftTempBuff[1] = 0x00;
    1108:	1a 82       	std	Y+2, r1	; 0x02
	shiftTempBuff[2] = 0x00;
    110a:	1b 82       	std	Y+3, r1	; 0x03
	shiftTempBuff[3] = 0x00;
    110c:	1c 82       	std	Y+4, r1	; 0x04
	shiftTempBuff[4] = 0x00;
    110e:	1d 82       	std	Y+5, r1	; 0x05
	SetShiftRegData(PULL_UP, shiftTempBuff);
    1110:	be 01       	movw	r22, r28
    1112:	6f 5f       	subi	r22, 0xFF	; 255
    1114:	7f 4f       	sbci	r23, 0xFF	; 255
    1116:	83 e0       	ldi	r24, 0x03	; 3
    1118:	34 df       	rcall	.-408    	; 0xf82 <SetShiftRegData>
	shiftTempBuff[0] = 0x00;
    111a:	19 82       	std	Y+1, r1	; 0x01
	shiftTempBuff[1] = 0x20; //Setting VCC to ZIF29
    111c:	80 e2       	ldi	r24, 0x20	; 32
    111e:	8a 83       	std	Y+2, r24	; 0x02
	shiftTempBuff[2] = 0x00;
    1120:	1b 82       	std	Y+3, r1	; 0x03
	shiftTempBuff[3] = 0x02;
    1122:	82 e0       	ldi	r24, 0x02	; 2
    1124:	8c 83       	std	Y+4, r24	; 0x04
	shiftTempBuff[4] = 0x00;
    1126:	1d 82       	std	Y+5, r1	; 0x05
	SetShiftRegData(VCC, shiftTempBuff);
    1128:	be 01       	movw	r22, r28
    112a:	6f 5f       	subi	r22, 0xFF	; 255
    112c:	7f 4f       	sbci	r23, 0xFF	; 255
    112e:	84 e0       	ldi	r24, 0x04	; 4
    1130:	28 df       	rcall	.-432    	; 0xf82 <SetShiftRegData>
	shiftTempBuff[0] = 0x00;
    1132:	19 82       	std	Y+1, r1	; 0x01
	shiftTempBuff[1] = 0x00;
    1134:	1a 82       	std	Y+2, r1	; 0x02
	shiftTempBuff[2] = 0x00;
    1136:	1b 82       	std	Y+3, r1	; 0x03
	shiftTempBuff[3] = 0x01; //Setting VPP to ZIF10
    1138:	81 e0       	ldi	r24, 0x01	; 1
    113a:	8c 83       	std	Y+4, r24	; 0x04
	shiftTempBuff[4] = 0x00;
    113c:	1d 82       	std	Y+5, r1	; 0x05
	SetShiftRegData(VPP, shiftTempBuff);
    113e:	be 01       	movw	r22, r28
    1140:	6f 5f       	subi	r22, 0xFF	; 255
    1142:	7f 4f       	sbci	r23, 0xFF	; 255
    1144:	85 e0       	ldi	r24, 0x05	; 5
    1146:	1d df       	rcall	.-454    	; 0xf82 <SetShiftRegData>
	
	WriteShiftRegData();
    1148:	30 df       	rcall	.-416    	; 0xfaa <WriteShiftRegData>
}
    114a:	0f 90       	pop	r0
    114c:	0f 90       	pop	r0
    114e:	0f 90       	pop	r0
    1150:	0f 90       	pop	r0
    1152:	0f 90       	pop	r0
    1154:	df 91       	pop	r29
    1156:	cf 91       	pop	r28
    1158:	08 95       	ret

0000115a <voltageControlInit>:
	VCNTRL_PORT &= ~((1<<VPP_9V) | (1<<VPP_12V) | (1<VPP_13V));
}

void voltageControlInit()
{
	VCNTRL_DDR = 0xFF;
    115a:	8f ef       	ldi	r24, 0xFF	; 255
    115c:	80 bb       	out	0x10, r24	; 16
	VCNTRL_PORT = 0x00;
    115e:	11 ba       	out	0x11, r1	; 17
	
	VEN_DDR |= ((1<<VPPENABLE) | (1<<VCCENABLE) | (1<<VLENABLE));
    1160:	84 b1       	in	r24, 0x04	; 4
    1162:	80 67       	ori	r24, 0x70	; 112
    1164:	84 b9       	out	0x04, r24	; 4
	VEN_PORT &= ~((1<<VPPENABLE) | (1<<VCCENABLE) | (1<<VLENABLE));
    1166:	85 b1       	in	r24, 0x05	; 5
    1168:	8f 78       	andi	r24, 0x8F	; 143
    116a:	85 b9       	out	0x05, r24	; 5
    116c:	08 95       	ret

0000116e <enableVppRegulator>:
}

void enableVppRegulator()
{
	VEN_PORT |= (1<<VPPENABLE); 
    116e:	2c 9a       	sbi	0x05, 4	; 5
    1170:	08 95       	ret

00001172 <disableVppRegulator>:
}

void disableVppRegulator()
{
	VEN_PORT &= ~((1<<VPPENABLE));
    1172:	2c 98       	cbi	0x05, 4	; 5
    1174:	08 95       	ret

00001176 <enableVccRegulator>:
	VCNTRL_PORT &= ~((1<<VCC_3_3V) | (1<<VCC_5V) | (1<<VCC_6_5V));
}

void enableVccRegulator() 
{
	VEN_PORT |= (1<<VCCENABLE);
    1176:	2d 9a       	sbi	0x05, 5	; 5
    1178:	08 95       	ret

0000117a <disableVccRegulator>:
}

void disableVccRegulator()
{
	VEN_PORT &= ~(1<<VCCENABLE);
    117a:	2d 98       	cbi	0x05, 5	; 5
    117c:	08 95       	ret

0000117e <setVcc>:
	//prevents accidental triggering of the wrong regulator 
	//if(voltageLevel != (VCC_3_3V || VCC_5V || VCC_6_5V))
	//	return 0; 
	//else
	//{
		VCNTRL_PORT |= (1<<voltageLevel);
    117e:	41 b3       	in	r20, 0x11	; 17
    1180:	21 e0       	ldi	r18, 0x01	; 1
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	b9 01       	movw	r22, r18
    1186:	02 c0       	rjmp	.+4      	; 0x118c <setVcc+0xe>
    1188:	66 0f       	add	r22, r22
    118a:	77 1f       	adc	r23, r23
    118c:	8a 95       	dec	r24
    118e:	e2 f7       	brpl	.-8      	; 0x1188 <setVcc+0xa>
    1190:	cb 01       	movw	r24, r22
    1192:	84 2b       	or	r24, r20
    1194:	81 bb       	out	0x11, r24	; 17
		return 1; 
	//}
}
    1196:	81 e0       	ldi	r24, 0x01	; 1
    1198:	08 95       	ret

0000119a <setVpp>:
	//prevents accidental triggering of the wrong regulator 
	//if(voltageLevel != (VPP_9V || VPP_12V || VPP_13V))
		//return 0; 
	//else
	//{
		VCNTRL_PORT |= (1<<voltageLevel);
    119a:	41 b3       	in	r20, 0x11	; 17
    119c:	21 e0       	ldi	r18, 0x01	; 1
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	b9 01       	movw	r22, r18
    11a2:	02 c0       	rjmp	.+4      	; 0x11a8 <setVpp+0xe>
    11a4:	66 0f       	add	r22, r22
    11a6:	77 1f       	adc	r23, r23
    11a8:	8a 95       	dec	r24
    11aa:	e2 f7       	brpl	.-8      	; 0x11a4 <setVpp+0xa>
    11ac:	cb 01       	movw	r24, r22
    11ae:	84 2b       	or	r24, r20
    11b0:	81 bb       	out	0x11, r24	; 17
		return 1; 
	//}
}
    11b2:	81 e0       	ldi	r24, 0x01	; 1
    11b4:	08 95       	ret

000011b6 <enableVLogic>:
	VCNTRL_PORT &= ~((1<<VL_3_3V) | (1<<VL_5V));
}

void enableVLogic()
{
	VEN_PORT |= (1<<VLENABLE);
    11b6:	2e 9a       	sbi	0x05, 6	; 5
    11b8:	08 95       	ret

000011ba <disableVLogic>:
}

void disableVLogic()
{
	VEN_PORT &= ~(1<<VLENABLE);
    11ba:	2e 98       	cbi	0x05, 6	; 5
    11bc:	08 95       	ret

000011be <setVLogic>:
	//prevents accidental triggering of the wrong regulator
	//if(voltageLevel != (VL_3_3V || VL_5V))
	//	return 0;
	//else
	//{
		VCNTRL_PORT |= (1<<voltageLevel);
    11be:	41 b3       	in	r20, 0x11	; 17
    11c0:	21 e0       	ldi	r18, 0x01	; 1
    11c2:	30 e0       	ldi	r19, 0x00	; 0
    11c4:	b9 01       	movw	r22, r18
    11c6:	02 c0       	rjmp	.+4      	; 0x11cc <setVLogic+0xe>
    11c8:	66 0f       	add	r22, r22
    11ca:	77 1f       	adc	r23, r23
    11cc:	8a 95       	dec	r24
    11ce:	e2 f7       	brpl	.-8      	; 0x11c8 <setVLogic+0xa>
    11d0:	cb 01       	movw	r24, r22
    11d2:	84 2b       	or	r24, r20
    11d4:	81 bb       	out	0x11, r24	; 17
		return 1;
	//}
}
    11d6:	81 e0       	ldi	r24, 0x01	; 1
    11d8:	08 95       	ret

000011da <networkConnect>:
	
	//Overwrite the terminating byte with two new lines for the http request 
	RAMWrite(footer, WIFI_QSTRING_ADDRESS + j-1, strlen(footer));
	j+=strlen(footer)-1; 
	return j; 
}
    11da:	cf 93       	push	r28
    11dc:	df 93       	push	r29
    11de:	eb 01       	movw	r28, r22
    11e0:	ac 01       	movw	r20, r24
    11e2:	60 ec       	ldi	r22, 0xC0	; 192
    11e4:	76 e0       	ldi	r23, 0x06	; 6
    11e6:	82 e0       	ldi	r24, 0x02	; 2
    11e8:	a9 d1       	rcall	.+850    	; 0x153c <sendCommand>
    11ea:	ae 01       	movw	r20, r28
    11ec:	6a ec       	ldi	r22, 0xCA	; 202
    11ee:	76 e0       	ldi	r23, 0x06	; 6
    11f0:	82 e0       	ldi	r24, 0x02	; 2
    11f2:	a4 d1       	rcall	.+840    	; 0x153c <sendCommand>
    11f4:	81 e0       	ldi	r24, 0x01	; 1
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	df 91       	pop	r29
    11fa:	cf 91       	pop	r28
    11fc:	08 95       	ret

000011fe <getFileWifi>:

uint16_t getFileWifi(char* filepath, int externRAM, uint32_t RAMAddress, int multiReceive)
{ 
    11fe:	2f 92       	push	r2
    1200:	3f 92       	push	r3
    1202:	4f 92       	push	r4
    1204:	5f 92       	push	r5
    1206:	6f 92       	push	r6
    1208:	7f 92       	push	r7
    120a:	8f 92       	push	r8
    120c:	9f 92       	push	r9
    120e:	af 92       	push	r10
    1210:	bf 92       	push	r11
    1212:	cf 92       	push	r12
    1214:	df 92       	push	r13
    1216:	ef 92       	push	r14
    1218:	ff 92       	push	r15
    121a:	0f 93       	push	r16
    121c:	1f 93       	push	r17
    121e:	cf 93       	push	r28
    1220:	df 93       	push	r29
    1222:	ec 01       	movw	r28, r24
    1224:	6b 01       	movw	r12, r22
    1226:	49 01       	movw	r8, r18
    1228:	5a 01       	movw	r10, r20
	//printf("Filepath: %s\n", filepath);
	//enableReceiveINT();
	//setTestPrint(1); 
	enableReceiveINT();   
    122a:	c4 d0       	rcall	.+392    	; 0x13b4 <enableReceiveINT>
	//PORTD &= ~(1<<CTS);
	setReceiveCounter(0);
    122c:	80 e0       	ldi	r24, 0x00	; 0
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	78 d0       	rcall	.+240    	; 0x1322 <setReceiveCounter>
	uint16_t i = 0; 
	char* receiveHeader; 
	//setCompressFlag(1);
	//PORTD |= (1<<CTS);
	sendCommand(NOPREFIX, HTTP_GET, filepath);
    1232:	ae 01       	movw	r20, r28
    1234:	66 e8       	ldi	r22, 0x86	; 134
    1236:	72 e0       	ldi	r23, 0x02	; 2
    1238:	8f ef       	ldi	r24, 0xFF	; 255
    123a:	80 d1       	rcall	.+768    	; 0x153c <sendCommand>
	receiveStatus();
    123c:	cc d0       	rcall	.+408    	; 0x13d6 <receiveStatus>
	//enableReceiveINT();
	//setTestPrint(1); 
	enableReceiveINT();   
	//PORTD &= ~(1<<CTS);
	setReceiveCounter(0);
	uint16_t i = 0; 
    123e:	e1 2c       	mov	r14, r1
    1240:	f1 2c       	mov	r15, r1
			
		setReceiveCounter(0);
		sendCommand(NOPREFIX, STREAM_READ, "0 500");
		receiveStatus();
		receiveHeader = getMessageHeader(); 
		printf("Tran Length: %s\n", receiveHeader); 
    1242:	0f 2e       	mov	r0, r31
    1244:	f6 e3       	ldi	r31, 0x36	; 54
    1246:	2f 2e       	mov	r2, r31
    1248:	f7 e0       	ldi	r31, 0x07	; 7
    124a:	3f 2e       	mov	r3, r31
    124c:	f0 2d       	mov	r31, r0
	//PORTD |= (1<<CTS);
	sendCommand(NOPREFIX, HTTP_GET, filepath);
	receiveStatus();
	do 
	{
		if(externRAM){
    124e:	c1 14       	cp	r12, r1
    1250:	d1 04       	cpc	r13, r1
    1252:	c9 f0       	breq	.+50     	; 0x1286 <getFileWifi+0x88>
			updateRAMAddress(RAMAddress + i);
    1254:	24 01       	movw	r4, r8
    1256:	35 01       	movw	r6, r10
    1258:	4e 0c       	add	r4, r14
    125a:	5f 1c       	adc	r5, r15
    125c:	61 1c       	adc	r6, r1
    125e:	71 1c       	adc	r7, r1
    1260:	c3 01       	movw	r24, r6
    1262:	b2 01       	movw	r22, r4
    1264:	62 d1       	rcall	.+708    	; 0x152a <updateRAMAddress>
			printf("RAM Address: %d\n", RAMAddress+i); 
    1266:	7f 92       	push	r7
    1268:	6f 92       	push	r6
    126a:	5f 92       	push	r5
    126c:	4f 92       	push	r4
    126e:	a3 e1       	ldi	r26, 0x13	; 19
    1270:	b7 e0       	ldi	r27, 0x07	; 7
    1272:	bf 93       	push	r27
    1274:	af 93       	push	r26
    1276:	0e 94 ae 12 	call	0x255c	; 0x255c <printf>
    127a:	0f 90       	pop	r0
    127c:	0f 90       	pop	r0
    127e:	0f 90       	pop	r0
    1280:	0f 90       	pop	r0
    1282:	0f 90       	pop	r0
    1284:	0f 90       	pop	r0
		}
		//if(RAMAddress == HEX_FILE_ADDRESS)
			//setTestPrint(1);
			
		setReceiveCounter(0);
    1286:	80 e0       	ldi	r24, 0x00	; 0
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	4b d0       	rcall	.+150    	; 0x1322 <setReceiveCounter>
		sendCommand(NOPREFIX, STREAM_READ, "0 500");
    128c:	44 e2       	ldi	r20, 0x24	; 36
    128e:	57 e0       	ldi	r21, 0x07	; 7
    1290:	6a e2       	ldi	r22, 0x2A	; 42
    1292:	77 e0       	ldi	r23, 0x07	; 7
    1294:	8f ef       	ldi	r24, 0xFF	; 255
    1296:	52 d1       	rcall	.+676    	; 0x153c <sendCommand>
		receiveStatus();
    1298:	9e d0       	rcall	.+316    	; 0x13d6 <receiveStatus>
		receiveHeader = getMessageHeader(); 
    129a:	44 d1       	rcall	.+648    	; 0x1524 <getMessageHeader>
    129c:	ec 01       	movw	r28, r24
		printf("Tran Length: %s\n", receiveHeader); 
    129e:	df 93       	push	r29
    12a0:	cf 93       	push	r28
    12a2:	3f 92       	push	r3
    12a4:	2f 92       	push	r2
    12a6:	0e 94 ae 12 	call	0x255c	; 0x255c <printf>
		if(receiveHeader[errorCode] == '1'){
    12aa:	0f 90       	pop	r0
    12ac:	0f 90       	pop	r0
    12ae:	0f 90       	pop	r0
    12b0:	0f 90       	pop	r0
    12b2:	89 81       	ldd	r24, Y+1	; 0x01
    12b4:	81 33       	cpi	r24, 0x31	; 49
    12b6:	41 f0       	breq	.+16     	; 0x12c8 <getFileWifi+0xca>
			break; 
		}
		i += getTransmissionLength() - 2; 
    12b8:	30 d1       	rcall	.+608    	; 0x151a <getTransmissionLength>
    12ba:	02 97       	sbiw	r24, 0x02	; 2
    12bc:	e8 0e       	add	r14, r24
    12be:	f9 1e       	adc	r15, r25
	} while (multiReceive);
    12c0:	01 15       	cp	r16, r1
    12c2:	11 05       	cpc	r17, r1
    12c4:	09 f0       	breq	.+2      	; 0x12c8 <getFileWifi+0xca>
    12c6:	c3 cf       	rjmp	.-122    	; 0x124e <getFileWifi+0x50>
	
	disableReceiveINT(); 
    12c8:	7e d0       	rcall	.+252    	; 0x13c6 <disableReceiveINT>
	//_delay_ms(3000);  
	sendCommand(NOPREFIX, STREAM_CLOSE, NOVAL);
    12ca:	4b ee       	ldi	r20, 0xEB	; 235
    12cc:	53 e0       	ldi	r21, 0x03	; 3
    12ce:	67 ed       	ldi	r22, 0xD7	; 215
    12d0:	76 e0       	ldi	r23, 0x06	; 6
    12d2:	8f ef       	ldi	r24, 0xFF	; 255
    12d4:	33 d1       	rcall	.+614    	; 0x153c <sendCommand>
	//receiveStatus(); 
	return i; 
}
    12d6:	c7 01       	movw	r24, r14
    12d8:	df 91       	pop	r29
    12da:	cf 91       	pop	r28
    12dc:	1f 91       	pop	r17
    12de:	0f 91       	pop	r16
    12e0:	ff 90       	pop	r15
    12e2:	ef 90       	pop	r14
    12e4:	df 90       	pop	r13
    12e6:	cf 90       	pop	r12
    12e8:	bf 90       	pop	r11
    12ea:	af 90       	pop	r10
    12ec:	9f 90       	pop	r9
    12ee:	8f 90       	pop	r8
    12f0:	7f 90       	pop	r7
    12f2:	6f 90       	pop	r6
    12f4:	5f 90       	pop	r5
    12f6:	4f 90       	pop	r4
    12f8:	3f 90       	pop	r3
    12fa:	2f 90       	pop	r2
    12fc:	08 95       	ret

000012fe <updateFileWifi>:

void updateFileWifi(char* filepath)
{
    12fe:	cf 93       	push	r28
    1300:	df 93       	push	r29
    1302:	ec 01       	movw	r28, r24
	disableReceiveINT(); 
    1304:	60 d0       	rcall	.+192    	; 0x13c6 <disableReceiveINT>
	sendCommand(NOPREFIX, filepath, NOVAL);
    1306:	4b ee       	ldi	r20, 0xEB	; 235
    1308:	53 e0       	ldi	r21, 0x03	; 3
    130a:	be 01       	movw	r22, r28
    130c:	8f ef       	ldi	r24, 0xFF	; 255
    130e:	16 d1       	rcall	.+556    	; 0x153c <sendCommand>
	sendCommand(NOPREFIX, STREAM_CLOSE, NOVAL); 	
    1310:	4b ee       	ldi	r20, 0xEB	; 235
    1312:	53 e0       	ldi	r21, 0x03	; 3
    1314:	67 ed       	ldi	r22, 0xD7	; 215
    1316:	76 e0       	ldi	r23, 0x06	; 6
    1318:	8f ef       	ldi	r24, 0xFF	; 255
    131a:	10 d1       	rcall	.+544    	; 0x153c <sendCommand>
}
    131c:	df 91       	pop	r29
    131e:	cf 91       	pop	r28
    1320:	08 95       	ret

00001322 <setReceiveCounter>:
	//0 denotes a successful command 
	if(header[errorCode] != '0')
		return 1; 
	else 
		return 0; 
}
    1322:	90 93 03 0b 	sts	0x0B03, r25
    1326:	80 93 02 0b 	sts	0x0B02, r24
    132a:	08 95       	ret

0000132c <uart_init>:
    132c:	10 92 c5 00 	sts	0x00C5, r1
    1330:	83 e3       	ldi	r24, 0x33	; 51
    1332:	80 93 c4 00 	sts	0x00C4, r24
    1336:	e1 ec       	ldi	r30, 0xC1	; 193
    1338:	f0 e0       	ldi	r31, 0x00	; 0
    133a:	88 e1       	ldi	r24, 0x18	; 24
    133c:	80 83       	st	Z, r24
    133e:	86 e0       	ldi	r24, 0x06	; 6
    1340:	80 93 c2 00 	sts	0x00C2, r24
    1344:	80 81       	ld	r24, Z
    1346:	80 68       	ori	r24, 0x80	; 128
    1348:	80 83       	st	Z, r24
    134a:	08 95       	ret

0000134c <uart_send>:
    134c:	cf 93       	push	r28
    134e:	df 93       	push	r29
    1350:	10 92 0e 0b 	sts	0x0B0E, r1
    1354:	29 e0       	ldi	r18, 0x09	; 9
    1356:	e5 ef       	ldi	r30, 0xF5	; 245
    1358:	fa e0       	ldi	r31, 0x0A	; 10
    135a:	df 01       	movw	r26, r30
    135c:	1d 92       	st	X+, r1
    135e:	2a 95       	dec	r18
    1360:	e9 f7       	brne	.-6      	; 0x135c <uart_send+0x10>
    1362:	61 15       	cp	r22, r1
    1364:	71 05       	cpc	r23, r1
    1366:	a9 f0       	breq	.+42     	; 0x1392 <uart_send+0x46>
    1368:	20 e0       	ldi	r18, 0x00	; 0
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	50 e0       	ldi	r21, 0x00	; 0
    136e:	e0 ec       	ldi	r30, 0xC0	; 192
    1370:	f0 e0       	ldi	r31, 0x00	; 0
    1372:	a6 ec       	ldi	r26, 0xC6	; 198
    1374:	b0 e0       	ldi	r27, 0x00	; 0
    1376:	40 81       	ld	r20, Z
    1378:	45 ff       	sbrs	r20, 5
    137a:	fd cf       	rjmp	.-6      	; 0x1376 <uart_send+0x2a>
    137c:	ec 01       	movw	r28, r24
    137e:	c2 0f       	add	r28, r18
    1380:	d3 1f       	adc	r29, r19
    1382:	28 81       	ld	r18, Y
    1384:	2c 93       	st	X, r18
    1386:	5f 5f       	subi	r21, 0xFF	; 255
    1388:	25 2f       	mov	r18, r21
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	26 17       	cp	r18, r22
    138e:	37 07       	cpc	r19, r23
    1390:	90 f3       	brcs	.-28     	; 0x1376 <uart_send+0x2a>
    1392:	88 ec       	ldi	r24, 0xC8	; 200
    1394:	92 e0       	ldi	r25, 0x02	; 2
    1396:	0e 94 c4 12 	call	0x2588	; 0x2588 <puts>
    139a:	80 e0       	ldi	r24, 0x00	; 0
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	df 91       	pop	r29
    13a0:	cf 91       	pop	r28
    13a2:	08 95       	ret

000013a4 <uart_receiveChar>:
    13a4:	e0 ec       	ldi	r30, 0xC0	; 192
    13a6:	f0 e0       	ldi	r31, 0x00	; 0
    13a8:	80 81       	ld	r24, Z
    13aa:	88 23       	and	r24, r24
    13ac:	ec f7       	brge	.-6      	; 0x13a8 <uart_receiveChar+0x4>
    13ae:	80 91 c6 00 	lds	r24, 0x00C6
    13b2:	08 95       	ret

000013b4 <enableReceiveINT>:
    13b4:	e1 ec       	ldi	r30, 0xC1	; 193
    13b6:	f0 e0       	ldi	r31, 0x00	; 0
    13b8:	80 81       	ld	r24, Z
    13ba:	80 68       	ori	r24, 0x80	; 128
    13bc:	80 83       	st	Z, r24
    13be:	78 94       	sei
    13c0:	81 e0       	ldi	r24, 0x01	; 1
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	08 95       	ret

000013c6 <disableReceiveINT>:
    13c6:	e1 ec       	ldi	r30, 0xC1	; 193
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	80 81       	ld	r24, Z
    13cc:	8f 77       	andi	r24, 0x7F	; 127
    13ce:	80 83       	st	Z, r24
    13d0:	81 e0       	ldi	r24, 0x01	; 1
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	08 95       	ret

000013d6 <receiveStatus>:
    13d6:	80 91 0e 0b 	lds	r24, 0x0B0E
    13da:	81 11       	cpse	r24, r1
    13dc:	08 c0       	rjmp	.+16     	; 0x13ee <receiveStatus+0x18>
    13de:	81 e2       	ldi	r24, 0x21	; 33
    13e0:	8a 95       	dec	r24
    13e2:	f1 f7       	brne	.-4      	; 0x13e0 <receiveStatus+0xa>
    13e4:	00 00       	nop
    13e6:	80 91 0e 0b 	lds	r24, 0x0B0E
    13ea:	88 23       	and	r24, r24
    13ec:	c1 f3       	breq	.-16     	; 0x13de <receiveStatus+0x8>
    13ee:	81 e0       	ldi	r24, 0x01	; 1
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	08 95       	ret

000013f4 <buildTransmissionLength>:
    13f4:	0f 93       	push	r16
    13f6:	1f 93       	push	r17
    13f8:	cf 93       	push	r28
    13fa:	df 93       	push	r29
    13fc:	80 91 00 0b 	lds	r24, 0x0B00
    1400:	90 91 01 0b 	lds	r25, 0x0B01
    1404:	89 2b       	or	r24, r25
    1406:	f1 f0       	breq	.+60     	; 0x1444 <buildTransmissionLength+0x50>
    1408:	c0 e0       	ldi	r28, 0x00	; 0
    140a:	d0 e0       	ldi	r29, 0x00	; 0
    140c:	07 e4       	ldi	r16, 0x47	; 71
    140e:	17 e0       	ldi	r17, 0x07	; 7
    1410:	fe 01       	movw	r30, r28
    1412:	eb 50       	subi	r30, 0x0B	; 11
    1414:	f5 4f       	sbci	r31, 0xF5	; 245
    1416:	80 81       	ld	r24, Z
    1418:	ff 93       	push	r31
    141a:	ef 93       	push	r30
    141c:	1f 92       	push	r1
    141e:	8f 93       	push	r24
    1420:	1f 93       	push	r17
    1422:	0f 93       	push	r16
    1424:	0e 94 ae 12 	call	0x255c	; 0x255c <printf>
    1428:	21 96       	adiw	r28, 0x01	; 1
    142a:	0f 90       	pop	r0
    142c:	0f 90       	pop	r0
    142e:	0f 90       	pop	r0
    1430:	0f 90       	pop	r0
    1432:	0f 90       	pop	r0
    1434:	0f 90       	pop	r0
    1436:	c9 30       	cpi	r28, 0x09	; 9
    1438:	d1 05       	cpc	r29, r1
    143a:	51 f7       	brne	.-44     	; 0x1410 <buildTransmissionLength+0x1c>
    143c:	8a e0       	ldi	r24, 0x0A	; 10
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	0e 94 bf 12 	call	0x257e	; 0x257e <putchar>
    1444:	10 92 07 0b 	sts	0x0B07, r1
    1448:	10 92 06 0b 	sts	0x0B06, r1
    144c:	20 91 fb 0a 	lds	r18, 0x0AFB
    1450:	80 91 06 0b 	lds	r24, 0x0B06
    1454:	90 91 07 0b 	lds	r25, 0x0B07
    1458:	2f 70       	andi	r18, 0x0F	; 15
    145a:	82 0f       	add	r24, r18
    145c:	91 1d       	adc	r25, r1
    145e:	90 93 07 0b 	sts	0x0B07, r25
    1462:	80 93 06 0b 	sts	0x0B06, r24
    1466:	80 91 fa 0a 	lds	r24, 0x0AFA
    146a:	20 91 06 0b 	lds	r18, 0x0B06
    146e:	30 91 07 0b 	lds	r19, 0x0B07
    1472:	8f 70       	andi	r24, 0x0F	; 15
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	ac 01       	movw	r20, r24
    1478:	44 0f       	add	r20, r20
    147a:	55 1f       	adc	r21, r21
    147c:	88 0f       	add	r24, r24
    147e:	99 1f       	adc	r25, r25
    1480:	88 0f       	add	r24, r24
    1482:	99 1f       	adc	r25, r25
    1484:	88 0f       	add	r24, r24
    1486:	99 1f       	adc	r25, r25
    1488:	84 0f       	add	r24, r20
    148a:	95 1f       	adc	r25, r21
    148c:	82 0f       	add	r24, r18
    148e:	93 1f       	adc	r25, r19
    1490:	90 93 07 0b 	sts	0x0B07, r25
    1494:	80 93 06 0b 	sts	0x0B06, r24
    1498:	20 91 f9 0a 	lds	r18, 0x0AF9
    149c:	80 91 06 0b 	lds	r24, 0x0B06
    14a0:	90 91 07 0b 	lds	r25, 0x0B07
    14a4:	2f 70       	andi	r18, 0x0F	; 15
    14a6:	34 e6       	ldi	r19, 0x64	; 100
    14a8:	23 9f       	mul	r18, r19
    14aa:	80 0d       	add	r24, r0
    14ac:	91 1d       	adc	r25, r1
    14ae:	11 24       	eor	r1, r1
    14b0:	90 93 07 0b 	sts	0x0B07, r25
    14b4:	80 93 06 0b 	sts	0x0B06, r24
    14b8:	60 91 f8 0a 	lds	r22, 0x0AF8
    14bc:	80 91 06 0b 	lds	r24, 0x0B06
    14c0:	90 91 07 0b 	lds	r25, 0x0B07
    14c4:	6f 70       	andi	r22, 0x0F	; 15
    14c6:	48 ee       	ldi	r20, 0xE8	; 232
    14c8:	53 e0       	ldi	r21, 0x03	; 3
    14ca:	64 9f       	mul	r22, r20
    14cc:	90 01       	movw	r18, r0
    14ce:	65 9f       	mul	r22, r21
    14d0:	30 0d       	add	r19, r0
    14d2:	11 24       	eor	r1, r1
    14d4:	82 0f       	add	r24, r18
    14d6:	93 1f       	adc	r25, r19
    14d8:	90 93 07 0b 	sts	0x0B07, r25
    14dc:	80 93 06 0b 	sts	0x0B06, r24
    14e0:	60 91 f7 0a 	lds	r22, 0x0AF7
    14e4:	80 91 06 0b 	lds	r24, 0x0B06
    14e8:	90 91 07 0b 	lds	r25, 0x0B07
    14ec:	6f 70       	andi	r22, 0x0F	; 15
    14ee:	40 e1       	ldi	r20, 0x10	; 16
    14f0:	57 e2       	ldi	r21, 0x27	; 39
    14f2:	64 9f       	mul	r22, r20
    14f4:	90 01       	movw	r18, r0
    14f6:	65 9f       	mul	r22, r21
    14f8:	30 0d       	add	r19, r0
    14fa:	11 24       	eor	r1, r1
    14fc:	82 0f       	add	r24, r18
    14fe:	93 1f       	adc	r25, r19
    1500:	90 93 07 0b 	sts	0x0B07, r25
    1504:	80 93 06 0b 	sts	0x0B06, r24
    1508:	80 91 06 0b 	lds	r24, 0x0B06
    150c:	90 91 07 0b 	lds	r25, 0x0B07
    1510:	df 91       	pop	r29
    1512:	cf 91       	pop	r28
    1514:	1f 91       	pop	r17
    1516:	0f 91       	pop	r16
    1518:	08 95       	ret

0000151a <getTransmissionLength>:
    151a:	80 91 06 0b 	lds	r24, 0x0B06
    151e:	90 91 07 0b 	lds	r25, 0x0B07
    1522:	08 95       	ret

00001524 <getMessageHeader>:
    1524:	85 ef       	ldi	r24, 0xF5	; 245
    1526:	9a e0       	ldi	r25, 0x0A	; 10
    1528:	08 95       	ret

0000152a <updateRAMAddress>:

void updateRAMAddress(uint32_t address)
{
	RAMAddress = address; 
    152a:	60 93 08 0b 	sts	0x0B08, r22
    152e:	70 93 09 0b 	sts	0x0B09, r23
    1532:	80 93 0a 0b 	sts	0x0B0A, r24
    1536:	90 93 0b 0b 	sts	0x0B0B, r25
    153a:	08 95       	ret

0000153c <sendCommand>:
}

unsigned int sendCommand(int8_t prefix, char* command, char* value)
{
    153c:	0f 93       	push	r16
    153e:	1f 93       	push	r17
    1540:	cf 93       	push	r28
    1542:	df 93       	push	r29
    1544:	ea 01       	movw	r28, r20
	//char* fullCommand = (char *)malloc(MaxSendSize);
	switch(prefix)
    1546:	81 30       	cpi	r24, 0x01	; 1
    1548:	31 f0       	breq	.+12     	; 0x1556 <sendCommand+0x1a>
    154a:	82 30       	cpi	r24, 0x02	; 2
    154c:	71 f0       	breq	.+28     	; 0x156a <sendCommand+0x2e>
    154e:	8f 3f       	cpi	r24, 0xFF	; 255
    1550:	09 f0       	breq	.+2      	; 0x1554 <sendCommand+0x18>
    1552:	66 c0       	rjmp	.+204    	; 0x1620 <sendCommand+0xe4>
    1554:	17 c0       	rjmp	.+46     	; 0x1584 <sendCommand+0x48>
	{
		case NOPREFIX: 
			break; 
		case GET:
			strcpy(fullCommand, "get "); 
    1556:	85 e0       	ldi	r24, 0x05	; 5
    1558:	eb e8       	ldi	r30, 0x8B	; 139
    155a:	f2 e0       	ldi	r31, 0x02	; 2
    155c:	af e0       	ldi	r26, 0x0F	; 15
    155e:	bb e0       	ldi	r27, 0x0B	; 11
    1560:	01 90       	ld	r0, Z+
    1562:	0d 92       	st	X+, r0
    1564:	8a 95       	dec	r24
    1566:	e1 f7       	brne	.-8      	; 0x1560 <sendCommand+0x24>
			//strcat(fullCommand, "get ");
			break; 
    1568:	0d c0       	rjmp	.+26     	; 0x1584 <sendCommand+0x48>
		case SET: 
			strcat(fullCommand, "set ");
    156a:	af e0       	ldi	r26, 0x0F	; 15
    156c:	bb e0       	ldi	r27, 0x0B	; 11
    156e:	0d 90       	ld	r0, X+
    1570:	00 20       	and	r0, r0
    1572:	e9 f7       	brne	.-6      	; 0x156e <sendCommand+0x32>
    1574:	11 97       	sbiw	r26, 0x01	; 1
    1576:	85 e0       	ldi	r24, 0x05	; 5
    1578:	e3 e6       	ldi	r30, 0x63	; 99
    157a:	f7 e0       	ldi	r31, 0x07	; 7
    157c:	01 90       	ld	r0, Z+
    157e:	0d 92       	st	X+, r0
    1580:	8a 95       	dec	r24
    1582:	e1 f7       	brne	.-8      	; 0x157c <sendCommand+0x40>
			return 0; 
			break; 
	}
	//printf("Command: %s Length: %d, Address: %p\n", fullCommand, strlen(fullCommand), fullCommand);
	//printf("Command: %s Length: %d, Address: %p\n", command, strlen(command),  command);
	strcat(fullCommand, command);
    1584:	8f e0       	ldi	r24, 0x0F	; 15
    1586:	9b e0       	ldi	r25, 0x0B	; 11
    1588:	a5 d7       	rcall	.+3914   	; 0x24d4 <strcat>
	//printf("Full Command: %s", fullCommand);	
	if(value != NOVAL)
    158a:	83 e0       	ldi	r24, 0x03	; 3
    158c:	cb 3e       	cpi	r28, 0xEB	; 235
    158e:	d8 07       	cpc	r29, r24
    1590:	71 f0       	breq	.+28     	; 0x15ae <sendCommand+0x72>
	{
		strcat(fullCommand, " ");
    1592:	ef e0       	ldi	r30, 0x0F	; 15
    1594:	fb e0       	ldi	r31, 0x0B	; 11
    1596:	01 90       	ld	r0, Z+
    1598:	00 20       	and	r0, r0
    159a:	e9 f7       	brne	.-6      	; 0x1596 <sendCommand+0x5a>
    159c:	31 97       	sbiw	r30, 0x01	; 1
    159e:	80 e2       	ldi	r24, 0x20	; 32
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	91 83       	std	Z+1, r25	; 0x01
    15a4:	80 83       	st	Z, r24
		strcat(fullCommand, value);
    15a6:	be 01       	movw	r22, r28
    15a8:	8f e0       	ldi	r24, 0x0F	; 15
    15aa:	9b e0       	ldi	r25, 0x0B	; 11
    15ac:	93 d7       	rcall	.+3878   	; 0x24d4 <strcat>
	}
	
	//printf("fullCommand: %s\n", fullCommand);
	strcat(fullCommand, ENDCOMMAND);
    15ae:	cf e0       	ldi	r28, 0x0F	; 15
    15b0:	db e0       	ldi	r29, 0x0B	; 11
    15b2:	fe 01       	movw	r30, r28
    15b4:	01 90       	ld	r0, Z+
    15b6:	00 20       	and	r0, r0
    15b8:	e9 f7       	brne	.-6      	; 0x15b4 <sendCommand+0x78>
    15ba:	31 97       	sbiw	r30, 0x01	; 1
    15bc:	8d e0       	ldi	r24, 0x0D	; 13
    15be:	9a e0       	ldi	r25, 0x0A	; 10
    15c0:	a0 e0       	ldi	r26, 0x00	; 0
    15c2:	80 83       	st	Z, r24
    15c4:	91 83       	std	Z+1, r25	; 0x01
    15c6:	a2 83       	std	Z+2, r26	; 0x02
	uint16_t length = strlen(fullCommand);
    15c8:	fe 01       	movw	r30, r28
    15ca:	01 90       	ld	r0, Z+
    15cc:	00 20       	and	r0, r0
    15ce:	e9 f7       	brne	.-6      	; 0x15ca <sendCommand+0x8e>
    15d0:	31 97       	sbiw	r30, 0x01	; 1
    15d2:	8f 01       	movw	r16, r30
    15d4:	0f 50       	subi	r16, 0x0F	; 15
    15d6:	1b 40       	sbci	r17, 0x0B	; 11
	printf("Command: %s Length: %d, Address: %p\n", fullCommand, length, fullCommand);
    15d8:	df 93       	push	r29
    15da:	cf 93       	push	r28
    15dc:	1f 93       	push	r17
    15de:	0f 93       	push	r16
    15e0:	df 93       	push	r29
    15e2:	cf 93       	push	r28
    15e4:	88 e6       	ldi	r24, 0x68	; 104
    15e6:	97 e0       	ldi	r25, 0x07	; 7
    15e8:	9f 93       	push	r25
    15ea:	8f 93       	push	r24
    15ec:	b7 d7       	rcall	.+3950   	; 0x255c <printf>
	uart_send(fullCommand, length);
    15ee:	b8 01       	movw	r22, r16
    15f0:	ce 01       	movw	r24, r28
    15f2:	ac de       	rcall	.-680    	; 0x134c <uart_send>
	memset(fullCommand, 0x00, 100);
    15f4:	84 e6       	ldi	r24, 0x64	; 100
    15f6:	fe 01       	movw	r30, r28
    15f8:	11 92       	st	Z+, r1
    15fa:	8a 95       	dec	r24
    15fc:	e9 f7       	brne	.-6      	; 0x15f8 <sendCommand+0xbc>
	//PORTD |= (1<<RTS);
	printf("Freed!\n");
    15fe:	8d e8       	ldi	r24, 0x8D	; 141
    1600:	97 e0       	ldi	r25, 0x07	; 7
    1602:	c2 d7       	rcall	.+3972   	; 0x2588 <puts>
	printf("Returning!\n");
    1604:	84 e9       	ldi	r24, 0x94	; 148
    1606:	97 e0       	ldi	r25, 0x07	; 7
    1608:	bf d7       	rcall	.+3966   	; 0x2588 <puts>
	return 1; 
    160a:	8d b7       	in	r24, 0x3d	; 61
    160c:	9e b7       	in	r25, 0x3e	; 62
    160e:	08 96       	adiw	r24, 0x08	; 8
    1610:	0f b6       	in	r0, 0x3f	; 63
    1612:	f8 94       	cli
    1614:	9e bf       	out	0x3e, r25	; 62
    1616:	0f be       	out	0x3f, r0	; 63
    1618:	8d bf       	out	0x3d, r24	; 61
    161a:	81 e0       	ldi	r24, 0x01	; 1
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	02 c0       	rjmp	.+4      	; 0x1624 <sendCommand+0xe8>
			break; 
		case SET: 
			strcat(fullCommand, "set ");
			break; 
		default:
			return 0; 
    1620:	80 e0       	ldi	r24, 0x00	; 0
    1622:	90 e0       	ldi	r25, 0x00	; 0
	memset(fullCommand, 0x00, 100);
	//PORTD |= (1<<RTS);
	printf("Freed!\n");
	printf("Returning!\n");
	return 1; 
}
    1624:	df 91       	pop	r29
    1626:	cf 91       	pop	r28
    1628:	1f 91       	pop	r17
    162a:	0f 91       	pop	r16
    162c:	08 95       	ret

0000162e <__vector_25>:
	//PORTD |= (1<<CTS);
	//sei();
//}

ISR(USART0_RX_vect)
{
    162e:	1f 92       	push	r1
    1630:	0f 92       	push	r0
    1632:	0f b6       	in	r0, 0x3f	; 63
    1634:	0f 92       	push	r0
    1636:	11 24       	eor	r1, r1
    1638:	0b b6       	in	r0, 0x3b	; 59
    163a:	0f 92       	push	r0
    163c:	2f 93       	push	r18
    163e:	3f 93       	push	r19
    1640:	4f 93       	push	r20
    1642:	5f 93       	push	r21
    1644:	6f 93       	push	r22
    1646:	7f 93       	push	r23
    1648:	8f 93       	push	r24
    164a:	9f 93       	push	r25
    164c:	af 93       	push	r26
    164e:	bf 93       	push	r27
    1650:	cf 93       	push	r28
    1652:	df 93       	push	r29
    1654:	ef 93       	push	r30
    1656:	ff 93       	push	r31
	cli();
    1658:	f8 94       	cli
	//if(testPrint)
		//printf("Interrupt!\n");
	if(!bufferStart)
    165a:	80 91 0c 0b 	lds	r24, 0x0B0C
    165e:	90 91 0d 0b 	lds	r25, 0x0B0D
    1662:	89 2b       	or	r24, r25
    1664:	e1 f4       	brne	.+56     	; 0x169e <__vector_25+0x70>
	{
		buff = uart_receiveChar();
    1666:	9e de       	rcall	.-708    	; 0x13a4 <uart_receiveChar>
    1668:	80 93 fe 0a 	sts	0x0AFE, r24
		//Header always begins with letter 'R'
		if(buff == headerStartVal)
    166c:	80 91 fe 0a 	lds	r24, 0x0AFE
    1670:	82 35       	cpi	r24, 0x52	; 82
    1672:	09 f0       	breq	.+2      	; 0x1676 <__vector_25+0x48>
    1674:	95 c0       	rjmp	.+298    	; 0x17a0 <__vector_25+0x172>
		{
			//PORTD &= ~(1<<RTS);
			//if(testPrint)
				//printf("Beginning Found @ %d\n", i); 
				
			i = 0;
    1676:	10 92 03 0b 	sts	0x0B03, r1
    167a:	10 92 02 0b 	sts	0x0B02, r1
			headerBuffer[i] = buff; 
    167e:	e0 91 02 0b 	lds	r30, 0x0B02
    1682:	f0 91 03 0b 	lds	r31, 0x0B03
    1686:	80 91 fe 0a 	lds	r24, 0x0AFE
    168a:	eb 50       	subi	r30, 0x0B	; 11
    168c:	f5 4f       	sbci	r31, 0xF5	; 245
    168e:	80 83       	st	Z, r24
			
				//if(testPrint)
					//printf("Header: %c @ address %p", headerBuffer[i], headerBuffer); 
					
			bufferStart = 1;
    1690:	81 e0       	ldi	r24, 0x01	; 1
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	90 93 0d 0b 	sts	0x0B0D, r25
    1698:	80 93 0c 0b 	sts	0x0B0C, r24
    169c:	81 c0       	rjmp	.+258    	; 0x17a0 <__vector_25+0x172>
	
	else
	{
		//printf("Beginning of buffer.\n");
		//Grab Receive Header
		if(i < endHeader)
    169e:	80 91 02 0b 	lds	r24, 0x0B02
    16a2:	90 91 03 0b 	lds	r25, 0x0B03
    16a6:	09 97       	sbiw	r24, 0x09	; 9
    16a8:	48 f4       	brcc	.+18     	; 0x16bc <__vector_25+0x8e>
		{
			//PORTD &= ~(1<<RTS);
			headerBuffer[i] = uart_receiveChar();
    16aa:	c0 91 02 0b 	lds	r28, 0x0B02
    16ae:	d0 91 03 0b 	lds	r29, 0x0B03
    16b2:	78 de       	rcall	.-784    	; 0x13a4 <uart_receiveChar>
    16b4:	cb 50       	subi	r28, 0x0B	; 11
    16b6:	d5 4f       	sbci	r29, 0xF5	; 245
    16b8:	88 83       	st	Y, r24
    16ba:	72 c0       	rjmp	.+228    	; 0x17a0 <__vector_25+0x172>
				//printf("Header: %c @ address %p\n", headerBuffer[i], headerBuffer + i);
			//i++; 
			//RAMWriteByte(uart_receiveChar(), i);
			//PORTD |= (1<<RTS); 
		}
		else if(i == endHeader)
    16bc:	80 91 02 0b 	lds	r24, 0x0B02
    16c0:	90 91 03 0b 	lds	r25, 0x0B03
    16c4:	09 97       	sbiw	r24, 0x09	; 9
    16c6:	21 f5       	brne	.+72     	; 0x1710 <__vector_25+0xe2>
		{
			transLength = buildTransmissionLength();
    16c8:	95 de       	rcall	.-726    	; 0x13f4 <buildTransmissionLength>
    16ca:	90 93 07 0b 	sts	0x0B07, r25
    16ce:	80 93 06 0b 	sts	0x0B06, r24
			//i++; 
			if(testPrint)
    16d2:	80 91 00 0b 	lds	r24, 0x0B00
    16d6:	90 91 01 0b 	lds	r25, 0x0B01
    16da:	89 2b       	or	r24, r25
    16dc:	09 f4       	brne	.+2      	; 0x16e0 <__vector_25+0xb2>
    16de:	60 c0       	rjmp	.+192    	; 0x17a0 <__vector_25+0x172>
				printf("Transmission Length: %d, i: %d\n", transLength, i);
    16e0:	20 91 02 0b 	lds	r18, 0x0B02
    16e4:	30 91 03 0b 	lds	r19, 0x0B03
    16e8:	80 91 06 0b 	lds	r24, 0x0B06
    16ec:	90 91 07 0b 	lds	r25, 0x0B07
    16f0:	3f 93       	push	r19
    16f2:	2f 93       	push	r18
    16f4:	9f 93       	push	r25
    16f6:	8f 93       	push	r24
    16f8:	8f e9       	ldi	r24, 0x9F	; 159
    16fa:	97 e0       	ldi	r25, 0x07	; 7
    16fc:	9f 93       	push	r25
    16fe:	8f 93       	push	r24
    1700:	2d d7       	rcall	.+3674   	; 0x255c <printf>
    1702:	0f 90       	pop	r0
    1704:	0f 90       	pop	r0
    1706:	0f 90       	pop	r0
    1708:	0f 90       	pop	r0
    170a:	0f 90       	pop	r0
    170c:	0f 90       	pop	r0
    170e:	48 c0       	rjmp	.+144    	; 0x17a0 <__vector_25+0x172>
		}
		else
		{
			if(i < transLength + endHeader)
    1710:	20 91 06 0b 	lds	r18, 0x0B06
    1714:	30 91 07 0b 	lds	r19, 0x0B07
    1718:	80 91 02 0b 	lds	r24, 0x0B02
    171c:	90 91 03 0b 	lds	r25, 0x0B03
    1720:	27 5f       	subi	r18, 0xF7	; 247
    1722:	3f 4f       	sbci	r19, 0xFF	; 255
    1724:	82 17       	cp	r24, r18
    1726:	93 07       	cpc	r25, r19
    1728:	d8 f4       	brcc	.+54     	; 0x1760 <__vector_25+0x132>
			{
				
				buff = uart_receiveChar();
    172a:	3c de       	rcall	.-904    	; 0x13a4 <uart_receiveChar>
    172c:	80 93 fe 0a 	sts	0x0AFE, r24
				RAMWriteByte(buff, RAMAddress + i - endHeader -1);	
    1730:	20 91 02 0b 	lds	r18, 0x0B02
    1734:	30 91 03 0b 	lds	r19, 0x0B03
    1738:	40 91 08 0b 	lds	r20, 0x0B08
    173c:	50 91 09 0b 	lds	r21, 0x0B09
    1740:	60 91 0a 0b 	lds	r22, 0x0B0A
    1744:	70 91 0b 0b 	lds	r23, 0x0B0B
    1748:	80 91 fe 0a 	lds	r24, 0x0AFE
    174c:	4a 50       	subi	r20, 0x0A	; 10
    174e:	51 09       	sbc	r21, r1
    1750:	61 09       	sbc	r22, r1
    1752:	71 09       	sbc	r23, r1
    1754:	42 0f       	add	r20, r18
    1756:	53 1f       	adc	r21, r19
    1758:	61 1d       	adc	r22, r1
    175a:	71 1d       	adc	r23, r1
    175c:	e1 db       	rcall	.-2110   	; 0xf20 <RAMWriteByte>
    175e:	20 c0       	rjmp	.+64     	; 0x17a0 <__vector_25+0x172>
			else
			{
				//printf("End of String!\n");
				//RAMWriteByte(0x00, RAMAddress + i - endHeader -1);
				//cli();
				i = 0;
    1760:	10 92 03 0b 	sts	0x0B03, r1
    1764:	10 92 02 0b 	sts	0x0B02, r1
				bufferStart = 0;
    1768:	10 92 0d 0b 	sts	0x0B0D, r1
    176c:	10 92 0c 0b 	sts	0x0B0C, r1
				compressFlag = 0; 
    1770:	10 92 05 0b 	sts	0x0B05, r1
				secondNibble = 0; 
    1774:	10 92 04 0b 	sts	0x0B04, r1
				compressBuff = 0x00; 
    1778:	10 92 ff 0a 	sts	0x0AFF, r1
				//done receiving
				receiveWifiFlag = 1;
    177c:	81 e0       	ldi	r24, 0x01	; 1
    177e:	80 93 0e 0b 	sts	0x0B0E, r24
				printf("Transmission Length: %d\n", buildTransmissionLength());
    1782:	38 de       	rcall	.-912    	; 0x13f4 <buildTransmissionLength>
    1784:	9f 93       	push	r25
    1786:	8f 93       	push	r24
    1788:	8f eb       	ldi	r24, 0xBF	; 191
    178a:	97 e0       	ldi	r25, 0x07	; 7
    178c:	9f 93       	push	r25
    178e:	8f 93       	push	r24
    1790:	e5 d6       	rcall	.+3530   	; 0x255c <printf>
				printf("Done Receiving!\n");
    1792:	88 ed       	ldi	r24, 0xD8	; 216
    1794:	97 e0       	ldi	r25, 0x07	; 7
    1796:	f8 d6       	rcall	.+3568   	; 0x2588 <puts>
    1798:	0f 90       	pop	r0
    179a:	0f 90       	pop	r0
    179c:	0f 90       	pop	r0
    179e:	0f 90       	pop	r0
		}
		//printf("%d\n", i); 
		//i++; 
	}
	//if(bufferStart && !receiveWifiFlag)
	i++; 
    17a0:	80 91 02 0b 	lds	r24, 0x0B02
    17a4:	90 91 03 0b 	lds	r25, 0x0B03
    17a8:	01 96       	adiw	r24, 0x01	; 1
    17aa:	90 93 03 0b 	sts	0x0B03, r25
    17ae:	80 93 02 0b 	sts	0x0B02, r24
		
	//PORTD |= (1<<CTS); 
	sei(); 
    17b2:	78 94       	sei
}
    17b4:	ff 91       	pop	r31
    17b6:	ef 91       	pop	r30
    17b8:	df 91       	pop	r29
    17ba:	cf 91       	pop	r28
    17bc:	bf 91       	pop	r27
    17be:	af 91       	pop	r26
    17c0:	9f 91       	pop	r25
    17c2:	8f 91       	pop	r24
    17c4:	7f 91       	pop	r23
    17c6:	6f 91       	pop	r22
    17c8:	5f 91       	pop	r21
    17ca:	4f 91       	pop	r20
    17cc:	3f 91       	pop	r19
    17ce:	2f 91       	pop	r18
    17d0:	0f 90       	pop	r0
    17d2:	0b be       	out	0x3b, r0	; 59
    17d4:	0f 90       	pop	r0
    17d6:	0f be       	out	0x3f, r0	; 63
    17d8:	0f 90       	pop	r0
    17da:	1f 90       	pop	r1
    17dc:	18 95       	reti

000017de <hexInit>:
				   //':', 0x10, 0x00, 0x10, 0x00, 0x12, 0xC0, 0x11, 0xC0, 0x10, 0xC0, 0x0F, 0xC0, 0x0E, 0xC0, 0x0D, 0xC0, 0x0C, 0xC0, 0x0B, 0xC0, 0x6C,
				   //':', 0x00, 0x00, 0x00, 0x01, 0xFF};

void hexInit()
{
	RAMOffset = 0; 
    17de:	10 92 a6 0b 	sts	0x0BA6, r1
    17e2:	10 92 a5 0b 	sts	0x0BA5, r1
	memset(hexRow, 0x00, 50); 
    17e6:	82 e3       	ldi	r24, 0x32	; 50
    17e8:	e3 e7       	ldi	r30, 0x73	; 115
    17ea:	fb e0       	ldi	r31, 0x0B	; 11
    17ec:	df 01       	movw	r26, r30
    17ee:	1d 92       	st	X+, r1
    17f0:	8a 95       	dec	r24
    17f2:	e9 f7       	brne	.-6      	; 0x17ee <hexInit+0x10>
    17f4:	08 95       	ret

000017f6 <resetRAMOffset>:
} 

void resetRAMOffset()
{
	RAMOffset = 0; 
    17f6:	10 92 a6 0b 	sts	0x0BA6, r1
    17fa:	10 92 a5 0b 	sts	0x0BA5, r1
    17fe:	08 95       	ret

00001800 <getHexRow>:
}

char* getHexRow()
{
    1800:	df 92       	push	r13
    1802:	ef 92       	push	r14
    1804:	ff 92       	push	r15
    1806:	0f 93       	push	r16
    1808:	1f 93       	push	r17
    180a:	cf 93       	push	r28
    180c:	df 93       	push	r29
	char rowBuff; 
	int i=0; 
	printf("Getting Row!\n"); 
    180e:	88 ee       	ldi	r24, 0xE8	; 232
    1810:	97 e0       	ldi	r25, 0x07	; 7
    1812:	ba d6       	rcall	.+3444   	; 0x2588 <puts>
    1814:	c3 e7       	ldi	r28, 0x73	; 115
    1816:	db e0       	ldi	r29, 0x0B	; 11
    1818:	0f 2e       	mov	r0, r31
    181a:	f8 e7       	ldi	r31, 0x78	; 120
    181c:	ef 2e       	mov	r14, r31
    181e:	fb e0       	ldi	r31, 0x0B	; 11
    1820:	ff 2e       	mov	r15, r31
    1822:	f0 2d       	mov	r31, r0
	for(i=0; i<DATA_BEGIN; i++)
	{
		//Read the bytes from RAM and throw them into the buffer
		rowBuff = RAMReadByte(HEX_FILE_ADDRESS + RAMOffset);
		printf("0x%02X ", rowBuff);
    1824:	08 e4       	ldi	r16, 0x48	; 72
    1826:	16 e0       	ldi	r17, 0x06	; 6
	int i=0; 
	printf("Getting Row!\n"); 
	for(i=0; i<DATA_BEGIN; i++)
	{
		//Read the bytes from RAM and throw them into the buffer
		rowBuff = RAMReadByte(HEX_FILE_ADDRESS + RAMOffset);
    1828:	60 91 a5 0b 	lds	r22, 0x0BA5
    182c:	70 91 a6 0b 	lds	r23, 0x0BA6
    1830:	80 e0       	ldi	r24, 0x00	; 0
    1832:	90 e0       	ldi	r25, 0x00	; 0
    1834:	8e db       	rcall	.-2276   	; 0xf52 <RAMReadByte>
    1836:	d8 2e       	mov	r13, r24
		printf("0x%02X ", rowBuff);
    1838:	1f 92       	push	r1
    183a:	8f 93       	push	r24
    183c:	1f 93       	push	r17
    183e:	0f 93       	push	r16
    1840:	8d d6       	rcall	.+3354   	; 0x255c <printf>
		hexRow[i] = rowBuff; 
    1842:	d9 92       	st	Y+, r13
		RAMOffset++; 
    1844:	80 91 a5 0b 	lds	r24, 0x0BA5
    1848:	90 91 a6 0b 	lds	r25, 0x0BA6
    184c:	01 96       	adiw	r24, 0x01	; 1
    184e:	90 93 a6 0b 	sts	0x0BA6, r25
    1852:	80 93 a5 0b 	sts	0x0BA5, r24
char* getHexRow()
{
	char rowBuff; 
	int i=0; 
	printf("Getting Row!\n"); 
	for(i=0; i<DATA_BEGIN; i++)
    1856:	0f 90       	pop	r0
    1858:	0f 90       	pop	r0
    185a:	0f 90       	pop	r0
    185c:	0f 90       	pop	r0
    185e:	ce 15       	cp	r28, r14
    1860:	df 05       	cpc	r29, r15
    1862:	11 f7       	brne	.-60     	; 0x1828 <getHexRow+0x28>
		printf("0x%02X ", rowBuff);
		hexRow[i] = rowBuff; 
		RAMOffset++; 
	}
	
	uint8_t dataLength = hexRow[BYTE_COUNT];
    1864:	e0 90 74 0b 	lds	r14, 0x0B74
	printf("Data Length: %d\n", dataLength); 
    1868:	1f 92       	push	r1
    186a:	ef 92       	push	r14
    186c:	85 ef       	ldi	r24, 0xF5	; 245
    186e:	97 e0       	ldi	r25, 0x07	; 7
    1870:	9f 93       	push	r25
    1872:	8f 93       	push	r24
    1874:	73 d6       	rcall	.+3302   	; 0x255c <printf>
	//Add 1 to dataLength to catch the checkSum 
	for(i=0;i<dataLength+1;i++)
    1876:	0f 90       	pop	r0
    1878:	0f 90       	pop	r0
    187a:	0f 90       	pop	r0
    187c:	0f 90       	pop	r0
    187e:	c8 e7       	ldi	r28, 0x78	; 120
    1880:	db e0       	ldi	r29, 0x0B	; 11
    1882:	8e 2d       	mov	r24, r14
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	9c 01       	movw	r18, r24
    1888:	27 58       	subi	r18, 0x87	; 135
    188a:	34 4f       	sbci	r19, 0xF4	; 244
    188c:	79 01       	movw	r14, r18
	{
		rowBuff = RAMReadByte(HEX_FILE_ADDRESS + RAMOffset);
		printf("0x%02X ",rowBuff);
    188e:	08 e4       	ldi	r16, 0x48	; 72
    1890:	16 e0       	ldi	r17, 0x06	; 6
	uint8_t dataLength = hexRow[BYTE_COUNT];
	printf("Data Length: %d\n", dataLength); 
	//Add 1 to dataLength to catch the checkSum 
	for(i=0;i<dataLength+1;i++)
	{
		rowBuff = RAMReadByte(HEX_FILE_ADDRESS + RAMOffset);
    1892:	60 91 a5 0b 	lds	r22, 0x0BA5
    1896:	70 91 a6 0b 	lds	r23, 0x0BA6
    189a:	80 e0       	ldi	r24, 0x00	; 0
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	59 db       	rcall	.-2382   	; 0xf52 <RAMReadByte>
		printf("0x%02X ",rowBuff);
    18a0:	1f 92       	push	r1
    18a2:	8f 93       	push	r24
    18a4:	1f 93       	push	r17
    18a6:	0f 93       	push	r16
    18a8:	59 d6       	rcall	.+3250   	; 0x255c <printf>
		hexRow[DATA_BEGIN + i] = RAMReadByte(HEX_FILE_ADDRESS + RAMOffset);
    18aa:	60 91 a5 0b 	lds	r22, 0x0BA5
    18ae:	70 91 a6 0b 	lds	r23, 0x0BA6
    18b2:	80 e0       	ldi	r24, 0x00	; 0
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	4d db       	rcall	.-2406   	; 0xf52 <RAMReadByte>
    18b8:	89 93       	st	Y+, r24
		RAMOffset++; 
    18ba:	80 91 a5 0b 	lds	r24, 0x0BA5
    18be:	90 91 a6 0b 	lds	r25, 0x0BA6
    18c2:	01 96       	adiw	r24, 0x01	; 1
    18c4:	90 93 a6 0b 	sts	0x0BA6, r25
    18c8:	80 93 a5 0b 	sts	0x0BA5, r24
	}
	
	uint8_t dataLength = hexRow[BYTE_COUNT];
	printf("Data Length: %d\n", dataLength); 
	//Add 1 to dataLength to catch the checkSum 
	for(i=0;i<dataLength+1;i++)
    18cc:	0f 90       	pop	r0
    18ce:	0f 90       	pop	r0
    18d0:	0f 90       	pop	r0
    18d2:	0f 90       	pop	r0
    18d4:	ce 15       	cp	r28, r14
    18d6:	df 05       	cpc	r29, r15
    18d8:	e1 f6       	brne	.-72     	; 0x1892 <getHexRow+0x92>
		hexRow[DATA_BEGIN + i] = RAMReadByte(HEX_FILE_ADDRESS + RAMOffset);
		RAMOffset++; 
	}
	
	return hexRow; 
}
    18da:	83 e7       	ldi	r24, 0x73	; 115
    18dc:	9b e0       	ldi	r25, 0x0B	; 11
    18de:	df 91       	pop	r29
    18e0:	cf 91       	pop	r28
    18e2:	1f 91       	pop	r17
    18e4:	0f 91       	pop	r16
    18e6:	ff 90       	pop	r15
    18e8:	ef 90       	pop	r14
    18ea:	df 90       	pop	r13
    18ec:	08 95       	ret

000018ee <verifySignature>:
			return 0;  	
	}
	
	printf("Checksum Passed!\n"); 
	return 1; 
}
    18ee:	cf 92       	push	r12
    18f0:	df 92       	push	r13
    18f2:	ef 92       	push	r14
    18f4:	ff 92       	push	r15
    18f6:	0f 93       	push	r16
    18f8:	1f 93       	push	r17
    18fa:	cf 93       	push	r28
    18fc:	df 93       	push	r29
    18fe:	6b 01       	movw	r12, r22
    1900:	7c 01       	movw	r14, r24
    1902:	4b d2       	rcall	.+1174   	; 0x1d9a <ReadSignatureBytes>
    1904:	ec 01       	movw	r28, r24
    1906:	8a 81       	ldd	r24, Y+2	; 0x02
    1908:	1f 92       	push	r1
    190a:	8f 93       	push	r24
    190c:	89 81       	ldd	r24, Y+1	; 0x01
    190e:	1f 92       	push	r1
    1910:	8f 93       	push	r24
    1912:	88 81       	ld	r24, Y
    1914:	1f 92       	push	r1
    1916:	8f 93       	push	r24
    1918:	86 e0       	ldi	r24, 0x06	; 6
    191a:	98 e0       	ldi	r25, 0x08	; 8
    191c:	9f 93       	push	r25
    191e:	8f 93       	push	r24
    1920:	1d d6       	rcall	.+3130   	; 0x255c <printf>
    1922:	08 81       	ld	r16, Y
    1924:	10 e0       	ldi	r17, 0x00	; 0
    1926:	20 e0       	ldi	r18, 0x00	; 0
    1928:	30 e0       	ldi	r19, 0x00	; 0
    192a:	4e 2d       	mov	r20, r14
    192c:	50 e0       	ldi	r21, 0x00	; 0
    192e:	60 e0       	ldi	r22, 0x00	; 0
    1930:	70 e0       	ldi	r23, 0x00	; 0
    1932:	8d b7       	in	r24, 0x3d	; 61
    1934:	9e b7       	in	r25, 0x3e	; 62
    1936:	08 96       	adiw	r24, 0x08	; 8
    1938:	0f b6       	in	r0, 0x3f	; 63
    193a:	f8 94       	cli
    193c:	9e bf       	out	0x3e, r25	; 62
    193e:	0f be       	out	0x3f, r0	; 63
    1940:	8d bf       	out	0x3d, r24	; 61
    1942:	04 17       	cp	r16, r20
    1944:	15 07       	cpc	r17, r21
    1946:	26 07       	cpc	r18, r22
    1948:	37 07       	cpc	r19, r23
    194a:	e9 f4       	brne	.+58     	; 0x1986 <verifySignature+0x98>
    194c:	09 81       	ldd	r16, Y+1	; 0x01
    194e:	10 e0       	ldi	r17, 0x00	; 0
    1950:	20 e0       	ldi	r18, 0x00	; 0
    1952:	30 e0       	ldi	r19, 0x00	; 0
    1954:	4d 2d       	mov	r20, r13
    1956:	50 e0       	ldi	r21, 0x00	; 0
    1958:	60 e0       	ldi	r22, 0x00	; 0
    195a:	70 e0       	ldi	r23, 0x00	; 0
    195c:	04 17       	cp	r16, r20
    195e:	15 07       	cpc	r17, r21
    1960:	26 07       	cpc	r18, r22
    1962:	37 07       	cpc	r19, r23
    1964:	99 f4       	brne	.+38     	; 0x198c <verifySignature+0x9e>
    1966:	4a 81       	ldd	r20, Y+2	; 0x02
    1968:	50 e0       	ldi	r21, 0x00	; 0
    196a:	60 e0       	ldi	r22, 0x00	; 0
    196c:	70 e0       	ldi	r23, 0x00	; 0
    196e:	dd 24       	eor	r13, r13
    1970:	ee 24       	eor	r14, r14
    1972:	ff 24       	eor	r15, r15
    1974:	81 e0       	ldi	r24, 0x01	; 1
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	4c 15       	cp	r20, r12
    197a:	5d 05       	cpc	r21, r13
    197c:	6e 05       	cpc	r22, r14
    197e:	7f 05       	cpc	r23, r15
    1980:	39 f0       	breq	.+14     	; 0x1990 <verifySignature+0xa2>
    1982:	80 e0       	ldi	r24, 0x00	; 0
    1984:	05 c0       	rjmp	.+10     	; 0x1990 <verifySignature+0xa2>
    1986:	80 e0       	ldi	r24, 0x00	; 0
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	02 c0       	rjmp	.+4      	; 0x1990 <verifySignature+0xa2>
    198c:	80 e0       	ldi	r24, 0x00	; 0
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	df 91       	pop	r29
    1992:	cf 91       	pop	r28
    1994:	1f 91       	pop	r17
    1996:	0f 91       	pop	r16
    1998:	ff 90       	pop	r15
    199a:	ef 90       	pop	r14
    199c:	df 90       	pop	r13
    199e:	cf 90       	pop	r12
    19a0:	08 95       	ret

000019a2 <Program>:
    19a2:	cf 92       	push	r12
    19a4:	df 92       	push	r13
    19a6:	ef 92       	push	r14
    19a8:	ff 92       	push	r15
    19aa:	cf 93       	push	r28
    19ac:	df 93       	push	r29
    19ae:	6b 01       	movw	r12, r22
    19b0:	7c 01       	movw	r14, r24
    19b2:	db d0       	rcall	.+438    	; 0x1b6a <ApplyPullDowns>
    19b4:	bb d0       	rcall	.+374    	; 0x1b2c <ProgInit>
    19b6:	1f df       	rcall	.-450    	; 0x17f6 <resetRAMOffset>
    19b8:	c7 01       	movw	r24, r14
    19ba:	b6 01       	movw	r22, r12
    19bc:	ac d1       	rcall	.+856    	; 0x1d16 <EnableProgMode>
    19be:	c7 01       	movw	r24, r14
    19c0:	b6 01       	movw	r22, r12
    19c2:	95 df       	rcall	.-214    	; 0x18ee <verifySignature>
    19c4:	ec 01       	movw	r28, r24
    19c6:	00 97       	sbiw	r24, 0x00	; 0
    19c8:	09 f4       	brne	.+2      	; 0x19cc <Program+0x2a>
    19ca:	36 c0       	rjmp	.+108    	; 0x1a38 <Program+0x96>
    19cc:	88 e2       	ldi	r24, 0x28	; 40
    19ce:	98 e0       	ldi	r25, 0x08	; 8
    19d0:	db d5       	rcall	.+2998   	; 0x2588 <puts>
    19d2:	8e e3       	ldi	r24, 0x3E	; 62
    19d4:	98 e0       	ldi	r25, 0x08	; 8
    19d6:	d8 d5       	rcall	.+2992   	; 0x2588 <puts>
    19d8:	eb d3       	rcall	.+2006   	; 0x21b0 <ChipErase>
    19da:	89 e4       	ldi	r24, 0x49	; 73
    19dc:	98 e0       	ldi	r25, 0x08	; 8
    19de:	d4 d5       	rcall	.+2984   	; 0x2588 <puts>
    19e0:	88 e5       	ldi	r24, 0x58	; 88
    19e2:	98 e0       	ldi	r25, 0x08	; 8
    19e4:	d1 d5       	rcall	.+2978   	; 0x2588 <puts>
    19e6:	c7 01       	movw	r24, r14
    19e8:	b6 01       	movw	r22, r12
    19ea:	03 d4       	rcall	.+2054   	; 0x21f2 <ProgramFlash>
    19ec:	87 e6       	ldi	r24, 0x67	; 103
    19ee:	98 e0       	ldi	r25, 0x08	; 8
    19f0:	cb d5       	rcall	.+2966   	; 0x2588 <puts>
    19f2:	9a d2       	rcall	.+1332   	; 0x1f28 <ReadFlash>
    19f4:	86 e7       	ldi	r24, 0x76	; 118
    19f6:	98 e0       	ldi	r25, 0x08	; 8
    19f8:	c7 d5       	rcall	.+2958   	; 0x2588 <puts>
    19fa:	06 d3       	rcall	.+1548   	; 0x2008 <VerifyFlash>
    19fc:	ec 01       	movw	r28, r24
    19fe:	00 97       	sbiw	r24, 0x00	; 0
    1a00:	49 f0       	breq	.+18     	; 0x1a14 <Program+0x72>
    1a02:	83 e8       	ldi	r24, 0x83	; 131
    1a04:	98 e0       	ldi	r25, 0x08	; 8
    1a06:	c0 d5       	rcall	.+2944   	; 0x2588 <puts>
    1a08:	d1 d4       	rcall	.+2466   	; 0x23ac <ExitParallelProgrammingMode>
    1a0a:	a1 98       	cbi	0x14, 1	; 20
    1a0c:	a0 9a       	sbi	0x14, 0	; 20
    1a0e:	c1 e0       	ldi	r28, 0x01	; 1
    1a10:	d0 e0       	ldi	r29, 0x00	; 0
    1a12:	23 c0       	rjmp	.+70     	; 0x1a5a <Program+0xb8>
    1a14:	8a e9       	ldi	r24, 0x9A	; 154
    1a16:	98 e0       	ldi	r25, 0x08	; 8
    1a18:	b7 d5       	rcall	.+2926   	; 0x2588 <puts>
    1a1a:	c8 d4       	rcall	.+2448   	; 0x23ac <ExitParallelProgrammingMode>
    1a1c:	a1 98       	cbi	0x14, 1	; 20
    1a1e:	a2 9a       	sbi	0x14, 2	; 20
    1a20:	2f e7       	ldi	r18, 0x7F	; 127
    1a22:	8a e1       	ldi	r24, 0x1A	; 26
    1a24:	96 e0       	ldi	r25, 0x06	; 6
    1a26:	21 50       	subi	r18, 0x01	; 1
    1a28:	80 40       	sbci	r24, 0x00	; 0
    1a2a:	90 40       	sbci	r25, 0x00	; 0
    1a2c:	e1 f7       	brne	.-8      	; 0x1a26 <Program+0x84>
    1a2e:	00 c0       	rjmp	.+0      	; 0x1a30 <Program+0x8e>
    1a30:	00 00       	nop
    1a32:	a2 98       	cbi	0x14, 2	; 20
    1a34:	a0 9a       	sbi	0x14, 0	; 20
    1a36:	11 c0       	rjmp	.+34     	; 0x1a5a <Program+0xb8>
    1a38:	8e ea       	ldi	r24, 0xAE	; 174
    1a3a:	98 e0       	ldi	r25, 0x08	; 8
    1a3c:	a5 d5       	rcall	.+2890   	; 0x2588 <puts>
    1a3e:	b6 d4       	rcall	.+2412   	; 0x23ac <ExitParallelProgrammingMode>
    1a40:	a2 9a       	sbi	0x14, 2	; 20
    1a42:	2f e7       	ldi	r18, 0x7F	; 127
    1a44:	8a e1       	ldi	r24, 0x1A	; 26
    1a46:	96 e0       	ldi	r25, 0x06	; 6
    1a48:	21 50       	subi	r18, 0x01	; 1
    1a4a:	80 40       	sbci	r24, 0x00	; 0
    1a4c:	90 40       	sbci	r25, 0x00	; 0
    1a4e:	e1 f7       	brne	.-8      	; 0x1a48 <Program+0xa6>
    1a50:	00 c0       	rjmp	.+0      	; 0x1a52 <Program+0xb0>
    1a52:	00 00       	nop
    1a54:	a1 98       	cbi	0x14, 1	; 20
    1a56:	a2 98       	cbi	0x14, 2	; 20
    1a58:	a0 9a       	sbi	0x14, 0	; 20
    1a5a:	ce 01       	movw	r24, r28
    1a5c:	df 91       	pop	r29
    1a5e:	cf 91       	pop	r28
    1a60:	ff 90       	pop	r15
    1a62:	ef 90       	pop	r14
    1a64:	df 90       	pop	r13
    1a66:	cf 90       	pop	r12
    1a68:	08 95       	ret

00001a6a <compressFile>:

//Converts ASCII to Hex in external RAM 
//Length should be the transmission length given from the Wi-Fi module 
int compressFile(uint16_t length)
{
    1a6a:	af 92       	push	r10
    1a6c:	bf 92       	push	r11
    1a6e:	df 92       	push	r13
    1a70:	ef 92       	push	r14
    1a72:	ff 92       	push	r15
    1a74:	1f 93       	push	r17
    1a76:	cf 93       	push	r28
    1a78:	df 93       	push	r29
    1a7a:	7c 01       	movw	r14, r24
	uint8_t upperNibble; 
	uint8_t lowerNibble; 
	uint8_t hexVal; 
	uint16_t j = 0; 
	
	printf("Length: %d\n", length); 
    1a7c:	ff 92       	push	r15
    1a7e:	8f 93       	push	r24
    1a80:	8a ef       	ldi	r24, 0xFA	; 250
    1a82:	97 e0       	ldi	r25, 0x07	; 7
    1a84:	9f 93       	push	r25
    1a86:	8f 93       	push	r24
    1a88:	69 d5       	rcall	.+2770   	; 0x255c <printf>
	
	for(int i=0; i<length; i++)
    1a8a:	0f 90       	pop	r0
    1a8c:	0f 90       	pop	r0
    1a8e:	0f 90       	pop	r0
    1a90:	0f 90       	pop	r0
    1a92:	e1 14       	cp	r14, r1
    1a94:	f1 04       	cpc	r15, r1
    1a96:	09 f4       	brne	.+2      	; 0x1a9a <compressFile+0x30>
    1a98:	3e c0       	rjmp	.+124    	; 0x1b16 <compressFile+0xac>
    1a9a:	c0 e0       	ldi	r28, 0x00	; 0
    1a9c:	d0 e0       	ldi	r29, 0x00	; 0
{
	uint8_t buff;
	uint8_t upperNibble; 
	uint8_t lowerNibble; 
	uint8_t hexVal; 
	uint16_t j = 0; 
    1a9e:	a1 2c       	mov	r10, r1
    1aa0:	b1 2c       	mov	r11, r1
	
	printf("Length: %d\n", length); 
	
	for(int i=0; i<length; i++)
	{
		upperNibble = RAMReadByte(HEX_FILE_ADDRESS + i);
    1aa2:	be 01       	movw	r22, r28
    1aa4:	88 27       	eor	r24, r24
    1aa6:	77 fd       	sbrc	r23, 7
    1aa8:	80 95       	com	r24
    1aaa:	98 2f       	mov	r25, r24
    1aac:	52 da       	rcall	.-2908   	; 0xf52 <RAMReadByte>
    1aae:	18 2f       	mov	r17, r24
		//If it's a colon, leave it alone as it is the start code 
		if(upperNibble == ':'){
    1ab0:	8a 33       	cpi	r24, 0x3A	; 58
    1ab2:	49 f4       	brne	.+18     	; 0x1ac6 <compressFile+0x5c>
			RAMWriteByte(0x3A, HEX_FILE_ADDRESS + j);
    1ab4:	a5 01       	movw	r20, r10
    1ab6:	60 e0       	ldi	r22, 0x00	; 0
    1ab8:	70 e0       	ldi	r23, 0x00	; 0
    1aba:	8a e3       	ldi	r24, 0x3A	; 58
    1abc:	31 da       	rcall	.-2974   	; 0xf20 <RAMWriteByte>
			j++;
    1abe:	8f ef       	ldi	r24, 0xFF	; 255
    1ac0:	a8 1a       	sub	r10, r24
    1ac2:	b8 0a       	sbc	r11, r24
			continue;
    1ac4:	24 c0       	rjmp	.+72     	; 0x1b0e <compressFile+0xa4>
		}
		//Discard any carriage returns or line feeds 
		else if(upperNibble == '\r' || upperNibble == '\n'){
    1ac6:	8d 30       	cpi	r24, 0x0D	; 13
    1ac8:	11 f1       	breq	.+68     	; 0x1b0e <compressFile+0xa4>
    1aca:	8a 30       	cpi	r24, 0x0A	; 10
    1acc:	01 f1       	breq	.+64     	; 0x1b0e <compressFile+0xa4>
			//i++; 
			continue; 
		}
		
		lowerNibble = RAMReadByte(HEX_FILE_ADDRESS + 1 + i);
    1ace:	21 96       	adiw	r28, 0x01	; 1
    1ad0:	be 01       	movw	r22, r28
    1ad2:	88 27       	eor	r24, r24
    1ad4:	77 fd       	sbrc	r23, 7
    1ad6:	80 95       	com	r24
    1ad8:	98 2f       	mov	r25, r24
    1ada:	3b da       	rcall	.-2954   	; 0xf52 <RAMReadByte>
		//if(i<600)
			//printf("%d...Upper: 0x%02x, Lower: 0x%02x\n", i, upperNibble, lowerNibble);
		
		if(upperNibble > 0x39)
    1adc:	1a 33       	cpi	r17, 0x3A	; 58
    1ade:	18 f0       	brcs	.+6      	; 0x1ae6 <compressFile+0x7c>
			upperNibble -= 0x37; 
    1ae0:	99 ec       	ldi	r25, 0xC9	; 201
    1ae2:	91 0f       	add	r25, r17
    1ae4:	02 c0       	rjmp	.+4      	; 0x1aea <compressFile+0x80>
		else
			upperNibble &= 0x0F;
    1ae6:	91 2f       	mov	r25, r17
    1ae8:	9f 70       	andi	r25, 0x0F	; 15
			
		upperNibble <<= 4;  
    1aea:	d9 2e       	mov	r13, r25
    1aec:	dd 0c       	add	r13, r13
    1aee:	dd 0c       	add	r13, r13
    1af0:	dd 0c       	add	r13, r13
    1af2:	dd 0c       	add	r13, r13
		hexVal = upperNibble; 
		
		if(lowerNibble > 0x39)
    1af4:	8a 33       	cpi	r24, 0x3A	; 58
    1af6:	10 f0       	brcs	.+4      	; 0x1afc <compressFile+0x92>
			lowerNibble -= 0x37; 
    1af8:	87 53       	subi	r24, 0x37	; 55
    1afa:	01 c0       	rjmp	.+2      	; 0x1afe <compressFile+0x94>
		else
			lowerNibble &= 0x0F;
    1afc:	8f 70       	andi	r24, 0x0F	; 15
		hexVal |= lowerNibble; 
		//if(i<600)
			//printf("%d...Hex: 0x%02x\n\n", j, hexVal);
		
		//Backfill the already converted ASCII value's addresses with the new hex value 
		RAMWriteByte(hexVal, HEX_FILE_ADDRESS + j); 
    1afe:	a5 01       	movw	r20, r10
    1b00:	60 e0       	ldi	r22, 0x00	; 0
    1b02:	70 e0       	ldi	r23, 0x00	; 0
    1b04:	8d 29       	or	r24, r13
    1b06:	0c da       	rcall	.-3048   	; 0xf20 <RAMWriteByte>
		j++;
    1b08:	8f ef       	ldi	r24, 0xFF	; 255
    1b0a:	a8 1a       	sub	r10, r24
    1b0c:	b8 0a       	sbc	r11, r24
	uint8_t hexVal; 
	uint16_t j = 0; 
	
	printf("Length: %d\n", length); 
	
	for(int i=0; i<length; i++)
    1b0e:	21 96       	adiw	r28, 0x01	; 1
    1b10:	ce 15       	cp	r28, r14
    1b12:	df 05       	cpc	r29, r15
    1b14:	30 f2       	brcs	.-116    	; 0x1aa2 <compressFile+0x38>
		//hence why the for loop does not have i+=2 
		i++;  
	}
	
	return 1; 
    1b16:	81 e0       	ldi	r24, 0x01	; 1
    1b18:	90 e0       	ldi	r25, 0x00	; 0
    1b1a:	df 91       	pop	r29
    1b1c:	cf 91       	pop	r28
    1b1e:	1f 91       	pop	r17
    1b20:	ff 90       	pop	r15
    1b22:	ef 90       	pop	r14
    1b24:	df 90       	pop	r13
    1b26:	bf 90       	pop	r11
    1b28:	af 90       	pop	r10
    1b2a:	08 95       	ret

00001b2c <ProgInit>:


void ProgInit(void)
{
	//SPI_Switching_Circuitry_Init(); 
	SPI_FPGA_Init();
    1b2c:	0e d9       	rcall	.-3556   	; 0xd4a <SPI_FPGA_Init>
	
	voltageControlInit();
    1b2e:	15 db       	rcall	.-2518   	; 0x115a <voltageControlInit>
	setVpp(VPP_12V);
    1b30:	81 e0       	ldi	r24, 0x01	; 1
    1b32:	33 db       	rcall	.-2458   	; 0x119a <setVpp>
	setVcc(VCC_5V);
    1b34:	84 e0       	ldi	r24, 0x04	; 4
    1b36:	23 db       	rcall	.-2490   	; 0x117e <setVcc>
	setVLogic(VL_5V);
    1b38:	86 e0       	ldi	r24, 0x06	; 6
    1b3a:	41 db       	rcall	.-2430   	; 0x11be <setVLogic>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1b3c:	8f e0       	ldi	r24, 0x0F	; 15
    1b3e:	97 e2       	ldi	r25, 0x27	; 39
    1b40:	01 97       	sbiw	r24, 0x01	; 1
    1b42:	f1 f7       	brne	.-4      	; 0x1b40 <ProgInit+0x14>
    1b44:	00 c0       	rjmp	.+0      	; 0x1b46 <ProgInit+0x1a>
    1b46:	00 00       	nop
	_delay_ms(5);
	enableVccRegulator();
    1b48:	16 db       	rcall	.-2516   	; 0x1176 <enableVccRegulator>
	enableVLogic();
    1b4a:	35 db       	rcall	.-2454   	; 0x11b6 <enableVLogic>
    1b4c:	8f e4       	ldi	r24, 0x4F	; 79
    1b4e:	93 ec       	ldi	r25, 0xC3	; 195
    1b50:	01 97       	sbiw	r24, 0x01	; 1
    1b52:	f1 f7       	brne	.-4      	; 0x1b50 <ProgInit+0x24>
    1b54:	00 c0       	rjmp	.+0      	; 0x1b56 <ProgInit+0x2a>
    1b56:	00 00       	nop
	_delay_ms(25);
	//Setting up Control lines
	CONTROL_DDR |= ( (1<<XTAL1) | (1<<OE) | (1<<WR) | (1<<BS1_PAGEL) | (1<<XA0) | (1<<XA1_BS2) | (1<<PAGEL) | (1<<BS2));
    1b58:	8a b1       	in	r24, 0x0a	; 10
    1b5a:	8f ef       	ldi	r24, 0xFF	; 255
    1b5c:	8a b9       	out	0x0a, r24	; 10
	RDY_BSY_DDR &= ~(1<<RDY_BSY);
    1b5e:	38 98       	cbi	0x07, 0	; 7
	DATA_DDR = 0xFF;
    1b60:	80 93 0a 01 	sts	0x010A, r24
	
	//LED_DDR |= ((1<<LED_Green) | (1<<LED_Yellow) | (1<<LED_Red));
	LED_PORT &= ~(1<<LED_Green);
    1b64:	a0 98       	cbi	0x14, 0	; 20
	LED_PORT |= (1<<LED_Yellow);
    1b66:	a1 9a       	sbi	0x14, 1	; 20
    1b68:	08 95       	ret

00001b6a <ApplyPullDowns>:
}

void ApplyPullDowns(void)
{
	SPI_Switching_Circuitry_Init();
    1b6a:	f8 d9       	rcall	.-3088   	; 0xf5c <SPI_Switching_Circuitry_Init>
	
	SPI_Switching_Circuitry_Write(0xFF); //Pull Downs
    1b6c:	8f ef       	ldi	r24, 0xFF	; 255
    1b6e:	04 da       	rcall	.-3064   	; 0xf78 <SPI_Switching_Circuitry_Write>
	SPI_Switching_Circuitry_Write(0xFF);
    1b70:	8f ef       	ldi	r24, 0xFF	; 255
    1b72:	02 da       	rcall	.-3068   	; 0xf78 <SPI_Switching_Circuitry_Write>
	SPI_Switching_Circuitry_Write(0xFF);
    1b74:	8f ef       	ldi	r24, 0xFF	; 255
    1b76:	00 da       	rcall	.-3072   	; 0xf78 <SPI_Switching_Circuitry_Write>
	SPI_Switching_Circuitry_Write(0xFF);
    1b78:	8f ef       	ldi	r24, 0xFF	; 255
    1b7a:	fe d9       	rcall	.-3076   	; 0xf78 <SPI_Switching_Circuitry_Write>
	SPI_Switching_Circuitry_Write(0xFF);
    1b7c:	8f ef       	ldi	r24, 0xFF	; 255
    1b7e:	fc d9       	rcall	.-3080   	; 0xf78 <SPI_Switching_Circuitry_Write>
	
	SPI_Switching_Circuitry_Write(0x00); //GND
    1b80:	80 e0       	ldi	r24, 0x00	; 0
    1b82:	fa d9       	rcall	.-3084   	; 0xf78 <SPI_Switching_Circuitry_Write>
	SPI_Switching_Circuitry_Write(0x00);
    1b84:	80 e0       	ldi	r24, 0x00	; 0
    1b86:	f8 d9       	rcall	.-3088   	; 0xf78 <SPI_Switching_Circuitry_Write>
	SPI_Switching_Circuitry_Write(0x00);
    1b88:	80 e0       	ldi	r24, 0x00	; 0
    1b8a:	f6 d9       	rcall	.-3092   	; 0xf78 <SPI_Switching_Circuitry_Write>
	SPI_Switching_Circuitry_Write(0x00);
    1b8c:	80 e0       	ldi	r24, 0x00	; 0
    1b8e:	f4 d9       	rcall	.-3096   	; 0xf78 <SPI_Switching_Circuitry_Write>
	SPI_Switching_Circuitry_Write(0x00);
    1b90:	80 e0       	ldi	r24, 0x00	; 0
    1b92:	f2 d9       	rcall	.-3100   	; 0xf78 <SPI_Switching_Circuitry_Write>
	
	SPI_Switching_Circuitry_Write(0x00); //Pull Ups
    1b94:	80 e0       	ldi	r24, 0x00	; 0
    1b96:	f0 d9       	rcall	.-3104   	; 0xf78 <SPI_Switching_Circuitry_Write>
	SPI_Switching_Circuitry_Write(0x00);
    1b98:	80 e0       	ldi	r24, 0x00	; 0
    1b9a:	ee d9       	rcall	.-3108   	; 0xf78 <SPI_Switching_Circuitry_Write>
	SPI_Switching_Circuitry_Write(0x00);
    1b9c:	80 e0       	ldi	r24, 0x00	; 0
    1b9e:	ec d9       	rcall	.-3112   	; 0xf78 <SPI_Switching_Circuitry_Write>
	SPI_Switching_Circuitry_Write(0x00);
    1ba0:	80 e0       	ldi	r24, 0x00	; 0
    1ba2:	ea d9       	rcall	.-3116   	; 0xf78 <SPI_Switching_Circuitry_Write>
	SPI_Switching_Circuitry_Write(0x00);
    1ba4:	80 e0       	ldi	r24, 0x00	; 0
    1ba6:	e8 d9       	rcall	.-3120   	; 0xf78 <SPI_Switching_Circuitry_Write>
	
	SPI_Switching_Circuitry_Write(0x00); //VCC
    1ba8:	80 e0       	ldi	r24, 0x00	; 0
    1baa:	e6 d9       	rcall	.-3124   	; 0xf78 <SPI_Switching_Circuitry_Write>
	SPI_Switching_Circuitry_Write(0x00);
    1bac:	80 e0       	ldi	r24, 0x00	; 0
    1bae:	e4 d9       	rcall	.-3128   	; 0xf78 <SPI_Switching_Circuitry_Write>
	SPI_Switching_Circuitry_Write(0x00);
    1bb0:	80 e0       	ldi	r24, 0x00	; 0
    1bb2:	e2 d9       	rcall	.-3132   	; 0xf78 <SPI_Switching_Circuitry_Write>
	SPI_Switching_Circuitry_Write(0x00);
    1bb4:	80 e0       	ldi	r24, 0x00	; 0
    1bb6:	e0 d9       	rcall	.-3136   	; 0xf78 <SPI_Switching_Circuitry_Write>
	SPI_Switching_Circuitry_Write(0x00);
    1bb8:	80 e0       	ldi	r24, 0x00	; 0
    1bba:	de d9       	rcall	.-3140   	; 0xf78 <SPI_Switching_Circuitry_Write>
	
	SPI_Switching_Circuitry_Write(0x00); //VPP
    1bbc:	80 e0       	ldi	r24, 0x00	; 0
    1bbe:	dc d9       	rcall	.-3144   	; 0xf78 <SPI_Switching_Circuitry_Write>
	SPI_Switching_Circuitry_Write(0x00);
    1bc0:	80 e0       	ldi	r24, 0x00	; 0
    1bc2:	da d9       	rcall	.-3148   	; 0xf78 <SPI_Switching_Circuitry_Write>
	SPI_Switching_Circuitry_Write(0x00);
    1bc4:	80 e0       	ldi	r24, 0x00	; 0
    1bc6:	d8 d9       	rcall	.-3152   	; 0xf78 <SPI_Switching_Circuitry_Write>
	SPI_Switching_Circuitry_Write(0x00);
    1bc8:	80 e0       	ldi	r24, 0x00	; 0
    1bca:	d6 d9       	rcall	.-3156   	; 0xf78 <SPI_Switching_Circuitry_Write>
	SPI_Switching_Circuitry_Write(0x00);
    1bcc:	80 e0       	ldi	r24, 0x00	; 0
    1bce:	d4 d9       	rcall	.-3160   	; 0xf78 <SPI_Switching_Circuitry_Write>
	
	SR_CNTRL_PORT |= (1<<SRCS);
    1bd0:	e5 e0       	ldi	r30, 0x05	; 5
    1bd2:	f1 e0       	ldi	r31, 0x01	; 1
    1bd4:	80 81       	ld	r24, Z
    1bd6:	80 61       	ori	r24, 0x10	; 16
    1bd8:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1bda:	85 e3       	ldi	r24, 0x35	; 53
    1bdc:	8a 95       	dec	r24
    1bde:	f1 f7       	brne	.-4      	; 0x1bdc <ApplyPullDowns+0x72>
    1be0:	00 00       	nop
	_delay_us(20);
	SR_CNTRL_PORT &= ~(1<<SRCS);
    1be2:	80 81       	ld	r24, Z
    1be4:	8f 7e       	andi	r24, 0xEF	; 239
    1be6:	80 83       	st	Z, r24
    1be8:	08 95       	ret

00001bea <LoadCommand>:
}

void LoadCommand(char command)
{
	//A: Load Command "Program Flash"
	CONTROL_PORT |= 1<<XA1_BS2;
    1bea:	5d 9a       	sbi	0x0b, 5	; 11
	CONTROL_PORT &= ~(1<<XA0);
    1bec:	5c 98       	cbi	0x0b, 4	; 11
	CONTROL_PORT &= ~(1<<BS1_PAGEL);
    1bee:	5b 98       	cbi	0x0b, 3	; 11
	DATA_PORT = command;
    1bf0:	80 93 0b 01 	sts	0x010B, r24
    1bf4:	82 e4       	ldi	r24, 0x42	; 66
    1bf6:	8a 95       	dec	r24
    1bf8:	f1 f7       	brne	.-4      	; 0x1bf6 <LoadCommand+0xc>
    1bfa:	00 c0       	rjmp	.+0      	; 0x1bfc <LoadCommand+0x12>
	_delay_us(25);
	CONTROL_PORT |= 1<<XTAL1;
    1bfc:	58 9a       	sbi	0x0b, 0	; 11
    1bfe:	82 e4       	ldi	r24, 0x42	; 66
    1c00:	8a 95       	dec	r24
    1c02:	f1 f7       	brne	.-4      	; 0x1c00 <LoadCommand+0x16>
    1c04:	00 c0       	rjmp	.+0      	; 0x1c06 <LoadCommand+0x1c>
	_delay_us(25);
	CONTROL_PORT &= ~(1<<XTAL1);
    1c06:	58 98       	cbi	0x0b, 0	; 11
    1c08:	82 e4       	ldi	r24, 0x42	; 66
    1c0a:	8a 95       	dec	r24
    1c0c:	f1 f7       	brne	.-4      	; 0x1c0a <LoadCommand+0x20>
    1c0e:	00 c0       	rjmp	.+0      	; 0x1c10 <LoadCommand+0x26>
    1c10:	08 95       	ret

00001c12 <WriteWord>:
}

void WriteWord(uint16_t data)
{
	//C: Load Data Low Byte
	CONTROL_PORT &= ~(1<<XA1_BS2);
    1c12:	5d 98       	cbi	0x0b, 5	; 11
	CONTROL_PORT |= 1<<XA0;
    1c14:	5c 9a       	sbi	0x0b, 4	; 11
	DATA_PORT = data & 0x00FF; 
    1c16:	80 93 0b 01 	sts	0x010B, r24
    1c1a:	82 e4       	ldi	r24, 0x42	; 66
    1c1c:	8a 95       	dec	r24
    1c1e:	f1 f7       	brne	.-4      	; 0x1c1c <WriteWord+0xa>
    1c20:	00 c0       	rjmp	.+0      	; 0x1c22 <WriteWord+0x10>
	_delay_us(25);
	CONTROL_PORT |= 1<<XTAL1;
    1c22:	58 9a       	sbi	0x0b, 0	; 11
    1c24:	82 e4       	ldi	r24, 0x42	; 66
    1c26:	8a 95       	dec	r24
    1c28:	f1 f7       	brne	.-4      	; 0x1c26 <WriteWord+0x14>
    1c2a:	00 c0       	rjmp	.+0      	; 0x1c2c <WriteWord+0x1a>
	_delay_us(25);
	CONTROL_PORT &= ~(1<<XTAL1);
    1c2c:	58 98       	cbi	0x0b, 0	; 11
    1c2e:	82 e4       	ldi	r24, 0x42	; 66
    1c30:	8a 95       	dec	r24
    1c32:	f1 f7       	brne	.-4      	; 0x1c30 <WriteWord+0x1e>
    1c34:	00 c0       	rjmp	.+0      	; 0x1c36 <WriteWord+0x24>
	_delay_us(25);
	
	//D: Load Data High Byte
	CONTROL_PORT |= 1<<BS1_PAGEL;
    1c36:	5b 9a       	sbi	0x0b, 3	; 11
	CONTROL_PORT &= ~(1<<XA1_BS2);
    1c38:	5d 98       	cbi	0x0b, 5	; 11
	CONTROL_PORT |= 1<<XA0;
    1c3a:	5c 9a       	sbi	0x0b, 4	; 11
	DATA_PORT = ((data & 0xFF00) >> 8); 
    1c3c:	90 93 0b 01 	sts	0x010B, r25
    1c40:	82 e4       	ldi	r24, 0x42	; 66
    1c42:	8a 95       	dec	r24
    1c44:	f1 f7       	brne	.-4      	; 0x1c42 <WriteWord+0x30>
    1c46:	00 c0       	rjmp	.+0      	; 0x1c48 <WriteWord+0x36>
	_delay_us(25);
	CONTROL_PORT |= 1<<XTAL1;
    1c48:	58 9a       	sbi	0x0b, 0	; 11
    1c4a:	82 e4       	ldi	r24, 0x42	; 66
    1c4c:	8a 95       	dec	r24
    1c4e:	f1 f7       	brne	.-4      	; 0x1c4c <WriteWord+0x3a>
    1c50:	00 c0       	rjmp	.+0      	; 0x1c52 <WriteWord+0x40>
	_delay_us(25);
	CONTROL_PORT &= ~(1<<XTAL1);
    1c52:	58 98       	cbi	0x0b, 0	; 11
    1c54:	82 e4       	ldi	r24, 0x42	; 66
    1c56:	8a 95       	dec	r24
    1c58:	f1 f7       	brne	.-4      	; 0x1c56 <WriteWord+0x44>
    1c5a:	00 c0       	rjmp	.+0      	; 0x1c5c <WriteWord+0x4a>
    1c5c:	08 95       	ret

00001c5e <LoadLowAddress>:
}

void LoadLowAddress(uint16_t address)
{
	//B: Load Address Low Byte
	CONTROL_PORT &= ~(1<<XA1_BS2);
    1c5e:	5d 98       	cbi	0x0b, 5	; 11
	CONTROL_PORT &= ~(1<<XA0);
    1c60:	5c 98       	cbi	0x0b, 4	; 11
	CONTROL_PORT &= ~(1<<BS1_PAGEL);
    1c62:	5b 98       	cbi	0x0b, 3	; 11
	CONTROL_PORT &= ~(1<<BS2);
    1c64:	5f 98       	cbi	0x0b, 7	; 11
	DATA_PORT = (address & 0x00FF);
    1c66:	80 93 0b 01 	sts	0x010B, r24
    1c6a:	82 e4       	ldi	r24, 0x42	; 66
    1c6c:	8a 95       	dec	r24
    1c6e:	f1 f7       	brne	.-4      	; 0x1c6c <LoadLowAddress+0xe>
    1c70:	00 c0       	rjmp	.+0      	; 0x1c72 <LoadLowAddress+0x14>
	_delay_us(25);
	CONTROL_PORT |= 1<<XTAL1;
    1c72:	58 9a       	sbi	0x0b, 0	; 11
    1c74:	82 e4       	ldi	r24, 0x42	; 66
    1c76:	8a 95       	dec	r24
    1c78:	f1 f7       	brne	.-4      	; 0x1c76 <LoadLowAddress+0x18>
    1c7a:	00 c0       	rjmp	.+0      	; 0x1c7c <LoadLowAddress+0x1e>
	_delay_us(25);
	CONTROL_PORT &= ~(1<<XTAL1);
    1c7c:	58 98       	cbi	0x0b, 0	; 11
    1c7e:	82 e4       	ldi	r24, 0x42	; 66
    1c80:	8a 95       	dec	r24
    1c82:	f1 f7       	brne	.-4      	; 0x1c80 <LoadLowAddress+0x22>
    1c84:	00 c0       	rjmp	.+0      	; 0x1c86 <LoadLowAddress+0x28>
    1c86:	08 95       	ret

00001c88 <LoadHighAddress>:
}

void LoadHighAddress(uint16_t address)
{
	//F: Load Address High Byte
	CONTROL_PORT &= ~(1<<XA1_BS2);
    1c88:	5d 98       	cbi	0x0b, 5	; 11
	CONTROL_PORT &= ~(1<<XA0);
    1c8a:	5c 98       	cbi	0x0b, 4	; 11
	CONTROL_PORT &= ~(1<<BS2);
    1c8c:	5f 98       	cbi	0x0b, 7	; 11
	CONTROL_PORT |= 1<<BS1_PAGEL;
    1c8e:	5b 9a       	sbi	0x0b, 3	; 11
	DATA_PORT = ((address & 0xFF00) >> 8);
    1c90:	90 93 0b 01 	sts	0x010B, r25
    1c94:	82 e4       	ldi	r24, 0x42	; 66
    1c96:	8a 95       	dec	r24
    1c98:	f1 f7       	brne	.-4      	; 0x1c96 <LoadHighAddress+0xe>
    1c9a:	00 c0       	rjmp	.+0      	; 0x1c9c <LoadHighAddress+0x14>
	_delay_us(25);
	CONTROL_PORT |= 1<<XTAL1;
    1c9c:	58 9a       	sbi	0x0b, 0	; 11
    1c9e:	82 e4       	ldi	r24, 0x42	; 66
    1ca0:	8a 95       	dec	r24
    1ca2:	f1 f7       	brne	.-4      	; 0x1ca0 <LoadHighAddress+0x18>
    1ca4:	00 c0       	rjmp	.+0      	; 0x1ca6 <LoadHighAddress+0x1e>
	_delay_us(25);
	CONTROL_PORT &= ~(1<<XTAL1);
    1ca6:	58 98       	cbi	0x0b, 0	; 11
    1ca8:	82 e4       	ldi	r24, 0x42	; 66
    1caa:	8a 95       	dec	r24
    1cac:	f1 f7       	brne	.-4      	; 0x1caa <LoadHighAddress+0x22>
    1cae:	00 c0       	rjmp	.+0      	; 0x1cb0 <LoadHighAddress+0x28>
    1cb0:	08 95       	ret

00001cb2 <LatchData>:
	_delay_us(25);
}

void LatchData(void)
{
	CONTROL_PORT |= (1<<BS1_PAGEL);
    1cb2:	5b 9a       	sbi	0x0b, 3	; 11
    1cb4:	82 e4       	ldi	r24, 0x42	; 66
    1cb6:	8a 95       	dec	r24
    1cb8:	f1 f7       	brne	.-4      	; 0x1cb6 <LatchData+0x4>
    1cba:	00 c0       	rjmp	.+0      	; 0x1cbc <LatchData+0xa>
	_delay_us(25);
	CONTROL_PORT |= (1<<PAGEL);
    1cbc:	5e 9a       	sbi	0x0b, 6	; 11
    1cbe:	82 e4       	ldi	r24, 0x42	; 66
    1cc0:	8a 95       	dec	r24
    1cc2:	f1 f7       	brne	.-4      	; 0x1cc0 <LatchData+0xe>
    1cc4:	00 c0       	rjmp	.+0      	; 0x1cc6 <LatchData+0x14>
	_delay_us(25);
	CONTROL_PORT &= ~(1<<PAGEL);
    1cc6:	5e 98       	cbi	0x0b, 6	; 11
    1cc8:	82 e4       	ldi	r24, 0x42	; 66
    1cca:	8a 95       	dec	r24
    1ccc:	f1 f7       	brne	.-4      	; 0x1cca <LatchData+0x18>
    1cce:	00 c0       	rjmp	.+0      	; 0x1cd0 <LatchData+0x1e>
    1cd0:	08 95       	ret

00001cd2 <ProgramPage>:
}

void ProgramPage(void)
{
	//G: Program Page
	CONTROL_PORT &= ~(1<<BS2);
    1cd2:	5f 98       	cbi	0x0b, 7	; 11
	CONTROL_PORT &= ~(1<<BS1_PAGEL);
    1cd4:	5b 98       	cbi	0x0b, 3	; 11
	CONTROL_PORT &= ~(1<<WR);
    1cd6:	5a 98       	cbi	0x0b, 2	; 11
    1cd8:	82 e4       	ldi	r24, 0x42	; 66
    1cda:	8a 95       	dec	r24
    1cdc:	f1 f7       	brne	.-4      	; 0x1cda <ProgramPage+0x8>
    1cde:	00 c0       	rjmp	.+0      	; 0x1ce0 <ProgramPage+0xe>
	_delay_us(25);
	CONTROL_PORT |= 1<<WR;
    1ce0:	5a 9a       	sbi	0x0b, 2	; 11
    1ce2:	82 e4       	ldi	r24, 0x42	; 66
    1ce4:	8a 95       	dec	r24
    1ce6:	f1 f7       	brne	.-4      	; 0x1ce4 <ProgramPage+0x12>
    1ce8:	00 c0       	rjmp	.+0      	; 0x1cea <ProgramPage+0x18>
	_delay_us(25);
	while(!(RDY_BSY_In & (1<<RDY_BSY)));
    1cea:	30 9b       	sbis	0x06, 0	; 6
    1cec:	fe cf       	rjmp	.-4      	; 0x1cea <ProgramPage+0x18>
}
    1cee:	08 95       	ret

00001cf0 <EndPageProgramming>:

void EndPageProgramming(void)
{
	//I: End Page Programming
	CONTROL_PORT |= 1<<XA1_BS2;
    1cf0:	5d 9a       	sbi	0x0b, 5	; 11
	CONTROL_PORT &= ~(1<<XA0);
    1cf2:	5c 98       	cbi	0x0b, 4	; 11
	DATA_PORT = 0x00;
    1cf4:	10 92 0b 01 	sts	0x010B, r1
    1cf8:	82 e4       	ldi	r24, 0x42	; 66
    1cfa:	8a 95       	dec	r24
    1cfc:	f1 f7       	brne	.-4      	; 0x1cfa <EndPageProgramming+0xa>
    1cfe:	00 c0       	rjmp	.+0      	; 0x1d00 <EndPageProgramming+0x10>
	_delay_us(25);
	CONTROL_PORT |= 1<<XTAL1;
    1d00:	58 9a       	sbi	0x0b, 0	; 11
    1d02:	82 e4       	ldi	r24, 0x42	; 66
    1d04:	8a 95       	dec	r24
    1d06:	f1 f7       	brne	.-4      	; 0x1d04 <EndPageProgramming+0x14>
    1d08:	00 c0       	rjmp	.+0      	; 0x1d0a <EndPageProgramming+0x1a>
	_delay_us(25);
	CONTROL_PORT &= ~(1<<XTAL1);
    1d0a:	58 98       	cbi	0x0b, 0	; 11
    1d0c:	82 e4       	ldi	r24, 0x42	; 66
    1d0e:	8a 95       	dec	r24
    1d10:	f1 f7       	brne	.-4      	; 0x1d0e <EndPageProgramming+0x1e>
    1d12:	00 c0       	rjmp	.+0      	; 0x1d14 <EndPageProgramming+0x24>
    1d14:	08 95       	ret

00001d16 <EnableProgMode>:
	_delay_us(25);
}

void EnableProgMode(uint32_t TargetMicrocontroller)
{
    1d16:	cf 92       	push	r12
    1d18:	df 92       	push	r13
    1d1a:	ef 92       	push	r14
    1d1c:	ff 92       	push	r15
    1d1e:	6b 01       	movw	r12, r22
    1d20:	7c 01       	movw	r14, r24
	CONTROL_PORT &= ~(1<<XTAL1);
    1d22:	58 98       	cbi	0x0b, 0	; 11
	CONTROL_PORT &= ~(1<<XA1_BS2 | 1<<XA0 | 1<<BS1_PAGEL | 1<<WR | PAGEL);
    1d24:	8b b1       	in	r24, 0x0b	; 11
    1d26:	81 7c       	andi	r24, 0xC1	; 193
    1d28:	8b b9       	out	0x0b, r24	; 11
	DATA_PORT = 0x00;
    1d2a:	10 92 0b 01 	sts	0x010B, r1
	CONTROL_PORT = 0x00;
    1d2e:	1b b8       	out	0x0b, r1	; 11
	
	WR_PORT &= ~(1<<FPGAWR);
    1d30:	e5 e0       	ldi	r30, 0x05	; 5
    1d32:	f1 e0       	ldi	r31, 0x01	; 1
    1d34:	80 81       	ld	r24, Z
    1d36:	8b 7f       	andi	r24, 0xFB	; 251
    1d38:	80 83       	st	Z, r24
	FPGA_Write(TargetMicrocontroller);
    1d3a:	c7 01       	movw	r24, r14
    1d3c:	b6 01       	movw	r22, r12
    1d3e:	14 d8       	rcall	.-4056   	; 0xd68 <FPGA_Write>
	
	switch (TargetMicrocontroller)
    1d40:	8a e0       	ldi	r24, 0x0A	; 10
    1d42:	c8 16       	cp	r12, r24
    1d44:	81 e9       	ldi	r24, 0x91	; 145
    1d46:	d8 06       	cpc	r13, r24
    1d48:	8e e1       	ldi	r24, 0x1E	; 30
    1d4a:	e8 06       	cpc	r14, r24
    1d4c:	f1 04       	cpc	r15, r1
    1d4e:	49 f0       	breq	.+18     	; 0x1d62 <EnableProgMode+0x4c>
    1d50:	91 e1       	ldi	r25, 0x11	; 17
    1d52:	c9 16       	cp	r12, r25
    1d54:	95 e9       	ldi	r25, 0x95	; 149
    1d56:	d9 06       	cpc	r13, r25
    1d58:	9e e1       	ldi	r25, 0x1E	; 30
    1d5a:	e9 06       	cpc	r14, r25
    1d5c:	f1 04       	cpc	r15, r1
    1d5e:	19 f0       	breq	.+6      	; 0x1d66 <EnableProgMode+0x50>
    1d60:	03 c0       	rjmp	.+6      	; 0x1d68 <EnableProgMode+0x52>
	{
		case ATtiny2313 :
			setAtTiny2313();
    1d62:	67 d9       	rcall	.-3378   	; 0x1032 <setAtTiny2313>
			break;
    1d64:	01 c0       	rjmp	.+2      	; 0x1d68 <EnableProgMode+0x52>
		case ATmega324PA :
			setAtMega324PA();
    1d66:	ae d9       	rcall	.-3236   	; 0x10c4 <setAtMega324PA>
    1d68:	87 ec       	ldi	r24, 0xC7	; 199
    1d6a:	90 e0       	ldi	r25, 0x00	; 0
    1d6c:	01 97       	sbiw	r24, 0x01	; 1
    1d6e:	f1 f7       	brne	.-4      	; 0x1d6c <EnableProgMode+0x56>
    1d70:	00 c0       	rjmp	.+0      	; 0x1d72 <EnableProgMode+0x5c>
    1d72:	00 00       	nop
		default:
			break;
	}
	
	_delay_us(100);
	enableVppRegulator();
    1d74:	fc d9       	rcall	.-3080   	; 0x116e <enableVppRegulator>
    1d76:	95 e8       	ldi	r25, 0x85	; 133
    1d78:	9a 95       	dec	r25
    1d7a:	f1 f7       	brne	.-4      	; 0x1d78 <EnableProgMode+0x62>
    1d7c:	00 00       	nop
	_delay_us(50);
	CONTROL_PORT |= (1<<WR | 1<<OE);
    1d7e:	8b b1       	in	r24, 0x0b	; 11
    1d80:	86 60       	ori	r24, 0x06	; 6
    1d82:	8b b9       	out	0x0b, r24	; 11
    1d84:	87 ee       	ldi	r24, 0xE7	; 231
    1d86:	93 e0       	ldi	r25, 0x03	; 3
    1d88:	01 97       	sbiw	r24, 0x01	; 1
    1d8a:	f1 f7       	brne	.-4      	; 0x1d88 <EnableProgMode+0x72>
    1d8c:	00 c0       	rjmp	.+0      	; 0x1d8e <EnableProgMode+0x78>
    1d8e:	00 00       	nop
	_delay_us(500);
}
    1d90:	ff 90       	pop	r15
    1d92:	ef 90       	pop	r14
    1d94:	df 90       	pop	r13
    1d96:	cf 90       	pop	r12
    1d98:	08 95       	ret

00001d9a <ReadSignatureBytes>:
char* ReadSignatureBytes(void)
{
	static char SignatureBytes[3];
	
	//A: Load Command "Read Signature Bytes"
	LoadCommand(READ_SIG_BYTE);
    1d9a:	88 e0       	ldi	r24, 0x08	; 8
    1d9c:	26 df       	rcall	.-436    	; 0x1bea <LoadCommand>
	
	//B: Load Address Low Byte
	CONTROL_PORT &= ~(1<<XA1_BS2);
    1d9e:	5d 98       	cbi	0x0b, 5	; 11
	CONTROL_PORT &= ~(1<<XA0);
    1da0:	5c 98       	cbi	0x0b, 4	; 11
	CONTROL_PORT &= ~(1<<BS1_PAGEL);
    1da2:	5b 98       	cbi	0x0b, 3	; 11
	DATA_PORT = 0x00;
    1da4:	10 92 0b 01 	sts	0x010B, r1
    1da8:	87 ec       	ldi	r24, 0xC7	; 199
    1daa:	90 e0       	ldi	r25, 0x00	; 0
    1dac:	01 97       	sbiw	r24, 0x01	; 1
    1dae:	f1 f7       	brne	.-4      	; 0x1dac <ReadSignatureBytes+0x12>
    1db0:	00 c0       	rjmp	.+0      	; 0x1db2 <ReadSignatureBytes+0x18>
    1db2:	00 00       	nop
	_delay_us(100);
	CONTROL_PORT |= 1<<XTAL1;
    1db4:	58 9a       	sbi	0x0b, 0	; 11
    1db6:	92 e4       	ldi	r25, 0x42	; 66
    1db8:	9a 95       	dec	r25
    1dba:	f1 f7       	brne	.-4      	; 0x1db8 <ReadSignatureBytes+0x1e>
    1dbc:	00 c0       	rjmp	.+0      	; 0x1dbe <ReadSignatureBytes+0x24>
	_delay_us(25);
	CONTROL_PORT &= ~(1<<XTAL1);
    1dbe:	58 98       	cbi	0x0b, 0	; 11
    1dc0:	87 ec       	ldi	r24, 0xC7	; 199
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	01 97       	sbiw	r24, 0x01	; 1
    1dc6:	f1 f7       	brne	.-4      	; 0x1dc4 <ReadSignatureBytes+0x2a>
    1dc8:	00 c0       	rjmp	.+0      	; 0x1dca <ReadSignatureBytes+0x30>
    1dca:	00 00       	nop
	_delay_us(100);
	
	//Read data
	DATA_DDR = 0;
    1dcc:	10 92 0a 01 	sts	0x010A, r1
	WR_PORT |= (1<<FPGAWR);
    1dd0:	e5 e0       	ldi	r30, 0x05	; 5
    1dd2:	f1 e0       	ldi	r31, 0x01	; 1
    1dd4:	80 81       	ld	r24, Z
    1dd6:	84 60       	ori	r24, 0x04	; 4
    1dd8:	80 83       	st	Z, r24
	CONTROL_PORT &= ~(1<<OE);
    1dda:	59 98       	cbi	0x0b, 1	; 11
	CONTROL_PORT &= ~(1<<BS1_PAGEL);
    1ddc:	5b 98       	cbi	0x0b, 3	; 11
    1dde:	87 ee       	ldi	r24, 0xE7	; 231
    1de0:	93 e0       	ldi	r25, 0x03	; 3
    1de2:	01 97       	sbiw	r24, 0x01	; 1
    1de4:	f1 f7       	brne	.-4      	; 0x1de2 <ReadSignatureBytes+0x48>
    1de6:	00 c0       	rjmp	.+0      	; 0x1de8 <ReadSignatureBytes+0x4e>
    1de8:	00 00       	nop
	_delay_us(500);
	SignatureBytes[0] = DATA_PIN;
    1dea:	80 91 09 01 	lds	r24, 0x0109
    1dee:	80 93 c6 09 	sts	0x09C6, r24
	printf("0x%02X ", SignatureBytes[0]);
    1df2:	1f 92       	push	r1
    1df4:	8f 93       	push	r24
    1df6:	88 e4       	ldi	r24, 0x48	; 72
    1df8:	96 e0       	ldi	r25, 0x06	; 6
    1dfa:	9f 93       	push	r25
    1dfc:	8f 93       	push	r24
    1dfe:	ae d3       	rcall	.+1884   	; 0x255c <printf>
	CONTROL_PORT |= 1<<OE;
    1e00:	59 9a       	sbi	0x0b, 1	; 11
	WR_PORT &= ~(1<<FPGAWR);
    1e02:	e5 e0       	ldi	r30, 0x05	; 5
    1e04:	f1 e0       	ldi	r31, 0x01	; 1
    1e06:	80 81       	ld	r24, Z
    1e08:	8b 7f       	andi	r24, 0xFB	; 251
    1e0a:	80 83       	st	Z, r24
	DATA_DDR = 0xFF;
    1e0c:	8f ef       	ldi	r24, 0xFF	; 255
    1e0e:	80 93 0a 01 	sts	0x010A, r24
    1e12:	87 ec       	ldi	r24, 0xC7	; 199
    1e14:	90 e0       	ldi	r25, 0x00	; 0
    1e16:	01 97       	sbiw	r24, 0x01	; 1
    1e18:	f1 f7       	brne	.-4      	; 0x1e16 <ReadSignatureBytes+0x7c>
    1e1a:	00 c0       	rjmp	.+0      	; 0x1e1c <ReadSignatureBytes+0x82>
    1e1c:	00 00       	nop
	_delay_us(100);
	
	//Load Address Low Byte
	CONTROL_PORT &= ~(1<<XA1_BS2);
    1e1e:	5d 98       	cbi	0x0b, 5	; 11
	CONTROL_PORT &= ~(1<<XA0);
    1e20:	5c 98       	cbi	0x0b, 4	; 11
	CONTROL_PORT &= ~(1<<BS1_PAGEL);
    1e22:	5b 98       	cbi	0x0b, 3	; 11
	DATA_PORT = 0x01;
    1e24:	81 e0       	ldi	r24, 0x01	; 1
    1e26:	80 93 0b 01 	sts	0x010B, r24
    1e2a:	87 ec       	ldi	r24, 0xC7	; 199
    1e2c:	90 e0       	ldi	r25, 0x00	; 0
    1e2e:	01 97       	sbiw	r24, 0x01	; 1
    1e30:	f1 f7       	brne	.-4      	; 0x1e2e <ReadSignatureBytes+0x94>
    1e32:	00 c0       	rjmp	.+0      	; 0x1e34 <ReadSignatureBytes+0x9a>
    1e34:	00 00       	nop
	_delay_us(100);
	CONTROL_PORT |= 1<<XTAL1;
    1e36:	58 9a       	sbi	0x0b, 0	; 11
    1e38:	92 e4       	ldi	r25, 0x42	; 66
    1e3a:	9a 95       	dec	r25
    1e3c:	f1 f7       	brne	.-4      	; 0x1e3a <ReadSignatureBytes+0xa0>
    1e3e:	00 c0       	rjmp	.+0      	; 0x1e40 <ReadSignatureBytes+0xa6>
	_delay_us(25);
	CONTROL_PORT &= ~(1<<XTAL1);
    1e40:	58 98       	cbi	0x0b, 0	; 11
    1e42:	87 ec       	ldi	r24, 0xC7	; 199
    1e44:	90 e0       	ldi	r25, 0x00	; 0
    1e46:	01 97       	sbiw	r24, 0x01	; 1
    1e48:	f1 f7       	brne	.-4      	; 0x1e46 <ReadSignatureBytes+0xac>
    1e4a:	00 c0       	rjmp	.+0      	; 0x1e4c <ReadSignatureBytes+0xb2>
    1e4c:	00 00       	nop
	_delay_us(100);
	
	//Read data
	DATA_DDR = 0;
    1e4e:	10 92 0a 01 	sts	0x010A, r1
	WR_PORT |= (1<<FPGAWR);
    1e52:	80 81       	ld	r24, Z
    1e54:	84 60       	ori	r24, 0x04	; 4
    1e56:	80 83       	st	Z, r24
	CONTROL_PORT &= ~(1<<OE);
    1e58:	59 98       	cbi	0x0b, 1	; 11
	CONTROL_PORT &= ~(1<<BS1_PAGEL);
    1e5a:	5b 98       	cbi	0x0b, 3	; 11
    1e5c:	87 ee       	ldi	r24, 0xE7	; 231
    1e5e:	93 e0       	ldi	r25, 0x03	; 3
    1e60:	01 97       	sbiw	r24, 0x01	; 1
    1e62:	f1 f7       	brne	.-4      	; 0x1e60 <ReadSignatureBytes+0xc6>
    1e64:	00 c0       	rjmp	.+0      	; 0x1e66 <ReadSignatureBytes+0xcc>
    1e66:	00 00       	nop
	_delay_us(500);
	SignatureBytes[1] = DATA_PIN;
    1e68:	80 91 09 01 	lds	r24, 0x0109
    1e6c:	80 93 c7 09 	sts	0x09C7, r24
	printf("0x%02X ", SignatureBytes[1]);
    1e70:	1f 92       	push	r1
    1e72:	8f 93       	push	r24
    1e74:	88 e4       	ldi	r24, 0x48	; 72
    1e76:	96 e0       	ldi	r25, 0x06	; 6
    1e78:	9f 93       	push	r25
    1e7a:	8f 93       	push	r24
    1e7c:	6f d3       	rcall	.+1758   	; 0x255c <printf>
	CONTROL_PORT |= 1<<OE;
    1e7e:	59 9a       	sbi	0x0b, 1	; 11
	WR_PORT &= ~(1<<FPGAWR);
    1e80:	e5 e0       	ldi	r30, 0x05	; 5
    1e82:	f1 e0       	ldi	r31, 0x01	; 1
    1e84:	80 81       	ld	r24, Z
    1e86:	8b 7f       	andi	r24, 0xFB	; 251
    1e88:	80 83       	st	Z, r24
	DATA_DDR = 0xFF;
    1e8a:	8f ef       	ldi	r24, 0xFF	; 255
    1e8c:	80 93 0a 01 	sts	0x010A, r24
    1e90:	87 ec       	ldi	r24, 0xC7	; 199
    1e92:	90 e0       	ldi	r25, 0x00	; 0
    1e94:	01 97       	sbiw	r24, 0x01	; 1
    1e96:	f1 f7       	brne	.-4      	; 0x1e94 <ReadSignatureBytes+0xfa>
    1e98:	00 c0       	rjmp	.+0      	; 0x1e9a <ReadSignatureBytes+0x100>
    1e9a:	00 00       	nop
	_delay_us(100);
	
	//Load Address Low Byte
	CONTROL_PORT &= ~(1<<XA1_BS2);
    1e9c:	5d 98       	cbi	0x0b, 5	; 11
	CONTROL_PORT &= ~(1<<XA0);
    1e9e:	5c 98       	cbi	0x0b, 4	; 11
	CONTROL_PORT &= ~(1<<BS1_PAGEL);
    1ea0:	5b 98       	cbi	0x0b, 3	; 11
	DATA_PORT = 0x02;
    1ea2:	82 e0       	ldi	r24, 0x02	; 2
    1ea4:	80 93 0b 01 	sts	0x010B, r24
    1ea8:	87 ec       	ldi	r24, 0xC7	; 199
    1eaa:	90 e0       	ldi	r25, 0x00	; 0
    1eac:	01 97       	sbiw	r24, 0x01	; 1
    1eae:	f1 f7       	brne	.-4      	; 0x1eac <ReadSignatureBytes+0x112>
    1eb0:	00 c0       	rjmp	.+0      	; 0x1eb2 <ReadSignatureBytes+0x118>
    1eb2:	00 00       	nop
	_delay_us(100);
	CONTROL_PORT |= 1<<XTAL1;
    1eb4:	58 9a       	sbi	0x0b, 0	; 11
    1eb6:	92 e4       	ldi	r25, 0x42	; 66
    1eb8:	9a 95       	dec	r25
    1eba:	f1 f7       	brne	.-4      	; 0x1eb8 <ReadSignatureBytes+0x11e>
    1ebc:	00 c0       	rjmp	.+0      	; 0x1ebe <ReadSignatureBytes+0x124>
	_delay_us(25);
	CONTROL_PORT &= ~(1<<XTAL1);
    1ebe:	58 98       	cbi	0x0b, 0	; 11
    1ec0:	87 ec       	ldi	r24, 0xC7	; 199
    1ec2:	90 e0       	ldi	r25, 0x00	; 0
    1ec4:	01 97       	sbiw	r24, 0x01	; 1
    1ec6:	f1 f7       	brne	.-4      	; 0x1ec4 <ReadSignatureBytes+0x12a>
    1ec8:	00 c0       	rjmp	.+0      	; 0x1eca <ReadSignatureBytes+0x130>
    1eca:	00 00       	nop
	_delay_us(100);
	
	//Read data
	DATA_DDR = 0;
    1ecc:	10 92 0a 01 	sts	0x010A, r1
	WR_PORT |= (1<<FPGAWR);
    1ed0:	80 81       	ld	r24, Z
    1ed2:	84 60       	ori	r24, 0x04	; 4
    1ed4:	80 83       	st	Z, r24
	CONTROL_PORT &= ~(1<<OE);
    1ed6:	59 98       	cbi	0x0b, 1	; 11
	CONTROL_PORT &= ~(1<<BS1_PAGEL);
    1ed8:	5b 98       	cbi	0x0b, 3	; 11
    1eda:	87 ee       	ldi	r24, 0xE7	; 231
    1edc:	93 e0       	ldi	r25, 0x03	; 3
    1ede:	01 97       	sbiw	r24, 0x01	; 1
    1ee0:	f1 f7       	brne	.-4      	; 0x1ede <ReadSignatureBytes+0x144>
    1ee2:	00 c0       	rjmp	.+0      	; 0x1ee4 <ReadSignatureBytes+0x14a>
    1ee4:	00 00       	nop
	_delay_us(500);
	SignatureBytes[2] = DATA_PIN;
    1ee6:	80 91 09 01 	lds	r24, 0x0109
    1eea:	80 93 c8 09 	sts	0x09C8, r24
	printf("0x%02X ", SignatureBytes[2]);
    1eee:	1f 92       	push	r1
    1ef0:	8f 93       	push	r24
    1ef2:	88 e4       	ldi	r24, 0x48	; 72
    1ef4:	96 e0       	ldi	r25, 0x06	; 6
    1ef6:	9f 93       	push	r25
    1ef8:	8f 93       	push	r24
    1efa:	30 d3       	rcall	.+1632   	; 0x255c <printf>
	CONTROL_PORT |= 1<<OE;
    1efc:	59 9a       	sbi	0x0b, 1	; 11
	WR_PORT &= ~(1<<FPGAWR);
    1efe:	e5 e0       	ldi	r30, 0x05	; 5
    1f00:	f1 e0       	ldi	r31, 0x01	; 1
    1f02:	80 81       	ld	r24, Z
    1f04:	8b 7f       	andi	r24, 0xFB	; 251
    1f06:	80 83       	st	Z, r24
	DATA_DDR = 0xFF;
    1f08:	8f ef       	ldi	r24, 0xFF	; 255
    1f0a:	80 93 0a 01 	sts	0x010A, r24
	DATA_PORT = 0x00;
    1f0e:	10 92 0b 01 	sts	0x010B, r1
	
	return SignatureBytes;
    1f12:	8d b7       	in	r24, 0x3d	; 61
    1f14:	9e b7       	in	r25, 0x3e	; 62
    1f16:	0c 96       	adiw	r24, 0x0c	; 12
    1f18:	0f b6       	in	r0, 0x3f	; 63
    1f1a:	f8 94       	cli
    1f1c:	9e bf       	out	0x3e, r25	; 62
    1f1e:	0f be       	out	0x3f, r0	; 63
    1f20:	8d bf       	out	0x3d, r24	; 61
}
    1f22:	86 ec       	ldi	r24, 0xC6	; 198
    1f24:	99 e0       	ldi	r25, 0x09	; 9
    1f26:	08 95       	ret

00001f28 <ReadFlash>:

void ReadFlash(void)
{
    1f28:	9f 92       	push	r9
    1f2a:	af 92       	push	r10
    1f2c:	bf 92       	push	r11
    1f2e:	cf 92       	push	r12
    1f30:	df 92       	push	r13
    1f32:	ef 92       	push	r14
    1f34:	ff 92       	push	r15
    1f36:	0f 93       	push	r16
    1f38:	1f 93       	push	r17
    1f3a:	cf 93       	push	r28
    1f3c:	df 93       	push	r29
	char DataValueIn = 0;
	
	//A: Load Command "Read Flash"
	LoadCommand(READ_FLASH);
    1f3e:	82 e0       	ldi	r24, 0x02	; 2
    1f40:	54 de       	rcall	.-856    	; 0x1bea <LoadCommand>
	
	for (unsigned int LowAddressByte = 0; LowAddressByte < 16; LowAddressByte++)
    1f42:	e1 2c       	mov	r14, r1
    1f44:	f1 2c       	mov	r15, r1
		
		//B: Load Address Low Byte
		LoadLowAddress(LowAddressByte);
		
		//Read data
		DATA_DDR = 0;
    1f46:	0f 2e       	mov	r0, r31
    1f48:	fa e0       	ldi	r31, 0x0A	; 10
    1f4a:	af 2e       	mov	r10, r31
    1f4c:	bb 24       	eor	r11, r11
    1f4e:	b3 94       	inc	r11
    1f50:	f0 2d       	mov	r31, r0
		WR_PORT |= (1<<FPGAWR);
    1f52:	05 e0       	ldi	r16, 0x05	; 5
    1f54:	11 e0       	ldi	r17, 0x01	; 1
		CONTROL_PORT &= ~(1<<OE);
		CONTROL_PORT &= ~(1<<BS1_PAGEL); //Reading flash word low byte
		_delay_us(500);
		DataValueIn = DATA_PIN;
    1f56:	0f 2e       	mov	r0, r31
    1f58:	f9 e0       	ldi	r31, 0x09	; 9
    1f5a:	cf 2e       	mov	r12, r31
    1f5c:	dd 24       	eor	r13, r13
    1f5e:	d3 94       	inc	r13
    1f60:	f0 2d       	mov	r31, r0
		printf("0x%02X ", DataValueIn);
    1f62:	c8 e4       	ldi	r28, 0x48	; 72
    1f64:	d6 e0       	ldi	r29, 0x06	; 6
		_delay_us(500);
		DataValueIn = DATA_PIN;
		printf("0x%02X ", DataValueIn);
		CONTROL_PORT |= 1<<OE;
		WR_PORT &= ~(1<<FPGAWR);
		DATA_DDR = 0xFF;
    1f66:	99 24       	eor	r9, r9
    1f68:	9a 94       	dec	r9
	LoadCommand(READ_FLASH);
	
	for (unsigned int LowAddressByte = 0; LowAddressByte < 16; LowAddressByte++)
	{
		//F: Load Address High Byte
		LoadHighAddress(0x00);
    1f6a:	80 e0       	ldi	r24, 0x00	; 0
    1f6c:	90 e0       	ldi	r25, 0x00	; 0
    1f6e:	8c de       	rcall	.-744    	; 0x1c88 <LoadHighAddress>
		
		//B: Load Address Low Byte
		LoadLowAddress(LowAddressByte);
    1f70:	c7 01       	movw	r24, r14
    1f72:	75 de       	rcall	.-790    	; 0x1c5e <LoadLowAddress>
		
		//Read data
		DATA_DDR = 0;
    1f74:	f5 01       	movw	r30, r10
    1f76:	10 82       	st	Z, r1
		WR_PORT |= (1<<FPGAWR);
    1f78:	f8 01       	movw	r30, r16
    1f7a:	80 81       	ld	r24, Z
    1f7c:	84 60       	ori	r24, 0x04	; 4
    1f7e:	80 83       	st	Z, r24
		CONTROL_PORT &= ~(1<<OE);
    1f80:	59 98       	cbi	0x0b, 1	; 11
		CONTROL_PORT &= ~(1<<BS1_PAGEL); //Reading flash word low byte
    1f82:	5b 98       	cbi	0x0b, 3	; 11
    1f84:	87 ee       	ldi	r24, 0xE7	; 231
    1f86:	93 e0       	ldi	r25, 0x03	; 3
    1f88:	01 97       	sbiw	r24, 0x01	; 1
    1f8a:	f1 f7       	brne	.-4      	; 0x1f88 <ReadFlash+0x60>
    1f8c:	00 c0       	rjmp	.+0      	; 0x1f8e <ReadFlash+0x66>
    1f8e:	00 00       	nop
		_delay_us(500);
		DataValueIn = DATA_PIN;
    1f90:	f6 01       	movw	r30, r12
    1f92:	80 81       	ld	r24, Z
		printf("0x%02X ", DataValueIn);
    1f94:	1f 92       	push	r1
    1f96:	8f 93       	push	r24
    1f98:	df 93       	push	r29
    1f9a:	cf 93       	push	r28
    1f9c:	df d2       	rcall	.+1470   	; 0x255c <printf>
		CONTROL_PORT |= 1<<BS1_PAGEL; //Reading flash word high byte
    1f9e:	5b 9a       	sbi	0x0b, 3	; 11
    1fa0:	e7 ee       	ldi	r30, 0xE7	; 231
    1fa2:	f3 e0       	ldi	r31, 0x03	; 3
    1fa4:	31 97       	sbiw	r30, 0x01	; 1
    1fa6:	f1 f7       	brne	.-4      	; 0x1fa4 <ReadFlash+0x7c>
    1fa8:	00 c0       	rjmp	.+0      	; 0x1faa <ReadFlash+0x82>
    1faa:	00 00       	nop
		_delay_us(500);
		DataValueIn = DATA_PIN;
    1fac:	f6 01       	movw	r30, r12
    1fae:	80 81       	ld	r24, Z
		printf("0x%02X ", DataValueIn);
    1fb0:	1f 92       	push	r1
    1fb2:	8f 93       	push	r24
    1fb4:	df 93       	push	r29
    1fb6:	cf 93       	push	r28
    1fb8:	d1 d2       	rcall	.+1442   	; 0x255c <printf>
		CONTROL_PORT |= 1<<OE;
    1fba:	59 9a       	sbi	0x0b, 1	; 11
		WR_PORT &= ~(1<<FPGAWR);
    1fbc:	f8 01       	movw	r30, r16
    1fbe:	80 81       	ld	r24, Z
    1fc0:	8b 7f       	andi	r24, 0xFB	; 251
    1fc2:	80 83       	st	Z, r24
		DATA_DDR = 0xFF;
    1fc4:	f5 01       	movw	r30, r10
    1fc6:	90 82       	st	Z, r9
    1fc8:	f2 e4       	ldi	r31, 0x42	; 66
    1fca:	fa 95       	dec	r31
    1fcc:	f1 f7       	brne	.-4      	; 0x1fca <ReadFlash+0xa2>
    1fce:	00 c0       	rjmp	.+0      	; 0x1fd0 <ReadFlash+0xa8>
	char DataValueIn = 0;
	
	//A: Load Command "Read Flash"
	LoadCommand(READ_FLASH);
	
	for (unsigned int LowAddressByte = 0; LowAddressByte < 16; LowAddressByte++)
    1fd0:	8f ef       	ldi	r24, 0xFF	; 255
    1fd2:	e8 1a       	sub	r14, r24
    1fd4:	f8 0a       	sbc	r15, r24
    1fd6:	ed b7       	in	r30, 0x3d	; 61
    1fd8:	fe b7       	in	r31, 0x3e	; 62
    1fda:	38 96       	adiw	r30, 0x08	; 8
    1fdc:	0f b6       	in	r0, 0x3f	; 63
    1fde:	f8 94       	cli
    1fe0:	fe bf       	out	0x3e, r31	; 62
    1fe2:	0f be       	out	0x3f, r0	; 63
    1fe4:	ed bf       	out	0x3d, r30	; 61
    1fe6:	f0 e1       	ldi	r31, 0x10	; 16
    1fe8:	ef 16       	cp	r14, r31
    1fea:	f1 04       	cpc	r15, r1
    1fec:	09 f0       	breq	.+2      	; 0x1ff0 <ReadFlash+0xc8>
    1fee:	bd cf       	rjmp	.-134    	; 0x1f6a <ReadFlash+0x42>
		CONTROL_PORT |= 1<<OE;
		WR_PORT &= ~(1<<FPGAWR);
		DATA_DDR = 0xFF;
		_delay_us(25);
	}
}
    1ff0:	df 91       	pop	r29
    1ff2:	cf 91       	pop	r28
    1ff4:	1f 91       	pop	r17
    1ff6:	0f 91       	pop	r16
    1ff8:	ff 90       	pop	r15
    1ffa:	ef 90       	pop	r14
    1ffc:	df 90       	pop	r13
    1ffe:	cf 90       	pop	r12
    2000:	bf 90       	pop	r11
    2002:	af 90       	pop	r10
    2004:	9f 90       	pop	r9
    2006:	08 95       	ret

00002008 <VerifyFlash>:

int VerifyFlash(void)
{
    2008:	2f 92       	push	r2
    200a:	3f 92       	push	r3
    200c:	4f 92       	push	r4
    200e:	5f 92       	push	r5
    2010:	6f 92       	push	r6
    2012:	7f 92       	push	r7
    2014:	8f 92       	push	r8
    2016:	9f 92       	push	r9
    2018:	af 92       	push	r10
    201a:	bf 92       	push	r11
    201c:	cf 92       	push	r12
    201e:	df 92       	push	r13
    2020:	ef 92       	push	r14
    2022:	ff 92       	push	r15
    2024:	0f 93       	push	r16
    2026:	1f 93       	push	r17
    2028:	cf 93       	push	r28
    202a:	df 93       	push	r29
    202c:	00 d0       	rcall	.+0      	; 0x202e <VerifyFlash+0x26>
    202e:	00 d0       	rcall	.+0      	; 0x2030 <VerifyFlash+0x28>
    2030:	cd b7       	in	r28, 0x3d	; 61
    2032:	de b7       	in	r29, 0x3e	; 62
	resetRAMOffset(); 
    2034:	e0 db       	rcall	.-2112   	; 0x17f6 <resetRAMOffset>
	uint16_t byteCount;
	uint16_t address;
	uint16_t data;
	//Keep looping until the hexRow is the end of file or we hit the end of a page
	
	LoadCommand(READ_FLASH);
    2036:	82 e0       	ldi	r24, 0x02	; 2
    2038:	d8 dd       	rcall	.-1104   	; 0x1bea <LoadCommand>
		address <<= 8;
		address |= (hexRow[ADDRESS_L]);
		address /= 2;
		
		int j =0;
		for(int i=0; i<byteCount; i+=2)
    203a:	41 2c       	mov	r4, r1
			printf("\nAddress: 0x%04X\n",(address + j));
			j++;
			
			//Read data
			DATA_DDR = 0;
			WR_PORT |= (1<<FPGAWR);
    203c:	0f 2e       	mov	r0, r31
    203e:	f5 e0       	ldi	r31, 0x05	; 5
    2040:	ef 2e       	mov	r14, r31
    2042:	ff 24       	eor	r15, r15
    2044:	f3 94       	inc	r15
    2046:	f0 2d       	mov	r31, r0
			CONTROL_PORT &= ~(1<<OE);
			CONTROL_PORT &= ~(1<<BS1_PAGEL); //Reading flash word low byte
			_delay_us(500);
			DataValueIn = DATA_PIN;
			printf("0x%02X ", DataValueIn);
    2048:	0f 2e       	mov	r0, r31
    204a:	f8 e4       	ldi	r31, 0x48	; 72
    204c:	6f 2e       	mov	r6, r31
    204e:	f6 e0       	ldi	r31, 0x06	; 6
    2050:	7f 2e       	mov	r7, r31
    2052:	f0 2d       	mov	r31, r0
	
	LoadCommand(READ_FLASH);
	
	while(1)
	{
		hexRow = getHexRow();
    2054:	d5 db       	rcall	.-2134   	; 0x1800 <getHexRow>
    2056:	5c 01       	movw	r10, r24
		
		//printf("We're here now\n");
		
		if(hexRow[RECORD_TYPE] == TYPE_END_OF_FILE)
    2058:	dc 01       	movw	r26, r24
    205a:	14 96       	adiw	r26, 0x04	; 4
    205c:	8c 91       	ld	r24, X
    205e:	14 97       	sbiw	r26, 0x04	; 4
    2060:	81 30       	cpi	r24, 0x01	; 1
    2062:	09 f4       	brne	.+2      	; 0x2066 <VerifyFlash+0x5e>
    2064:	86 c0       	rjmp	.+268    	; 0x2172 <VerifyFlash+0x16a>
		{
			return 1;
		}
		
		byteCount = (hexRow[BYTE_COUNT]);
    2066:	11 96       	adiw	r26, 0x01	; 1
    2068:	8c 91       	ld	r24, X
    206a:	11 97       	sbiw	r26, 0x01	; 1
    206c:	e8 2f       	mov	r30, r24
    206e:	f0 e0       	ldi	r31, 0x00	; 0
    2070:	fa 83       	std	Y+2, r31	; 0x02
    2072:	e9 83       	std	Y+1, r30	; 0x01
		address = hexRow[ADDRESS_H];
    2074:	12 96       	adiw	r26, 0x02	; 2
    2076:	8c 91       	ld	r24, X
    2078:	12 97       	sbiw	r26, 0x02	; 2
    207a:	90 e0       	ldi	r25, 0x00	; 0
		address <<= 8;
    207c:	98 2f       	mov	r25, r24
    207e:	88 27       	eor	r24, r24
		address |= (hexRow[ADDRESS_L]);
    2080:	13 96       	adiw	r26, 0x03	; 3
    2082:	2c 91       	ld	r18, X
    2084:	82 2b       	or	r24, r18
		address /= 2;
    2086:	4c 01       	movw	r8, r24
    2088:	96 94       	lsr	r9
    208a:	87 94       	ror	r8
		
		int j =0;
		for(int i=0; i<byteCount; i+=2)
    208c:	ef 2b       	or	r30, r31
    208e:	11 f3       	breq	.-60     	; 0x2054 <VerifyFlash+0x4c>
    2090:	65 01       	movw	r12, r10
    2092:	f5 e0       	ldi	r31, 0x05	; 5
    2094:	cf 0e       	add	r12, r31
    2096:	d1 1c       	adc	r13, r1
    2098:	9c 82       	std	Y+4, r9	; 0x04
    209a:	8b 82       	std	Y+3, r8	; 0x03
    209c:	24 2c       	mov	r2, r4
    209e:	31 2c       	mov	r3, r1
    20a0:	04 2d       	mov	r16, r4
    20a2:	10 e0       	ldi	r17, 0x00	; 0
		{
			LoadHighAddress(address);
    20a4:	c4 01       	movw	r24, r8
    20a6:	f0 dd       	rcall	.-1056   	; 0x1c88 <LoadHighAddress>
			LoadLowAddress(address + j);
    20a8:	8b 81       	ldd	r24, Y+3	; 0x03
    20aa:	9c 81       	ldd	r25, Y+4	; 0x04
    20ac:	d8 dd       	rcall	.-1104   	; 0x1c5e <LoadLowAddress>
			printf("\nAddress: 0x%04X\n",(address + j));
    20ae:	2c 81       	ldd	r18, Y+4	; 0x04
    20b0:	2f 93       	push	r18
    20b2:	3b 81       	ldd	r19, Y+3	; 0x03
    20b4:	3f 93       	push	r19
    20b6:	a7 e1       	ldi	r26, 0x17	; 23
    20b8:	b9 e0       	ldi	r27, 0x09	; 9
    20ba:	bf 93       	push	r27
    20bc:	af 93       	push	r26
    20be:	4e d2       	rcall	.+1180   	; 0x255c <printf>
			j++;
			
			//Read data
			DATA_DDR = 0;
    20c0:	aa e0       	ldi	r26, 0x0A	; 10
    20c2:	b1 e0       	ldi	r27, 0x01	; 1
    20c4:	1c 92       	st	X, r1
			WR_PORT |= (1<<FPGAWR);
    20c6:	f7 01       	movw	r30, r14
    20c8:	80 81       	ld	r24, Z
    20ca:	84 60       	ori	r24, 0x04	; 4
    20cc:	80 83       	st	Z, r24
			CONTROL_PORT &= ~(1<<OE);
    20ce:	59 98       	cbi	0x0b, 1	; 11
			CONTROL_PORT &= ~(1<<BS1_PAGEL); //Reading flash word low byte
    20d0:	5b 98       	cbi	0x0b, 3	; 11
    20d2:	87 ee       	ldi	r24, 0xE7	; 231
    20d4:	93 e0       	ldi	r25, 0x03	; 3
    20d6:	01 97       	sbiw	r24, 0x01	; 1
    20d8:	f1 f7       	brne	.-4      	; 0x20d6 <VerifyFlash+0xce>
    20da:	00 c0       	rjmp	.+0      	; 0x20dc <VerifyFlash+0xd4>
    20dc:	00 00       	nop
			_delay_us(500);
			DataValueIn = DATA_PIN;
    20de:	a9 e0       	ldi	r26, 0x09	; 9
    20e0:	b1 e0       	ldi	r27, 0x01	; 1
    20e2:	5c 90       	ld	r5, X
			printf("0x%02X ", DataValueIn);
    20e4:	1f 92       	push	r1
    20e6:	5f 92       	push	r5
    20e8:	7f 92       	push	r7
    20ea:	6f 92       	push	r6
    20ec:	37 d2       	rcall	.+1134   	; 0x255c <printf>
			if (DataValueIn != hexRow[DATA_BEGIN + i])
    20ee:	0f b6       	in	r0, 0x3f	; 63
    20f0:	f8 94       	cli
    20f2:	de bf       	out	0x3e, r29	; 62
    20f4:	0f be       	out	0x3f, r0	; 63
    20f6:	cd bf       	out	0x3d, r28	; 61
    20f8:	d6 01       	movw	r26, r12
    20fa:	8c 91       	ld	r24, X
    20fc:	85 11       	cpse	r24, r5
    20fe:	3c c0       	rjmp	.+120    	; 0x2178 <VerifyFlash+0x170>
			{
				return 0;
			}
			CONTROL_PORT |= 1<<BS1_PAGEL; //Reading flash word high byte
    2100:	5b 9a       	sbi	0x0b, 3	; 11
    2102:	e7 ee       	ldi	r30, 0xE7	; 231
    2104:	f3 e0       	ldi	r31, 0x03	; 3
    2106:	31 97       	sbiw	r30, 0x01	; 1
    2108:	f1 f7       	brne	.-4      	; 0x2106 <VerifyFlash+0xfe>
    210a:	00 c0       	rjmp	.+0      	; 0x210c <VerifyFlash+0x104>
    210c:	00 00       	nop
			_delay_us(500);
			DataValueIn = DATA_PIN;
    210e:	a9 e0       	ldi	r26, 0x09	; 9
    2110:	b1 e0       	ldi	r27, 0x01	; 1
    2112:	5c 90       	ld	r5, X
			printf("0x%02X ", DataValueIn);
    2114:	1f 92       	push	r1
    2116:	5f 92       	push	r5
    2118:	7f 92       	push	r7
    211a:	6f 92       	push	r6
    211c:	1f d2       	rcall	.+1086   	; 0x255c <printf>
			if (DataValueIn != hexRow[DATA_BEGIN + i + 1])
    211e:	f5 01       	movw	r30, r10
    2120:	e2 0d       	add	r30, r2
    2122:	f3 1d       	adc	r31, r3
    2124:	0f 90       	pop	r0
    2126:	0f 90       	pop	r0
    2128:	0f 90       	pop	r0
    212a:	0f 90       	pop	r0
    212c:	86 81       	ldd	r24, Z+6	; 0x06
    212e:	85 11       	cpse	r24, r5
    2130:	26 c0       	rjmp	.+76     	; 0x217e <VerifyFlash+0x176>
			{
				return 0;
			}
			CONTROL_PORT |= 1<<OE;
    2132:	59 9a       	sbi	0x0b, 1	; 11
			WR_PORT &= ~(1<<FPGAWR);
    2134:	f7 01       	movw	r30, r14
    2136:	80 81       	ld	r24, Z
    2138:	8b 7f       	andi	r24, 0xFB	; 251
    213a:	80 83       	st	Z, r24
			DATA_DDR = 0xFF;
    213c:	ef ef       	ldi	r30, 0xFF	; 255
    213e:	aa e0       	ldi	r26, 0x0A	; 10
    2140:	b1 e0       	ldi	r27, 0x01	; 1
    2142:	ec 93       	st	X, r30
    2144:	f2 e4       	ldi	r31, 0x42	; 66
    2146:	fa 95       	dec	r31
    2148:	f1 f7       	brne	.-4      	; 0x2146 <VerifyFlash+0x13e>
    214a:	00 c0       	rjmp	.+0      	; 0x214c <VerifyFlash+0x144>
		address <<= 8;
		address |= (hexRow[ADDRESS_L]);
		address /= 2;
		
		int j =0;
		for(int i=0; i<byteCount; i+=2)
    214c:	0e 5f       	subi	r16, 0xFE	; 254
    214e:	1f 4f       	sbci	r17, 0xFF	; 255
    2150:	18 01       	movw	r2, r16
    2152:	2b 81       	ldd	r18, Y+3	; 0x03
    2154:	3c 81       	ldd	r19, Y+4	; 0x04
    2156:	2f 5f       	subi	r18, 0xFF	; 255
    2158:	3f 4f       	sbci	r19, 0xFF	; 255
    215a:	3c 83       	std	Y+4, r19	; 0x04
    215c:	2b 83       	std	Y+3, r18	; 0x03
    215e:	32 e0       	ldi	r19, 0x02	; 2
    2160:	c3 0e       	add	r12, r19
    2162:	d1 1c       	adc	r13, r1
    2164:	89 81       	ldd	r24, Y+1	; 0x01
    2166:	9a 81       	ldd	r25, Y+2	; 0x02
    2168:	08 17       	cp	r16, r24
    216a:	19 07       	cpc	r17, r25
    216c:	08 f4       	brcc	.+2      	; 0x2170 <VerifyFlash+0x168>
    216e:	9a cf       	rjmp	.-204    	; 0x20a4 <VerifyFlash+0x9c>
    2170:	71 cf       	rjmp	.-286    	; 0x2054 <VerifyFlash+0x4c>
		
		//printf("We're here now\n");
		
		if(hexRow[RECORD_TYPE] == TYPE_END_OF_FILE)
		{
			return 1;
    2172:	81 e0       	ldi	r24, 0x01	; 1
    2174:	90 e0       	ldi	r25, 0x00	; 0
    2176:	05 c0       	rjmp	.+10     	; 0x2182 <VerifyFlash+0x17a>
			_delay_us(500);
			DataValueIn = DATA_PIN;
			printf("0x%02X ", DataValueIn);
			if (DataValueIn != hexRow[DATA_BEGIN + i])
			{
				return 0;
    2178:	80 e0       	ldi	r24, 0x00	; 0
    217a:	90 e0       	ldi	r25, 0x00	; 0
    217c:	02 c0       	rjmp	.+4      	; 0x2182 <VerifyFlash+0x17a>
			_delay_us(500);
			DataValueIn = DATA_PIN;
			printf("0x%02X ", DataValueIn);
			if (DataValueIn != hexRow[DATA_BEGIN + i + 1])
			{
				return 0;
    217e:	80 e0       	ldi	r24, 0x00	; 0
    2180:	90 e0       	ldi	r25, 0x00	; 0
			WR_PORT &= ~(1<<FPGAWR);
			DATA_DDR = 0xFF;
			_delay_us(25);
		}
	}
}
    2182:	0f 90       	pop	r0
    2184:	0f 90       	pop	r0
    2186:	0f 90       	pop	r0
    2188:	0f 90       	pop	r0
    218a:	df 91       	pop	r29
    218c:	cf 91       	pop	r28
    218e:	1f 91       	pop	r17
    2190:	0f 91       	pop	r16
    2192:	ff 90       	pop	r15
    2194:	ef 90       	pop	r14
    2196:	df 90       	pop	r13
    2198:	cf 90       	pop	r12
    219a:	bf 90       	pop	r11
    219c:	af 90       	pop	r10
    219e:	9f 90       	pop	r9
    21a0:	8f 90       	pop	r8
    21a2:	7f 90       	pop	r7
    21a4:	6f 90       	pop	r6
    21a6:	5f 90       	pop	r5
    21a8:	4f 90       	pop	r4
    21aa:	3f 90       	pop	r3
    21ac:	2f 90       	pop	r2
    21ae:	08 95       	ret

000021b0 <ChipErase>:

void ChipErase(void)
{
	CONTROL_PORT |= 1<<XA1_BS2;
    21b0:	5d 9a       	sbi	0x0b, 5	; 11
	CONTROL_PORT &= ~(1<<XA0);
    21b2:	5c 98       	cbi	0x0b, 4	; 11
	CONTROL_PORT &= ~(1<<BS1_PAGEL);
    21b4:	5b 98       	cbi	0x0b, 3	; 11
	DATA_PORT = 0x80;
    21b6:	80 e8       	ldi	r24, 0x80	; 128
    21b8:	80 93 0b 01 	sts	0x010B, r24
    21bc:	82 e4       	ldi	r24, 0x42	; 66
    21be:	8a 95       	dec	r24
    21c0:	f1 f7       	brne	.-4      	; 0x21be <ChipErase+0xe>
    21c2:	00 c0       	rjmp	.+0      	; 0x21c4 <ChipErase+0x14>
	_delay_us(25);
	CONTROL_PORT |= 1<<XTAL1;
    21c4:	58 9a       	sbi	0x0b, 0	; 11
    21c6:	82 e4       	ldi	r24, 0x42	; 66
    21c8:	8a 95       	dec	r24
    21ca:	f1 f7       	brne	.-4      	; 0x21c8 <ChipErase+0x18>
    21cc:	00 c0       	rjmp	.+0      	; 0x21ce <ChipErase+0x1e>
	_delay_us(25);
	CONTROL_PORT &= ~(1<<XTAL1);
    21ce:	58 98       	cbi	0x0b, 0	; 11
    21d0:	82 e4       	ldi	r24, 0x42	; 66
    21d2:	8a 95       	dec	r24
    21d4:	f1 f7       	brne	.-4      	; 0x21d2 <ChipErase+0x22>
    21d6:	00 c0       	rjmp	.+0      	; 0x21d8 <ChipErase+0x28>
	_delay_us(25);
	CONTROL_PORT &= ~(1<<WR);
    21d8:	5a 98       	cbi	0x0b, 2	; 11
    21da:	82 e4       	ldi	r24, 0x42	; 66
    21dc:	8a 95       	dec	r24
    21de:	f1 f7       	brne	.-4      	; 0x21dc <ChipErase+0x2c>
    21e0:	00 c0       	rjmp	.+0      	; 0x21e2 <ChipErase+0x32>
	_delay_us(25);
	CONTROL_PORT |= 1<<WR;
    21e2:	5a 9a       	sbi	0x0b, 2	; 11
    21e4:	82 e4       	ldi	r24, 0x42	; 66
    21e6:	8a 95       	dec	r24
    21e8:	f1 f7       	brne	.-4      	; 0x21e6 <ChipErase+0x36>
    21ea:	00 c0       	rjmp	.+0      	; 0x21ec <ChipErase+0x3c>
	_delay_us(25);
	while(!(RDY_BSY_In & (1<<RDY_BSY)));
    21ec:	30 9b       	sbis	0x06, 0	; 6
    21ee:	fe cf       	rjmp	.-4      	; 0x21ec <ChipErase+0x3c>
}
    21f0:	08 95       	ret

000021f2 <ProgramFlash>:

void ProgramFlash(uint32_t sigBytes)
{
    21f2:	2f 92       	push	r2
    21f4:	3f 92       	push	r3
    21f6:	4f 92       	push	r4
    21f8:	5f 92       	push	r5
    21fa:	6f 92       	push	r6
    21fc:	7f 92       	push	r7
    21fe:	8f 92       	push	r8
    2200:	9f 92       	push	r9
    2202:	af 92       	push	r10
    2204:	bf 92       	push	r11
    2206:	cf 92       	push	r12
    2208:	df 92       	push	r13
    220a:	ef 92       	push	r14
    220c:	ff 92       	push	r15
    220e:	0f 93       	push	r16
    2210:	1f 93       	push	r17
    2212:	cf 93       	push	r28
    2214:	df 93       	push	r29
    2216:	cd b7       	in	r28, 0x3d	; 61
    2218:	de b7       	in	r29, 0x3e	; 62
    221a:	28 97       	sbiw	r28, 0x08	; 8
    221c:	0f b6       	in	r0, 0x3f	; 63
    221e:	f8 94       	cli
    2220:	de bf       	out	0x3e, r29	; 62
    2222:	0f be       	out	0x3f, r0	; 63
    2224:	cd bf       	out	0x3d, r28	; 61
	uint32_t totalBytes = 0; 
	uint16_t pageSize;
	int j;
	int i; 
	//Keep looping until the hexRow is the end of file or we hit the end of a page 
	if(sigBytes == ATtiny2313)
    2226:	6a 30       	cpi	r22, 0x0A	; 10
    2228:	21 e9       	ldi	r18, 0x91	; 145
    222a:	72 07       	cpc	r23, r18
    222c:	2e e1       	ldi	r18, 0x1E	; 30
    222e:	82 07       	cpc	r24, r18
    2230:	91 05       	cpc	r25, r1
    2232:	41 f4       	brne	.+16     	; 0x2244 <__stack+0x45>
	{
		printf("Page size is 16\n");
    2234:	89 e2       	ldi	r24, 0x29	; 41
    2236:	99 e0       	ldi	r25, 0x09	; 9
    2238:	a7 d1       	rcall	.+846    	; 0x2588 <puts>
		pageSize = 16; 
    223a:	80 e1       	ldi	r24, 0x10	; 16
    223c:	90 e0       	ldi	r25, 0x00	; 0
    223e:	9e 83       	std	Y+6, r25	; 0x06
    2240:	8d 83       	std	Y+5, r24	; 0x05
    2242:	0c c0       	rjmp	.+24     	; 0x225c <__stack+0x5d>
	}
	else if(sigBytes == ATmega324PA)
    2244:	61 31       	cpi	r22, 0x11	; 17
    2246:	75 49       	sbci	r23, 0x95	; 149
    2248:	8e 41       	sbci	r24, 0x1E	; 30
    224a:	91 05       	cpc	r25, r1
    224c:	39 f4       	brne	.+14     	; 0x225c <__stack+0x5d>
	{
		pageSize = 64; 
		printf("Page size is 64\n");
    224e:	89 e3       	ldi	r24, 0x39	; 57
    2250:	99 e0       	ldi	r25, 0x09	; 9
    2252:	9a d1       	rcall	.+820    	; 0x2588 <puts>
		printf("Page size is 16\n");
		pageSize = 16; 
	}
	else if(sigBytes == ATmega324PA)
	{
		pageSize = 64; 
    2254:	e0 e4       	ldi	r30, 0x40	; 64
    2256:	f0 e0       	ldi	r31, 0x00	; 0
    2258:	fe 83       	std	Y+6, r31	; 0x06
    225a:	ed 83       	std	Y+5, r30	; 0x05
		printf("Page size is 64\n");
	}
	
	LoadCommand(WRITE_FLASH);
    225c:	80 e1       	ldi	r24, 0x10	; 16
    225e:	c5 dc       	rcall	.-1654   	; 0x1bea <LoadCommand>
{
	char* hexRow;
	uint16_t byteCount;
	uint16_t address;
	uint16_t data;
	uint32_t totalBytes = 0; 
    2260:	41 2c       	mov	r4, r1
    2262:	51 2c       	mov	r5, r1
    2264:	32 01       	movw	r6, r4
			//printf("Total Bytes: %d, i: %d, j: %d\n", totalBytes, i, j);
			LatchData();
		}
		
		//Check to see if we hit the end of a page 
		if(totalBytes%pageSize == 0)
    2266:	ad 81       	ldd	r26, Y+5	; 0x05
    2268:	be 81       	ldd	r27, Y+6	; 0x06
    226a:	cd 01       	movw	r24, r26
    226c:	a0 e0       	ldi	r26, 0x00	; 0
    226e:	b0 e0       	ldi	r27, 0x00	; 0
    2270:	89 83       	std	Y+1, r24	; 0x01
    2272:	9a 83       	std	Y+2, r25	; 0x02
    2274:	ab 83       	std	Y+3, r26	; 0x03
    2276:	bc 83       	std	Y+4, r27	; 0x04
	
	LoadCommand(WRITE_FLASH);
	
	while(1)
	{
		hexRow = getHexRow();
    2278:	c3 da       	rcall	.-2682   	; 0x1800 <getHexRow>
    227a:	5c 01       	movw	r10, r24
		
		//printf("We're here now\n");
		
		if(hexRow[RECORD_TYPE] == TYPE_END_OF_FILE)
    227c:	fc 01       	movw	r30, r24
    227e:	84 81       	ldd	r24, Z+4	; 0x04
    2280:	81 30       	cpi	r24, 0x01	; 1
    2282:	89 f4       	brne	.+34     	; 0x22a6 <__stack+0xa7>
		{
			printf("End of File!\n"); 
    2284:	82 ec       	ldi	r24, 0xC2	; 194
    2286:	98 e0       	ldi	r25, 0x08	; 8
    2288:	7f d1       	rcall	.+766    	; 0x2588 <puts>
			ProgramPage();
		}
	}
	
	//After reaching end of file, do a final page write in case we did not fill an entire page
	if(totalBytes%pageSize != 0)
    228a:	8d 81       	ldd	r24, Y+5	; 0x05
    228c:	9e 81       	ldd	r25, Y+6	; 0x06
    228e:	9c 01       	movw	r18, r24
    2290:	40 e0       	ldi	r20, 0x00	; 0
    2292:	50 e0       	ldi	r21, 0x00	; 0
    2294:	c3 01       	movw	r24, r6
    2296:	b2 01       	movw	r22, r4
    2298:	ec d0       	rcall	.+472    	; 0x2472 <__udivmodsi4>
    229a:	67 2b       	or	r22, r23
    229c:	68 2b       	or	r22, r24
    229e:	69 2b       	or	r22, r25
    22a0:	09 f4       	brne	.+2      	; 0x22a4 <__stack+0xa5>
    22a2:	67 c0       	rjmp	.+206    	; 0x2372 <__stack+0x173>
    22a4:	60 c0       	rjmp	.+192    	; 0x2366 <__stack+0x167>
		{
			printf("End of File!\n"); 
			break;
		}
					
		byteCount = (hexRow[BYTE_COUNT]);
    22a6:	81 81       	ldd	r24, Z+1	; 0x01
    22a8:	88 2e       	mov	r8, r24
    22aa:	91 2c       	mov	r9, r1
		address = hexRow[ADDRESS_H];
    22ac:	22 80       	ldd	r2, Z+2	; 0x02
    22ae:	31 2c       	mov	r3, r1
		address <<= 8;
    22b0:	32 2c       	mov	r3, r2
    22b2:	22 24       	eor	r2, r2
		address |= (hexRow[ADDRESS_L]);
    22b4:	93 81       	ldd	r25, Z+3	; 0x03
    22b6:	29 2a       	or	r2, r25
		address /= 2; 
    22b8:	36 94       	lsr	r3
    22ba:	27 94       	ror	r2
		printf("\nByteCount: %d, Address: 0x%04x\n", byteCount, address); 
    22bc:	3f 92       	push	r3
    22be:	2f 92       	push	r2
    22c0:	1f 92       	push	r1
    22c2:	8f 93       	push	r24
    22c4:	a9 e4       	ldi	r26, 0x49	; 73
    22c6:	b9 e0       	ldi	r27, 0x09	; 9
    22c8:	bf 93       	push	r27
    22ca:	af 93       	push	r26
    22cc:	47 d1       	rcall	.+654    	; 0x255c <printf>
		j =0;
		for(i=0; i<byteCount; i+=2)
    22ce:	0f 90       	pop	r0
    22d0:	0f 90       	pop	r0
    22d2:	0f 90       	pop	r0
    22d4:	0f 90       	pop	r0
    22d6:	0f 90       	pop	r0
    22d8:	0f 90       	pop	r0
    22da:	81 14       	cp	r8, r1
    22dc:	91 04       	cpc	r9, r1
    22de:	81 f1       	breq	.+96     	; 0x2340 <__stack+0x141>
    22e0:	85 01       	movw	r16, r10
    22e2:	0b 5f       	subi	r16, 0xFB	; 251
    22e4:	1f 4f       	sbci	r17, 0xFF	; 255
    22e6:	71 01       	movw	r14, r2
    22e8:	c1 2c       	mov	r12, r1
    22ea:	d1 2c       	mov	r13, r1
    22ec:	1f 82       	std	Y+7, r1	; 0x07
    22ee:	18 86       	std	Y+8, r1	; 0x08
		{
			LoadLowAddress(address + j);
    22f0:	c7 01       	movw	r24, r14
    22f2:	b5 dc       	rcall	.-1686   	; 0x1c5e <LoadLowAddress>
			//printf("Address: 0x%04X\n",(address + j));
			data = hexRow[DATA_BEGIN + i + 1];
    22f4:	f5 01       	movw	r30, r10
    22f6:	ec 0d       	add	r30, r12
    22f8:	fd 1d       	adc	r31, r13
    22fa:	86 81       	ldd	r24, Z+6	; 0x06
    22fc:	90 e0       	ldi	r25, 0x00	; 0
			data <<= 8;
    22fe:	98 2f       	mov	r25, r24
    2300:	88 27       	eor	r24, r24
			data |= hexRow[DATA_BEGIN + i];
    2302:	d8 01       	movw	r26, r16
    2304:	2c 91       	ld	r18, X
			WriteWord(data);
    2306:	82 2b       	or	r24, r18
    2308:	84 dc       	rcall	.-1784   	; 0x1c12 <WriteWord>
			//printf("Word: 0x%04X\n",(data));
			totalBytes+=i; 
    230a:	ef 81       	ldd	r30, Y+7	; 0x07
    230c:	f8 85       	ldd	r31, Y+8	; 0x08
    230e:	cf 01       	movw	r24, r30
    2310:	aa 27       	eor	r26, r26
    2312:	97 fd       	sbrc	r25, 7
    2314:	a0 95       	com	r26
    2316:	ba 2f       	mov	r27, r26
    2318:	48 0e       	add	r4, r24
    231a:	59 1e       	adc	r5, r25
    231c:	6a 1e       	adc	r6, r26
    231e:	7b 1e       	adc	r7, r27
			j++;
			//printf("Total Bytes: %d, i: %d, j: %d\n", totalBytes, i, j);
			LatchData();
    2320:	c8 dc       	rcall	.-1648   	; 0x1cb2 <LatchData>
		address <<= 8;
		address |= (hexRow[ADDRESS_L]);
		address /= 2; 
		printf("\nByteCount: %d, Address: 0x%04x\n", byteCount, address); 
		j =0;
		for(i=0; i<byteCount; i+=2)
    2322:	2f 81       	ldd	r18, Y+7	; 0x07
    2324:	38 85       	ldd	r19, Y+8	; 0x08
    2326:	2e 5f       	subi	r18, 0xFE	; 254
    2328:	3f 4f       	sbci	r19, 0xFF	; 255
    232a:	38 87       	std	Y+8, r19	; 0x08
    232c:	2f 83       	std	Y+7, r18	; 0x07
    232e:	69 01       	movw	r12, r18
    2330:	3f ef       	ldi	r19, 0xFF	; 255
    2332:	e3 1a       	sub	r14, r19
    2334:	f3 0a       	sbc	r15, r19
    2336:	0e 5f       	subi	r16, 0xFE	; 254
    2338:	1f 4f       	sbci	r17, 0xFF	; 255
    233a:	c8 14       	cp	r12, r8
    233c:	d9 04       	cpc	r13, r9
    233e:	c0 f2       	brcs	.-80     	; 0x22f0 <__stack+0xf1>
			//printf("Total Bytes: %d, i: %d, j: %d\n", totalBytes, i, j);
			LatchData();
		}
		
		//Check to see if we hit the end of a page 
		if(totalBytes%pageSize == 0)
    2340:	c3 01       	movw	r24, r6
    2342:	b2 01       	movw	r22, r4
    2344:	29 81       	ldd	r18, Y+1	; 0x01
    2346:	3a 81       	ldd	r19, Y+2	; 0x02
    2348:	4b 81       	ldd	r20, Y+3	; 0x03
    234a:	5c 81       	ldd	r21, Y+4	; 0x04
    234c:	92 d0       	rcall	.+292    	; 0x2472 <__udivmodsi4>
    234e:	67 2b       	or	r22, r23
    2350:	68 2b       	or	r22, r24
    2352:	69 2b       	or	r22, r25
    2354:	09 f0       	breq	.+2      	; 0x2358 <__stack+0x159>
    2356:	90 cf       	rjmp	.-224    	; 0x2278 <__stack+0x79>
		{
			printf("Full Page Written\n");
    2358:	8a e6       	ldi	r24, 0x6A	; 106
    235a:	99 e0       	ldi	r25, 0x09	; 9
    235c:	15 d1       	rcall	.+554    	; 0x2588 <puts>
			LoadHighAddress(address);
    235e:	c1 01       	movw	r24, r2
    2360:	93 dc       	rcall	.-1754   	; 0x1c88 <LoadHighAddress>
			ProgramPage();
    2362:	b7 dc       	rcall	.-1682   	; 0x1cd2 <ProgramPage>
    2364:	89 cf       	rjmp	.-238    	; 0x2278 <__stack+0x79>
	}
	
	//After reaching end of file, do a final page write in case we did not fill an entire page
	if(totalBytes%pageSize != 0)
	{
		printf("Partial Page Written\n");
    2366:	8c e7       	ldi	r24, 0x7C	; 124
    2368:	99 e0       	ldi	r25, 0x09	; 9
    236a:	0e d1       	rcall	.+540    	; 0x2588 <puts>
		LoadHighAddress(address);
    236c:	c1 01       	movw	r24, r2
    236e:	8c dc       	rcall	.-1768   	; 0x1c88 <LoadHighAddress>
		ProgramPage();
    2370:	b0 dc       	rcall	.-1696   	; 0x1cd2 <ProgramPage>
	} 
	printf("Ending Page Programming!\n");
    2372:	81 e9       	ldi	r24, 0x91	; 145
    2374:	99 e0       	ldi	r25, 0x09	; 9
    2376:	08 d1       	rcall	.+528    	; 0x2588 <puts>
	EndPageProgramming();
    2378:	bb dc       	rcall	.-1674   	; 0x1cf0 <EndPageProgramming>
}
    237a:	28 96       	adiw	r28, 0x08	; 8
    237c:	0f b6       	in	r0, 0x3f	; 63
    237e:	f8 94       	cli
    2380:	de bf       	out	0x3e, r29	; 62
    2382:	0f be       	out	0x3f, r0	; 63
    2384:	cd bf       	out	0x3d, r28	; 61
    2386:	df 91       	pop	r29
    2388:	cf 91       	pop	r28
    238a:	1f 91       	pop	r17
    238c:	0f 91       	pop	r16
    238e:	ff 90       	pop	r15
    2390:	ef 90       	pop	r14
    2392:	df 90       	pop	r13
    2394:	cf 90       	pop	r12
    2396:	bf 90       	pop	r11
    2398:	af 90       	pop	r10
    239a:	9f 90       	pop	r9
    239c:	8f 90       	pop	r8
    239e:	7f 90       	pop	r7
    23a0:	6f 90       	pop	r6
    23a2:	5f 90       	pop	r5
    23a4:	4f 90       	pop	r4
    23a6:	3f 90       	pop	r3
    23a8:	2f 90       	pop	r2
    23aa:	08 95       	ret

000023ac <ExitParallelProgrammingMode>:

void ExitParallelProgrammingMode(void)
{
	disableVppRegulator();
    23ac:	0e 94 b9 08 	call	0x1172	; 0x1172 <disableVppRegulator>
	disableVccRegulator();
    23b0:	0e 94 bd 08 	call	0x117a	; 0x117a <disableVccRegulator>
	disableVLogic();
    23b4:	0e 94 dd 08 	call	0x11ba	; 0x11ba <disableVLogic>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    23b8:	8f e0       	ldi	r24, 0x0F	; 15
    23ba:	97 e2       	ldi	r25, 0x27	; 39
    23bc:	01 97       	sbiw	r24, 0x01	; 1
    23be:	f1 f7       	brne	.-4      	; 0x23bc <ExitParallelProgrammingMode+0x10>
    23c0:	00 c0       	rjmp	.+0      	; 0x23c2 <ExitParallelProgrammingMode+0x16>
    23c2:	00 00       	nop
	
	_delay_ms(5);
	DATA_PORT = 0x00;
    23c4:	10 92 0b 01 	sts	0x010B, r1
	CONTROL_PORT = 0x00;
    23c8:	1b b8       	out	0x0b, r1	; 11
    23ca:	8f ec       	ldi	r24, 0xCF	; 207
    23cc:	97 e0       	ldi	r25, 0x07	; 7
    23ce:	01 97       	sbiw	r24, 0x01	; 1
    23d0:	f1 f7       	brne	.-4      	; 0x23ce <ExitParallelProgrammingMode+0x22>
    23d2:	00 c0       	rjmp	.+0      	; 0x23d4 <ExitParallelProgrammingMode+0x28>
    23d4:	00 00       	nop
	_delay_ms(1);
	SPI_FPGA_Write(FPGA_Disable);
    23d6:	80 e0       	ldi	r24, 0x00	; 0
    23d8:	0e 94 9e 06 	call	0xd3c	; 0xd3c <SPI_FPGA_Write>
	
	SR_CNTRL_PORT &= ~(1<<SR_RESET); //Clearing Max395s and Shift Registers
    23dc:	e5 e0       	ldi	r30, 0x05	; 5
    23de:	f1 e0       	ldi	r31, 0x01	; 1
    23e0:	80 81       	ld	r24, Z
    23e2:	8f 7d       	andi	r24, 0xDF	; 223
    23e4:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    23e6:	95 e3       	ldi	r25, 0x35	; 53
    23e8:	9a 95       	dec	r25
    23ea:	f1 f7       	brne	.-4      	; 0x23e8 <ExitParallelProgrammingMode+0x3c>
    23ec:	00 00       	nop
	_delay_us(20);
	SR_CNTRL_PORT |= (1<<SR_RESET);
    23ee:	80 81       	ld	r24, Z
    23f0:	80 62       	ori	r24, 0x20	; 32
    23f2:	80 83       	st	Z, r24
    23f4:	2d e0       	ldi	r18, 0x0D	; 13
    23f6:	2a 95       	dec	r18
    23f8:	f1 f7       	brne	.-4      	; 0x23f6 <ExitParallelProgrammingMode+0x4a>
    23fa:	00 00       	nop
	_delay_us(5);
	SR_CNTRL_PORT |= (1<<SRCS);
    23fc:	80 81       	ld	r24, Z
    23fe:	80 61       	ori	r24, 0x10	; 16
    2400:	80 83       	st	Z, r24
    2402:	85 e3       	ldi	r24, 0x35	; 53
    2404:	8a 95       	dec	r24
    2406:	f1 f7       	brne	.-4      	; 0x2404 <ExitParallelProgrammingMode+0x58>
    2408:	00 00       	nop
	_delay_us(20);
	SR_CNTRL_PORT &= ~(1<<SRCS);
    240a:	80 81       	ld	r24, Z
    240c:	8f 7e       	andi	r24, 0xEF	; 239
    240e:	80 83       	st	Z, r24
	
	SR_CNTRL_PORT |= (1<<SROE);
    2410:	80 81       	ld	r24, Z
    2412:	88 60       	ori	r24, 0x08	; 8
    2414:	80 83       	st	Z, r24
	
	LED_PORT |= ((1<<LED_Green) | (1<<LED_Yellow) | (1<<LED_Red));
    2416:	84 b3       	in	r24, 0x14	; 20
    2418:	87 60       	ori	r24, 0x07	; 7
    241a:	84 bb       	out	0x14, r24	; 20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    241c:	9f ef       	ldi	r25, 0xFF	; 255
    241e:	29 e6       	ldi	r18, 0x69	; 105
    2420:	88 e1       	ldi	r24, 0x18	; 24
    2422:	91 50       	subi	r25, 0x01	; 1
    2424:	20 40       	sbci	r18, 0x00	; 0
    2426:	80 40       	sbci	r24, 0x00	; 0
    2428:	e1 f7       	brne	.-8      	; 0x2422 <ExitParallelProgrammingMode+0x76>
    242a:	00 c0       	rjmp	.+0      	; 0x242c <ExitParallelProgrammingMode+0x80>
    242c:	00 00       	nop
	_delay_ms(1000);
	LED_PORT |= (1<<LED_Green);
    242e:	a0 9a       	sbi	0x14, 0	; 20
	LED_PORT &= ~((1<<LED_Yellow) | (1<<LED_Red));
    2430:	84 b3       	in	r24, 0x14	; 20
    2432:	89 7f       	andi	r24, 0xF9	; 249
    2434:	84 bb       	out	0x14, r24	; 20
    2436:	08 95       	ret

00002438 <main>:
    2438:	2f ef       	ldi	r18, 0xFF	; 255
    243a:	89 e6       	ldi	r24, 0x69	; 105
    243c:	98 e1       	ldi	r25, 0x18	; 24
    243e:	21 50       	subi	r18, 0x01	; 1
    2440:	80 40       	sbci	r24, 0x00	; 0
    2442:	90 40       	sbci	r25, 0x00	; 0
    2444:	e1 f7       	brne	.-8      	; 0x243e <main+0x6>
    2446:	00 c0       	rjmp	.+0      	; 0x2448 <main+0x10>
    2448:	00 00       	nop
#include "Program/AVR.h"

int main(void)
{
	_delay_ms(1000);
	LED_DDR |= ((1<<LED_Green) | (1<<LED_Yellow) | (1<<LED_Red));
    244a:	83 b3       	in	r24, 0x13	; 19
    244c:	87 60       	ori	r24, 0x07	; 7
    244e:	83 bb       	out	0x13, r24	; 19
	LED_PORT |= (1<<LED_Green);
    2450:	a0 9a       	sbi	0x14, 0	; 20
	connectionInit(); 
    2452:	0e 94 bc 00 	call	0x178	; 0x178 <connectionInit>
	hexInit();
    2456:	c3 d9       	rcall	.-3194   	; 0x17de <hexInit>
	//ethernetInit(); 
	sei(); 
    2458:	78 94       	sei
	//Collecting garbage transmission on wi-fi module bootup 
	//receiveStatus();
	networkConnect("Wi-Pro", "brightshoe902"); 
    245a:	6a ea       	ldi	r22, 0xAA	; 170
    245c:	79 e0       	ldi	r23, 0x09	; 9
    245e:	88 eb       	ldi	r24, 0xB8	; 184
    2460:	99 e0       	ldi	r25, 0x09	; 9
    2462:	0e 94 ed 08 	call	0x11da	; 0x11da <networkConnect>
	//_delay_ms(100);
	//networkTest();  
	pollingInit(); 
    2466:	0e 94 a9 00 	call	0x152	; 0x152 <pollingInit>
	//Write test file to external RAM
	//Test switching circuitry code
	
	//Program(ATmega324PA);
	
	printf("Done!\n"); 
    246a:	8f eb       	ldi	r24, 0xBF	; 191
    246c:	99 e0       	ldi	r25, 0x09	; 9
    246e:	8c d0       	rcall	.+280    	; 0x2588 <puts>
    2470:	ff cf       	rjmp	.-2      	; 0x2470 <main+0x38>

00002472 <__udivmodsi4>:
    2472:	a1 e2       	ldi	r26, 0x21	; 33
    2474:	1a 2e       	mov	r1, r26
    2476:	aa 1b       	sub	r26, r26
    2478:	bb 1b       	sub	r27, r27
    247a:	fd 01       	movw	r30, r26
    247c:	0d c0       	rjmp	.+26     	; 0x2498 <__udivmodsi4_ep>

0000247e <__udivmodsi4_loop>:
    247e:	aa 1f       	adc	r26, r26
    2480:	bb 1f       	adc	r27, r27
    2482:	ee 1f       	adc	r30, r30
    2484:	ff 1f       	adc	r31, r31
    2486:	a2 17       	cp	r26, r18
    2488:	b3 07       	cpc	r27, r19
    248a:	e4 07       	cpc	r30, r20
    248c:	f5 07       	cpc	r31, r21
    248e:	20 f0       	brcs	.+8      	; 0x2498 <__udivmodsi4_ep>
    2490:	a2 1b       	sub	r26, r18
    2492:	b3 0b       	sbc	r27, r19
    2494:	e4 0b       	sbc	r30, r20
    2496:	f5 0b       	sbc	r31, r21

00002498 <__udivmodsi4_ep>:
    2498:	66 1f       	adc	r22, r22
    249a:	77 1f       	adc	r23, r23
    249c:	88 1f       	adc	r24, r24
    249e:	99 1f       	adc	r25, r25
    24a0:	1a 94       	dec	r1
    24a2:	69 f7       	brne	.-38     	; 0x247e <__udivmodsi4_loop>
    24a4:	60 95       	com	r22
    24a6:	70 95       	com	r23
    24a8:	80 95       	com	r24
    24aa:	90 95       	com	r25
    24ac:	9b 01       	movw	r18, r22
    24ae:	ac 01       	movw	r20, r24
    24b0:	bd 01       	movw	r22, r26
    24b2:	cf 01       	movw	r24, r30
    24b4:	08 95       	ret

000024b6 <__umulhisi3>:
    24b6:	a2 9f       	mul	r26, r18
    24b8:	b0 01       	movw	r22, r0
    24ba:	b3 9f       	mul	r27, r19
    24bc:	c0 01       	movw	r24, r0
    24be:	a3 9f       	mul	r26, r19
    24c0:	70 0d       	add	r23, r0
    24c2:	81 1d       	adc	r24, r1
    24c4:	11 24       	eor	r1, r1
    24c6:	91 1d       	adc	r25, r1
    24c8:	b2 9f       	mul	r27, r18
    24ca:	70 0d       	add	r23, r0
    24cc:	81 1d       	adc	r24, r1
    24ce:	11 24       	eor	r1, r1
    24d0:	91 1d       	adc	r25, r1
    24d2:	08 95       	ret

000024d4 <strcat>:
    24d4:	fb 01       	movw	r30, r22
    24d6:	dc 01       	movw	r26, r24
    24d8:	0d 90       	ld	r0, X+
    24da:	00 20       	and	r0, r0
    24dc:	e9 f7       	brne	.-6      	; 0x24d8 <strcat+0x4>
    24de:	11 97       	sbiw	r26, 0x01	; 1
    24e0:	01 90       	ld	r0, Z+
    24e2:	0d 92       	st	X+, r0
    24e4:	00 20       	and	r0, r0
    24e6:	e1 f7       	brne	.-8      	; 0x24e0 <strcat+0xc>
    24e8:	08 95       	ret

000024ea <strcpy>:
    24ea:	fb 01       	movw	r30, r22
    24ec:	dc 01       	movw	r26, r24
    24ee:	01 90       	ld	r0, Z+
    24f0:	0d 92       	st	X+, r0
    24f2:	00 20       	and	r0, r0
    24f4:	e1 f7       	brne	.-8      	; 0x24ee <strcpy+0x4>
    24f6:	08 95       	ret

000024f8 <fputc>:
    24f8:	0f 93       	push	r16
    24fa:	1f 93       	push	r17
    24fc:	cf 93       	push	r28
    24fe:	df 93       	push	r29
    2500:	18 2f       	mov	r17, r24
    2502:	09 2f       	mov	r16, r25
    2504:	eb 01       	movw	r28, r22
    2506:	8b 81       	ldd	r24, Y+3	; 0x03
    2508:	81 fd       	sbrc	r24, 1
    250a:	03 c0       	rjmp	.+6      	; 0x2512 <fputc+0x1a>
    250c:	8f ef       	ldi	r24, 0xFF	; 255
    250e:	9f ef       	ldi	r25, 0xFF	; 255
    2510:	20 c0       	rjmp	.+64     	; 0x2552 <fputc+0x5a>
    2512:	82 ff       	sbrs	r24, 2
    2514:	10 c0       	rjmp	.+32     	; 0x2536 <fputc+0x3e>
    2516:	4e 81       	ldd	r20, Y+6	; 0x06
    2518:	5f 81       	ldd	r21, Y+7	; 0x07
    251a:	2c 81       	ldd	r18, Y+4	; 0x04
    251c:	3d 81       	ldd	r19, Y+5	; 0x05
    251e:	42 17       	cp	r20, r18
    2520:	53 07       	cpc	r21, r19
    2522:	7c f4       	brge	.+30     	; 0x2542 <fputc+0x4a>
    2524:	e8 81       	ld	r30, Y
    2526:	f9 81       	ldd	r31, Y+1	; 0x01
    2528:	9f 01       	movw	r18, r30
    252a:	2f 5f       	subi	r18, 0xFF	; 255
    252c:	3f 4f       	sbci	r19, 0xFF	; 255
    252e:	39 83       	std	Y+1, r19	; 0x01
    2530:	28 83       	st	Y, r18
    2532:	10 83       	st	Z, r17
    2534:	06 c0       	rjmp	.+12     	; 0x2542 <fputc+0x4a>
    2536:	e8 85       	ldd	r30, Y+8	; 0x08
    2538:	f9 85       	ldd	r31, Y+9	; 0x09
    253a:	81 2f       	mov	r24, r17
    253c:	09 95       	icall
    253e:	89 2b       	or	r24, r25
    2540:	29 f7       	brne	.-54     	; 0x250c <fputc+0x14>
    2542:	2e 81       	ldd	r18, Y+6	; 0x06
    2544:	3f 81       	ldd	r19, Y+7	; 0x07
    2546:	2f 5f       	subi	r18, 0xFF	; 255
    2548:	3f 4f       	sbci	r19, 0xFF	; 255
    254a:	3f 83       	std	Y+7, r19	; 0x07
    254c:	2e 83       	std	Y+6, r18	; 0x06
    254e:	81 2f       	mov	r24, r17
    2550:	90 2f       	mov	r25, r16
    2552:	df 91       	pop	r29
    2554:	cf 91       	pop	r28
    2556:	1f 91       	pop	r17
    2558:	0f 91       	pop	r16
    255a:	08 95       	ret

0000255c <printf>:
    255c:	cf 93       	push	r28
    255e:	df 93       	push	r29
    2560:	cd b7       	in	r28, 0x3d	; 61
    2562:	de b7       	in	r29, 0x3e	; 62
    2564:	fe 01       	movw	r30, r28
    2566:	35 96       	adiw	r30, 0x05	; 5
    2568:	61 91       	ld	r22, Z+
    256a:	71 91       	ld	r23, Z+
    256c:	af 01       	movw	r20, r30
    256e:	80 91 a9 0b 	lds	r24, 0x0BA9
    2572:	90 91 aa 0b 	lds	r25, 0x0BAA
    2576:	35 d0       	rcall	.+106    	; 0x25e2 <vfprintf>
    2578:	df 91       	pop	r29
    257a:	cf 91       	pop	r28
    257c:	08 95       	ret

0000257e <putchar>:
    257e:	60 91 a9 0b 	lds	r22, 0x0BA9
    2582:	70 91 aa 0b 	lds	r23, 0x0BAA
    2586:	b8 cf       	rjmp	.-144    	; 0x24f8 <fputc>

00002588 <puts>:
    2588:	0f 93       	push	r16
    258a:	1f 93       	push	r17
    258c:	cf 93       	push	r28
    258e:	df 93       	push	r29
    2590:	e0 91 a9 0b 	lds	r30, 0x0BA9
    2594:	f0 91 aa 0b 	lds	r31, 0x0BAA
    2598:	23 81       	ldd	r18, Z+3	; 0x03
    259a:	21 ff       	sbrs	r18, 1
    259c:	1b c0       	rjmp	.+54     	; 0x25d4 <puts+0x4c>
    259e:	ec 01       	movw	r28, r24
    25a0:	00 e0       	ldi	r16, 0x00	; 0
    25a2:	10 e0       	ldi	r17, 0x00	; 0
    25a4:	89 91       	ld	r24, Y+
    25a6:	60 91 a9 0b 	lds	r22, 0x0BA9
    25aa:	70 91 aa 0b 	lds	r23, 0x0BAA
    25ae:	db 01       	movw	r26, r22
    25b0:	18 96       	adiw	r26, 0x08	; 8
    25b2:	ed 91       	ld	r30, X+
    25b4:	fc 91       	ld	r31, X
    25b6:	19 97       	sbiw	r26, 0x09	; 9
    25b8:	88 23       	and	r24, r24
    25ba:	31 f0       	breq	.+12     	; 0x25c8 <puts+0x40>
    25bc:	09 95       	icall
    25be:	89 2b       	or	r24, r25
    25c0:	89 f3       	breq	.-30     	; 0x25a4 <puts+0x1c>
    25c2:	0f ef       	ldi	r16, 0xFF	; 255
    25c4:	1f ef       	ldi	r17, 0xFF	; 255
    25c6:	ee cf       	rjmp	.-36     	; 0x25a4 <puts+0x1c>
    25c8:	8a e0       	ldi	r24, 0x0A	; 10
    25ca:	09 95       	icall
    25cc:	89 2b       	or	r24, r25
    25ce:	11 f4       	brne	.+4      	; 0x25d4 <puts+0x4c>
    25d0:	c8 01       	movw	r24, r16
    25d2:	02 c0       	rjmp	.+4      	; 0x25d8 <puts+0x50>
    25d4:	8f ef       	ldi	r24, 0xFF	; 255
    25d6:	9f ef       	ldi	r25, 0xFF	; 255
    25d8:	df 91       	pop	r29
    25da:	cf 91       	pop	r28
    25dc:	1f 91       	pop	r17
    25de:	0f 91       	pop	r16
    25e0:	08 95       	ret

000025e2 <vfprintf>:
    25e2:	2f 92       	push	r2
    25e4:	3f 92       	push	r3
    25e6:	4f 92       	push	r4
    25e8:	5f 92       	push	r5
    25ea:	6f 92       	push	r6
    25ec:	7f 92       	push	r7
    25ee:	8f 92       	push	r8
    25f0:	9f 92       	push	r9
    25f2:	af 92       	push	r10
    25f4:	bf 92       	push	r11
    25f6:	cf 92       	push	r12
    25f8:	df 92       	push	r13
    25fa:	ef 92       	push	r14
    25fc:	ff 92       	push	r15
    25fe:	0f 93       	push	r16
    2600:	1f 93       	push	r17
    2602:	cf 93       	push	r28
    2604:	df 93       	push	r29
    2606:	cd b7       	in	r28, 0x3d	; 61
    2608:	de b7       	in	r29, 0x3e	; 62
    260a:	2c 97       	sbiw	r28, 0x0c	; 12
    260c:	0f b6       	in	r0, 0x3f	; 63
    260e:	f8 94       	cli
    2610:	de bf       	out	0x3e, r29	; 62
    2612:	0f be       	out	0x3f, r0	; 63
    2614:	cd bf       	out	0x3d, r28	; 61
    2616:	7c 01       	movw	r14, r24
    2618:	6b 01       	movw	r12, r22
    261a:	8a 01       	movw	r16, r20
    261c:	fc 01       	movw	r30, r24
    261e:	17 82       	std	Z+7, r1	; 0x07
    2620:	16 82       	std	Z+6, r1	; 0x06
    2622:	83 81       	ldd	r24, Z+3	; 0x03
    2624:	81 ff       	sbrs	r24, 1
    2626:	b0 c1       	rjmp	.+864    	; 0x2988 <vfprintf+0x3a6>
    2628:	ce 01       	movw	r24, r28
    262a:	01 96       	adiw	r24, 0x01	; 1
    262c:	4c 01       	movw	r8, r24
    262e:	f7 01       	movw	r30, r14
    2630:	93 81       	ldd	r25, Z+3	; 0x03
    2632:	f6 01       	movw	r30, r12
    2634:	93 fd       	sbrc	r25, 3
    2636:	85 91       	lpm	r24, Z+
    2638:	93 ff       	sbrs	r25, 3
    263a:	81 91       	ld	r24, Z+
    263c:	6f 01       	movw	r12, r30
    263e:	88 23       	and	r24, r24
    2640:	09 f4       	brne	.+2      	; 0x2644 <vfprintf+0x62>
    2642:	9e c1       	rjmp	.+828    	; 0x2980 <vfprintf+0x39e>
    2644:	85 32       	cpi	r24, 0x25	; 37
    2646:	39 f4       	brne	.+14     	; 0x2656 <vfprintf+0x74>
    2648:	93 fd       	sbrc	r25, 3
    264a:	85 91       	lpm	r24, Z+
    264c:	93 ff       	sbrs	r25, 3
    264e:	81 91       	ld	r24, Z+
    2650:	6f 01       	movw	r12, r30
    2652:	85 32       	cpi	r24, 0x25	; 37
    2654:	21 f4       	brne	.+8      	; 0x265e <vfprintf+0x7c>
    2656:	b7 01       	movw	r22, r14
    2658:	90 e0       	ldi	r25, 0x00	; 0
    265a:	4e df       	rcall	.-356    	; 0x24f8 <fputc>
    265c:	e8 cf       	rjmp	.-48     	; 0x262e <vfprintf+0x4c>
    265e:	51 2c       	mov	r5, r1
    2660:	31 2c       	mov	r3, r1
    2662:	20 e0       	ldi	r18, 0x00	; 0
    2664:	20 32       	cpi	r18, 0x20	; 32
    2666:	a0 f4       	brcc	.+40     	; 0x2690 <vfprintf+0xae>
    2668:	8b 32       	cpi	r24, 0x2B	; 43
    266a:	69 f0       	breq	.+26     	; 0x2686 <vfprintf+0xa4>
    266c:	30 f4       	brcc	.+12     	; 0x267a <vfprintf+0x98>
    266e:	80 32       	cpi	r24, 0x20	; 32
    2670:	59 f0       	breq	.+22     	; 0x2688 <vfprintf+0xa6>
    2672:	83 32       	cpi	r24, 0x23	; 35
    2674:	69 f4       	brne	.+26     	; 0x2690 <vfprintf+0xae>
    2676:	20 61       	ori	r18, 0x10	; 16
    2678:	2c c0       	rjmp	.+88     	; 0x26d2 <vfprintf+0xf0>
    267a:	8d 32       	cpi	r24, 0x2D	; 45
    267c:	39 f0       	breq	.+14     	; 0x268c <vfprintf+0xaa>
    267e:	80 33       	cpi	r24, 0x30	; 48
    2680:	39 f4       	brne	.+14     	; 0x2690 <vfprintf+0xae>
    2682:	21 60       	ori	r18, 0x01	; 1
    2684:	26 c0       	rjmp	.+76     	; 0x26d2 <vfprintf+0xf0>
    2686:	22 60       	ori	r18, 0x02	; 2
    2688:	24 60       	ori	r18, 0x04	; 4
    268a:	23 c0       	rjmp	.+70     	; 0x26d2 <vfprintf+0xf0>
    268c:	28 60       	ori	r18, 0x08	; 8
    268e:	21 c0       	rjmp	.+66     	; 0x26d2 <vfprintf+0xf0>
    2690:	27 fd       	sbrc	r18, 7
    2692:	27 c0       	rjmp	.+78     	; 0x26e2 <vfprintf+0x100>
    2694:	30 ed       	ldi	r19, 0xD0	; 208
    2696:	38 0f       	add	r19, r24
    2698:	3a 30       	cpi	r19, 0x0A	; 10
    269a:	78 f4       	brcc	.+30     	; 0x26ba <vfprintf+0xd8>
    269c:	26 ff       	sbrs	r18, 6
    269e:	06 c0       	rjmp	.+12     	; 0x26ac <vfprintf+0xca>
    26a0:	fa e0       	ldi	r31, 0x0A	; 10
    26a2:	5f 9e       	mul	r5, r31
    26a4:	30 0d       	add	r19, r0
    26a6:	11 24       	eor	r1, r1
    26a8:	53 2e       	mov	r5, r19
    26aa:	13 c0       	rjmp	.+38     	; 0x26d2 <vfprintf+0xf0>
    26ac:	8a e0       	ldi	r24, 0x0A	; 10
    26ae:	38 9e       	mul	r3, r24
    26b0:	30 0d       	add	r19, r0
    26b2:	11 24       	eor	r1, r1
    26b4:	33 2e       	mov	r3, r19
    26b6:	20 62       	ori	r18, 0x20	; 32
    26b8:	0c c0       	rjmp	.+24     	; 0x26d2 <vfprintf+0xf0>
    26ba:	8e 32       	cpi	r24, 0x2E	; 46
    26bc:	21 f4       	brne	.+8      	; 0x26c6 <vfprintf+0xe4>
    26be:	26 fd       	sbrc	r18, 6
    26c0:	5f c1       	rjmp	.+702    	; 0x2980 <vfprintf+0x39e>
    26c2:	20 64       	ori	r18, 0x40	; 64
    26c4:	06 c0       	rjmp	.+12     	; 0x26d2 <vfprintf+0xf0>
    26c6:	8c 36       	cpi	r24, 0x6C	; 108
    26c8:	11 f4       	brne	.+4      	; 0x26ce <vfprintf+0xec>
    26ca:	20 68       	ori	r18, 0x80	; 128
    26cc:	02 c0       	rjmp	.+4      	; 0x26d2 <vfprintf+0xf0>
    26ce:	88 36       	cpi	r24, 0x68	; 104
    26d0:	41 f4       	brne	.+16     	; 0x26e2 <vfprintf+0x100>
    26d2:	f6 01       	movw	r30, r12
    26d4:	93 fd       	sbrc	r25, 3
    26d6:	85 91       	lpm	r24, Z+
    26d8:	93 ff       	sbrs	r25, 3
    26da:	81 91       	ld	r24, Z+
    26dc:	6f 01       	movw	r12, r30
    26de:	81 11       	cpse	r24, r1
    26e0:	c1 cf       	rjmp	.-126    	; 0x2664 <vfprintf+0x82>
    26e2:	98 2f       	mov	r25, r24
    26e4:	9f 7d       	andi	r25, 0xDF	; 223
    26e6:	95 54       	subi	r25, 0x45	; 69
    26e8:	93 30       	cpi	r25, 0x03	; 3
    26ea:	28 f4       	brcc	.+10     	; 0x26f6 <vfprintf+0x114>
    26ec:	0c 5f       	subi	r16, 0xFC	; 252
    26ee:	1f 4f       	sbci	r17, 0xFF	; 255
    26f0:	ff e3       	ldi	r31, 0x3F	; 63
    26f2:	f9 83       	std	Y+1, r31	; 0x01
    26f4:	0d c0       	rjmp	.+26     	; 0x2710 <vfprintf+0x12e>
    26f6:	83 36       	cpi	r24, 0x63	; 99
    26f8:	31 f0       	breq	.+12     	; 0x2706 <vfprintf+0x124>
    26fa:	83 37       	cpi	r24, 0x73	; 115
    26fc:	71 f0       	breq	.+28     	; 0x271a <vfprintf+0x138>
    26fe:	83 35       	cpi	r24, 0x53	; 83
    2700:	09 f0       	breq	.+2      	; 0x2704 <vfprintf+0x122>
    2702:	57 c0       	rjmp	.+174    	; 0x27b2 <vfprintf+0x1d0>
    2704:	21 c0       	rjmp	.+66     	; 0x2748 <vfprintf+0x166>
    2706:	f8 01       	movw	r30, r16
    2708:	80 81       	ld	r24, Z
    270a:	89 83       	std	Y+1, r24	; 0x01
    270c:	0e 5f       	subi	r16, 0xFE	; 254
    270e:	1f 4f       	sbci	r17, 0xFF	; 255
    2710:	44 24       	eor	r4, r4
    2712:	43 94       	inc	r4
    2714:	51 2c       	mov	r5, r1
    2716:	54 01       	movw	r10, r8
    2718:	14 c0       	rjmp	.+40     	; 0x2742 <vfprintf+0x160>
    271a:	38 01       	movw	r6, r16
    271c:	f2 e0       	ldi	r31, 0x02	; 2
    271e:	6f 0e       	add	r6, r31
    2720:	71 1c       	adc	r7, r1
    2722:	f8 01       	movw	r30, r16
    2724:	a0 80       	ld	r10, Z
    2726:	b1 80       	ldd	r11, Z+1	; 0x01
    2728:	26 ff       	sbrs	r18, 6
    272a:	03 c0       	rjmp	.+6      	; 0x2732 <vfprintf+0x150>
    272c:	65 2d       	mov	r22, r5
    272e:	70 e0       	ldi	r23, 0x00	; 0
    2730:	02 c0       	rjmp	.+4      	; 0x2736 <vfprintf+0x154>
    2732:	6f ef       	ldi	r22, 0xFF	; 255
    2734:	7f ef       	ldi	r23, 0xFF	; 255
    2736:	c5 01       	movw	r24, r10
    2738:	2c 87       	std	Y+12, r18	; 0x0c
    273a:	4c d1       	rcall	.+664    	; 0x29d4 <strnlen>
    273c:	2c 01       	movw	r4, r24
    273e:	83 01       	movw	r16, r6
    2740:	2c 85       	ldd	r18, Y+12	; 0x0c
    2742:	2f 77       	andi	r18, 0x7F	; 127
    2744:	22 2e       	mov	r2, r18
    2746:	16 c0       	rjmp	.+44     	; 0x2774 <vfprintf+0x192>
    2748:	38 01       	movw	r6, r16
    274a:	f2 e0       	ldi	r31, 0x02	; 2
    274c:	6f 0e       	add	r6, r31
    274e:	71 1c       	adc	r7, r1
    2750:	f8 01       	movw	r30, r16
    2752:	a0 80       	ld	r10, Z
    2754:	b1 80       	ldd	r11, Z+1	; 0x01
    2756:	26 ff       	sbrs	r18, 6
    2758:	03 c0       	rjmp	.+6      	; 0x2760 <vfprintf+0x17e>
    275a:	65 2d       	mov	r22, r5
    275c:	70 e0       	ldi	r23, 0x00	; 0
    275e:	02 c0       	rjmp	.+4      	; 0x2764 <vfprintf+0x182>
    2760:	6f ef       	ldi	r22, 0xFF	; 255
    2762:	7f ef       	ldi	r23, 0xFF	; 255
    2764:	c5 01       	movw	r24, r10
    2766:	2c 87       	std	Y+12, r18	; 0x0c
    2768:	2a d1       	rcall	.+596    	; 0x29be <strnlen_P>
    276a:	2c 01       	movw	r4, r24
    276c:	2c 85       	ldd	r18, Y+12	; 0x0c
    276e:	20 68       	ori	r18, 0x80	; 128
    2770:	22 2e       	mov	r2, r18
    2772:	83 01       	movw	r16, r6
    2774:	23 fc       	sbrc	r2, 3
    2776:	19 c0       	rjmp	.+50     	; 0x27aa <vfprintf+0x1c8>
    2778:	83 2d       	mov	r24, r3
    277a:	90 e0       	ldi	r25, 0x00	; 0
    277c:	48 16       	cp	r4, r24
    277e:	59 06       	cpc	r5, r25
    2780:	a0 f4       	brcc	.+40     	; 0x27aa <vfprintf+0x1c8>
    2782:	b7 01       	movw	r22, r14
    2784:	80 e2       	ldi	r24, 0x20	; 32
    2786:	90 e0       	ldi	r25, 0x00	; 0
    2788:	b7 de       	rcall	.-658    	; 0x24f8 <fputc>
    278a:	3a 94       	dec	r3
    278c:	f5 cf       	rjmp	.-22     	; 0x2778 <vfprintf+0x196>
    278e:	f5 01       	movw	r30, r10
    2790:	27 fc       	sbrc	r2, 7
    2792:	85 91       	lpm	r24, Z+
    2794:	27 fe       	sbrs	r2, 7
    2796:	81 91       	ld	r24, Z+
    2798:	5f 01       	movw	r10, r30
    279a:	b7 01       	movw	r22, r14
    279c:	90 e0       	ldi	r25, 0x00	; 0
    279e:	ac de       	rcall	.-680    	; 0x24f8 <fputc>
    27a0:	31 10       	cpse	r3, r1
    27a2:	3a 94       	dec	r3
    27a4:	f1 e0       	ldi	r31, 0x01	; 1
    27a6:	4f 1a       	sub	r4, r31
    27a8:	51 08       	sbc	r5, r1
    27aa:	41 14       	cp	r4, r1
    27ac:	51 04       	cpc	r5, r1
    27ae:	79 f7       	brne	.-34     	; 0x278e <vfprintf+0x1ac>
    27b0:	de c0       	rjmp	.+444    	; 0x296e <vfprintf+0x38c>
    27b2:	84 36       	cpi	r24, 0x64	; 100
    27b4:	11 f0       	breq	.+4      	; 0x27ba <vfprintf+0x1d8>
    27b6:	89 36       	cpi	r24, 0x69	; 105
    27b8:	31 f5       	brne	.+76     	; 0x2806 <vfprintf+0x224>
    27ba:	f8 01       	movw	r30, r16
    27bc:	27 ff       	sbrs	r18, 7
    27be:	07 c0       	rjmp	.+14     	; 0x27ce <vfprintf+0x1ec>
    27c0:	60 81       	ld	r22, Z
    27c2:	71 81       	ldd	r23, Z+1	; 0x01
    27c4:	82 81       	ldd	r24, Z+2	; 0x02
    27c6:	93 81       	ldd	r25, Z+3	; 0x03
    27c8:	0c 5f       	subi	r16, 0xFC	; 252
    27ca:	1f 4f       	sbci	r17, 0xFF	; 255
    27cc:	08 c0       	rjmp	.+16     	; 0x27de <vfprintf+0x1fc>
    27ce:	60 81       	ld	r22, Z
    27d0:	71 81       	ldd	r23, Z+1	; 0x01
    27d2:	88 27       	eor	r24, r24
    27d4:	77 fd       	sbrc	r23, 7
    27d6:	80 95       	com	r24
    27d8:	98 2f       	mov	r25, r24
    27da:	0e 5f       	subi	r16, 0xFE	; 254
    27dc:	1f 4f       	sbci	r17, 0xFF	; 255
    27de:	2f 76       	andi	r18, 0x6F	; 111
    27e0:	b2 2e       	mov	r11, r18
    27e2:	97 ff       	sbrs	r25, 7
    27e4:	09 c0       	rjmp	.+18     	; 0x27f8 <vfprintf+0x216>
    27e6:	90 95       	com	r25
    27e8:	80 95       	com	r24
    27ea:	70 95       	com	r23
    27ec:	61 95       	neg	r22
    27ee:	7f 4f       	sbci	r23, 0xFF	; 255
    27f0:	8f 4f       	sbci	r24, 0xFF	; 255
    27f2:	9f 4f       	sbci	r25, 0xFF	; 255
    27f4:	20 68       	ori	r18, 0x80	; 128
    27f6:	b2 2e       	mov	r11, r18
    27f8:	2a e0       	ldi	r18, 0x0A	; 10
    27fa:	30 e0       	ldi	r19, 0x00	; 0
    27fc:	a4 01       	movw	r20, r8
    27fe:	f5 d0       	rcall	.+490    	; 0x29ea <__ultoa_invert>
    2800:	a8 2e       	mov	r10, r24
    2802:	a8 18       	sub	r10, r8
    2804:	43 c0       	rjmp	.+134    	; 0x288c <vfprintf+0x2aa>
    2806:	85 37       	cpi	r24, 0x75	; 117
    2808:	29 f4       	brne	.+10     	; 0x2814 <vfprintf+0x232>
    280a:	2f 7e       	andi	r18, 0xEF	; 239
    280c:	b2 2e       	mov	r11, r18
    280e:	2a e0       	ldi	r18, 0x0A	; 10
    2810:	30 e0       	ldi	r19, 0x00	; 0
    2812:	25 c0       	rjmp	.+74     	; 0x285e <vfprintf+0x27c>
    2814:	f2 2f       	mov	r31, r18
    2816:	f9 7f       	andi	r31, 0xF9	; 249
    2818:	bf 2e       	mov	r11, r31
    281a:	8f 36       	cpi	r24, 0x6F	; 111
    281c:	c1 f0       	breq	.+48     	; 0x284e <vfprintf+0x26c>
    281e:	18 f4       	brcc	.+6      	; 0x2826 <vfprintf+0x244>
    2820:	88 35       	cpi	r24, 0x58	; 88
    2822:	79 f0       	breq	.+30     	; 0x2842 <vfprintf+0x260>
    2824:	ad c0       	rjmp	.+346    	; 0x2980 <vfprintf+0x39e>
    2826:	80 37       	cpi	r24, 0x70	; 112
    2828:	19 f0       	breq	.+6      	; 0x2830 <vfprintf+0x24e>
    282a:	88 37       	cpi	r24, 0x78	; 120
    282c:	21 f0       	breq	.+8      	; 0x2836 <vfprintf+0x254>
    282e:	a8 c0       	rjmp	.+336    	; 0x2980 <vfprintf+0x39e>
    2830:	2f 2f       	mov	r18, r31
    2832:	20 61       	ori	r18, 0x10	; 16
    2834:	b2 2e       	mov	r11, r18
    2836:	b4 fe       	sbrs	r11, 4
    2838:	0d c0       	rjmp	.+26     	; 0x2854 <vfprintf+0x272>
    283a:	8b 2d       	mov	r24, r11
    283c:	84 60       	ori	r24, 0x04	; 4
    283e:	b8 2e       	mov	r11, r24
    2840:	09 c0       	rjmp	.+18     	; 0x2854 <vfprintf+0x272>
    2842:	24 ff       	sbrs	r18, 4
    2844:	0a c0       	rjmp	.+20     	; 0x285a <vfprintf+0x278>
    2846:	9f 2f       	mov	r25, r31
    2848:	96 60       	ori	r25, 0x06	; 6
    284a:	b9 2e       	mov	r11, r25
    284c:	06 c0       	rjmp	.+12     	; 0x285a <vfprintf+0x278>
    284e:	28 e0       	ldi	r18, 0x08	; 8
    2850:	30 e0       	ldi	r19, 0x00	; 0
    2852:	05 c0       	rjmp	.+10     	; 0x285e <vfprintf+0x27c>
    2854:	20 e1       	ldi	r18, 0x10	; 16
    2856:	30 e0       	ldi	r19, 0x00	; 0
    2858:	02 c0       	rjmp	.+4      	; 0x285e <vfprintf+0x27c>
    285a:	20 e1       	ldi	r18, 0x10	; 16
    285c:	32 e0       	ldi	r19, 0x02	; 2
    285e:	f8 01       	movw	r30, r16
    2860:	b7 fe       	sbrs	r11, 7
    2862:	07 c0       	rjmp	.+14     	; 0x2872 <vfprintf+0x290>
    2864:	60 81       	ld	r22, Z
    2866:	71 81       	ldd	r23, Z+1	; 0x01
    2868:	82 81       	ldd	r24, Z+2	; 0x02
    286a:	93 81       	ldd	r25, Z+3	; 0x03
    286c:	0c 5f       	subi	r16, 0xFC	; 252
    286e:	1f 4f       	sbci	r17, 0xFF	; 255
    2870:	06 c0       	rjmp	.+12     	; 0x287e <vfprintf+0x29c>
    2872:	60 81       	ld	r22, Z
    2874:	71 81       	ldd	r23, Z+1	; 0x01
    2876:	80 e0       	ldi	r24, 0x00	; 0
    2878:	90 e0       	ldi	r25, 0x00	; 0
    287a:	0e 5f       	subi	r16, 0xFE	; 254
    287c:	1f 4f       	sbci	r17, 0xFF	; 255
    287e:	a4 01       	movw	r20, r8
    2880:	b4 d0       	rcall	.+360    	; 0x29ea <__ultoa_invert>
    2882:	a8 2e       	mov	r10, r24
    2884:	a8 18       	sub	r10, r8
    2886:	fb 2d       	mov	r31, r11
    2888:	ff 77       	andi	r31, 0x7F	; 127
    288a:	bf 2e       	mov	r11, r31
    288c:	b6 fe       	sbrs	r11, 6
    288e:	0b c0       	rjmp	.+22     	; 0x28a6 <vfprintf+0x2c4>
    2890:	2b 2d       	mov	r18, r11
    2892:	2e 7f       	andi	r18, 0xFE	; 254
    2894:	a5 14       	cp	r10, r5
    2896:	50 f4       	brcc	.+20     	; 0x28ac <vfprintf+0x2ca>
    2898:	b4 fe       	sbrs	r11, 4
    289a:	0a c0       	rjmp	.+20     	; 0x28b0 <vfprintf+0x2ce>
    289c:	b2 fc       	sbrc	r11, 2
    289e:	08 c0       	rjmp	.+16     	; 0x28b0 <vfprintf+0x2ce>
    28a0:	2b 2d       	mov	r18, r11
    28a2:	2e 7e       	andi	r18, 0xEE	; 238
    28a4:	05 c0       	rjmp	.+10     	; 0x28b0 <vfprintf+0x2ce>
    28a6:	7a 2c       	mov	r7, r10
    28a8:	2b 2d       	mov	r18, r11
    28aa:	03 c0       	rjmp	.+6      	; 0x28b2 <vfprintf+0x2d0>
    28ac:	7a 2c       	mov	r7, r10
    28ae:	01 c0       	rjmp	.+2      	; 0x28b2 <vfprintf+0x2d0>
    28b0:	75 2c       	mov	r7, r5
    28b2:	24 ff       	sbrs	r18, 4
    28b4:	0d c0       	rjmp	.+26     	; 0x28d0 <vfprintf+0x2ee>
    28b6:	fe 01       	movw	r30, r28
    28b8:	ea 0d       	add	r30, r10
    28ba:	f1 1d       	adc	r31, r1
    28bc:	80 81       	ld	r24, Z
    28be:	80 33       	cpi	r24, 0x30	; 48
    28c0:	11 f4       	brne	.+4      	; 0x28c6 <vfprintf+0x2e4>
    28c2:	29 7e       	andi	r18, 0xE9	; 233
    28c4:	09 c0       	rjmp	.+18     	; 0x28d8 <vfprintf+0x2f6>
    28c6:	22 ff       	sbrs	r18, 2
    28c8:	06 c0       	rjmp	.+12     	; 0x28d6 <vfprintf+0x2f4>
    28ca:	73 94       	inc	r7
    28cc:	73 94       	inc	r7
    28ce:	04 c0       	rjmp	.+8      	; 0x28d8 <vfprintf+0x2f6>
    28d0:	82 2f       	mov	r24, r18
    28d2:	86 78       	andi	r24, 0x86	; 134
    28d4:	09 f0       	breq	.+2      	; 0x28d8 <vfprintf+0x2f6>
    28d6:	73 94       	inc	r7
    28d8:	23 fd       	sbrc	r18, 3
    28da:	12 c0       	rjmp	.+36     	; 0x2900 <vfprintf+0x31e>
    28dc:	20 ff       	sbrs	r18, 0
    28de:	06 c0       	rjmp	.+12     	; 0x28ec <vfprintf+0x30a>
    28e0:	5a 2c       	mov	r5, r10
    28e2:	73 14       	cp	r7, r3
    28e4:	18 f4       	brcc	.+6      	; 0x28ec <vfprintf+0x30a>
    28e6:	53 0c       	add	r5, r3
    28e8:	57 18       	sub	r5, r7
    28ea:	73 2c       	mov	r7, r3
    28ec:	73 14       	cp	r7, r3
    28ee:	60 f4       	brcc	.+24     	; 0x2908 <vfprintf+0x326>
    28f0:	b7 01       	movw	r22, r14
    28f2:	80 e2       	ldi	r24, 0x20	; 32
    28f4:	90 e0       	ldi	r25, 0x00	; 0
    28f6:	2c 87       	std	Y+12, r18	; 0x0c
    28f8:	ff dd       	rcall	.-1026   	; 0x24f8 <fputc>
    28fa:	73 94       	inc	r7
    28fc:	2c 85       	ldd	r18, Y+12	; 0x0c
    28fe:	f6 cf       	rjmp	.-20     	; 0x28ec <vfprintf+0x30a>
    2900:	73 14       	cp	r7, r3
    2902:	10 f4       	brcc	.+4      	; 0x2908 <vfprintf+0x326>
    2904:	37 18       	sub	r3, r7
    2906:	01 c0       	rjmp	.+2      	; 0x290a <vfprintf+0x328>
    2908:	31 2c       	mov	r3, r1
    290a:	24 ff       	sbrs	r18, 4
    290c:	11 c0       	rjmp	.+34     	; 0x2930 <vfprintf+0x34e>
    290e:	b7 01       	movw	r22, r14
    2910:	80 e3       	ldi	r24, 0x30	; 48
    2912:	90 e0       	ldi	r25, 0x00	; 0
    2914:	2c 87       	std	Y+12, r18	; 0x0c
    2916:	f0 dd       	rcall	.-1056   	; 0x24f8 <fputc>
    2918:	2c 85       	ldd	r18, Y+12	; 0x0c
    291a:	22 ff       	sbrs	r18, 2
    291c:	16 c0       	rjmp	.+44     	; 0x294a <vfprintf+0x368>
    291e:	21 ff       	sbrs	r18, 1
    2920:	03 c0       	rjmp	.+6      	; 0x2928 <vfprintf+0x346>
    2922:	88 e5       	ldi	r24, 0x58	; 88
    2924:	90 e0       	ldi	r25, 0x00	; 0
    2926:	02 c0       	rjmp	.+4      	; 0x292c <vfprintf+0x34a>
    2928:	88 e7       	ldi	r24, 0x78	; 120
    292a:	90 e0       	ldi	r25, 0x00	; 0
    292c:	b7 01       	movw	r22, r14
    292e:	0c c0       	rjmp	.+24     	; 0x2948 <vfprintf+0x366>
    2930:	82 2f       	mov	r24, r18
    2932:	86 78       	andi	r24, 0x86	; 134
    2934:	51 f0       	breq	.+20     	; 0x294a <vfprintf+0x368>
    2936:	21 fd       	sbrc	r18, 1
    2938:	02 c0       	rjmp	.+4      	; 0x293e <vfprintf+0x35c>
    293a:	80 e2       	ldi	r24, 0x20	; 32
    293c:	01 c0       	rjmp	.+2      	; 0x2940 <vfprintf+0x35e>
    293e:	8b e2       	ldi	r24, 0x2B	; 43
    2940:	27 fd       	sbrc	r18, 7
    2942:	8d e2       	ldi	r24, 0x2D	; 45
    2944:	b7 01       	movw	r22, r14
    2946:	90 e0       	ldi	r25, 0x00	; 0
    2948:	d7 dd       	rcall	.-1106   	; 0x24f8 <fputc>
    294a:	a5 14       	cp	r10, r5
    294c:	30 f4       	brcc	.+12     	; 0x295a <vfprintf+0x378>
    294e:	b7 01       	movw	r22, r14
    2950:	80 e3       	ldi	r24, 0x30	; 48
    2952:	90 e0       	ldi	r25, 0x00	; 0
    2954:	d1 dd       	rcall	.-1118   	; 0x24f8 <fputc>
    2956:	5a 94       	dec	r5
    2958:	f8 cf       	rjmp	.-16     	; 0x294a <vfprintf+0x368>
    295a:	aa 94       	dec	r10
    295c:	f4 01       	movw	r30, r8
    295e:	ea 0d       	add	r30, r10
    2960:	f1 1d       	adc	r31, r1
    2962:	80 81       	ld	r24, Z
    2964:	b7 01       	movw	r22, r14
    2966:	90 e0       	ldi	r25, 0x00	; 0
    2968:	c7 dd       	rcall	.-1138   	; 0x24f8 <fputc>
    296a:	a1 10       	cpse	r10, r1
    296c:	f6 cf       	rjmp	.-20     	; 0x295a <vfprintf+0x378>
    296e:	33 20       	and	r3, r3
    2970:	09 f4       	brne	.+2      	; 0x2974 <vfprintf+0x392>
    2972:	5d ce       	rjmp	.-838    	; 0x262e <vfprintf+0x4c>
    2974:	b7 01       	movw	r22, r14
    2976:	80 e2       	ldi	r24, 0x20	; 32
    2978:	90 e0       	ldi	r25, 0x00	; 0
    297a:	be dd       	rcall	.-1156   	; 0x24f8 <fputc>
    297c:	3a 94       	dec	r3
    297e:	f7 cf       	rjmp	.-18     	; 0x296e <vfprintf+0x38c>
    2980:	f7 01       	movw	r30, r14
    2982:	86 81       	ldd	r24, Z+6	; 0x06
    2984:	97 81       	ldd	r25, Z+7	; 0x07
    2986:	02 c0       	rjmp	.+4      	; 0x298c <vfprintf+0x3aa>
    2988:	8f ef       	ldi	r24, 0xFF	; 255
    298a:	9f ef       	ldi	r25, 0xFF	; 255
    298c:	2c 96       	adiw	r28, 0x0c	; 12
    298e:	0f b6       	in	r0, 0x3f	; 63
    2990:	f8 94       	cli
    2992:	de bf       	out	0x3e, r29	; 62
    2994:	0f be       	out	0x3f, r0	; 63
    2996:	cd bf       	out	0x3d, r28	; 61
    2998:	df 91       	pop	r29
    299a:	cf 91       	pop	r28
    299c:	1f 91       	pop	r17
    299e:	0f 91       	pop	r16
    29a0:	ff 90       	pop	r15
    29a2:	ef 90       	pop	r14
    29a4:	df 90       	pop	r13
    29a6:	cf 90       	pop	r12
    29a8:	bf 90       	pop	r11
    29aa:	af 90       	pop	r10
    29ac:	9f 90       	pop	r9
    29ae:	8f 90       	pop	r8
    29b0:	7f 90       	pop	r7
    29b2:	6f 90       	pop	r6
    29b4:	5f 90       	pop	r5
    29b6:	4f 90       	pop	r4
    29b8:	3f 90       	pop	r3
    29ba:	2f 90       	pop	r2
    29bc:	08 95       	ret

000029be <strnlen_P>:
    29be:	fc 01       	movw	r30, r24
    29c0:	05 90       	lpm	r0, Z+
    29c2:	61 50       	subi	r22, 0x01	; 1
    29c4:	70 40       	sbci	r23, 0x00	; 0
    29c6:	01 10       	cpse	r0, r1
    29c8:	d8 f7       	brcc	.-10     	; 0x29c0 <strnlen_P+0x2>
    29ca:	80 95       	com	r24
    29cc:	90 95       	com	r25
    29ce:	8e 0f       	add	r24, r30
    29d0:	9f 1f       	adc	r25, r31
    29d2:	08 95       	ret

000029d4 <strnlen>:
    29d4:	fc 01       	movw	r30, r24
    29d6:	61 50       	subi	r22, 0x01	; 1
    29d8:	70 40       	sbci	r23, 0x00	; 0
    29da:	01 90       	ld	r0, Z+
    29dc:	01 10       	cpse	r0, r1
    29de:	d8 f7       	brcc	.-10     	; 0x29d6 <strnlen+0x2>
    29e0:	80 95       	com	r24
    29e2:	90 95       	com	r25
    29e4:	8e 0f       	add	r24, r30
    29e6:	9f 1f       	adc	r25, r31
    29e8:	08 95       	ret

000029ea <__ultoa_invert>:
    29ea:	fa 01       	movw	r30, r20
    29ec:	aa 27       	eor	r26, r26
    29ee:	28 30       	cpi	r18, 0x08	; 8
    29f0:	51 f1       	breq	.+84     	; 0x2a46 <__ultoa_invert+0x5c>
    29f2:	20 31       	cpi	r18, 0x10	; 16
    29f4:	81 f1       	breq	.+96     	; 0x2a56 <__ultoa_invert+0x6c>
    29f6:	e8 94       	clt
    29f8:	6f 93       	push	r22
    29fa:	6e 7f       	andi	r22, 0xFE	; 254
    29fc:	6e 5f       	subi	r22, 0xFE	; 254
    29fe:	7f 4f       	sbci	r23, 0xFF	; 255
    2a00:	8f 4f       	sbci	r24, 0xFF	; 255
    2a02:	9f 4f       	sbci	r25, 0xFF	; 255
    2a04:	af 4f       	sbci	r26, 0xFF	; 255
    2a06:	b1 e0       	ldi	r27, 0x01	; 1
    2a08:	3e d0       	rcall	.+124    	; 0x2a86 <__ultoa_invert+0x9c>
    2a0a:	b4 e0       	ldi	r27, 0x04	; 4
    2a0c:	3c d0       	rcall	.+120    	; 0x2a86 <__ultoa_invert+0x9c>
    2a0e:	67 0f       	add	r22, r23
    2a10:	78 1f       	adc	r23, r24
    2a12:	89 1f       	adc	r24, r25
    2a14:	9a 1f       	adc	r25, r26
    2a16:	a1 1d       	adc	r26, r1
    2a18:	68 0f       	add	r22, r24
    2a1a:	79 1f       	adc	r23, r25
    2a1c:	8a 1f       	adc	r24, r26
    2a1e:	91 1d       	adc	r25, r1
    2a20:	a1 1d       	adc	r26, r1
    2a22:	6a 0f       	add	r22, r26
    2a24:	71 1d       	adc	r23, r1
    2a26:	81 1d       	adc	r24, r1
    2a28:	91 1d       	adc	r25, r1
    2a2a:	a1 1d       	adc	r26, r1
    2a2c:	20 d0       	rcall	.+64     	; 0x2a6e <__ultoa_invert+0x84>
    2a2e:	09 f4       	brne	.+2      	; 0x2a32 <__ultoa_invert+0x48>
    2a30:	68 94       	set
    2a32:	3f 91       	pop	r19
    2a34:	2a e0       	ldi	r18, 0x0A	; 10
    2a36:	26 9f       	mul	r18, r22
    2a38:	11 24       	eor	r1, r1
    2a3a:	30 19       	sub	r19, r0
    2a3c:	30 5d       	subi	r19, 0xD0	; 208
    2a3e:	31 93       	st	Z+, r19
    2a40:	de f6       	brtc	.-74     	; 0x29f8 <__ultoa_invert+0xe>
    2a42:	cf 01       	movw	r24, r30
    2a44:	08 95       	ret
    2a46:	46 2f       	mov	r20, r22
    2a48:	47 70       	andi	r20, 0x07	; 7
    2a4a:	40 5d       	subi	r20, 0xD0	; 208
    2a4c:	41 93       	st	Z+, r20
    2a4e:	b3 e0       	ldi	r27, 0x03	; 3
    2a50:	0f d0       	rcall	.+30     	; 0x2a70 <__ultoa_invert+0x86>
    2a52:	c9 f7       	brne	.-14     	; 0x2a46 <__ultoa_invert+0x5c>
    2a54:	f6 cf       	rjmp	.-20     	; 0x2a42 <__ultoa_invert+0x58>
    2a56:	46 2f       	mov	r20, r22
    2a58:	4f 70       	andi	r20, 0x0F	; 15
    2a5a:	40 5d       	subi	r20, 0xD0	; 208
    2a5c:	4a 33       	cpi	r20, 0x3A	; 58
    2a5e:	18 f0       	brcs	.+6      	; 0x2a66 <__ultoa_invert+0x7c>
    2a60:	49 5d       	subi	r20, 0xD9	; 217
    2a62:	31 fd       	sbrc	r19, 1
    2a64:	40 52       	subi	r20, 0x20	; 32
    2a66:	41 93       	st	Z+, r20
    2a68:	02 d0       	rcall	.+4      	; 0x2a6e <__ultoa_invert+0x84>
    2a6a:	a9 f7       	brne	.-22     	; 0x2a56 <__ultoa_invert+0x6c>
    2a6c:	ea cf       	rjmp	.-44     	; 0x2a42 <__ultoa_invert+0x58>
    2a6e:	b4 e0       	ldi	r27, 0x04	; 4
    2a70:	a6 95       	lsr	r26
    2a72:	97 95       	ror	r25
    2a74:	87 95       	ror	r24
    2a76:	77 95       	ror	r23
    2a78:	67 95       	ror	r22
    2a7a:	ba 95       	dec	r27
    2a7c:	c9 f7       	brne	.-14     	; 0x2a70 <__ultoa_invert+0x86>
    2a7e:	00 97       	sbiw	r24, 0x00	; 0
    2a80:	61 05       	cpc	r22, r1
    2a82:	71 05       	cpc	r23, r1
    2a84:	08 95       	ret
    2a86:	9b 01       	movw	r18, r22
    2a88:	ac 01       	movw	r20, r24
    2a8a:	0a 2e       	mov	r0, r26
    2a8c:	06 94       	lsr	r0
    2a8e:	57 95       	ror	r21
    2a90:	47 95       	ror	r20
    2a92:	37 95       	ror	r19
    2a94:	27 95       	ror	r18
    2a96:	ba 95       	dec	r27
    2a98:	c9 f7       	brne	.-14     	; 0x2a8c <__ultoa_invert+0xa2>
    2a9a:	62 0f       	add	r22, r18
    2a9c:	73 1f       	adc	r23, r19
    2a9e:	84 1f       	adc	r24, r20
    2aa0:	95 1f       	adc	r25, r21
    2aa2:	a0 1d       	adc	r26, r0
    2aa4:	08 95       	ret

00002aa6 <_exit>:
    2aa6:	f8 94       	cli

00002aa8 <__stop_program>:
    2aa8:	ff cf       	rjmp	.-2      	; 0x2aa8 <__stop_program>
