
wipro.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000070a  00800200  00002902  00002996  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002902  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001e7  0080090a  0080090a  000030a0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000030a0  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000560  00000000  00000000  000030fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00006385  00000000  00000000  0000365c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000018cd  00000000  00000000  000099e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00003795  00000000  00000000  0000b2ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00001270  00000000  00000000  0000ea44  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000eaa  00000000  00000000  0000fcb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00003e0c  00000000  00000000  00010b5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000004e8  00000000  00000000  0001496a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
       6:	00 00       	nop
       8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
       a:	00 00       	nop
       c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
       e:	00 00       	nop
      10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
      12:	00 00       	nop
      14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
      16:	00 00       	nop
      18:	53 c2       	rjmp	.+1190   	; 0x4c0 <__vector_6>
      1a:	00 00       	nop
      1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
      1e:	00 00       	nop
      20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
      22:	00 00       	nop
      24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
      26:	00 00       	nop
      28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
      2e:	00 00       	nop
      30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
      32:	00 00       	nop
      34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
      36:	00 00       	nop
      38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
      3e:	00 00       	nop
      40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
      42:	00 00       	nop
      44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
      46:	00 00       	nop
      48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
      4e:	00 00       	nop
      50:	fc c1       	rjmp	.+1016   	; 0x44a <__vector_20>
      52:	00 00       	nop
      54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
      56:	00 00       	nop
      58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
      5e:	00 00       	nop
      60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 77 0a 	jmp	0x14ee	; 0x14ee <__vector_25>
      68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
      6e:	00 00       	nop
      70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
      72:	00 00       	nop
      74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
      76:	00 00       	nop
      78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
      7e:	00 00       	nop
      80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
      82:	00 00       	nop
      84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
      86:	00 00       	nop
      88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
      8e:	00 00       	nop
      90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
      92:	00 00       	nop
      94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
      96:	00 00       	nop
      98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
      be:	00 00       	nop
      c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
      da:	00 00       	nop
      dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
      de:	00 00       	nop
      e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
      f0:	19 e0       	ldi	r17, 0x09	; 9
      f2:	a0 e0       	ldi	r26, 0x00	; 0
      f4:	b2 e0       	ldi	r27, 0x02	; 2
      f6:	e2 e0       	ldi	r30, 0x02	; 2
      f8:	f9 e2       	ldi	r31, 0x29	; 41
      fa:	00 e0       	ldi	r16, 0x00	; 0
      fc:	0b bf       	out	0x3b, r16	; 59
      fe:	02 c0       	rjmp	.+4      	; 0x104 <__do_copy_data+0x14>
     100:	07 90       	elpm	r0, Z+
     102:	0d 92       	st	X+, r0
     104:	aa 30       	cpi	r26, 0x0A	; 10
     106:	b1 07       	cpc	r27, r17
     108:	d9 f7       	brne	.-10     	; 0x100 <__do_copy_data+0x10>

0000010a <__do_clear_bss>:
     10a:	2a e0       	ldi	r18, 0x0A	; 10
     10c:	aa e0       	ldi	r26, 0x0A	; 10
     10e:	b9 e0       	ldi	r27, 0x09	; 9
     110:	01 c0       	rjmp	.+2      	; 0x114 <.do_clear_bss_start>

00000112 <.do_clear_bss_loop>:
     112:	1d 92       	st	X+, r1

00000114 <.do_clear_bss_start>:
     114:	a1 3f       	cpi	r26, 0xF1	; 241
     116:	b2 07       	cpc	r27, r18
     118:	e1 f7       	brne	.-8      	; 0x112 <.do_clear_bss_loop>
     11a:	0e 94 4e 11 	call	0x229c	; 0x229c <main>
     11e:	0c 94 7f 14 	jmp	0x28fe	; 0x28fe <_exit>

00000122 <__bad_interrupt>:
     122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <flagInit>:
	RAMPrint(WIFI_QSTRING_ADDRESS, qLength);
	//RAMRead(WIFI_QSTRING_ADDRESS, qLength, buffer);
	SendData(WIFI_QSTRING_ADDRESS, qLength, 1);
	memset(filepath, 0x00, 100);
	printf("Sent!");
}
     124:	10 92 75 09 	sts	0x0975, r1
     128:	10 92 76 09 	sts	0x0976, r1
     12c:	10 92 77 09 	sts	0x0977, r1
     130:	10 92 78 09 	sts	0x0978, r1
     134:	10 92 79 09 	sts	0x0979, r1
     138:	10 92 7a 09 	sts	0x097A, r1
     13c:	65 99       	sbic	0x0c, 5	; 12
     13e:	08 c0       	rjmp	.+16     	; 0x150 <flagInit+0x2c>
     140:	85 e3       	ldi	r24, 0x35	; 53
     142:	92 e0       	ldi	r25, 0x02	; 2
     144:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <puts>
     148:	f4 d1       	rcall	.+1000   	; 0x532 <ethernetInit>
     14a:	81 e0       	ldi	r24, 0x01	; 1
     14c:	80 93 75 09 	sts	0x0975, r24
     150:	08 95       	ret

00000152 <pollingInit>:
     152:	e1 e8       	ldi	r30, 0x81	; 129
     154:	f0 e0       	ldi	r31, 0x00	; 0
     156:	80 81       	ld	r24, Z
     158:	84 60       	ori	r24, 0x04	; 4
     15a:	80 83       	st	Z, r24
     15c:	10 92 84 00 	sts	0x0084, r1
     160:	10 92 85 00 	sts	0x0085, r1
     164:	81 e0       	ldi	r24, 0x01	; 1
     166:	80 93 6f 00 	sts	0x006F, r24
     16a:	08 95       	ret

0000016c <ethernetPlugInit>:
     16c:	80 e2       	ldi	r24, 0x20	; 32
     16e:	8d bb       	out	0x1d, r24	; 29
     170:	84 e0       	ldi	r24, 0x04	; 4
     172:	80 93 6a 00 	sts	0x006A, r24
     176:	08 95       	ret

00000178 <connectionInit>:
     178:	f6 d5       	rcall	.+3052   	; 0xd66 <uart2_init>
     17a:	0e 94 f6 08 	call	0x11ec	; 0x11ec <uart_init>
     17e:	4b d6       	rcall	.+3222   	; 0xe16 <SPI_Init>
     180:	d1 df       	rcall	.-94     	; 0x124 <flagInit>
     182:	f4 df       	rcall	.-24     	; 0x16c <ethernetPlugInit>
     184:	84 e6       	ldi	r24, 0x64	; 100
     186:	ed e0       	ldi	r30, 0x0D	; 13
     188:	f9 e0       	ldi	r31, 0x09	; 9
     18a:	df 01       	movw	r26, r30
     18c:	1d 92       	st	X+, r1
     18e:	8a 95       	dec	r24
     190:	e9 f7       	brne	.-6      	; 0x18c <connectionInit+0x14>
     192:	81 e0       	ldi	r24, 0x01	; 1
     194:	80 93 76 09 	sts	0x0976, r24
     198:	08 95       	ret

0000019a <clearFlags>:
     19a:	cf 93       	push	r28
     19c:	df 93       	push	r29
     19e:	80 91 75 09 	lds	r24, 0x0975
     1a2:	88 23       	and	r24, r24
     1a4:	b9 f1       	breq	.+110    	; 0x214 <clearFlags+0x7a>
     1a6:	cd e0       	ldi	r28, 0x0D	; 13
     1a8:	d9 e0       	ldi	r29, 0x09	; 9
     1aa:	84 e6       	ldi	r24, 0x64	; 100
     1ac:	de 01       	movw	r26, r28
     1ae:	1d 92       	st	X+, r1
     1b0:	8a 95       	dec	r24
     1b2:	e9 f7       	brne	.-6      	; 0x1ae <clearFlags+0x14>
     1b4:	85 e0       	ldi	r24, 0x05	; 5
     1b6:	e7 e4       	ldi	r30, 0x47	; 71
     1b8:	f2 e0       	ldi	r31, 0x02	; 2
     1ba:	de 01       	movw	r26, r28
     1bc:	01 90       	ld	r0, Z+
     1be:	0d 92       	st	X+, r0
     1c0:	8a 95       	dec	r24
     1c2:	e1 f7       	brne	.-8      	; 0x1bc <clearFlags+0x22>
     1c4:	de 01       	movw	r26, r28
     1c6:	0d 90       	ld	r0, X+
     1c8:	00 20       	and	r0, r0
     1ca:	e9 f7       	brne	.-6      	; 0x1c6 <clearFlags+0x2c>
     1cc:	11 97       	sbiw	r26, 0x01	; 1
     1ce:	85 e1       	ldi	r24, 0x15	; 21
     1d0:	ec e4       	ldi	r30, 0x4C	; 76
     1d2:	f2 e0       	ldi	r31, 0x02	; 2
     1d4:	01 90       	ld	r0, Z+
     1d6:	0d 92       	st	X+, r0
     1d8:	8a 95       	dec	r24
     1da:	e1 f7       	brne	.-8      	; 0x1d4 <clearFlags+0x3a>
     1dc:	de 01       	movw	r26, r28
     1de:	0d 90       	ld	r0, X+
     1e0:	00 20       	and	r0, r0
     1e2:	e9 f7       	brne	.-6      	; 0x1de <clearFlags+0x44>
     1e4:	11 97       	sbiw	r26, 0x01	; 1
     1e6:	82 e1       	ldi	r24, 0x12	; 18
     1e8:	e1 e6       	ldi	r30, 0x61	; 97
     1ea:	f2 e0       	ldi	r31, 0x02	; 2
     1ec:	01 90       	ld	r0, Z+
     1ee:	0d 92       	st	X+, r0
     1f0:	8a 95       	dec	r24
     1f2:	e1 f7       	brne	.-8      	; 0x1ec <clearFlags+0x52>
     1f4:	09 90       	ld	r0, Y+
     1f6:	00 20       	and	r0, r0
     1f8:	e9 f7       	brne	.-6      	; 0x1f4 <clearFlags+0x5a>
     1fa:	de 01       	movw	r26, r28
     1fc:	11 97       	sbiw	r26, 0x01	; 1
     1fe:	83 e1       	ldi	r24, 0x13	; 19
     200:	e3 e7       	ldi	r30, 0x73	; 115
     202:	f2 e0       	ldi	r31, 0x02	; 2
     204:	01 90       	ld	r0, Z+
     206:	0d 92       	st	X+, r0
     208:	8a 95       	dec	r24
     20a:	e1 f7       	brne	.-8      	; 0x204 <clearFlags+0x6a>
     20c:	8d e0       	ldi	r24, 0x0D	; 13
     20e:	99 e0       	ldi	r25, 0x09	; 9
     210:	a5 d1       	rcall	.+842    	; 0x55c <updateFileEthernet>
     212:	35 c0       	rjmp	.+106    	; 0x27e <clearFlags+0xe4>
     214:	80 91 76 09 	lds	r24, 0x0976
     218:	88 23       	and	r24, r24
     21a:	89 f1       	breq	.+98     	; 0x27e <clearFlags+0xe4>
     21c:	cd e0       	ldi	r28, 0x0D	; 13
     21e:	d9 e0       	ldi	r29, 0x09	; 9
     220:	8a e0       	ldi	r24, 0x0A	; 10
     222:	e6 e8       	ldi	r30, 0x86	; 134
     224:	f2 e0       	ldi	r31, 0x02	; 2
     226:	de 01       	movw	r26, r28
     228:	01 90       	ld	r0, Z+
     22a:	0d 92       	st	X+, r0
     22c:	8a 95       	dec	r24
     22e:	e1 f7       	brne	.-8      	; 0x228 <clearFlags+0x8e>
     230:	de 01       	movw	r26, r28
     232:	0d 90       	ld	r0, X+
     234:	00 20       	and	r0, r0
     236:	e9 f7       	brne	.-6      	; 0x232 <clearFlags+0x98>
     238:	11 97       	sbiw	r26, 0x01	; 1
     23a:	85 e1       	ldi	r24, 0x15	; 21
     23c:	ec e4       	ldi	r30, 0x4C	; 76
     23e:	f2 e0       	ldi	r31, 0x02	; 2
     240:	01 90       	ld	r0, Z+
     242:	0d 92       	st	X+, r0
     244:	8a 95       	dec	r24
     246:	e1 f7       	brne	.-8      	; 0x240 <clearFlags+0xa6>
     248:	de 01       	movw	r26, r28
     24a:	0d 90       	ld	r0, X+
     24c:	00 20       	and	r0, r0
     24e:	e9 f7       	brne	.-6      	; 0x24a <clearFlags+0xb0>
     250:	11 97       	sbiw	r26, 0x01	; 1
     252:	82 e1       	ldi	r24, 0x12	; 18
     254:	e1 e6       	ldi	r30, 0x61	; 97
     256:	f2 e0       	ldi	r31, 0x02	; 2
     258:	01 90       	ld	r0, Z+
     25a:	0d 92       	st	X+, r0
     25c:	8a 95       	dec	r24
     25e:	e1 f7       	brne	.-8      	; 0x258 <clearFlags+0xbe>
     260:	09 90       	ld	r0, Y+
     262:	00 20       	and	r0, r0
     264:	e9 f7       	brne	.-6      	; 0x260 <clearFlags+0xc6>
     266:	de 01       	movw	r26, r28
     268:	11 97       	sbiw	r26, 0x01	; 1
     26a:	83 e1       	ldi	r24, 0x13	; 19
     26c:	e3 e7       	ldi	r30, 0x73	; 115
     26e:	f2 e0       	ldi	r31, 0x02	; 2
     270:	01 90       	ld	r0, Z+
     272:	0d 92       	st	X+, r0
     274:	8a 95       	dec	r24
     276:	e1 f7       	brne	.-8      	; 0x270 <clearFlags+0xd6>
     278:	8d e0       	ldi	r24, 0x0D	; 13
     27a:	99 e0       	ldi	r25, 0x09	; 9
     27c:	a0 d7       	rcall	.+3904   	; 0x11be <updateFileWifi>
     27e:	84 e6       	ldi	r24, 0x64	; 100
     280:	ed e0       	ldi	r30, 0x0D	; 13
     282:	f9 e0       	ldi	r31, 0x09	; 9
     284:	df 01       	movw	r26, r30
     286:	1d 92       	st	X+, r1
     288:	8a 95       	dec	r24
     28a:	e9 f7       	brne	.-6      	; 0x286 <clearFlags+0xec>
     28c:	81 e0       	ldi	r24, 0x01	; 1
     28e:	90 e0       	ldi	r25, 0x00	; 0
     290:	df 91       	pop	r29
     292:	cf 91       	pop	r28
     294:	08 95       	ret

00000296 <getHexFile>:

int getHexFile()
{
     296:	0f 93       	push	r16
     298:	1f 93       	push	r17
     29a:	cf 93       	push	r28
     29c:	df 93       	push	r29
	//Flags[WIFI] = 1;
	if(Flags[WIFI])
     29e:	80 91 76 09 	lds	r24, 0x0976
     2a2:	88 23       	and	r24, r24
     2a4:	09 f4       	brne	.+2      	; 0x2a8 <getHexFile+0x12>
     2a6:	47 c0       	rjmp	.+142    	; 0x336 <getHexFile+0xa0>
	{
		uint16_t transLength; 
		strcpy(filepath, URL);
     2a8:	cd e0       	ldi	r28, 0x0D	; 13
     2aa:	d9 e0       	ldi	r29, 0x09	; 9
     2ac:	85 e1       	ldi	r24, 0x15	; 21
     2ae:	ec e4       	ldi	r30, 0x4C	; 76
     2b0:	f2 e0       	ldi	r31, 0x02	; 2
     2b2:	de 01       	movw	r26, r28
     2b4:	01 90       	ld	r0, Z+
     2b6:	0d 92       	st	X+, r0
     2b8:	8a 95       	dec	r24
     2ba:	e1 f7       	brne	.-8      	; 0x2b4 <getHexFile+0x1e>
		strcat(filepath, HEX_FILE);
     2bc:	de 01       	movw	r26, r28
     2be:	0d 90       	ld	r0, X+
     2c0:	00 20       	and	r0, r0
     2c2:	e9 f7       	brne	.-6      	; 0x2be <getHexFile+0x28>
     2c4:	11 97       	sbiw	r26, 0x01	; 1
     2c6:	84 e2       	ldi	r24, 0x24	; 36
     2c8:	ee ec       	ldi	r30, 0xCE	; 206
     2ca:	f2 e0       	ldi	r31, 0x02	; 2
     2cc:	01 90       	ld	r0, Z+
     2ce:	0d 92       	st	X+, r0
     2d0:	8a 95       	dec	r24
     2d2:	e1 f7       	brne	.-8      	; 0x2cc <getHexFile+0x36>
		//setTestPrint(1);
		//printf("Compress Flag Set!");
		//setCompressFlag(1);
		transLength = getFileWifi(filepath, 1, HEX_FILE_ADDRESS, 1);
     2d4:	01 e0       	ldi	r16, 0x01	; 1
     2d6:	10 e0       	ldi	r17, 0x00	; 0
     2d8:	20 e0       	ldi	r18, 0x00	; 0
     2da:	30 e0       	ldi	r19, 0x00	; 0
     2dc:	a9 01       	movw	r20, r18
     2de:	61 e0       	ldi	r22, 0x01	; 1
     2e0:	70 e0       	ldi	r23, 0x00	; 0
     2e2:	ce 01       	movw	r24, r28
     2e4:	ec d6       	rcall	.+3544   	; 0x10be <getFileWifi>
		//printf("Uncompressed Trans Length: %d\n", transLength); 
		//RAMPrint(HEX_FILE_ADDRESS, 100);
		compressFile(transLength); 
     2e6:	0e 94 ce 0c 	call	0x199c	; 0x199c <compressFile>
		memset(filepath, 0x00, 100);
     2ea:	84 e6       	ldi	r24, 0x64	; 100
     2ec:	fe 01       	movw	r30, r28
     2ee:	11 92       	st	Z+, r1
     2f0:	8a 95       	dec	r24
     2f2:	e9 f7       	brne	.-6      	; 0x2ee <getHexFile+0x58>
		strcpy(filepath, URL);
     2f4:	85 e1       	ldi	r24, 0x15	; 21
     2f6:	ec e4       	ldi	r30, 0x4C	; 76
     2f8:	f2 e0       	ldi	r31, 0x02	; 2
     2fa:	de 01       	movw	r26, r28
     2fc:	01 90       	ld	r0, Z+
     2fe:	0d 92       	st	X+, r0
     300:	8a 95       	dec	r24
     302:	e1 f7       	brne	.-8      	; 0x2fc <getHexFile+0x66>
		strcat(filepath, DEVICE_FILE);
     304:	09 90       	ld	r0, Y+
     306:	00 20       	and	r0, r0
     308:	e9 f7       	brne	.-6      	; 0x304 <getHexFile+0x6e>
     30a:	de 01       	movw	r26, r28
     30c:	11 97       	sbiw	r26, 0x01	; 1
     30e:	87 e2       	ldi	r24, 0x27	; 39
     310:	e2 ef       	ldi	r30, 0xF2	; 242
     312:	f2 e0       	ldi	r31, 0x02	; 2
     314:	01 90       	ld	r0, Z+
     316:	0d 92       	st	X+, r0
     318:	8a 95       	dec	r24
     31a:	e1 f7       	brne	.-8      	; 0x314 <getHexFile+0x7e>
		getFileWifi(filepath, 1, STATUS_FLAG_ADDRESS + DEVICE_ID, 1); 
     31c:	25 e0       	ldi	r18, 0x05	; 5
     31e:	30 e3       	ldi	r19, 0x30	; 48
     320:	40 e0       	ldi	r20, 0x00	; 0
     322:	50 e0       	ldi	r21, 0x00	; 0
     324:	61 e0       	ldi	r22, 0x01	; 1
     326:	70 e0       	ldi	r23, 0x00	; 0
     328:	8d e0       	ldi	r24, 0x0D	; 13
     32a:	99 e0       	ldi	r25, 0x09	; 9
     32c:	c8 d6       	rcall	.+3472   	; 0x10be <getFileWifi>
		//writeHexFileTest(); 
		printf("Compressed!\n"); 
     32e:	89 e1       	ldi	r24, 0x19	; 25
     330:	93 e0       	ldi	r25, 0x03	; 3
     332:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <puts>
		//Program(ATtiny2313); 
		//printf("Hex File Downloaded!\n");
	}
	
	return 1; 
}
     336:	81 e0       	ldi	r24, 0x01	; 1
     338:	90 e0       	ldi	r25, 0x00	; 0
     33a:	df 91       	pop	r29
     33c:	cf 91       	pop	r28
     33e:	1f 91       	pop	r17
     340:	0f 91       	pop	r16
     342:	08 95       	ret

00000344 <getFlagStatus>:

int getFlagStatus()
{
     344:	0f 93       	push	r16
     346:	1f 93       	push	r17
	TIMSK1 &= ~(1 << TOIE1);
     348:	ef e6       	ldi	r30, 0x6F	; 111
     34a:	f0 e0       	ldi	r31, 0x00	; 0
     34c:	80 81       	ld	r24, Z
     34e:	8e 7f       	andi	r24, 0xFE	; 254
     350:	80 83       	st	Z, r24
		Flags[PROGRAM] = (RAMReadByte(STATUS_FLAG_ADDRESS) & 0x0F);
		Flags[NETWORK_SCAN] = (RAMReadByte(STATUS_FLAG_ADDRESS + 1) & 0x0F);
		Flags[NETWORK_CONNECT] = (RAMReadByte(STATUS_FLAG_ADDRESS + 2) & 0x0F); 
		//printf("Flag Status: %s\n", flags);  
	}
	else if(Flags[WIFI]){
     352:	80 91 76 09 	lds	r24, 0x0976
     356:	88 23       	and	r24, r24
     358:	c9 f1       	breq	.+114    	; 0x3cc <getFlagStatus+0x88>
		strcpy(filepath, URL);
     35a:	85 e1       	ldi	r24, 0x15	; 21
     35c:	ec e4       	ldi	r30, 0x4C	; 76
     35e:	f2 e0       	ldi	r31, 0x02	; 2
     360:	ad e0       	ldi	r26, 0x0D	; 13
     362:	b9 e0       	ldi	r27, 0x09	; 9
     364:	01 90       	ld	r0, Z+
     366:	0d 92       	st	X+, r0
     368:	8a 95       	dec	r24
     36a:	e1 f7       	brne	.-8      	; 0x364 <getFlagStatus+0x20>
		strcat(filepath, FLAG_FILE); 
     36c:	ad e0       	ldi	r26, 0x0D	; 13
     36e:	b9 e0       	ldi	r27, 0x09	; 9
     370:	0d 90       	ld	r0, X+
     372:	00 20       	and	r0, r0
     374:	e9 f7       	brne	.-6      	; 0x370 <getFlagStatus+0x2c>
     376:	11 97       	sbiw	r26, 0x01	; 1
     378:	85 e2       	ldi	r24, 0x25	; 37
     37a:	e5 e2       	ldi	r30, 0x25	; 37
     37c:	f3 e0       	ldi	r31, 0x03	; 3
     37e:	01 90       	ld	r0, Z+
     380:	0d 92       	st	X+, r0
     382:	8a 95       	dec	r24
     384:	e1 f7       	brne	.-8      	; 0x37e <getFlagStatus+0x3a>
		//setTestPrint(1);
		getFileWifi(filepath, 1, STATUS_FLAG_ADDRESS, 0);
     386:	00 e0       	ldi	r16, 0x00	; 0
     388:	10 e0       	ldi	r17, 0x00	; 0
     38a:	20 e0       	ldi	r18, 0x00	; 0
     38c:	30 e3       	ldi	r19, 0x30	; 48
     38e:	40 e0       	ldi	r20, 0x00	; 0
     390:	50 e0       	ldi	r21, 0x00	; 0
     392:	61 e0       	ldi	r22, 0x01	; 1
     394:	70 e0       	ldi	r23, 0x00	; 0
     396:	8d e0       	ldi	r24, 0x0D	; 13
     398:	99 e0       	ldi	r25, 0x09	; 9
     39a:	91 d6       	rcall	.+3362   	; 0x10be <getFileWifi>
		//printf("Ram Print: ");
		//RAMPrint(STATUS_FLAG_ADDRESS, 3);
		//printf("\n");
		Flags[PROGRAM] = (RAMReadByte(STATUS_FLAG_ADDRESS) & 0x0F);
     39c:	60 e0       	ldi	r22, 0x00	; 0
     39e:	70 e3       	ldi	r23, 0x30	; 48
     3a0:	80 e0       	ldi	r24, 0x00	; 0
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	48 d5       	rcall	.+2704   	; 0xe36 <RAMReadByte>
     3a6:	8f 70       	andi	r24, 0x0F	; 15
     3a8:	80 93 77 09 	sts	0x0977, r24
		Flags[NETWORK_SCAN] = (RAMReadByte(STATUS_FLAG_ADDRESS + 1) & 0x0F);
     3ac:	61 e0       	ldi	r22, 0x01	; 1
     3ae:	70 e3       	ldi	r23, 0x30	; 48
     3b0:	80 e0       	ldi	r24, 0x00	; 0
     3b2:	90 e0       	ldi	r25, 0x00	; 0
     3b4:	40 d5       	rcall	.+2688   	; 0xe36 <RAMReadByte>
     3b6:	8f 70       	andi	r24, 0x0F	; 15
     3b8:	80 93 78 09 	sts	0x0978, r24
		Flags[NETWORK_CONNECT] = (RAMReadByte(STATUS_FLAG_ADDRESS + 2) & 0x0F);
     3bc:	62 e0       	ldi	r22, 0x02	; 2
     3be:	70 e3       	ldi	r23, 0x30	; 48
     3c0:	80 e0       	ldi	r24, 0x00	; 0
     3c2:	90 e0       	ldi	r25, 0x00	; 0
     3c4:	38 d5       	rcall	.+2672   	; 0xe36 <RAMReadByte>
     3c6:	8f 70       	andi	r24, 0x0F	; 15
     3c8:	80 93 79 09 	sts	0x0979, r24
		
	}
	memset(filepath, 0x00, 100); 
     3cc:	84 e6       	ldi	r24, 0x64	; 100
     3ce:	ed e0       	ldi	r30, 0x0D	; 13
     3d0:	f9 e0       	ldi	r31, 0x09	; 9
     3d2:	df 01       	movw	r26, r30
     3d4:	1d 92       	st	X+, r1
     3d6:	8a 95       	dec	r24
     3d8:	e9 f7       	brne	.-6      	; 0x3d4 <getFlagStatus+0x90>
	//Perform actions based on flags 
	if(Flags[PROGRAM] == 0x01)
     3da:	80 91 77 09 	lds	r24, 0x0977
     3de:	81 30       	cpi	r24, 0x01	; 1
     3e0:	49 f5       	brne	.+82     	; 0x434 <getFlagStatus+0xf0>
	{
		//Program Function 
		printf("Program!\n");
     3e2:	8a e4       	ldi	r24, 0x4A	; 74
     3e4:	93 e0       	ldi	r25, 0x03	; 3
     3e6:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <puts>
		//PORTD &= ~(1<<CTS);
		//wifiDriverInit(); 
		//PORTD |= (1<<CTS); 
		//_delay_ms(2000);
		LED_PORT |= (1<<LED_Yellow);
     3ea:	a1 9a       	sbi	0x14, 1	; 20
		do 
		{
			getHexFile();
     3ec:	54 df       	rcall	.-344    	; 0x296 <getHexFile>
		} while (!checkSum());
     3ee:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <checkSum>
     3f2:	89 2b       	or	r24, r25
     3f4:	d9 f3       	breq	.-10     	; 0x3ec <getFlagStatus+0xa8>
		
		 
		Flags[DEVICE_ID] = (RAMReadByte(STATUS_FLAG_ADDRESS + DEVICE_ID) & 0x0F);
     3f6:	65 e0       	ldi	r22, 0x05	; 5
     3f8:	70 e3       	ldi	r23, 0x30	; 48
     3fa:	80 e0       	ldi	r24, 0x00	; 0
     3fc:	90 e0       	ldi	r25, 0x00	; 0
     3fe:	1b d5       	rcall	.+2614   	; 0xe36 <RAMReadByte>
     400:	8f 70       	andi	r24, 0x0F	; 15
     402:	80 93 7a 09 	sts	0x097A, r24
		//printf("Device ID: %d\n", Flags[DEVICE_ID]); 
		//printf("Signature Byte: 0x%08X\n", signatureBytes); 
		switch(Flags[DEVICE_ID])
     406:	82 30       	cpi	r24, 0x02	; 2
     408:	19 f0       	breq	.+6      	; 0x410 <getFlagStatus+0xcc>
     40a:	83 30       	cpi	r24, 0x03	; 3
     40c:	41 f0       	breq	.+16     	; 0x41e <getFlagStatus+0xda>
     40e:	0e c0       	rjmp	.+28     	; 0x42c <getFlagStatus+0xe8>
		{
			case ATtiny2313_ID:
				Program(ATtiny2313);
     410:	6a e0       	ldi	r22, 0x0A	; 10
     412:	71 e9       	ldi	r23, 0x91	; 145
     414:	8e e1       	ldi	r24, 0x1E	; 30
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <Program>
				break;
     41c:	0b c0       	rjmp	.+22     	; 0x434 <getFlagStatus+0xf0>
			case ATmega324PA_ID: 
				Program(ATmega324PA);
     41e:	61 e1       	ldi	r22, 0x11	; 17
     420:	75 e9       	ldi	r23, 0x95	; 149
     422:	8e e1       	ldi	r24, 0x1E	; 30
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <Program>
				break;
     42a:	04 c0       	rjmp	.+8      	; 0x434 <getFlagStatus+0xf0>
			default:
				printf("Error, bad device ID!\n");
     42c:	83 e5       	ldi	r24, 0x53	; 83
     42e:	93 e0       	ldi	r25, 0x03	; 3
     430:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <puts>
		//printf("Network Connect!\n");
		//networkConnect("Wi-Pro", "brightshoe902"); 
		//getFileEthernet()
	}
	//_delay_ms(500);
	clearFlags(); 
     434:	b2 de       	rcall	.-668    	; 0x19a <clearFlags>
	TIMSK1 |= (1 << TOIE1);
     436:	ef e6       	ldi	r30, 0x6F	; 111
     438:	f0 e0       	ldi	r31, 0x00	; 0
     43a:	80 81       	ld	r24, Z
     43c:	81 60       	ori	r24, 0x01	; 1
     43e:	80 83       	st	Z, r24
	return 1; 
}
     440:	81 e0       	ldi	r24, 0x01	; 1
     442:	90 e0       	ldi	r25, 0x00	; 0
     444:	1f 91       	pop	r17
     446:	0f 91       	pop	r16
     448:	08 95       	ret

0000044a <__vector_20>:

//Timer overflow vector for polling 
ISR(TIMER1_OVF_vect)
{
     44a:	1f 92       	push	r1
     44c:	0f 92       	push	r0
     44e:	0f b6       	in	r0, 0x3f	; 63
     450:	0f 92       	push	r0
     452:	11 24       	eor	r1, r1
     454:	0b b6       	in	r0, 0x3b	; 59
     456:	0f 92       	push	r0
     458:	2f 93       	push	r18
     45a:	3f 93       	push	r19
     45c:	4f 93       	push	r20
     45e:	5f 93       	push	r21
     460:	6f 93       	push	r22
     462:	7f 93       	push	r23
     464:	8f 93       	push	r24
     466:	9f 93       	push	r25
     468:	af 93       	push	r26
     46a:	bf 93       	push	r27
     46c:	cf 93       	push	r28
     46e:	df 93       	push	r29
     470:	ef 93       	push	r30
     472:	ff 93       	push	r31
	//cli(); 
	TIMSK1 &= ~(1 << TOIE1);
     474:	cf e6       	ldi	r28, 0x6F	; 111
     476:	d0 e0       	ldi	r29, 0x00	; 0
     478:	88 81       	ld	r24, Y
     47a:	8e 7f       	andi	r24, 0xFE	; 254
     47c:	88 83       	st	Y, r24
	printf("Flag Status\n");
     47e:	89 e6       	ldi	r24, 0x69	; 105
     480:	93 e0       	ldi	r25, 0x03	; 3
     482:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <puts>
	getFlagStatus(); 
     486:	5e df       	rcall	.-324    	; 0x344 <getFlagStatus>
	TCNT1L = 0x00;
     488:	10 92 84 00 	sts	0x0084, r1
	TCNT1H = 0x00;
     48c:	10 92 85 00 	sts	0x0085, r1
	TIMSK1 |= (1 << TOIE1);
     490:	88 81       	ld	r24, Y
     492:	81 60       	ori	r24, 0x01	; 1
     494:	88 83       	st	Y, r24
	//sei();  
}
     496:	ff 91       	pop	r31
     498:	ef 91       	pop	r30
     49a:	df 91       	pop	r29
     49c:	cf 91       	pop	r28
     49e:	bf 91       	pop	r27
     4a0:	af 91       	pop	r26
     4a2:	9f 91       	pop	r25
     4a4:	8f 91       	pop	r24
     4a6:	7f 91       	pop	r23
     4a8:	6f 91       	pop	r22
     4aa:	5f 91       	pop	r21
     4ac:	4f 91       	pop	r20
     4ae:	3f 91       	pop	r19
     4b0:	2f 91       	pop	r18
     4b2:	0f 90       	pop	r0
     4b4:	0b be       	out	0x3b, r0	; 59
     4b6:	0f 90       	pop	r0
     4b8:	0f be       	out	0x3f, r0	; 63
     4ba:	0f 90       	pop	r0
     4bc:	1f 90       	pop	r1
     4be:	18 95       	reti

000004c0 <__vector_6>:

ISR(INT5_vect)
{
     4c0:	1f 92       	push	r1
     4c2:	0f 92       	push	r0
     4c4:	0f b6       	in	r0, 0x3f	; 63
     4c6:	0f 92       	push	r0
     4c8:	11 24       	eor	r1, r1
     4ca:	0b b6       	in	r0, 0x3b	; 59
     4cc:	0f 92       	push	r0
     4ce:	2f 93       	push	r18
     4d0:	3f 93       	push	r19
     4d2:	4f 93       	push	r20
     4d4:	5f 93       	push	r21
     4d6:	6f 93       	push	r22
     4d8:	7f 93       	push	r23
     4da:	8f 93       	push	r24
     4dc:	9f 93       	push	r25
     4de:	af 93       	push	r26
     4e0:	bf 93       	push	r27
     4e2:	ef 93       	push	r30
     4e4:	ff 93       	push	r31
	cli();
     4e6:	f8 94       	cli
	if(PINE & (1<<INT5))
     4e8:	65 9b       	sbis	0x0c, 5	; 12
     4ea:	07 c0       	rjmp	.+14     	; 0x4fa <__vector_6+0x3a>
	{
		Flags[ETHERNET] = 0; 
     4ec:	10 92 75 09 	sts	0x0975, r1
		//checkWifiStatus(); 
		printf("Rising Edge!\n");
     4f0:	85 e7       	ldi	r24, 0x75	; 117
     4f2:	93 e0       	ldi	r25, 0x03	; 3
     4f4:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <puts>
     4f8:	08 c0       	rjmp	.+16     	; 0x50a <__vector_6+0x4a>
	}
	else
	{
		Flags[ETHERNET] = 1; 
     4fa:	81 e0       	ldi	r24, 0x01	; 1
     4fc:	80 93 75 09 	sts	0x0975, r24
		ethernetInit();
     500:	18 d0       	rcall	.+48     	; 0x532 <ethernetInit>
		printf("Falling Edge!\n");
     502:	82 e8       	ldi	r24, 0x82	; 130
     504:	93 e0       	ldi	r25, 0x03	; 3
     506:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <puts>
	}
	sei();
     50a:	78 94       	sei
}
     50c:	ff 91       	pop	r31
     50e:	ef 91       	pop	r30
     510:	bf 91       	pop	r27
     512:	af 91       	pop	r26
     514:	9f 91       	pop	r25
     516:	8f 91       	pop	r24
     518:	7f 91       	pop	r23
     51a:	6f 91       	pop	r22
     51c:	5f 91       	pop	r21
     51e:	4f 91       	pop	r20
     520:	3f 91       	pop	r19
     522:	2f 91       	pop	r18
     524:	0f 90       	pop	r0
     526:	0b be       	out	0x3b, r0	; 59
     528:	0f 90       	pop	r0
     52a:	0f be       	out	0x3f, r0	; 63
     52c:	0f 90       	pop	r0
     52e:	1f 90       	pop	r1
     530:	18 95       	reti

00000532 <ethernetInit>:
	//EnableEthernetInterrupt(); 
	SendData(httpBuff, strlen(httpBuff), 0);
	ReceiveData(RAMAddress, receiveData, receiveLength, 1, externRAM);
	memset(httpBuff, 0x00, 100); 
	return receiveData; 
}
     532:	28 e0       	ldi	r18, 0x08	; 8
     534:	32 e0       	ldi	r19, 0x02	; 2
     536:	4c e0       	ldi	r20, 0x0C	; 12
     538:	52 e0       	ldi	r21, 0x02	; 2
     53a:	60 e1       	ldi	r22, 0x10	; 16
     53c:	72 e0       	ldi	r23, 0x02	; 2
     53e:	84 e1       	ldi	r24, 0x14	; 20
     540:	92 e0       	ldi	r25, 0x02	; 2
     542:	6a d0       	rcall	.+212    	; 0x618 <NetworkSetup>
     544:	20 e0       	ldi	r18, 0x00	; 0
     546:	32 e0       	ldi	r19, 0x02	; 2
     548:	42 e0       	ldi	r20, 0x02	; 2
     54a:	52 e0       	ldi	r21, 0x02	; 2
     54c:	64 e0       	ldi	r22, 0x04	; 4
     54e:	72 e0       	ldi	r23, 0x02	; 2
     550:	81 e0       	ldi	r24, 0x01	; 1
     552:	f5 d1       	rcall	.+1002   	; 0x93e <Server_Connect>
     554:	89 2b       	or	r24, r25
     556:	b1 f3       	breq	.-20     	; 0x544 <ethernetInit+0x12>
     558:	91 c2       	rjmp	.+1314   	; 0xa7c <MemoryInit>
     55a:	08 95       	ret

0000055c <updateFileEthernet>:

void updateFileEthernet(char* filepath)
{
     55c:	cf 93       	push	r28
     55e:	df 93       	push	r29
	//strncpy(httpBuff, "GET ", 4); 
	strcpy(httpBuff, filepath); 
     560:	bc 01       	movw	r22, r24
     562:	8b e7       	ldi	r24, 0x7B	; 123
     564:	99 e0       	ldi	r25, 0x09	; 9
     566:	0e 94 a1 11 	call	0x2342	; 0x2342 <strcpy>
	strncat(httpBuff, " HTTP/1.1 \nHost: www.wi-pro.us \n\n", 40); 
     56a:	cb e7       	ldi	r28, 0x7B	; 123
     56c:	d9 e0       	ldi	r29, 0x09	; 9
     56e:	de 01       	movw	r26, r28
     570:	0d 90       	ld	r0, X+
     572:	00 20       	and	r0, r0
     574:	e9 f7       	brne	.-6      	; 0x570 <updateFileEthernet+0x14>
     576:	11 97       	sbiw	r26, 0x01	; 1
     578:	82 e2       	ldi	r24, 0x22	; 34
     57a:	e0 e9       	ldi	r30, 0x90	; 144
     57c:	f3 e0       	ldi	r31, 0x03	; 3
     57e:	01 90       	ld	r0, Z+
     580:	0d 92       	st	X+, r0
     582:	8a 95       	dec	r24
     584:	e1 f7       	brne	.-8      	; 0x57e <updateFileEthernet+0x22>
	printf("%s", httpBuff); 
     586:	df 93       	push	r29
     588:	cf 93       	push	r28
     58a:	85 ec       	ldi	r24, 0xC5	; 197
     58c:	92 e0       	ldi	r25, 0x02	; 2
     58e:	9f 93       	push	r25
     590:	8f 93       	push	r24
     592:	0e 94 da 11 	call	0x23b4	; 0x23b4 <printf>
	SendData(httpBuff, strlen(httpBuff), 0);
     596:	fe 01       	movw	r30, r28
     598:	01 90       	ld	r0, Z+
     59a:	00 20       	and	r0, r0
     59c:	e9 f7       	brne	.-6      	; 0x598 <updateFileEthernet+0x3c>
     59e:	31 97       	sbiw	r30, 0x01	; 1
     5a0:	bf 01       	movw	r22, r30
     5a2:	6b 57       	subi	r22, 0x7B	; 123
     5a4:	79 40       	sbci	r23, 0x09	; 9
     5a6:	40 e0       	ldi	r20, 0x00	; 0
     5a8:	50 e0       	ldi	r21, 0x00	; 0
     5aa:	ce 01       	movw	r24, r28
     5ac:	8b d2       	rcall	.+1302   	; 0xac4 <SendData>
	memset(httpBuff, 0x00, 100); 
     5ae:	84 e6       	ldi	r24, 0x64	; 100
     5b0:	fe 01       	movw	r30, r28
     5b2:	11 92       	st	Z+, r1
     5b4:	8a 95       	dec	r24
     5b6:	e9 f7       	brne	.-6      	; 0x5b2 <updateFileEthernet+0x56>
     5b8:	0f 90       	pop	r0
     5ba:	0f 90       	pop	r0
     5bc:	0f 90       	pop	r0
     5be:	0f 90       	pop	r0
}
     5c0:	df 91       	pop	r29
     5c2:	cf 91       	pop	r28
     5c4:	08 95       	ret

000005c6 <SPI_EthernetWrite>:
}

uint16_t ReceiveSize(void)
{
	return ((SPI_EthernetRead(S0_RX_RSR) & 0x00FF) << 8 ) + SPI_EthernetRead(S0_RX_RSR + 1);
}
     5c6:	74 98       	cbi	0x0e, 4	; 14
     5c8:	20 ef       	ldi	r18, 0xF0	; 240
     5ca:	2e bd       	out	0x2e, r18	; 46
     5cc:	0d b4       	in	r0, 0x2d	; 45
     5ce:	07 fe       	sbrs	r0, 7
     5d0:	fd cf       	rjmp	.-6      	; 0x5cc <SPI_EthernetWrite+0x6>
     5d2:	9e bd       	out	0x2e, r25	; 46
     5d4:	0d b4       	in	r0, 0x2d	; 45
     5d6:	07 fe       	sbrs	r0, 7
     5d8:	fd cf       	rjmp	.-6      	; 0x5d4 <SPI_EthernetWrite+0xe>
     5da:	8e bd       	out	0x2e, r24	; 46
     5dc:	0d b4       	in	r0, 0x2d	; 45
     5de:	07 fe       	sbrs	r0, 7
     5e0:	fd cf       	rjmp	.-6      	; 0x5dc <SPI_EthernetWrite+0x16>
     5e2:	6e bd       	out	0x2e, r22	; 46
     5e4:	0d b4       	in	r0, 0x2d	; 45
     5e6:	07 fe       	sbrs	r0, 7
     5e8:	fd cf       	rjmp	.-6      	; 0x5e4 <SPI_EthernetWrite+0x1e>
     5ea:	74 9a       	sbi	0x0e, 4	; 14
     5ec:	08 95       	ret

000005ee <SPI_EthernetRead>:
     5ee:	74 98       	cbi	0x0e, 4	; 14
     5f0:	2f e0       	ldi	r18, 0x0F	; 15
     5f2:	2e bd       	out	0x2e, r18	; 46
     5f4:	0d b4       	in	r0, 0x2d	; 45
     5f6:	07 fe       	sbrs	r0, 7
     5f8:	fd cf       	rjmp	.-6      	; 0x5f4 <SPI_EthernetRead+0x6>
     5fa:	9e bd       	out	0x2e, r25	; 46
     5fc:	0d b4       	in	r0, 0x2d	; 45
     5fe:	07 fe       	sbrs	r0, 7
     600:	fd cf       	rjmp	.-6      	; 0x5fc <SPI_EthernetRead+0xe>
     602:	8e bd       	out	0x2e, r24	; 46
     604:	0d b4       	in	r0, 0x2d	; 45
     606:	07 fe       	sbrs	r0, 7
     608:	fd cf       	rjmp	.-6      	; 0x604 <SPI_EthernetRead+0x16>
     60a:	1e bc       	out	0x2e, r1	; 46
     60c:	0d b4       	in	r0, 0x2d	; 45
     60e:	07 fe       	sbrs	r0, 7
     610:	fd cf       	rjmp	.-6      	; 0x60c <SPI_EthernetRead+0x1e>
     612:	74 9a       	sbi	0x0e, 4	; 14
     614:	8e b5       	in	r24, 0x2e	; 46
     616:	08 95       	ret

00000618 <NetworkSetup>:
     618:	bf 92       	push	r11
     61a:	cf 92       	push	r12
     61c:	df 92       	push	r13
     61e:	ef 92       	push	r14
     620:	ff 92       	push	r15
     622:	0f 93       	push	r16
     624:	1f 93       	push	r17
     626:	cf 93       	push	r28
     628:	df 93       	push	r29
     62a:	ec 01       	movw	r28, r24
     62c:	7b 01       	movw	r14, r22
     62e:	6a 01       	movw	r12, r20
     630:	89 01       	movw	r16, r18
     632:	6c 9a       	sbi	0x0d, 4	; 13
     634:	87 e0       	ldi	r24, 0x07	; 7
     636:	84 b9       	out	0x04, r24	; 4
     638:	74 9a       	sbi	0x0e, 4	; 14
     63a:	80 e5       	ldi	r24, 0x50	; 80
     63c:	8c bd       	out	0x2c, r24	; 44
     63e:	8c eb       	ldi	r24, 0xBC	; 188
     640:	93 e0       	ldi	r25, 0x03	; 3
     642:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <puts>
     646:	8e ec       	ldi	r24, 0xCE	; 206
     648:	93 e0       	ldi	r25, 0x03	; 3
     64a:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <puts>
     64e:	60 e8       	ldi	r22, 0x80	; 128
     650:	80 e0       	ldi	r24, 0x00	; 0
     652:	90 e0       	ldi	r25, 0x00	; 0
     654:	b8 df       	rcall	.-144    	; 0x5c6 <SPI_EthernetWrite>
     656:	8f ec       	ldi	r24, 0xCF	; 207
     658:	97 e0       	ldi	r25, 0x07	; 7
     65a:	01 97       	sbiw	r24, 0x01	; 1
     65c:	f1 f7       	brne	.-4      	; 0x65a <NetworkSetup+0x42>
     65e:	00 c0       	rjmp	.+0      	; 0x660 <NetworkSetup+0x48>
     660:	00 00       	nop
     662:	80 e0       	ldi	r24, 0x00	; 0
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	c3 df       	rcall	.-122    	; 0x5ee <SPI_EthernetRead>
     668:	1f 92       	push	r1
     66a:	8f 93       	push	r24
     66c:	87 ee       	ldi	r24, 0xE7	; 231
     66e:	93 e0       	ldi	r25, 0x03	; 3
     670:	9f 93       	push	r25
     672:	8f 93       	push	r24
     674:	0e 94 da 11 	call	0x23b4	; 0x23b4 <printf>
     678:	f8 01       	movw	r30, r16
     67a:	83 81       	ldd	r24, Z+3	; 0x03
     67c:	1f 92       	push	r1
     67e:	8f 93       	push	r24
     680:	82 81       	ldd	r24, Z+2	; 0x02
     682:	1f 92       	push	r1
     684:	8f 93       	push	r24
     686:	81 81       	ldd	r24, Z+1	; 0x01
     688:	1f 92       	push	r1
     68a:	8f 93       	push	r24
     68c:	80 81       	ld	r24, Z
     68e:	1f 92       	push	r1
     690:	8f 93       	push	r24
     692:	88 ef       	ldi	r24, 0xF8	; 248
     694:	93 e0       	ldi	r25, 0x03	; 3
     696:	9f 93       	push	r25
     698:	8f 93       	push	r24
     69a:	0e 94 da 11 	call	0x23b4	; 0x23b4 <printf>
     69e:	f8 01       	movw	r30, r16
     6a0:	60 81       	ld	r22, Z
     6a2:	81 e0       	ldi	r24, 0x01	; 1
     6a4:	90 e0       	ldi	r25, 0x00	; 0
     6a6:	8f df       	rcall	.-226    	; 0x5c6 <SPI_EthernetWrite>
     6a8:	f8 01       	movw	r30, r16
     6aa:	61 81       	ldd	r22, Z+1	; 0x01
     6ac:	82 e0       	ldi	r24, 0x02	; 2
     6ae:	90 e0       	ldi	r25, 0x00	; 0
     6b0:	8a df       	rcall	.-236    	; 0x5c6 <SPI_EthernetWrite>
     6b2:	f8 01       	movw	r30, r16
     6b4:	62 81       	ldd	r22, Z+2	; 0x02
     6b6:	83 e0       	ldi	r24, 0x03	; 3
     6b8:	90 e0       	ldi	r25, 0x00	; 0
     6ba:	85 df       	rcall	.-246    	; 0x5c6 <SPI_EthernetWrite>
     6bc:	f8 01       	movw	r30, r16
     6be:	63 81       	ldd	r22, Z+3	; 0x03
     6c0:	84 e0       	ldi	r24, 0x04	; 4
     6c2:	90 e0       	ldi	r25, 0x00	; 0
     6c4:	80 df       	rcall	.-256    	; 0x5c6 <SPI_EthernetWrite>
     6c6:	8f ec       	ldi	r24, 0xCF	; 207
     6c8:	97 e0       	ldi	r25, 0x07	; 7
     6ca:	01 97       	sbiw	r24, 0x01	; 1
     6cc:	f1 f7       	brne	.-4      	; 0x6ca <NetworkSetup+0xb2>
     6ce:	00 c0       	rjmp	.+0      	; 0x6d0 <NetworkSetup+0xb8>
     6d0:	00 00       	nop
     6d2:	84 e0       	ldi	r24, 0x04	; 4
     6d4:	90 e0       	ldi	r25, 0x00	; 0
     6d6:	8b df       	rcall	.-234    	; 0x5ee <SPI_EthernetRead>
     6d8:	b8 2e       	mov	r11, r24
     6da:	83 e0       	ldi	r24, 0x03	; 3
     6dc:	90 e0       	ldi	r25, 0x00	; 0
     6de:	87 df       	rcall	.-242    	; 0x5ee <SPI_EthernetRead>
     6e0:	08 2f       	mov	r16, r24
     6e2:	82 e0       	ldi	r24, 0x02	; 2
     6e4:	90 e0       	ldi	r25, 0x00	; 0
     6e6:	83 df       	rcall	.-250    	; 0x5ee <SPI_EthernetRead>
     6e8:	18 2f       	mov	r17, r24
     6ea:	81 e0       	ldi	r24, 0x01	; 1
     6ec:	90 e0       	ldi	r25, 0x00	; 0
     6ee:	7f df       	rcall	.-258    	; 0x5ee <SPI_EthernetRead>
     6f0:	1f 92       	push	r1
     6f2:	bf 92       	push	r11
     6f4:	1f 92       	push	r1
     6f6:	0f 93       	push	r16
     6f8:	1f 92       	push	r1
     6fa:	1f 93       	push	r17
     6fc:	1f 92       	push	r1
     6fe:	8f 93       	push	r24
     700:	8d e1       	ldi	r24, 0x1D	; 29
     702:	94 e0       	ldi	r25, 0x04	; 4
     704:	9f 93       	push	r25
     706:	8f 93       	push	r24
     708:	0e 94 da 11 	call	0x23b4	; 0x23b4 <printf>
     70c:	8d 81       	ldd	r24, Y+5	; 0x05
     70e:	1f 92       	push	r1
     710:	8f 93       	push	r24
     712:	8c 81       	ldd	r24, Y+4	; 0x04
     714:	1f 92       	push	r1
     716:	8f 93       	push	r24
     718:	8b 81       	ldd	r24, Y+3	; 0x03
     71a:	1f 92       	push	r1
     71c:	8f 93       	push	r24
     71e:	8a 81       	ldd	r24, Y+2	; 0x02
     720:	1f 92       	push	r1
     722:	8f 93       	push	r24
     724:	89 81       	ldd	r24, Y+1	; 0x01
     726:	1f 92       	push	r1
     728:	8f 93       	push	r24
     72a:	88 81       	ld	r24, Y
     72c:	1f 92       	push	r1
     72e:	8f 93       	push	r24
     730:	88 e3       	ldi	r24, 0x38	; 56
     732:	94 e0       	ldi	r25, 0x04	; 4
     734:	9f 93       	push	r25
     736:	8f 93       	push	r24
     738:	0e 94 da 11 	call	0x23b4	; 0x23b4 <printf>
     73c:	ed b7       	in	r30, 0x3d	; 61
     73e:	fe b7       	in	r31, 0x3e	; 62
     740:	b6 96       	adiw	r30, 0x26	; 38
     742:	0f b6       	in	r0, 0x3f	; 63
     744:	f8 94       	cli
     746:	fe bf       	out	0x3e, r31	; 62
     748:	0f be       	out	0x3f, r0	; 63
     74a:	ed bf       	out	0x3d, r30	; 61
     74c:	68 81       	ld	r22, Y
     74e:	89 e0       	ldi	r24, 0x09	; 9
     750:	90 e0       	ldi	r25, 0x00	; 0
     752:	39 df       	rcall	.-398    	; 0x5c6 <SPI_EthernetWrite>
     754:	69 81       	ldd	r22, Y+1	; 0x01
     756:	8a e0       	ldi	r24, 0x0A	; 10
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	35 df       	rcall	.-406    	; 0x5c6 <SPI_EthernetWrite>
     75c:	6a 81       	ldd	r22, Y+2	; 0x02
     75e:	8b e0       	ldi	r24, 0x0B	; 11
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	31 df       	rcall	.-414    	; 0x5c6 <SPI_EthernetWrite>
     764:	6b 81       	ldd	r22, Y+3	; 0x03
     766:	8c e0       	ldi	r24, 0x0C	; 12
     768:	90 e0       	ldi	r25, 0x00	; 0
     76a:	2d df       	rcall	.-422    	; 0x5c6 <SPI_EthernetWrite>
     76c:	6c 81       	ldd	r22, Y+4	; 0x04
     76e:	8d e0       	ldi	r24, 0x0D	; 13
     770:	90 e0       	ldi	r25, 0x00	; 0
     772:	29 df       	rcall	.-430    	; 0x5c6 <SPI_EthernetWrite>
     774:	6d 81       	ldd	r22, Y+5	; 0x05
     776:	8e e0       	ldi	r24, 0x0E	; 14
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	25 df       	rcall	.-438    	; 0x5c6 <SPI_EthernetWrite>
     77c:	8f ec       	ldi	r24, 0xCF	; 207
     77e:	97 e0       	ldi	r25, 0x07	; 7
     780:	01 97       	sbiw	r24, 0x01	; 1
     782:	f1 f7       	brne	.-4      	; 0x780 <NetworkSetup+0x168>
     784:	00 c0       	rjmp	.+0      	; 0x786 <NetworkSetup+0x16e>
     786:	00 00       	nop
     788:	8e e0       	ldi	r24, 0x0E	; 14
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	30 df       	rcall	.-416    	; 0x5ee <SPI_EthernetRead>
     78e:	b8 2e       	mov	r11, r24
     790:	8d e0       	ldi	r24, 0x0D	; 13
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	2c df       	rcall	.-424    	; 0x5ee <SPI_EthernetRead>
     796:	08 2f       	mov	r16, r24
     798:	8c e0       	ldi	r24, 0x0C	; 12
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	28 df       	rcall	.-432    	; 0x5ee <SPI_EthernetRead>
     79e:	18 2f       	mov	r17, r24
     7a0:	8b e0       	ldi	r24, 0x0B	; 11
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	24 df       	rcall	.-440    	; 0x5ee <SPI_EthernetRead>
     7a6:	d8 2f       	mov	r29, r24
     7a8:	8a e0       	ldi	r24, 0x0A	; 10
     7aa:	90 e0       	ldi	r25, 0x00	; 0
     7ac:	20 df       	rcall	.-448    	; 0x5ee <SPI_EthernetRead>
     7ae:	c8 2f       	mov	r28, r24
     7b0:	89 e0       	ldi	r24, 0x09	; 9
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	1c df       	rcall	.-456    	; 0x5ee <SPI_EthernetRead>
     7b6:	1f 92       	push	r1
     7b8:	bf 92       	push	r11
     7ba:	1f 92       	push	r1
     7bc:	0f 93       	push	r16
     7be:	1f 92       	push	r1
     7c0:	1f 93       	push	r17
     7c2:	1f 92       	push	r1
     7c4:	df 93       	push	r29
     7c6:	1f 92       	push	r1
     7c8:	cf 93       	push	r28
     7ca:	1f 92       	push	r1
     7cc:	8f 93       	push	r24
     7ce:	8e e6       	ldi	r24, 0x6E	; 110
     7d0:	94 e0       	ldi	r25, 0x04	; 4
     7d2:	9f 93       	push	r25
     7d4:	8f 93       	push	r24
     7d6:	0e 94 da 11 	call	0x23b4	; 0x23b4 <printf>
     7da:	f6 01       	movw	r30, r12
     7dc:	83 81       	ldd	r24, Z+3	; 0x03
     7de:	1f 92       	push	r1
     7e0:	8f 93       	push	r24
     7e2:	82 81       	ldd	r24, Z+2	; 0x02
     7e4:	1f 92       	push	r1
     7e6:	8f 93       	push	r24
     7e8:	81 81       	ldd	r24, Z+1	; 0x01
     7ea:	1f 92       	push	r1
     7ec:	8f 93       	push	r24
     7ee:	80 81       	ld	r24, Z
     7f0:	1f 92       	push	r1
     7f2:	8f 93       	push	r24
     7f4:	8b e9       	ldi	r24, 0x9B	; 155
     7f6:	94 e0       	ldi	r25, 0x04	; 4
     7f8:	9f 93       	push	r25
     7fa:	8f 93       	push	r24
     7fc:	0e 94 da 11 	call	0x23b4	; 0x23b4 <printf>
     800:	f6 01       	movw	r30, r12
     802:	60 81       	ld	r22, Z
     804:	85 e0       	ldi	r24, 0x05	; 5
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	de de       	rcall	.-580    	; 0x5c6 <SPI_EthernetWrite>
     80a:	f6 01       	movw	r30, r12
     80c:	61 81       	ldd	r22, Z+1	; 0x01
     80e:	86 e0       	ldi	r24, 0x06	; 6
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	d9 de       	rcall	.-590    	; 0x5c6 <SPI_EthernetWrite>
     814:	f6 01       	movw	r30, r12
     816:	62 81       	ldd	r22, Z+2	; 0x02
     818:	87 e0       	ldi	r24, 0x07	; 7
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	d4 de       	rcall	.-600    	; 0x5c6 <SPI_EthernetWrite>
     81e:	f6 01       	movw	r30, r12
     820:	63 81       	ldd	r22, Z+3	; 0x03
     822:	88 e0       	ldi	r24, 0x08	; 8
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	cf de       	rcall	.-610    	; 0x5c6 <SPI_EthernetWrite>
     828:	8f ec       	ldi	r24, 0xCF	; 207
     82a:	97 e0       	ldi	r25, 0x07	; 7
     82c:	01 97       	sbiw	r24, 0x01	; 1
     82e:	f1 f7       	brne	.-4      	; 0x82c <NetworkSetup+0x214>
     830:	00 c0       	rjmp	.+0      	; 0x832 <NetworkSetup+0x21a>
     832:	00 00       	nop
     834:	88 e0       	ldi	r24, 0x08	; 8
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	da de       	rcall	.-588    	; 0x5ee <SPI_EthernetRead>
     83a:	18 2f       	mov	r17, r24
     83c:	87 e0       	ldi	r24, 0x07	; 7
     83e:	90 e0       	ldi	r25, 0x00	; 0
     840:	d6 de       	rcall	.-596    	; 0x5ee <SPI_EthernetRead>
     842:	d8 2f       	mov	r29, r24
     844:	86 e0       	ldi	r24, 0x06	; 6
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	d2 de       	rcall	.-604    	; 0x5ee <SPI_EthernetRead>
     84a:	c8 2f       	mov	r28, r24
     84c:	85 e0       	ldi	r24, 0x05	; 5
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	ce de       	rcall	.-612    	; 0x5ee <SPI_EthernetRead>
     852:	1f 92       	push	r1
     854:	1f 93       	push	r17
     856:	1f 92       	push	r1
     858:	df 93       	push	r29
     85a:	1f 92       	push	r1
     85c:	cf 93       	push	r28
     85e:	1f 92       	push	r1
     860:	8f 93       	push	r24
     862:	81 ec       	ldi	r24, 0xC1	; 193
     864:	94 e0       	ldi	r25, 0x04	; 4
     866:	9f 93       	push	r25
     868:	8f 93       	push	r24
     86a:	0e 94 da 11 	call	0x23b4	; 0x23b4 <printf>
     86e:	ed b7       	in	r30, 0x3d	; 61
     870:	fe b7       	in	r31, 0x3e	; 62
     872:	b2 96       	adiw	r30, 0x22	; 34
     874:	0f b6       	in	r0, 0x3f	; 63
     876:	f8 94       	cli
     878:	fe bf       	out	0x3e, r31	; 62
     87a:	0f be       	out	0x3f, r0	; 63
     87c:	ed bf       	out	0x3d, r30	; 61
     87e:	f7 01       	movw	r30, r14
     880:	83 81       	ldd	r24, Z+3	; 0x03
     882:	1f 92       	push	r1
     884:	8f 93       	push	r24
     886:	82 81       	ldd	r24, Z+2	; 0x02
     888:	1f 92       	push	r1
     88a:	8f 93       	push	r24
     88c:	81 81       	ldd	r24, Z+1	; 0x01
     88e:	1f 92       	push	r1
     890:	8f 93       	push	r24
     892:	80 81       	ld	r24, Z
     894:	1f 92       	push	r1
     896:	8f 93       	push	r24
     898:	8d ed       	ldi	r24, 0xDD	; 221
     89a:	94 e0       	ldi	r25, 0x04	; 4
     89c:	9f 93       	push	r25
     89e:	8f 93       	push	r24
     8a0:	0e 94 da 11 	call	0x23b4	; 0x23b4 <printf>
     8a4:	f7 01       	movw	r30, r14
     8a6:	60 81       	ld	r22, Z
     8a8:	8f e0       	ldi	r24, 0x0F	; 15
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	8c de       	rcall	.-744    	; 0x5c6 <SPI_EthernetWrite>
     8ae:	f7 01       	movw	r30, r14
     8b0:	61 81       	ldd	r22, Z+1	; 0x01
     8b2:	80 e1       	ldi	r24, 0x10	; 16
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	87 de       	rcall	.-754    	; 0x5c6 <SPI_EthernetWrite>
     8b8:	f7 01       	movw	r30, r14
     8ba:	62 81       	ldd	r22, Z+2	; 0x02
     8bc:	81 e1       	ldi	r24, 0x11	; 17
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	82 de       	rcall	.-764    	; 0x5c6 <SPI_EthernetWrite>
     8c2:	f7 01       	movw	r30, r14
     8c4:	63 81       	ldd	r22, Z+3	; 0x03
     8c6:	82 e1       	ldi	r24, 0x12	; 18
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	7d de       	rcall	.-774    	; 0x5c6 <SPI_EthernetWrite>
     8cc:	8f ec       	ldi	r24, 0xCF	; 207
     8ce:	97 e0       	ldi	r25, 0x07	; 7
     8d0:	01 97       	sbiw	r24, 0x01	; 1
     8d2:	f1 f7       	brne	.-4      	; 0x8d0 <NetworkSetup+0x2b8>
     8d4:	00 c0       	rjmp	.+0      	; 0x8d6 <NetworkSetup+0x2be>
     8d6:	00 00       	nop
     8d8:	82 e1       	ldi	r24, 0x12	; 18
     8da:	90 e0       	ldi	r25, 0x00	; 0
     8dc:	88 de       	rcall	.-752    	; 0x5ee <SPI_EthernetRead>
     8de:	18 2f       	mov	r17, r24
     8e0:	81 e1       	ldi	r24, 0x11	; 17
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	84 de       	rcall	.-760    	; 0x5ee <SPI_EthernetRead>
     8e6:	d8 2f       	mov	r29, r24
     8e8:	80 e1       	ldi	r24, 0x10	; 16
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	80 de       	rcall	.-768    	; 0x5ee <SPI_EthernetRead>
     8ee:	c8 2f       	mov	r28, r24
     8f0:	8f e0       	ldi	r24, 0x0F	; 15
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	7c de       	rcall	.-776    	; 0x5ee <SPI_EthernetRead>
     8f6:	1f 92       	push	r1
     8f8:	1f 93       	push	r17
     8fa:	1f 92       	push	r1
     8fc:	df 93       	push	r29
     8fe:	1f 92       	push	r1
     900:	cf 93       	push	r28
     902:	1f 92       	push	r1
     904:	8f 93       	push	r24
     906:	8d ef       	ldi	r24, 0xFD	; 253
     908:	94 e0       	ldi	r25, 0x04	; 4
     90a:	9f 93       	push	r25
     90c:	8f 93       	push	r24
     90e:	0e 94 da 11 	call	0x23b4	; 0x23b4 <printf>
     912:	89 e1       	ldi	r24, 0x19	; 25
     914:	95 e0       	ldi	r25, 0x05	; 5
     916:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <puts>
     91a:	ed b7       	in	r30, 0x3d	; 61
     91c:	fe b7       	in	r31, 0x3e	; 62
     91e:	74 96       	adiw	r30, 0x14	; 20
     920:	0f b6       	in	r0, 0x3f	; 63
     922:	f8 94       	cli
     924:	fe bf       	out	0x3e, r31	; 62
     926:	0f be       	out	0x3f, r0	; 63
     928:	ed bf       	out	0x3d, r30	; 61
     92a:	df 91       	pop	r29
     92c:	cf 91       	pop	r28
     92e:	1f 91       	pop	r17
     930:	0f 91       	pop	r16
     932:	ff 90       	pop	r15
     934:	ef 90       	pop	r14
     936:	df 90       	pop	r13
     938:	cf 90       	pop	r12
     93a:	bf 90       	pop	r11
     93c:	08 95       	ret

0000093e <Server_Connect>:
     93e:	df 92       	push	r13
     940:	ef 92       	push	r14
     942:	ff 92       	push	r15
     944:	0f 93       	push	r16
     946:	1f 93       	push	r17
     948:	cf 93       	push	r28
     94a:	df 93       	push	r29
     94c:	d8 2e       	mov	r13, r24
     94e:	8b 01       	movw	r16, r22
     950:	7a 01       	movw	r14, r20
     952:	e9 01       	movw	r28, r18
     954:	60 e1       	ldi	r22, 0x10	; 16
     956:	81 e0       	ldi	r24, 0x01	; 1
     958:	94 e0       	ldi	r25, 0x04	; 4
     95a:	35 de       	rcall	.-918    	; 0x5c6 <SPI_EthernetWrite>
     95c:	6d 2d       	mov	r22, r13
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	94 e0       	ldi	r25, 0x04	; 4
     962:	31 de       	rcall	.-926    	; 0x5c6 <SPI_EthernetWrite>
     964:	68 81       	ld	r22, Y
     966:	84 e0       	ldi	r24, 0x04	; 4
     968:	94 e0       	ldi	r25, 0x04	; 4
     96a:	2d de       	rcall	.-934    	; 0x5c6 <SPI_EthernetWrite>
     96c:	69 81       	ldd	r22, Y+1	; 0x01
     96e:	85 e0       	ldi	r24, 0x05	; 5
     970:	94 e0       	ldi	r25, 0x04	; 4
     972:	29 de       	rcall	.-942    	; 0x5c6 <SPI_EthernetWrite>
     974:	61 e0       	ldi	r22, 0x01	; 1
     976:	81 e0       	ldi	r24, 0x01	; 1
     978:	94 e0       	ldi	r25, 0x04	; 4
     97a:	25 de       	rcall	.-950    	; 0x5c6 <SPI_EthernetWrite>
     97c:	83 e0       	ldi	r24, 0x03	; 3
     97e:	94 e0       	ldi	r25, 0x04	; 4
     980:	36 de       	rcall	.-916    	; 0x5ee <SPI_EthernetRead>
     982:	83 31       	cpi	r24, 0x13	; 19
     984:	39 f7       	brne	.-50     	; 0x954 <Server_Connect+0x16>
     986:	f8 01       	movw	r30, r16
     988:	60 81       	ld	r22, Z
     98a:	8c e0       	ldi	r24, 0x0C	; 12
     98c:	94 e0       	ldi	r25, 0x04	; 4
     98e:	1b de       	rcall	.-970    	; 0x5c6 <SPI_EthernetWrite>
     990:	f8 01       	movw	r30, r16
     992:	61 81       	ldd	r22, Z+1	; 0x01
     994:	8d e0       	ldi	r24, 0x0D	; 13
     996:	94 e0       	ldi	r25, 0x04	; 4
     998:	16 de       	rcall	.-980    	; 0x5c6 <SPI_EthernetWrite>
     99a:	f8 01       	movw	r30, r16
     99c:	62 81       	ldd	r22, Z+2	; 0x02
     99e:	8e e0       	ldi	r24, 0x0E	; 14
     9a0:	94 e0       	ldi	r25, 0x04	; 4
     9a2:	11 de       	rcall	.-990    	; 0x5c6 <SPI_EthernetWrite>
     9a4:	f8 01       	movw	r30, r16
     9a6:	63 81       	ldd	r22, Z+3	; 0x03
     9a8:	8f e0       	ldi	r24, 0x0F	; 15
     9aa:	94 e0       	ldi	r25, 0x04	; 4
     9ac:	0c de       	rcall	.-1000   	; 0x5c6 <SPI_EthernetWrite>
     9ae:	f7 01       	movw	r30, r14
     9b0:	60 81       	ld	r22, Z
     9b2:	80 e1       	ldi	r24, 0x10	; 16
     9b4:	94 e0       	ldi	r25, 0x04	; 4
     9b6:	07 de       	rcall	.-1010   	; 0x5c6 <SPI_EthernetWrite>
     9b8:	f7 01       	movw	r30, r14
     9ba:	61 81       	ldd	r22, Z+1	; 0x01
     9bc:	81 e1       	ldi	r24, 0x11	; 17
     9be:	94 e0       	ldi	r25, 0x04	; 4
     9c0:	02 de       	rcall	.-1020   	; 0x5c6 <SPI_EthernetWrite>
     9c2:	64 e0       	ldi	r22, 0x04	; 4
     9c4:	81 e0       	ldi	r24, 0x01	; 1
     9c6:	94 e0       	ldi	r25, 0x04	; 4
     9c8:	fe dd       	rcall	.-1028   	; 0x5c6 <SPI_EthernetWrite>
     9ca:	c0 e0       	ldi	r28, 0x00	; 0
     9cc:	d0 e0       	ldi	r29, 0x00	; 0
     9ce:	00 e1       	ldi	r16, 0x10	; 16
     9d0:	17 e2       	ldi	r17, 0x27	; 39
     9d2:	35 c0       	rjmp	.+106    	; 0xa3e <Server_Connect+0x100>
     9d4:	87 e5       	ldi	r24, 0x57	; 87
     9d6:	92 e0       	ldi	r25, 0x02	; 2
     9d8:	01 97       	sbiw	r24, 0x01	; 1
     9da:	f1 f7       	brne	.-4      	; 0x9d8 <Server_Connect+0x9a>
     9dc:	00 c0       	rjmp	.+0      	; 0x9de <Server_Connect+0xa0>
     9de:	00 00       	nop
     9e0:	21 96       	adiw	r28, 0x01	; 1
     9e2:	9e 01       	movw	r18, r28
     9e4:	32 95       	swap	r19
     9e6:	22 95       	swap	r18
     9e8:	2f 70       	andi	r18, 0x0F	; 15
     9ea:	23 27       	eor	r18, r19
     9ec:	3f 70       	andi	r19, 0x0F	; 15
     9ee:	23 27       	eor	r18, r19
     9f0:	a7 e4       	ldi	r26, 0x47	; 71
     9f2:	b3 e0       	ldi	r27, 0x03	; 3
     9f4:	0e 94 87 11 	call	0x230e	; 0x230e <__umulhisi3>
     9f8:	96 95       	lsr	r25
     9fa:	87 95       	ror	r24
     9fc:	96 95       	lsr	r25
     9fe:	87 95       	ror	r24
     a00:	96 95       	lsr	r25
     a02:	87 95       	ror	r24
     a04:	80 9f       	mul	r24, r16
     a06:	90 01       	movw	r18, r0
     a08:	81 9f       	mul	r24, r17
     a0a:	30 0d       	add	r19, r0
     a0c:	90 9f       	mul	r25, r16
     a0e:	30 0d       	add	r19, r0
     a10:	11 24       	eor	r1, r1
     a12:	c2 17       	cp	r28, r18
     a14:	d3 07       	cpc	r29, r19
     a16:	99 f4       	brne	.+38     	; 0xa3e <Server_Connect+0x100>
     a18:	88 e3       	ldi	r24, 0x38	; 56
     a1a:	95 e0       	ldi	r25, 0x05	; 5
     a1c:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <puts>
     a20:	c1 35       	cpi	r28, 0x51	; 81
     a22:	93 ec       	ldi	r25, 0xC3	; 195
     a24:	d9 07       	cpc	r29, r25
     a26:	58 f0       	brcs	.+22     	; 0xa3e <Server_Connect+0x100>
     a28:	8a e5       	ldi	r24, 0x5A	; 90
     a2a:	95 e0       	ldi	r25, 0x05	; 5
     a2c:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <puts>
     a30:	60 e1       	ldi	r22, 0x10	; 16
     a32:	81 e0       	ldi	r24, 0x01	; 1
     a34:	94 e0       	ldi	r25, 0x04	; 4
     a36:	c7 dd       	rcall	.-1138   	; 0x5c6 <SPI_EthernetWrite>
     a38:	80 e0       	ldi	r24, 0x00	; 0
     a3a:	90 e0       	ldi	r25, 0x00	; 0
     a3c:	17 c0       	rjmp	.+46     	; 0xa6c <Server_Connect+0x12e>
     a3e:	83 e0       	ldi	r24, 0x03	; 3
     a40:	94 e0       	ldi	r25, 0x04	; 4
     a42:	d5 dd       	rcall	.-1110   	; 0x5ee <SPI_EthernetRead>
     a44:	87 31       	cpi	r24, 0x17	; 23
     a46:	31 f6       	brne	.-116    	; 0x9d4 <Server_Connect+0x96>
     a48:	83 e0       	ldi	r24, 0x03	; 3
     a4a:	94 e0       	ldi	r25, 0x04	; 4
     a4c:	d0 dd       	rcall	.-1120   	; 0x5ee <SPI_EthernetRead>
     a4e:	87 31       	cpi	r24, 0x17	; 23
     a50:	39 f4       	brne	.+14     	; 0xa60 <Server_Connect+0x122>
     a52:	82 e7       	ldi	r24, 0x72	; 114
     a54:	95 e0       	ldi	r25, 0x05	; 5
     a56:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <puts>
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	06 c0       	rjmp	.+12     	; 0xa6c <Server_Connect+0x12e>
     a60:	89 e8       	ldi	r24, 0x89	; 137
     a62:	95 e0       	ldi	r25, 0x05	; 5
     a64:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <puts>
     a68:	80 e0       	ldi	r24, 0x00	; 0
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	df 91       	pop	r29
     a6e:	cf 91       	pop	r28
     a70:	1f 91       	pop	r17
     a72:	0f 91       	pop	r16
     a74:	ff 90       	pop	r15
     a76:	ef 90       	pop	r14
     a78:	df 90       	pop	r13
     a7a:	08 95       	ret

00000a7c <MemoryInit>:
     a7c:	63 e0       	ldi	r22, 0x03	; 3
     a7e:	8a e1       	ldi	r24, 0x1A	; 26
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	a1 dd       	rcall	.-1214   	; 0x5c6 <SPI_EthernetWrite>
     a84:	63 e0       	ldi	r22, 0x03	; 3
     a86:	8b e1       	ldi	r24, 0x1B	; 27
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	9d dd       	rcall	.-1222   	; 0x5c6 <SPI_EthernetWrite>
     a8c:	8f ef       	ldi	r24, 0xFF	; 255
     a8e:	9f e1       	ldi	r25, 0x1F	; 31
     a90:	90 93 12 0a 	sts	0x0A12, r25
     a94:	80 93 11 0a 	sts	0x0A11, r24
     a98:	20 e0       	ldi	r18, 0x00	; 0
     a9a:	30 e4       	ldi	r19, 0x40	; 64
     a9c:	30 93 14 0a 	sts	0x0A14, r19
     aa0:	20 93 13 0a 	sts	0x0A13, r18
     aa4:	90 93 18 0a 	sts	0x0A18, r25
     aa8:	80 93 17 0a 	sts	0x0A17, r24
     aac:	80 e0       	ldi	r24, 0x00	; 0
     aae:	90 e6       	ldi	r25, 0x60	; 96
     ab0:	90 93 16 0a 	sts	0x0A16, r25
     ab4:	80 93 15 0a 	sts	0x0A15, r24
     ab8:	08 95       	ret

00000aba <SocketCommand>:

void SocketCommand(uint8_t command) 
{
	SPI_EthernetWrite(S0_CR, command);
     aba:	68 2f       	mov	r22, r24
     abc:	81 e0       	ldi	r24, 0x01	; 1
     abe:	94 e0       	ldi	r25, 0x04	; 4
     ac0:	82 cd       	rjmp	.-1276   	; 0x5c6 <SPI_EthernetWrite>
     ac2:	08 95       	ret

00000ac4 <SendData>:
	S0_RX_MASK = 0x1FFF;
	S0_RX_BASE = 0x6000;
}

int SendData(const uint8_t *buffer,uint16_t bufferLength, int externRAM)
{
     ac4:	4f 92       	push	r4
     ac6:	5f 92       	push	r5
     ac8:	6f 92       	push	r6
     aca:	7f 92       	push	r7
     acc:	8f 92       	push	r8
     ace:	9f 92       	push	r9
     ad0:	af 92       	push	r10
     ad2:	bf 92       	push	r11
     ad4:	cf 92       	push	r12
     ad6:	df 92       	push	r13
     ad8:	ef 92       	push	r14
     ada:	ff 92       	push	r15
     adc:	0f 93       	push	r16
     ade:	1f 93       	push	r17
     ae0:	cf 93       	push	r28
     ae2:	df 93       	push	r29
     ae4:	7c 01       	movw	r14, r24
     ae6:	6b 01       	movw	r12, r22
     ae8:	3a 01       	movw	r6, r20
		
	uint16_t ptr,offaddr,realaddr,txsize,timeout,i,data;
	printf("SR: 0x%02x\n", SPI_EthernetRead(S0_SR));
     aea:	83 e0       	ldi	r24, 0x03	; 3
     aec:	94 e0       	ldi	r25, 0x04	; 4
     aee:	7f dd       	rcall	.-1282   	; 0x5ee <SPI_EthernetRead>
     af0:	1f 92       	push	r1
     af2:	8f 93       	push	r24
     af4:	88 ea       	ldi	r24, 0xA8	; 168
     af6:	95 e0       	ldi	r25, 0x05	; 5
     af8:	9f 93       	push	r25
     afa:	8f 93       	push	r24
     afc:	0e 94 da 11 	call	0x23b4	; 0x23b4 <printf>
	if(SPI_EthernetRead(S0_SR) != SOCK_ESTABLISHED){
     b00:	83 e0       	ldi	r24, 0x03	; 3
     b02:	94 e0       	ldi	r25, 0x04	; 4
     b04:	74 dd       	rcall	.-1304   	; 0x5ee <SPI_EthernetRead>
     b06:	0f 90       	pop	r0
     b08:	0f 90       	pop	r0
     b0a:	0f 90       	pop	r0
     b0c:	0f 90       	pop	r0
     b0e:	87 31       	cpi	r24, 0x17	; 23
     b10:	51 f0       	breq	.+20     	; 0xb26 <SendData+0x62>
		while(!Server_Connect(TCP_MODE, gl_server_ip_addr, gl_server_port, gl_source_port));
     b12:	2a e1       	ldi	r18, 0x1A	; 26
     b14:	32 e0       	ldi	r19, 0x02	; 2
     b16:	4c e1       	ldi	r20, 0x1C	; 28
     b18:	52 e0       	ldi	r21, 0x02	; 2
     b1a:	6e e1       	ldi	r22, 0x1E	; 30
     b1c:	72 e0       	ldi	r23, 0x02	; 2
     b1e:	81 e0       	ldi	r24, 0x01	; 1
     b20:	0e df       	rcall	.-484    	; 0x93e <Server_Connect>
     b22:	89 2b       	or	r24, r25
     b24:	b1 f3       	breq	.-20     	; 0xb12 <SendData+0x4e>
	}
	//#if _DEBUG_MODE
	//printf("Send Size: %d\n",bufferLength);
	//#endif
	// Make sure the TX Free Size Register is available
	txsize = SPI_EthernetRead(S0_TX_FSR);
     b26:	80 e2       	ldi	r24, 0x20	; 32
     b28:	94 e0       	ldi	r25, 0x04	; 4
     b2a:	61 dd       	rcall	.-1342   	; 0x5ee <SPI_EthernetRead>
     b2c:	c8 2f       	mov	r28, r24
     b2e:	d0 e0       	ldi	r29, 0x00	; 0
	txsize = (((txsize & 0x00FF) << 8 ) + SPI_EthernetRead(S0_TX_FSR + 1));
     b30:	dc 2f       	mov	r29, r28
     b32:	cc 27       	eor	r28, r28
     b34:	81 e2       	ldi	r24, 0x21	; 33
     b36:	94 e0       	ldi	r25, 0x04	; 4
     b38:	5a dd       	rcall	.-1356   	; 0x5ee <SPI_EthernetRead>
     b3a:	c8 0f       	add	r28, r24
     b3c:	d1 1d       	adc	r29, r1
	//#if _DEBUG_MODE
	//printf("TX Free Size: %d\n",txsize);
	//#endif
	timeout = 0;
	//Writing our buffer to the transmit buffer
	while (txsize < bufferLength) {
     b3e:	cc 15       	cp	r28, r12
     b40:	dd 05       	cpc	r29, r13
     b42:	08 f4       	brcc	.+2      	; 0xb46 <SendData+0x82>
     b44:	8f c0       	rjmp	.+286    	; 0xc64 <SendData+0x1a0>
     b46:	2c c0       	rjmp	.+88     	; 0xba0 <SendData+0xdc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b48:	8f ec       	ldi	r24, 0xCF	; 207
     b4a:	97 e0       	ldi	r25, 0x07	; 7
     b4c:	01 97       	sbiw	r24, 0x01	; 1
     b4e:	f1 f7       	brne	.-4      	; 0xb4c <SendData+0x88>
     b50:	00 c0       	rjmp	.+0      	; 0xb52 <SendData+0x8e>
     b52:	00 00       	nop
		_delay_ms(1);
		txsize = SPI_EthernetRead(S0_TX_FSR);
     b54:	80 e2       	ldi	r24, 0x20	; 32
     b56:	94 e0       	ldi	r25, 0x04	; 4
     b58:	4a dd       	rcall	.-1388   	; 0x5ee <SPI_EthernetRead>
     b5a:	c8 2f       	mov	r28, r24
     b5c:	d0 e0       	ldi	r29, 0x00	; 0
		txsize = (((txsize & 0x00FF) << 8 ) + SPI_EthernetRead(S0_TX_FSR + 1));
     b5e:	dc 2f       	mov	r29, r28
     b60:	cc 27       	eor	r28, r28
     b62:	81 e2       	ldi	r24, 0x21	; 33
     b64:	94 e0       	ldi	r25, 0x04	; 4
     b66:	43 dd       	rcall	.-1402   	; 0x5ee <SPI_EthernetRead>
     b68:	c8 0f       	add	r28, r24
     b6a:	d1 1d       	adc	r29, r1
		printf("TX Size: %d", txsize);
     b6c:	df 93       	push	r29
     b6e:	cf 93       	push	r28
     b70:	9f 92       	push	r9
     b72:	8f 92       	push	r8
     b74:	0e 94 da 11 	call	0x23b4	; 0x23b4 <printf>
     b78:	01 50       	subi	r16, 0x01	; 1
     b7a:	11 09       	sbc	r17, r1
		// Timeout for approx 1000 ms
		if (timeout++ > 1000) {
     b7c:	0f 90       	pop	r0
     b7e:	0f 90       	pop	r0
     b80:	0f 90       	pop	r0
     b82:	0f 90       	pop	r0
     b84:	01 15       	cp	r16, r1
     b86:	11 05       	cpc	r17, r1
     b88:	41 f4       	brne	.+16     	; 0xb9a <SendData+0xd6>
			//#if _DEBUG_MODE
			//printf("TX Free Size Error!\n");
			//#endif
			// Disconnect the connection
			SocketCommand(DISCON);
     b8a:	88 e0       	ldi	r24, 0x08	; 8
     b8c:	96 df       	rcall	.-212    	; 0xaba <SocketCommand>
			while(SPI_EthernetRead(S0_CR));
     b8e:	81 e0       	ldi	r24, 0x01	; 1
     b90:	94 e0       	ldi	r25, 0x04	; 4
     b92:	2d dd       	rcall	.-1446   	; 0x5ee <SPI_EthernetRead>
     b94:	81 11       	cpse	r24, r1
     b96:	fb cf       	rjmp	.-10     	; 0xb8e <SendData+0xca>
     b98:	5f c0       	rjmp	.+190    	; 0xc58 <SendData+0x194>
	//#if _DEBUG_MODE
	//printf("TX Free Size: %d\n",txsize);
	//#endif
	timeout = 0;
	//Writing our buffer to the transmit buffer
	while (txsize < bufferLength) {
     b9a:	cc 15       	cp	r28, r12
     b9c:	dd 05       	cpc	r29, r13
     b9e:	a0 f2       	brcs	.-88     	; 0xb48 <SendData+0x84>
			return 0;
		}
	}

	// Read the Tx Write Pointer
	ptr = SPI_EthernetRead(S0_TX_WR);
     ba0:	84 e2       	ldi	r24, 0x24	; 36
     ba2:	94 e0       	ldi	r25, 0x04	; 4
     ba4:	24 dd       	rcall	.-1464   	; 0x5ee <SPI_EthernetRead>
     ba6:	48 2e       	mov	r4, r24
	offaddr = (((ptr & 0x00FF) << 8 ) + SPI_EthernetRead(S0_TX_WR + 1));
     ba8:	85 e2       	ldi	r24, 0x25	; 37
     baa:	94 e0       	ldi	r25, 0x04	; 4
     bac:	20 dd       	rcall	.-1472   	; 0x5ee <SPI_EthernetRead>
			return 0;
		}
	}

	// Read the Tx Write Pointer
	ptr = SPI_EthernetRead(S0_TX_WR);
     bae:	51 2c       	mov	r5, r1
	offaddr = (((ptr & 0x00FF) << 8 ) + SPI_EthernetRead(S0_TX_WR + 1));
     bb0:	54 2c       	mov	r5, r4
     bb2:	44 24       	eor	r4, r4
     bb4:	48 0e       	add	r4, r24
     bb6:	51 1c       	adc	r5, r1
	unsigned int startaddr = (((SPI_EthernetRead(S0_TX_RR) << 8) + SPI_EthernetRead(S0_TX_RR + 1)));
     bb8:	82 e2       	ldi	r24, 0x22	; 34
     bba:	94 e0       	ldi	r25, 0x04	; 4
     bbc:	18 dd       	rcall	.-1488   	; 0x5ee <SPI_EthernetRead>
     bbe:	83 e2       	ldi	r24, 0x23	; 35
     bc0:	94 e0       	ldi	r25, 0x04	; 4
     bc2:	15 dd       	rcall	.-1494   	; 0x5ee <SPI_EthernetRead>
	//printf("Real WR: %d\n", realWR);
	//printf("Real RR: %d\n", realRR); 
	//#endif 
	i = 0; 
	data = 0; 
	printf("Sending...\n\n");
     bc4:	80 ec       	ldi	r24, 0xC0	; 192
     bc6:	95 e0       	ldi	r25, 0x05	; 5
     bc8:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <puts>
	while(i < bufferLength) {
     bcc:	c1 14       	cp	r12, r1
     bce:	d1 04       	cpc	r13, r1
     bd0:	61 f1       	breq	.+88     	; 0xc2a <SendData+0x166>
     bd2:	47 01       	movw	r8, r14
     bd4:	8c 0c       	add	r8, r12
     bd6:	9d 1c       	adc	r9, r13
		}
	}

	// Read the Tx Write Pointer
	ptr = SPI_EthernetRead(S0_TX_WR);
	offaddr = (((ptr & 0x00FF) << 8 ) + SPI_EthernetRead(S0_TX_WR + 1));
     bd8:	82 01       	movw	r16, r4
	//printf("Real RR: %d\n", realRR); 
	//#endif 
	i = 0; 
	data = 0; 
	printf("Sending...\n\n");
	while(i < bufferLength) {
     bda:	c0 e0       	ldi	r28, 0x00	; 0
     bdc:	d4 e0       	ldi	r29, 0x04	; 4

		// Calculate the real W5100 physical Tx Buffer Address
		realaddr = S0_TX_BASE + (offaddr & S0_TX_MASK);
     bde:	a0 90 11 0a 	lds	r10, 0x0A11
     be2:	b0 90 12 0a 	lds	r11, 0x0A12
     be6:	a0 22       	and	r10, r16
     be8:	b1 22       	and	r11, r17
     bea:	80 91 13 0a 	lds	r24, 0x0A13
     bee:	90 91 14 0a 	lds	r25, 0x0A14
     bf2:	a8 0e       	add	r10, r24
     bf4:	b9 1e       	adc	r11, r25
		//printf("TX Real Address: %d\n", realaddr);
		// Copy the application data to the W5100 Tx Buffer
		if(externRAM)
     bf6:	61 14       	cp	r6, r1
     bf8:	71 04       	cpc	r7, r1
     bfa:	41 f0       	breq	.+16     	; 0xc0c <SendData+0x148>
		{
			//Grab the byte from external RAM and write it to the Wiznet TX Buffer 
			data = RAMReadByte(WIFI_QSTRING_ADDRESS + i);
     bfc:	be 01       	movw	r22, r28
     bfe:	80 e0       	ldi	r24, 0x00	; 0
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	19 d1       	rcall	.+562    	; 0xe36 <RAMReadByte>
			//_delay_us(10);
			//printf("%c", data);
			SPI_EthernetWrite(realaddr, data);
     c04:	68 2f       	mov	r22, r24
     c06:	c5 01       	movw	r24, r10
     c08:	de dc       	rcall	.-1604   	; 0x5c6 <SPI_EthernetWrite>
     c0a:	04 c0       	rjmp	.+8      	; 0xc14 <SendData+0x150>
			//_delay_us(10);
		}
		else
		{
			//printf("%c", *buffer);
			SPI_EthernetWrite(realaddr,*buffer);	
     c0c:	f7 01       	movw	r30, r14
     c0e:	60 81       	ld	r22, Z
     c10:	c5 01       	movw	r24, r10
     c12:	d9 dc       	rcall	.-1614   	; 0x5c6 <SPI_EthernetWrite>
		}
		offaddr++;
     c14:	0f 5f       	subi	r16, 0xFF	; 255
     c16:	1f 4f       	sbci	r17, 0xFF	; 255
		buffer++;
     c18:	ff ef       	ldi	r31, 0xFF	; 255
     c1a:	ef 1a       	sub	r14, r31
     c1c:	ff 0a       	sbc	r15, r31
     c1e:	21 96       	adiw	r28, 0x01	; 1
	//printf("Real RR: %d\n", realRR); 
	//#endif 
	i = 0; 
	data = 0; 
	printf("Sending...\n\n");
	while(i < bufferLength) {
     c20:	e8 14       	cp	r14, r8
     c22:	f9 04       	cpc	r15, r9
     c24:	e1 f6       	brne	.-72     	; 0xbde <SendData+0x11a>
     c26:	4c 0c       	add	r4, r12
     c28:	5d 1c       	adc	r5, r13
		}
		offaddr++;
		buffer++;
		i++; 
	}
		SPI_EthernetWrite(realaddr + 1, 0x00);
     c2a:	60 e0       	ldi	r22, 0x00	; 0
     c2c:	c5 01       	movw	r24, r10
     c2e:	01 96       	adiw	r24, 0x01	; 1
     c30:	ca dc       	rcall	.-1644   	; 0x5c6 <SPI_EthernetWrite>

	// Increase the S0_TX_WR value, so it points to the next transmit
	//printf("Offset After: %d\n", offaddr);
	ptr = SPI_EthernetRead(S0_TX_WR);
     c32:	84 e2       	ldi	r24, 0x24	; 36
     c34:	94 e0       	ldi	r25, 0x04	; 4
     c36:	db dc       	rcall	.-1610   	; 0x5ee <SPI_EthernetRead>
	//realWR = S0_TX_BASE + (offaddr & S0_TX_MASK);
	//printf("Real WR: %d\n", realWR);
	//printf("%d\n", (offaddr & 0xFF00) >> 8);
	//printf("%d\n", (offaddr & 0x00FF));
	//SPI_Write(S0_TX_WR,(offaddr & 0xFF00) >> 8 );
	SPI_EthernetWrite(S0_TX_WR, 0xFF);
     c38:	6f ef       	ldi	r22, 0xFF	; 255
     c3a:	84 e2       	ldi	r24, 0x24	; 36
     c3c:	94 e0       	ldi	r25, 0x04	; 4
     c3e:	c3 dc       	rcall	.-1658   	; 0x5c6 <SPI_EthernetWrite>
	SPI_EthernetWrite(S0_TX_WR + 1,(offaddr & 0x00FF));
     c40:	64 2d       	mov	r22, r4
     c42:	85 e2       	ldi	r24, 0x25	; 37
     c44:	94 e0       	ldi	r25, 0x04	; 4
     c46:	bf dc       	rcall	.-1666   	; 0x5c6 <SPI_EthernetWrite>
	//realRR = S0_TX_BASE + (startaddr & S0_TX_MASK);
	//printf("Real WR: %d\n", realWR);
	//printf("Real RR: %d\n", realRR);
	
	// Now Send the SEND command
	SocketCommand(SEND);
     c48:	80 e2       	ldi	r24, 0x20	; 32
     c4a:	37 df       	rcall	.-402    	; 0xaba <SocketCommand>
	//printf("WR Low: %d\n", SPI_Read(S0_TX_WR));
	//printf("WR High: %d\n", SPI_Read(S0_TX_WR + 1));
	// Wait for Sending Process
	while(SPI_EthernetRead(S0_CR));
     c4c:	81 e0       	ldi	r24, 0x01	; 1
     c4e:	94 e0       	ldi	r25, 0x04	; 4
     c50:	ce dc       	rcall	.-1636   	; 0x5ee <SPI_EthernetRead>
     c52:	81 11       	cpse	r24, r1
     c54:	fb cf       	rjmp	.-10     	; 0xc4c <SendData+0x188>
     c56:	03 c0       	rjmp	.+6      	; 0xc5e <SendData+0x19a>
			//printf("TX Free Size Error!\n");
			//#endif
			// Disconnect the connection
			SocketCommand(DISCON);
			while(SPI_EthernetRead(S0_CR));
			return 0;
     c58:	80 e0       	ldi	r24, 0x00	; 0
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	2a c0       	rjmp	.+84     	; 0xcb2 <SendData+0x1ee>
	//printf("WR Low: %d\n", SPI_Read(S0_TX_WR));
	//printf("WR High: %d\n", SPI_Read(S0_TX_WR + 1));
	// Wait for Sending Process
	while(SPI_EthernetRead(S0_CR));
	//while(!(SPI_EthernetRead(S0_IR) & (1<<SIR_SEND_OK))); 
	return 1;
     c5e:	81 e0       	ldi	r24, 0x01	; 1
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	27 c0       	rjmp	.+78     	; 0xcb2 <SendData+0x1ee>
     c64:	8f ec       	ldi	r24, 0xCF	; 207
     c66:	97 e0       	ldi	r25, 0x07	; 7
     c68:	01 97       	sbiw	r24, 0x01	; 1
     c6a:	f1 f7       	brne	.-4      	; 0xc68 <SendData+0x1a4>
     c6c:	00 c0       	rjmp	.+0      	; 0xc6e <SendData+0x1aa>
     c6e:	00 00       	nop
	//#endif
	timeout = 0;
	//Writing our buffer to the transmit buffer
	while (txsize < bufferLength) {
		_delay_ms(1);
		txsize = SPI_EthernetRead(S0_TX_FSR);
     c70:	80 e2       	ldi	r24, 0x20	; 32
     c72:	94 e0       	ldi	r25, 0x04	; 4
     c74:	bc dc       	rcall	.-1672   	; 0x5ee <SPI_EthernetRead>
     c76:	c8 2f       	mov	r28, r24
     c78:	d0 e0       	ldi	r29, 0x00	; 0
		txsize = (((txsize & 0x00FF) << 8 ) + SPI_EthernetRead(S0_TX_FSR + 1));
     c7a:	dc 2f       	mov	r29, r28
     c7c:	cc 27       	eor	r28, r28
     c7e:	81 e2       	ldi	r24, 0x21	; 33
     c80:	94 e0       	ldi	r25, 0x04	; 4
     c82:	b5 dc       	rcall	.-1686   	; 0x5ee <SPI_EthernetRead>
     c84:	c8 0f       	add	r28, r24
     c86:	d1 1d       	adc	r29, r1
		printf("TX Size: %d", txsize);
     c88:	df 93       	push	r29
     c8a:	cf 93       	push	r28
     c8c:	84 eb       	ldi	r24, 0xB4	; 180
     c8e:	95 e0       	ldi	r25, 0x05	; 5
     c90:	9f 93       	push	r25
     c92:	8f 93       	push	r24
     c94:	0e 94 da 11 	call	0x23b4	; 0x23b4 <printf>
     c98:	0f 90       	pop	r0
     c9a:	0f 90       	pop	r0
     c9c:	0f 90       	pop	r0
     c9e:	0f 90       	pop	r0
     ca0:	09 ee       	ldi	r16, 0xE9	; 233
     ca2:	13 e0       	ldi	r17, 0x03	; 3
     ca4:	0f 2e       	mov	r0, r31
     ca6:	f4 eb       	ldi	r31, 0xB4	; 180
     ca8:	8f 2e       	mov	r8, r31
     caa:	f5 e0       	ldi	r31, 0x05	; 5
     cac:	9f 2e       	mov	r9, r31
     cae:	f0 2d       	mov	r31, r0
     cb0:	74 cf       	rjmp	.-280    	; 0xb9a <SendData+0xd6>
	//printf("WR High: %d\n", SPI_Read(S0_TX_WR + 1));
	// Wait for Sending Process
	while(SPI_EthernetRead(S0_CR));
	//while(!(SPI_EthernetRead(S0_IR) & (1<<SIR_SEND_OK))); 
	return 1;
}
     cb2:	df 91       	pop	r29
     cb4:	cf 91       	pop	r28
     cb6:	1f 91       	pop	r17
     cb8:	0f 91       	pop	r16
     cba:	ff 90       	pop	r15
     cbc:	ef 90       	pop	r14
     cbe:	df 90       	pop	r13
     cc0:	cf 90       	pop	r12
     cc2:	bf 90       	pop	r11
     cc4:	af 90       	pop	r10
     cc6:	9f 90       	pop	r9
     cc8:	8f 90       	pop	r8
     cca:	7f 90       	pop	r7
     ccc:	6f 90       	pop	r6
     cce:	5f 90       	pop	r5
     cd0:	4f 90       	pop	r4
     cd2:	08 95       	ret

00000cd4 <SPI_FPGA_Write>:
	}
}

void SPI_FPGA_Write(unsigned char SPI_Data)
{
	FPGA_CS_PORT &= ~(1<<FPGA_SPI_CS);
     cd4:	a4 98       	cbi	0x14, 4	; 20
	// Start Write transmission
	SPDR = SPI_Data;
     cd6:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
     cd8:	0d b4       	in	r0, 0x2d	; 45
     cda:	07 fe       	sbrs	r0, 7
     cdc:	fd cf       	rjmp	.-6      	; 0xcd8 <SPI_FPGA_Write+0x4>
	FPGA_CS_PORT |= (1<<FPGA_SPI_CS);
     cde:	a4 9a       	sbi	0x14, 4	; 20
     ce0:	08 95       	ret

00000ce2 <SPI_FPGA_Init>:
#include "FPGA.h"
#include "../../Program/AVR.h"

void SPI_FPGA_Init(void)
{
	FPGA_CS_DDR |= (1<<FPGA_SPI_CS);
     ce2:	9c 9a       	sbi	0x13, 4	; 19
	FPGA_CS_PORT |= (1<<FPGA_SPI_CS);
     ce4:	a4 9a       	sbi	0x14, 4	; 20
	
	WR_DDR |= 1<<FPGAWR;
     ce6:	e4 e0       	ldi	r30, 0x04	; 4
     ce8:	f1 e0       	ldi	r31, 0x01	; 1
     cea:	80 81       	ld	r24, Z
     cec:	84 60       	ori	r24, 0x04	; 4
     cee:	80 83       	st	Z, r24
	WR_PORT &= ~(1<<FPGAWR);
     cf0:	e5 e0       	ldi	r30, 0x05	; 5
     cf2:	f1 e0       	ldi	r31, 0x01	; 1
     cf4:	80 81       	ld	r24, Z
     cf6:	8b 7f       	andi	r24, 0xFB	; 251
     cf8:	80 83       	st	Z, r24
	SPI_FPGA_Write(FPGA_Disable);
     cfa:	80 e0       	ldi	r24, 0x00	; 0
     cfc:	eb cf       	rjmp	.-42     	; 0xcd4 <SPI_FPGA_Write>
     cfe:	08 95       	ret

00000d00 <FPGA_Write>:
}

void FPGA_Write(uint32_t TargetMicrocontroller)
{
	switch (TargetMicrocontroller)
     d00:	6a 30       	cpi	r22, 0x0A	; 10
     d02:	21 e9       	ldi	r18, 0x91	; 145
     d04:	72 07       	cpc	r23, r18
     d06:	2e e1       	ldi	r18, 0x1E	; 30
     d08:	82 07       	cpc	r24, r18
     d0a:	91 05       	cpc	r25, r1
     d0c:	31 f0       	breq	.+12     	; 0xd1a <FPGA_Write+0x1a>
     d0e:	61 31       	cpi	r22, 0x11	; 17
     d10:	75 49       	sbci	r23, 0x95	; 149
     d12:	8e 41       	sbci	r24, 0x1E	; 30
     d14:	91 05       	cpc	r25, r1
     d16:	21 f0       	breq	.+8      	; 0xd20 <FPGA_Write+0x20>
     d18:	08 95       	ret
	{
		case ATtiny2313 :
			SPI_FPGA_Write(FPGA_ATtiny2313_Mapping);
     d1a:	81 e0       	ldi	r24, 0x01	; 1
     d1c:	db cf       	rjmp	.-74     	; 0xcd4 <SPI_FPGA_Write>
		break;
     d1e:	08 95       	ret
		case ATmega324PA :
			SPI_FPGA_Write(FPGA_ATmega324PA_Mapping);
     d20:	82 e0       	ldi	r24, 0x02	; 2
     d22:	d8 cf       	rjmp	.-80     	; 0xcd4 <SPI_FPGA_Write>
     d24:	08 95       	ret

00000d26 <uart_sendStream>:
	// ANSI turn off all attribute: me=\E[0m
	putchar(27);
	putchar('[');
	putchar('0');
	putchar('m');
}
     d26:	cf 93       	push	r28
     d28:	c8 2f       	mov	r28, r24
     d2a:	8a 30       	cpi	r24, 0x0A	; 10
     d2c:	11 f4       	brne	.+4      	; 0xd32 <uart_sendStream+0xc>
     d2e:	8d e0       	ldi	r24, 0x0D	; 13
     d30:	fa df       	rcall	.-12     	; 0xd26 <uart_sendStream>
     d32:	e0 ed       	ldi	r30, 0xD0	; 208
     d34:	f0 e0       	ldi	r31, 0x00	; 0
     d36:	90 81       	ld	r25, Z
     d38:	95 ff       	sbrs	r25, 5
     d3a:	fd cf       	rjmp	.-6      	; 0xd36 <uart_sendStream+0x10>
     d3c:	c0 93 d6 00 	sts	0x00D6, r28
     d40:	80 e0       	ldi	r24, 0x00	; 0
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	cf 91       	pop	r28
     d46:	08 95       	ret

00000d48 <uart_receiveStream>:
     d48:	cf 93       	push	r28
     d4a:	bc 01       	movw	r22, r24
     d4c:	e0 ed       	ldi	r30, 0xD0	; 208
     d4e:	f0 e0       	ldi	r31, 0x00	; 0
     d50:	80 81       	ld	r24, Z
     d52:	88 23       	and	r24, r24
     d54:	ec f7       	brge	.-6      	; 0xd50 <uart_receiveStream+0x8>
     d56:	c0 91 d6 00 	lds	r28, 0x00D6
     d5a:	8c 2f       	mov	r24, r28
     d5c:	e4 df       	rcall	.-56     	; 0xd26 <uart_sendStream>
     d5e:	8c 2f       	mov	r24, r28
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	cf 91       	pop	r28
     d64:	08 95       	ret

00000d66 <uart2_init>:

FILE uart_stream = FDEV_SETUP_STREAM(uart_sendStream, uart_receiveStream, _FDEV_SETUP_RW);

void uart2_init()
{
	UBRR2H = (((F_CPU/BAUD_RATE)/16)-1)>>8;	// set baud rate
     d66:	10 92 d5 00 	sts	0x00D5, r1
	UBRR2L = (((F_CPU/BAUD_RATE)/16)-1);
     d6a:	87 e0       	ldi	r24, 0x07	; 7
     d6c:	80 93 d4 00 	sts	0x00D4, r24
	UCSR2B = (1<<RXEN2)|(1<<TXEN2); 		// enable Rx & Tx
     d70:	88 e1       	ldi	r24, 0x18	; 24
     d72:	80 93 d1 00 	sts	0x00D1, r24
	UCSR2C=  (1<<UCSZ21)|(1<<UCSZ20);  	       // config USART; 8N1
     d76:	86 e0       	ldi	r24, 0x06	; 6
     d78:	80 93 d2 00 	sts	0x00D2, r24
	//DDRD |= (1<<PORTD1)|(1<<PORTD0);
	// Define Output/Input Stream
	stdout = stdin = &uart_stream;
     d7c:	82 e2       	ldi	r24, 0x22	; 34
     d7e:	92 e0       	ldi	r25, 0x02	; 2
     d80:	90 93 ec 0a 	sts	0x0AEC, r25
     d84:	80 93 eb 0a 	sts	0x0AEB, r24
     d88:	90 93 ee 0a 	sts	0x0AEE, r25
     d8c:	80 93 ed 0a 	sts	0x0AED, r24
     d90:	08 95       	ret

00000d92 <SPI_WriteAddress>:
	{
		printf("0x%02X ", SPI_ReadData());
	}
	RAM_PORT |= (1<<RAM_CS); 
	printf("\nSize: %d\n", i); 
}
     d92:	26 2f       	mov	r18, r22
     d94:	97 2f       	mov	r25, r23
     d96:	48 2f       	mov	r20, r24
     d98:	82 e0       	ldi	r24, 0x02	; 2
     d9a:	8e bd       	out	0x2e, r24	; 46
     d9c:	0d b4       	in	r0, 0x2d	; 45
     d9e:	07 fe       	sbrs	r0, 7
     da0:	fd cf       	rjmp	.-6      	; 0xd9c <SPI_WriteAddress+0xa>
     da2:	4e bd       	out	0x2e, r20	; 46
     da4:	0d b4       	in	r0, 0x2d	; 45
     da6:	07 fe       	sbrs	r0, 7
     da8:	fd cf       	rjmp	.-6      	; 0xda4 <SPI_WriteAddress+0x12>
     daa:	89 2f       	mov	r24, r25
     dac:	8e bd       	out	0x2e, r24	; 46
     dae:	0d b4       	in	r0, 0x2d	; 45
     db0:	07 fe       	sbrs	r0, 7
     db2:	fd cf       	rjmp	.-6      	; 0xdae <SPI_WriteAddress+0x1c>
     db4:	2e bd       	out	0x2e, r18	; 46
     db6:	0d b4       	in	r0, 0x2d	; 45
     db8:	07 fe       	sbrs	r0, 7
     dba:	fd cf       	rjmp	.-6      	; 0xdb6 <SPI_WriteAddress+0x24>
     dbc:	08 95       	ret

00000dbe <SPI_WriteData>:
     dbe:	8e bd       	out	0x2e, r24	; 46
     dc0:	0d b4       	in	r0, 0x2d	; 45
     dc2:	07 fe       	sbrs	r0, 7
     dc4:	fd cf       	rjmp	.-6      	; 0xdc0 <SPI_WriteData+0x2>
     dc6:	08 95       	ret

00000dc8 <SPI_ReadAddress>:
     dc8:	26 2f       	mov	r18, r22
     dca:	97 2f       	mov	r25, r23
     dcc:	48 2f       	mov	r20, r24
     dce:	83 e0       	ldi	r24, 0x03	; 3
     dd0:	8e bd       	out	0x2e, r24	; 46
     dd2:	0d b4       	in	r0, 0x2d	; 45
     dd4:	07 fe       	sbrs	r0, 7
     dd6:	fd cf       	rjmp	.-6      	; 0xdd2 <SPI_ReadAddress+0xa>
     dd8:	4e bd       	out	0x2e, r20	; 46
     dda:	0d b4       	in	r0, 0x2d	; 45
     ddc:	07 fe       	sbrs	r0, 7
     dde:	fd cf       	rjmp	.-6      	; 0xdda <SPI_ReadAddress+0x12>
     de0:	89 2f       	mov	r24, r25
     de2:	8e bd       	out	0x2e, r24	; 46
     de4:	0d b4       	in	r0, 0x2d	; 45
     de6:	07 fe       	sbrs	r0, 7
     de8:	fd cf       	rjmp	.-6      	; 0xde4 <SPI_ReadAddress+0x1c>
     dea:	2e bd       	out	0x2e, r18	; 46
     dec:	0d b4       	in	r0, 0x2d	; 45
     dee:	07 fe       	sbrs	r0, 7
     df0:	fd cf       	rjmp	.-6      	; 0xdec <SPI_ReadAddress+0x24>
     df2:	08 95       	ret

00000df4 <SPI_ReadData>:
     df4:	1e bc       	out	0x2e, r1	; 46
     df6:	0d b4       	in	r0, 0x2d	; 45
     df8:	07 fe       	sbrs	r0, 7
     dfa:	fd cf       	rjmp	.-6      	; 0xdf6 <SPI_ReadData+0x2>
     dfc:	8e b5       	in	r24, 0x2e	; 46
     dfe:	08 95       	ret

00000e00 <RAMWriteByte>:

void RAMWriteByte(char data, uint32_t address)
{
     e00:	cf 93       	push	r28
     e02:	c8 2f       	mov	r28, r24
	RAM_PORT &= ~(1<<RAM_CS);
     e04:	a3 98       	cbi	0x14, 3	; 20
	SPI_WriteAddress(address);
     e06:	cb 01       	movw	r24, r22
     e08:	ba 01       	movw	r22, r20
     e0a:	c3 df       	rcall	.-122    	; 0xd92 <SPI_WriteAddress>
	SPI_WriteData(data);
     e0c:	8c 2f       	mov	r24, r28
     e0e:	d7 df       	rcall	.-82     	; 0xdbe <SPI_WriteData>
	RAM_PORT |= (1<<RAM_CS);
     e10:	a3 9a       	sbi	0x14, 3	; 20
}
     e12:	cf 91       	pop	r28
     e14:	08 95       	ret

00000e16 <SPI_Init>:


void SPI_Init()
{
	// Set MOSI ,SCK, and SS as output, others as input
	SPI_DDR |= (1<<MOSI)|(1<<SCK)|(1<<SS)|(1<<HOLD);
     e16:	84 b1       	in	r24, 0x04	; 4
     e18:	87 68       	ori	r24, 0x87	; 135
     e1a:	84 b9       	out	0x04, r24	; 4
	//Set MISO as Input
	//SPI_DDR &= ~(1<<MISO);
	
	SPI_PORT |= (1<<HOLD);
     e1c:	2f 9a       	sbi	0x05, 7	; 5
	// CS pin is not active
	RAM_DDR |= (1<<RAM_CS);
     e1e:	9b 9a       	sbi	0x13, 3	; 19
	RAM_PORT |= (1<<RAM_CS);
     e20:	a3 9a       	sbi	0x14, 3	; 20
	// Enable SPI, Master Mode 0, set the clock rate fck/8
	SPCR = ((1<<SPE)|(1<<MSTR));
     e22:	80 e5       	ldi	r24, 0x50	; 80
     e24:	8c bd       	out	0x2c, r24	; 44
	SPSR = (1<<SPI2X); 
     e26:	81 e0       	ldi	r24, 0x01	; 1
     e28:	8d bd       	out	0x2d, r24	; 45
	RAMWriteByte(0x32, 0000);
     e2a:	40 e0       	ldi	r20, 0x00	; 0
     e2c:	50 e0       	ldi	r21, 0x00	; 0
     e2e:	ba 01       	movw	r22, r20
     e30:	82 e3       	ldi	r24, 0x32	; 50
     e32:	e6 cf       	rjmp	.-52     	; 0xe00 <RAMWriteByte>
     e34:	08 95       	ret

00000e36 <RAMReadByte>:
	RAM_PORT |= (1<<RAM_CS);
}

char RAMReadByte(uint32_t address)
{
	RAM_PORT &= ~(1<<RAM_CS);
     e36:	a3 98       	cbi	0x14, 3	; 20
	SPI_ReadAddress(address);
     e38:	c7 df       	rcall	.-114    	; 0xdc8 <SPI_ReadAddress>
	char data = SPI_ReadData();
     e3a:	dc df       	rcall	.-72     	; 0xdf4 <SPI_ReadData>
	RAM_PORT |= (1<<RAM_CS);
     e3c:	a3 9a       	sbi	0x14, 3	; 20
	return data; 
}
     e3e:	08 95       	ret

00000e40 <SPI_Switching_Circuitry_Init>:
		for(int j=0; j<SOCKET_SIZE/8; j++)
		{
			ShiftRegData[i][j] = 0x00; 
		}
	}
}
     e40:	e4 e0       	ldi	r30, 0x04	; 4
     e42:	f1 e0       	ldi	r31, 0x01	; 1
     e44:	80 81       	ld	r24, Z
     e46:	88 63       	ori	r24, 0x38	; 56
     e48:	80 83       	st	Z, r24
     e4a:	e5 e0       	ldi	r30, 0x05	; 5
     e4c:	f1 e0       	ldi	r31, 0x01	; 1
     e4e:	80 81       	ld	r24, Z
     e50:	80 62       	ori	r24, 0x20	; 32
     e52:	80 83       	st	Z, r24
     e54:	80 81       	ld	r24, Z
     e56:	87 7e       	andi	r24, 0xE7	; 231
     e58:	80 83       	st	Z, r24
     e5a:	08 95       	ret

00000e5c <SPI_Switching_Circuitry_Write>:
     e5c:	8e bd       	out	0x2e, r24	; 46
     e5e:	0d b4       	in	r0, 0x2d	; 45
     e60:	07 fe       	sbrs	r0, 7
     e62:	fd cf       	rjmp	.-6      	; 0xe5e <SPI_Switching_Circuitry_Write+0x2>
     e64:	08 95       	ret

00000e66 <SetShiftRegData>:


void SetShiftRegData(uint8_t pinType, char data[SOCKET_SIZE/8])
{
     e66:	db 01       	movw	r26, r22
	//MSB gets shifted out first 
	for(int i=0; i<SOCKET_SIZE/8; i++)
	{
		ShiftRegData[pinType][i] = *(data + i); 
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	fc 01       	movw	r30, r24
     e6c:	ee 0f       	add	r30, r30
     e6e:	ff 1f       	adc	r31, r31
     e70:	ee 0f       	add	r30, r30
     e72:	ff 1f       	adc	r31, r31
     e74:	e8 0f       	add	r30, r24
     e76:	f9 1f       	adc	r31, r25
     e78:	e7 5e       	subi	r30, 0xE7	; 231
     e7a:	f5 4f       	sbci	r31, 0xF5	; 245


void SetShiftRegData(uint8_t pinType, char data[SOCKET_SIZE/8])
{
	//MSB gets shifted out first 
	for(int i=0; i<SOCKET_SIZE/8; i++)
     e7c:	80 e0       	ldi	r24, 0x00	; 0
     e7e:	90 e0       	ldi	r25, 0x00	; 0
	{
		ShiftRegData[pinType][i] = *(data + i); 
     e80:	2d 91       	ld	r18, X+
     e82:	21 93       	st	Z+, r18


void SetShiftRegData(uint8_t pinType, char data[SOCKET_SIZE/8])
{
	//MSB gets shifted out first 
	for(int i=0; i<SOCKET_SIZE/8; i++)
     e84:	01 96       	adiw	r24, 0x01	; 1
     e86:	85 30       	cpi	r24, 0x05	; 5
     e88:	91 05       	cpc	r25, r1
     e8a:	d1 f7       	brne	.-12     	; 0xe80 <SetShiftRegData+0x1a>
	{
		ShiftRegData[pinType][i] = *(data + i); 
	}
}
     e8c:	08 95       	ret

00000e8e <WriteShiftRegData>:

void WriteShiftRegData()
{
     e8e:	af 92       	push	r10
     e90:	bf 92       	push	r11
     e92:	cf 92       	push	r12
     e94:	df 92       	push	r13
     e96:	ef 92       	push	r14
     e98:	ff 92       	push	r15
     e9a:	0f 93       	push	r16
     e9c:	1f 93       	push	r17
     e9e:	cf 93       	push	r28
     ea0:	df 93       	push	r29
     ea2:	0f 2e       	mov	r0, r31
     ea4:	fe e1       	ldi	r31, 0x1E	; 30
     ea6:	ef 2e       	mov	r14, r31
     ea8:	fa e0       	ldi	r31, 0x0A	; 10
     eaa:	ff 2e       	mov	r15, r31
     eac:	f0 2d       	mov	r31, r0
     eae:	0f 2e       	mov	r0, r31
     eb0:	f7 e3       	ldi	r31, 0x37	; 55
     eb2:	cf 2e       	mov	r12, r31
     eb4:	fa e0       	ldi	r31, 0x0A	; 10
     eb6:	df 2e       	mov	r13, r31
     eb8:	f0 2d       	mov	r31, r0
     eba:	a1 2c       	mov	r10, r1
     ebc:	b1 2c       	mov	r11, r1
     ebe:	0e c0       	rjmp	.+28     	; 0xedc <WriteShiftRegData+0x4e>
	
	for(int i=1; i<(PIN_TYPES); i++)
	{
		for(int j=0; j<SOCKET_SIZE/8; j++)
		{
			SPI_Switching_Circuitry_Write(ShiftRegData[i][j]); 
     ec0:	f8 01       	movw	r30, r16
     ec2:	81 91       	ld	r24, Z+
     ec4:	8f 01       	movw	r16, r30
     ec6:	ca df       	rcall	.-108    	; 0xe5c <SPI_Switching_Circuitry_Write>
	//}
	//SR_CNTRL_PORT |= (1<<MAXCS);
	
	for(int i=1; i<(PIN_TYPES); i++)
	{
		for(int j=0; j<SOCKET_SIZE/8; j++)
     ec8:	21 96       	adiw	r28, 0x01	; 1
     eca:	c5 30       	cpi	r28, 0x05	; 5
     ecc:	d1 05       	cpc	r29, r1
     ece:	c1 f7       	brne	.-16     	; 0xec0 <WriteShiftRegData+0x32>
     ed0:	f5 e0       	ldi	r31, 0x05	; 5
     ed2:	ef 0e       	add	r14, r31
     ed4:	f1 1c       	adc	r15, r1
	//{
		//SPI_Switching_Circuitry_Write(ShiftRegData[i][j]);
	//}
	//SR_CNTRL_PORT |= (1<<MAXCS);
	
	for(int i=1; i<(PIN_TYPES); i++)
     ed6:	ec 14       	cp	r14, r12
     ed8:	fd 04       	cpc	r15, r13
     eda:	21 f0       	breq	.+8      	; 0xee4 <WriteShiftRegData+0x56>
		ShiftRegData[pinType][i] = *(data + i); 
	}
}

void WriteShiftRegData()
{
     edc:	87 01       	movw	r16, r14
     ede:	ca 2d       	mov	r28, r10
     ee0:	db 2d       	mov	r29, r11
     ee2:	ee cf       	rjmp	.-36     	; 0xec0 <WriteShiftRegData+0x32>
		{
			SPI_Switching_Circuitry_Write(ShiftRegData[i][j]); 
		}
	}
	
	SR_CNTRL_PORT |= (1<<SRCS);
     ee4:	e5 e0       	ldi	r30, 0x05	; 5
     ee6:	f1 e0       	ldi	r31, 0x01	; 1
     ee8:	80 81       	ld	r24, Z
     eea:	80 61       	ori	r24, 0x10	; 16
     eec:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     eee:	f5 e3       	ldi	r31, 0x35	; 53
     ef0:	fa 95       	dec	r31
     ef2:	f1 f7       	brne	.-4      	; 0xef0 <WriteShiftRegData+0x62>
     ef4:	00 00       	nop
	_delay_us(20);
	SR_CNTRL_PORT &= ~(1<<SRCS);
     ef6:	e5 e0       	ldi	r30, 0x05	; 5
     ef8:	f1 e0       	ldi	r31, 0x01	; 1
     efa:	80 81       	ld	r24, Z
     efc:	8f 7e       	andi	r24, 0xEF	; 239
     efe:	80 83       	st	Z, r24
}
     f00:	df 91       	pop	r29
     f02:	cf 91       	pop	r28
     f04:	1f 91       	pop	r17
     f06:	0f 91       	pop	r16
     f08:	ff 90       	pop	r15
     f0a:	ef 90       	pop	r14
     f0c:	df 90       	pop	r13
     f0e:	cf 90       	pop	r12
     f10:	bf 90       	pop	r11
     f12:	af 90       	pop	r10
     f14:	08 95       	ret

00000f16 <setAtTiny2313>:

void setAtTiny2313()
{
     f16:	cf 93       	push	r28
     f18:	df 93       	push	r29
     f1a:	00 d0       	rcall	.+0      	; 0xf1c <setAtTiny2313+0x6>
     f1c:	00 d0       	rcall	.+0      	; 0xf1e <setAtTiny2313+0x8>
     f1e:	1f 92       	push	r1
     f20:	cd b7       	in	r28, 0x3d	; 61
     f22:	de b7       	in	r29, 0x3e	; 62
	//char shiftTempBuff[5] = {0x00, 0x1F, 0xF7, 0xD0, 0xFF};
	char shiftTempBuff[5] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
     f24:	85 e0       	ldi	r24, 0x05	; 5
     f26:	e0 e3       	ldi	r30, 0x30	; 48
     f28:	f2 e0       	ldi	r31, 0x02	; 2
     f2a:	de 01       	movw	r26, r28
     f2c:	11 96       	adiw	r26, 0x01	; 1
     f2e:	01 90       	ld	r0, Z+
     f30:	0d 92       	st	X+, r0
     f32:	8a 95       	dec	r24
     f34:	e1 f7       	brne	.-8      	; 0xf2e <setAtTiny2313+0x18>
	SetShiftRegData(PULL_DOWN, shiftTempBuff);
     f36:	be 01       	movw	r22, r28
     f38:	6f 5f       	subi	r22, 0xFF	; 255
     f3a:	7f 4f       	sbci	r23, 0xFF	; 255
     f3c:	81 e0       	ldi	r24, 0x01	; 1
     f3e:	93 df       	rcall	.-218    	; 0xe66 <SetShiftRegData>
	//Modify Values and shift again
	shiftTempBuff[0] = 0x00;
     f40:	19 82       	std	Y+1, r1	; 0x01
	shiftTempBuff[1] = 0x00;
     f42:	1a 82       	std	Y+2, r1	; 0x02
	shiftTempBuff[2] = 0x08; //setting GND to ZIF19
     f44:	88 e0       	ldi	r24, 0x08	; 8
     f46:	8b 83       	std	Y+3, r24	; 0x03
	shiftTempBuff[3] = 0x00;
     f48:	1c 82       	std	Y+4, r1	; 0x04
	shiftTempBuff[4] = 0x00;
     f4a:	1d 82       	std	Y+5, r1	; 0x05
	SetShiftRegData(GROUND, shiftTempBuff);
     f4c:	be 01       	movw	r22, r28
     f4e:	6f 5f       	subi	r22, 0xFF	; 255
     f50:	7f 4f       	sbci	r23, 0xFF	; 255
     f52:	82 e0       	ldi	r24, 0x02	; 2
     f54:	88 df       	rcall	.-240    	; 0xe66 <SetShiftRegData>
	shiftTempBuff[0] = 0x00;
     f56:	19 82       	std	Y+1, r1	; 0x01
	shiftTempBuff[1] = 0x00;
     f58:	1a 82       	std	Y+2, r1	; 0x02
	shiftTempBuff[2] = 0x00;
     f5a:	1b 82       	std	Y+3, r1	; 0x03
	shiftTempBuff[3] = 0x00;
     f5c:	1c 82       	std	Y+4, r1	; 0x04
	shiftTempBuff[4] = 0x00;
     f5e:	1d 82       	std	Y+5, r1	; 0x05
	SetShiftRegData(PULL_UP, shiftTempBuff);
     f60:	be 01       	movw	r22, r28
     f62:	6f 5f       	subi	r22, 0xFF	; 255
     f64:	7f 4f       	sbci	r23, 0xFF	; 255
     f66:	83 e0       	ldi	r24, 0x03	; 3
     f68:	7e df       	rcall	.-260    	; 0xe66 <SetShiftRegData>
	shiftTempBuff[0] = 0x00;
     f6a:	19 82       	std	Y+1, r1	; 0x01
	shiftTempBuff[1] = 0x20; //Setting VCC to ZIF29
     f6c:	80 e2       	ldi	r24, 0x20	; 32
     f6e:	8a 83       	std	Y+2, r24	; 0x02
	shiftTempBuff[2] = 0x00;
     f70:	1b 82       	std	Y+3, r1	; 0x03
	shiftTempBuff[3] = 0x00;
     f72:	1c 82       	std	Y+4, r1	; 0x04
	shiftTempBuff[4] = 0x00;
     f74:	1d 82       	std	Y+5, r1	; 0x05
	SetShiftRegData(VCC, shiftTempBuff);
     f76:	be 01       	movw	r22, r28
     f78:	6f 5f       	subi	r22, 0xFF	; 255
     f7a:	7f 4f       	sbci	r23, 0xFF	; 255
     f7c:	84 e0       	ldi	r24, 0x04	; 4
     f7e:	73 df       	rcall	.-282    	; 0xe66 <SetShiftRegData>
	shiftTempBuff[0] = 0x00;
     f80:	19 82       	std	Y+1, r1	; 0x01
	shiftTempBuff[1] = 0x00;
     f82:	1a 82       	std	Y+2, r1	; 0x02
	shiftTempBuff[2] = 0x00;
     f84:	1b 82       	std	Y+3, r1	; 0x03
	shiftTempBuff[3] = 0x04; //Setting VPP to ZIF10
     f86:	84 e0       	ldi	r24, 0x04	; 4
     f88:	8c 83       	std	Y+4, r24	; 0x04
	shiftTempBuff[4] = 0x00;
     f8a:	1d 82       	std	Y+5, r1	; 0x05
	SetShiftRegData(VPP, shiftTempBuff);
     f8c:	be 01       	movw	r22, r28
     f8e:	6f 5f       	subi	r22, 0xFF	; 255
     f90:	7f 4f       	sbci	r23, 0xFF	; 255
     f92:	85 e0       	ldi	r24, 0x05	; 5
     f94:	68 df       	rcall	.-304    	; 0xe66 <SetShiftRegData>
	//shiftTempBuff[2] = 0xF7;
	//shiftTempBuff[3] = 0xD0; //Setting up Logic
	//shiftTempBuff[4] = 0x00;
	//SetShiftRegData(LOGIC, shiftTempBuff);
	
	WriteShiftRegData();
     f96:	7b df       	rcall	.-266    	; 0xe8e <WriteShiftRegData>
}
     f98:	0f 90       	pop	r0
     f9a:	0f 90       	pop	r0
     f9c:	0f 90       	pop	r0
     f9e:	0f 90       	pop	r0
     fa0:	0f 90       	pop	r0
     fa2:	df 91       	pop	r29
     fa4:	cf 91       	pop	r28
     fa6:	08 95       	ret

00000fa8 <setAtMega324PA>:

void setAtMega324PA()
{
     fa8:	cf 93       	push	r28
     faa:	df 93       	push	r29
     fac:	00 d0       	rcall	.+0      	; 0xfae <setAtMega324PA+0x6>
     fae:	00 d0       	rcall	.+0      	; 0xfb0 <setAtMega324PA+0x8>
     fb0:	1f 92       	push	r1
     fb2:	cd b7       	in	r28, 0x3d	; 61
     fb4:	de b7       	in	r29, 0x3e	; 62
	char shiftTempBuff[5] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
     fb6:	85 e0       	ldi	r24, 0x05	; 5
     fb8:	e0 e3       	ldi	r30, 0x30	; 48
     fba:	f2 e0       	ldi	r31, 0x02	; 2
     fbc:	de 01       	movw	r26, r28
     fbe:	11 96       	adiw	r26, 0x01	; 1
     fc0:	01 90       	ld	r0, Z+
     fc2:	0d 92       	st	X+, r0
     fc4:	8a 95       	dec	r24
     fc6:	e1 f7       	brne	.-8      	; 0xfc0 <setAtMega324PA+0x18>
	SetShiftRegData(PULL_DOWN, shiftTempBuff);
     fc8:	be 01       	movw	r22, r28
     fca:	6f 5f       	subi	r22, 0xFF	; 255
     fcc:	7f 4f       	sbci	r23, 0xFF	; 255
     fce:	81 e0       	ldi	r24, 0x01	; 1
     fd0:	4a df       	rcall	.-364    	; 0xe66 <SetShiftRegData>
	//Modify Values and shift again
	shiftTempBuff[0] = 0x00;
     fd2:	19 82       	std	Y+1, r1	; 0x01
	shiftTempBuff[1] = 0x40;
     fd4:	80 e4       	ldi	r24, 0x40	; 64
     fd6:	8a 83       	std	Y+2, r24	; 0x02
	shiftTempBuff[2] = 0x00; //setting GND to ZIF19
     fd8:	1b 82       	std	Y+3, r1	; 0x03
	shiftTempBuff[3] = 0x04;
     fda:	84 e0       	ldi	r24, 0x04	; 4
     fdc:	8c 83       	std	Y+4, r24	; 0x04
	shiftTempBuff[4] = 0x00;
     fde:	1d 82       	std	Y+5, r1	; 0x05
	SetShiftRegData(GROUND, shiftTempBuff);
     fe0:	be 01       	movw	r22, r28
     fe2:	6f 5f       	subi	r22, 0xFF	; 255
     fe4:	7f 4f       	sbci	r23, 0xFF	; 255
     fe6:	82 e0       	ldi	r24, 0x02	; 2
     fe8:	3e df       	rcall	.-388    	; 0xe66 <SetShiftRegData>
	shiftTempBuff[0] = 0x00;
     fea:	19 82       	std	Y+1, r1	; 0x01
	shiftTempBuff[1] = 0x00;
     fec:	1a 82       	std	Y+2, r1	; 0x02
	shiftTempBuff[2] = 0x00;
     fee:	1b 82       	std	Y+3, r1	; 0x03
	shiftTempBuff[3] = 0x00;
     ff0:	1c 82       	std	Y+4, r1	; 0x04
	shiftTempBuff[4] = 0x00;
     ff2:	1d 82       	std	Y+5, r1	; 0x05
	SetShiftRegData(PULL_UP, shiftTempBuff);
     ff4:	be 01       	movw	r22, r28
     ff6:	6f 5f       	subi	r22, 0xFF	; 255
     ff8:	7f 4f       	sbci	r23, 0xFF	; 255
     ffa:	83 e0       	ldi	r24, 0x03	; 3
     ffc:	34 df       	rcall	.-408    	; 0xe66 <SetShiftRegData>
	shiftTempBuff[0] = 0x00;
     ffe:	19 82       	std	Y+1, r1	; 0x01
	shiftTempBuff[1] = 0x20; //Setting VCC to ZIF29
    1000:	80 e2       	ldi	r24, 0x20	; 32
    1002:	8a 83       	std	Y+2, r24	; 0x02
	shiftTempBuff[2] = 0x00;
    1004:	1b 82       	std	Y+3, r1	; 0x03
	shiftTempBuff[3] = 0x02;
    1006:	82 e0       	ldi	r24, 0x02	; 2
    1008:	8c 83       	std	Y+4, r24	; 0x04
	shiftTempBuff[4] = 0x00;
    100a:	1d 82       	std	Y+5, r1	; 0x05
	SetShiftRegData(VCC, shiftTempBuff);
    100c:	be 01       	movw	r22, r28
    100e:	6f 5f       	subi	r22, 0xFF	; 255
    1010:	7f 4f       	sbci	r23, 0xFF	; 255
    1012:	84 e0       	ldi	r24, 0x04	; 4
    1014:	28 df       	rcall	.-432    	; 0xe66 <SetShiftRegData>
	shiftTempBuff[0] = 0x00;
    1016:	19 82       	std	Y+1, r1	; 0x01
	shiftTempBuff[1] = 0x00;
    1018:	1a 82       	std	Y+2, r1	; 0x02
	shiftTempBuff[2] = 0x00;
    101a:	1b 82       	std	Y+3, r1	; 0x03
	shiftTempBuff[3] = 0x01; //Setting VPP to ZIF10
    101c:	81 e0       	ldi	r24, 0x01	; 1
    101e:	8c 83       	std	Y+4, r24	; 0x04
	shiftTempBuff[4] = 0x00;
    1020:	1d 82       	std	Y+5, r1	; 0x05
	SetShiftRegData(VPP, shiftTempBuff);
    1022:	be 01       	movw	r22, r28
    1024:	6f 5f       	subi	r22, 0xFF	; 255
    1026:	7f 4f       	sbci	r23, 0xFF	; 255
    1028:	85 e0       	ldi	r24, 0x05	; 5
    102a:	1d df       	rcall	.-454    	; 0xe66 <SetShiftRegData>
	
	WriteShiftRegData();
    102c:	30 df       	rcall	.-416    	; 0xe8e <WriteShiftRegData>
}
    102e:	0f 90       	pop	r0
    1030:	0f 90       	pop	r0
    1032:	0f 90       	pop	r0
    1034:	0f 90       	pop	r0
    1036:	0f 90       	pop	r0
    1038:	df 91       	pop	r29
    103a:	cf 91       	pop	r28
    103c:	08 95       	ret

0000103e <voltageControlInit>:
	VCNTRL_PORT &= ~((1<<VPP_9V) | (1<<VPP_12V) | (1<VPP_13V));
}

void voltageControlInit()
{
	VCNTRL_DDR = 0xFF;
    103e:	8f ef       	ldi	r24, 0xFF	; 255
    1040:	80 bb       	out	0x10, r24	; 16
	VCNTRL_PORT = 0x00;
    1042:	11 ba       	out	0x11, r1	; 17
	
	VEN_DDR |= ((1<<VPPENABLE) | (1<<VCCENABLE) | (1<<VLENABLE));
    1044:	84 b1       	in	r24, 0x04	; 4
    1046:	80 67       	ori	r24, 0x70	; 112
    1048:	84 b9       	out	0x04, r24	; 4
	VEN_PORT &= ~((1<<VPPENABLE) | (1<<VCCENABLE) | (1<<VLENABLE));
    104a:	85 b1       	in	r24, 0x05	; 5
    104c:	8f 78       	andi	r24, 0x8F	; 143
    104e:	85 b9       	out	0x05, r24	; 5
    1050:	08 95       	ret

00001052 <enableVppRegulator>:
}

void enableVppRegulator()
{
	VEN_PORT |= (1<<VPPENABLE); 
    1052:	2c 9a       	sbi	0x05, 4	; 5
    1054:	08 95       	ret

00001056 <disableVppRegulator>:
}

void disableVppRegulator()
{
	VEN_PORT &= ~((1<<VPPENABLE));
    1056:	2c 98       	cbi	0x05, 4	; 5
    1058:	08 95       	ret

0000105a <enableVccRegulator>:
	VCNTRL_PORT &= ~((1<<VCC_3_3V) | (1<<VCC_5V) | (1<<VCC_6_5V));
}

void enableVccRegulator() 
{
	VEN_PORT |= (1<<VCCENABLE);
    105a:	2d 9a       	sbi	0x05, 5	; 5
    105c:	08 95       	ret

0000105e <disableVccRegulator>:
}

void disableVccRegulator()
{
	VEN_PORT &= ~(1<<VCCENABLE);
    105e:	2d 98       	cbi	0x05, 5	; 5
    1060:	08 95       	ret

00001062 <setVcc>:
	//prevents accidental triggering of the wrong regulator 
	//if(voltageLevel != (VCC_3_3V || VCC_5V || VCC_6_5V))
	//	return 0; 
	//else
	//{
		VCNTRL_PORT |= (1<<voltageLevel);
    1062:	41 b3       	in	r20, 0x11	; 17
    1064:	21 e0       	ldi	r18, 0x01	; 1
    1066:	30 e0       	ldi	r19, 0x00	; 0
    1068:	b9 01       	movw	r22, r18
    106a:	02 c0       	rjmp	.+4      	; 0x1070 <setVcc+0xe>
    106c:	66 0f       	add	r22, r22
    106e:	77 1f       	adc	r23, r23
    1070:	8a 95       	dec	r24
    1072:	e2 f7       	brpl	.-8      	; 0x106c <setVcc+0xa>
    1074:	cb 01       	movw	r24, r22
    1076:	84 2b       	or	r24, r20
    1078:	81 bb       	out	0x11, r24	; 17
		return 1; 
	//}
}
    107a:	81 e0       	ldi	r24, 0x01	; 1
    107c:	08 95       	ret

0000107e <setVpp>:
	//prevents accidental triggering of the wrong regulator 
	//if(voltageLevel != (VPP_9V || VPP_12V || VPP_13V))
		//return 0; 
	//else
	//{
		VCNTRL_PORT |= (1<<voltageLevel);
    107e:	41 b3       	in	r20, 0x11	; 17
    1080:	21 e0       	ldi	r18, 0x01	; 1
    1082:	30 e0       	ldi	r19, 0x00	; 0
    1084:	b9 01       	movw	r22, r18
    1086:	02 c0       	rjmp	.+4      	; 0x108c <setVpp+0xe>
    1088:	66 0f       	add	r22, r22
    108a:	77 1f       	adc	r23, r23
    108c:	8a 95       	dec	r24
    108e:	e2 f7       	brpl	.-8      	; 0x1088 <setVpp+0xa>
    1090:	cb 01       	movw	r24, r22
    1092:	84 2b       	or	r24, r20
    1094:	81 bb       	out	0x11, r24	; 17
		return 1; 
	//}
}
    1096:	81 e0       	ldi	r24, 0x01	; 1
    1098:	08 95       	ret

0000109a <enableVLogic>:
	VCNTRL_PORT &= ~((1<<VL_3_3V) | (1<<VL_5V));
}

void enableVLogic()
{
	VEN_PORT |= (1<<VLENABLE);
    109a:	2e 9a       	sbi	0x05, 6	; 5
    109c:	08 95       	ret

0000109e <disableVLogic>:
}

void disableVLogic()
{
	VEN_PORT &= ~(1<<VLENABLE);
    109e:	2e 98       	cbi	0x05, 6	; 5
    10a0:	08 95       	ret

000010a2 <setVLogic>:
	//prevents accidental triggering of the wrong regulator
	//if(voltageLevel != (VL_3_3V || VL_5V))
	//	return 0;
	//else
	//{
		VCNTRL_PORT |= (1<<voltageLevel);
    10a2:	41 b3       	in	r20, 0x11	; 17
    10a4:	21 e0       	ldi	r18, 0x01	; 1
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	b9 01       	movw	r22, r18
    10aa:	02 c0       	rjmp	.+4      	; 0x10b0 <setVLogic+0xe>
    10ac:	66 0f       	add	r22, r22
    10ae:	77 1f       	adc	r23, r23
    10b0:	8a 95       	dec	r24
    10b2:	e2 f7       	brpl	.-8      	; 0x10ac <setVLogic+0xa>
    10b4:	cb 01       	movw	r24, r22
    10b6:	84 2b       	or	r24, r20
    10b8:	81 bb       	out	0x11, r24	; 17
		return 1;
	//}
}
    10ba:	81 e0       	ldi	r24, 0x01	; 1
    10bc:	08 95       	ret

000010be <getFileWifi>:
	j+=strlen(footer)-1; 
	return j; 
}

uint16_t getFileWifi(char* filepath, int externRAM, uint32_t RAMAddress, int multiReceive)
{ 
    10be:	2f 92       	push	r2
    10c0:	3f 92       	push	r3
    10c2:	4f 92       	push	r4
    10c4:	5f 92       	push	r5
    10c6:	6f 92       	push	r6
    10c8:	7f 92       	push	r7
    10ca:	8f 92       	push	r8
    10cc:	9f 92       	push	r9
    10ce:	af 92       	push	r10
    10d0:	bf 92       	push	r11
    10d2:	cf 92       	push	r12
    10d4:	df 92       	push	r13
    10d6:	ef 92       	push	r14
    10d8:	ff 92       	push	r15
    10da:	0f 93       	push	r16
    10dc:	1f 93       	push	r17
    10de:	cf 93       	push	r28
    10e0:	df 93       	push	r29
    10e2:	ec 01       	movw	r28, r24
    10e4:	6b 01       	movw	r12, r22
    10e6:	49 01       	movw	r8, r18
    10e8:	5a 01       	movw	r10, r20
	//printf("Filepath: %s\n", filepath);
	//enableReceiveINT();
	//setTestPrint(1); 
	enableReceiveINT();   
    10ea:	c4 d0       	rcall	.+392    	; 0x1274 <enableReceiveINT>
	//PORTD &= ~(1<<CTS);
	setReceiveCounter(0);
    10ec:	80 e0       	ldi	r24, 0x00	; 0
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	78 d0       	rcall	.+240    	; 0x11e2 <setReceiveCounter>
	uint16_t i = 0; 
	char* receiveHeader; 
	//setCompressFlag(1);
	//PORTD |= (1<<CTS);
	sendCommand(NOPREFIX, HTTP_GET, filepath);
    10f2:	ae 01       	movw	r20, r28
    10f4:	66 e8       	ldi	r22, 0x86	; 134
    10f6:	72 e0       	ldi	r23, 0x02	; 2
    10f8:	8f ef       	ldi	r24, 0xFF	; 255
    10fa:	80 d1       	rcall	.+768    	; 0x13fc <sendCommand>
	receiveStatus();
    10fc:	cc d0       	rcall	.+408    	; 0x1296 <receiveStatus>
	//enableReceiveINT();
	//setTestPrint(1); 
	enableReceiveINT();   
	//PORTD &= ~(1<<CTS);
	setReceiveCounter(0);
	uint16_t i = 0; 
    10fe:	e1 2c       	mov	r14, r1
    1100:	f1 2c       	mov	r15, r1
			
		setReceiveCounter(0);
		sendCommand(NOPREFIX, STREAM_READ, "0 500");
		receiveStatus();
		receiveHeader = getMessageHeader(); 
		printf("Tran Length: %s\n", receiveHeader); 
    1102:	0f 2e       	mov	r0, r31
    1104:	f8 ed       	ldi	r31, 0xD8	; 216
    1106:	2f 2e       	mov	r2, r31
    1108:	f6 e0       	ldi	r31, 0x06	; 6
    110a:	3f 2e       	mov	r3, r31
    110c:	f0 2d       	mov	r31, r0
	//PORTD |= (1<<CTS);
	sendCommand(NOPREFIX, HTTP_GET, filepath);
	receiveStatus();
	do 
	{
		if(externRAM){
    110e:	c1 14       	cp	r12, r1
    1110:	d1 04       	cpc	r13, r1
    1112:	c9 f0       	breq	.+50     	; 0x1146 <getFileWifi+0x88>
			updateRAMAddress(RAMAddress + i);
    1114:	24 01       	movw	r4, r8
    1116:	35 01       	movw	r6, r10
    1118:	4e 0c       	add	r4, r14
    111a:	5f 1c       	adc	r5, r15
    111c:	61 1c       	adc	r6, r1
    111e:	71 1c       	adc	r7, r1
    1120:	c3 01       	movw	r24, r6
    1122:	b2 01       	movw	r22, r4
    1124:	62 d1       	rcall	.+708    	; 0x13ea <updateRAMAddress>
			printf("RAM Address: %d\n", RAMAddress+i); 
    1126:	7f 92       	push	r7
    1128:	6f 92       	push	r6
    112a:	5f 92       	push	r5
    112c:	4f 92       	push	r4
    112e:	a5 eb       	ldi	r26, 0xB5	; 181
    1130:	b6 e0       	ldi	r27, 0x06	; 6
    1132:	bf 93       	push	r27
    1134:	af 93       	push	r26
    1136:	0e 94 da 11 	call	0x23b4	; 0x23b4 <printf>
    113a:	0f 90       	pop	r0
    113c:	0f 90       	pop	r0
    113e:	0f 90       	pop	r0
    1140:	0f 90       	pop	r0
    1142:	0f 90       	pop	r0
    1144:	0f 90       	pop	r0
		}
		//if(RAMAddress == HEX_FILE_ADDRESS)
			//setTestPrint(1);
			
		setReceiveCounter(0);
    1146:	80 e0       	ldi	r24, 0x00	; 0
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	4b d0       	rcall	.+150    	; 0x11e2 <setReceiveCounter>
		sendCommand(NOPREFIX, STREAM_READ, "0 500");
    114c:	46 ec       	ldi	r20, 0xC6	; 198
    114e:	56 e0       	ldi	r21, 0x06	; 6
    1150:	6c ec       	ldi	r22, 0xCC	; 204
    1152:	76 e0       	ldi	r23, 0x06	; 6
    1154:	8f ef       	ldi	r24, 0xFF	; 255
    1156:	52 d1       	rcall	.+676    	; 0x13fc <sendCommand>
		receiveStatus();
    1158:	9e d0       	rcall	.+316    	; 0x1296 <receiveStatus>
		receiveHeader = getMessageHeader(); 
    115a:	44 d1       	rcall	.+648    	; 0x13e4 <getMessageHeader>
    115c:	ec 01       	movw	r28, r24
		printf("Tran Length: %s\n", receiveHeader); 
    115e:	df 93       	push	r29
    1160:	cf 93       	push	r28
    1162:	3f 92       	push	r3
    1164:	2f 92       	push	r2
    1166:	0e 94 da 11 	call	0x23b4	; 0x23b4 <printf>
		if(receiveHeader[errorCode] == '1'){
    116a:	0f 90       	pop	r0
    116c:	0f 90       	pop	r0
    116e:	0f 90       	pop	r0
    1170:	0f 90       	pop	r0
    1172:	89 81       	ldd	r24, Y+1	; 0x01
    1174:	81 33       	cpi	r24, 0x31	; 49
    1176:	41 f0       	breq	.+16     	; 0x1188 <getFileWifi+0xca>
			break; 
		}
		i += getTransmissionLength() - 2; 
    1178:	30 d1       	rcall	.+608    	; 0x13da <getTransmissionLength>
    117a:	02 97       	sbiw	r24, 0x02	; 2
    117c:	e8 0e       	add	r14, r24
    117e:	f9 1e       	adc	r15, r25
	} while (multiReceive);
    1180:	01 15       	cp	r16, r1
    1182:	11 05       	cpc	r17, r1
    1184:	09 f0       	breq	.+2      	; 0x1188 <getFileWifi+0xca>
    1186:	c3 cf       	rjmp	.-122    	; 0x110e <getFileWifi+0x50>
	
	disableReceiveINT(); 
    1188:	7e d0       	rcall	.+252    	; 0x1286 <disableReceiveINT>
	//_delay_ms(3000);  
	sendCommand(NOPREFIX, STREAM_CLOSE, NOVAL);
    118a:	41 eb       	ldi	r20, 0xB1	; 177
    118c:	53 e0       	ldi	r21, 0x03	; 3
    118e:	69 e7       	ldi	r22, 0x79	; 121
    1190:	76 e0       	ldi	r23, 0x06	; 6
    1192:	8f ef       	ldi	r24, 0xFF	; 255
    1194:	33 d1       	rcall	.+614    	; 0x13fc <sendCommand>
	//receiveStatus(); 
	return i; 
}
    1196:	c7 01       	movw	r24, r14
    1198:	df 91       	pop	r29
    119a:	cf 91       	pop	r28
    119c:	1f 91       	pop	r17
    119e:	0f 91       	pop	r16
    11a0:	ff 90       	pop	r15
    11a2:	ef 90       	pop	r14
    11a4:	df 90       	pop	r13
    11a6:	cf 90       	pop	r12
    11a8:	bf 90       	pop	r11
    11aa:	af 90       	pop	r10
    11ac:	9f 90       	pop	r9
    11ae:	8f 90       	pop	r8
    11b0:	7f 90       	pop	r7
    11b2:	6f 90       	pop	r6
    11b4:	5f 90       	pop	r5
    11b6:	4f 90       	pop	r4
    11b8:	3f 90       	pop	r3
    11ba:	2f 90       	pop	r2
    11bc:	08 95       	ret

000011be <updateFileWifi>:

void updateFileWifi(char* filepath)
{
    11be:	cf 93       	push	r28
    11c0:	df 93       	push	r29
    11c2:	ec 01       	movw	r28, r24
	disableReceiveINT(); 
    11c4:	60 d0       	rcall	.+192    	; 0x1286 <disableReceiveINT>
	sendCommand(NOPREFIX, filepath, NOVAL);
    11c6:	41 eb       	ldi	r20, 0xB1	; 177
    11c8:	53 e0       	ldi	r21, 0x03	; 3
    11ca:	be 01       	movw	r22, r28
    11cc:	8f ef       	ldi	r24, 0xFF	; 255
    11ce:	16 d1       	rcall	.+556    	; 0x13fc <sendCommand>
	sendCommand(NOPREFIX, STREAM_CLOSE, NOVAL); 	
    11d0:	41 eb       	ldi	r20, 0xB1	; 177
    11d2:	53 e0       	ldi	r21, 0x03	; 3
    11d4:	69 e7       	ldi	r22, 0x79	; 121
    11d6:	76 e0       	ldi	r23, 0x06	; 6
    11d8:	8f ef       	ldi	r24, 0xFF	; 255
    11da:	10 d1       	rcall	.+544    	; 0x13fc <sendCommand>
}
    11dc:	df 91       	pop	r29
    11de:	cf 91       	pop	r28
    11e0:	08 95       	ret

000011e2 <setReceiveCounter>:
	//0 denotes a successful command 
	if(header[errorCode] != '0')
		return 1; 
	else 
		return 0; 
}
    11e2:	90 93 47 0a 	sts	0x0A47, r25
    11e6:	80 93 46 0a 	sts	0x0A46, r24
    11ea:	08 95       	ret

000011ec <uart_init>:
    11ec:	10 92 c5 00 	sts	0x00C5, r1
    11f0:	87 e0       	ldi	r24, 0x07	; 7
    11f2:	80 93 c4 00 	sts	0x00C4, r24
    11f6:	e1 ec       	ldi	r30, 0xC1	; 193
    11f8:	f0 e0       	ldi	r31, 0x00	; 0
    11fa:	88 e1       	ldi	r24, 0x18	; 24
    11fc:	80 83       	st	Z, r24
    11fe:	86 e0       	ldi	r24, 0x06	; 6
    1200:	80 93 c2 00 	sts	0x00C2, r24
    1204:	80 81       	ld	r24, Z
    1206:	80 68       	ori	r24, 0x80	; 128
    1208:	80 83       	st	Z, r24
    120a:	08 95       	ret

0000120c <uart_send>:
    120c:	cf 93       	push	r28
    120e:	df 93       	push	r29
    1210:	10 92 52 0a 	sts	0x0A52, r1
    1214:	29 e0       	ldi	r18, 0x09	; 9
    1216:	e9 e3       	ldi	r30, 0x39	; 57
    1218:	fa e0       	ldi	r31, 0x0A	; 10
    121a:	df 01       	movw	r26, r30
    121c:	1d 92       	st	X+, r1
    121e:	2a 95       	dec	r18
    1220:	e9 f7       	brne	.-6      	; 0x121c <uart_send+0x10>
    1222:	61 15       	cp	r22, r1
    1224:	71 05       	cpc	r23, r1
    1226:	a9 f0       	breq	.+42     	; 0x1252 <uart_send+0x46>
    1228:	20 e0       	ldi	r18, 0x00	; 0
    122a:	30 e0       	ldi	r19, 0x00	; 0
    122c:	50 e0       	ldi	r21, 0x00	; 0
    122e:	e0 ec       	ldi	r30, 0xC0	; 192
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	a6 ec       	ldi	r26, 0xC6	; 198
    1234:	b0 e0       	ldi	r27, 0x00	; 0
    1236:	40 81       	ld	r20, Z
    1238:	45 ff       	sbrs	r20, 5
    123a:	fd cf       	rjmp	.-6      	; 0x1236 <uart_send+0x2a>
    123c:	ec 01       	movw	r28, r24
    123e:	c2 0f       	add	r28, r18
    1240:	d3 1f       	adc	r29, r19
    1242:	28 81       	ld	r18, Y
    1244:	2c 93       	st	X, r18
    1246:	5f 5f       	subi	r21, 0xFF	; 255
    1248:	25 2f       	mov	r18, r21
    124a:	30 e0       	ldi	r19, 0x00	; 0
    124c:	26 17       	cp	r18, r22
    124e:	37 07       	cpc	r19, r23
    1250:	90 f3       	brcs	.-28     	; 0x1236 <uart_send+0x2a>
    1252:	88 ec       	ldi	r24, 0xC8	; 200
    1254:	92 e0       	ldi	r25, 0x02	; 2
    1256:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <puts>
    125a:	80 e0       	ldi	r24, 0x00	; 0
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	df 91       	pop	r29
    1260:	cf 91       	pop	r28
    1262:	08 95       	ret

00001264 <uart_receiveChar>:
    1264:	e0 ec       	ldi	r30, 0xC0	; 192
    1266:	f0 e0       	ldi	r31, 0x00	; 0
    1268:	80 81       	ld	r24, Z
    126a:	88 23       	and	r24, r24
    126c:	ec f7       	brge	.-6      	; 0x1268 <uart_receiveChar+0x4>
    126e:	80 91 c6 00 	lds	r24, 0x00C6
    1272:	08 95       	ret

00001274 <enableReceiveINT>:
    1274:	e1 ec       	ldi	r30, 0xC1	; 193
    1276:	f0 e0       	ldi	r31, 0x00	; 0
    1278:	80 81       	ld	r24, Z
    127a:	80 68       	ori	r24, 0x80	; 128
    127c:	80 83       	st	Z, r24
    127e:	78 94       	sei
    1280:	81 e0       	ldi	r24, 0x01	; 1
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	08 95       	ret

00001286 <disableReceiveINT>:
    1286:	e1 ec       	ldi	r30, 0xC1	; 193
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	80 81       	ld	r24, Z
    128c:	8f 77       	andi	r24, 0x7F	; 127
    128e:	80 83       	st	Z, r24
    1290:	81 e0       	ldi	r24, 0x01	; 1
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	08 95       	ret

00001296 <receiveStatus>:
    1296:	80 91 52 0a 	lds	r24, 0x0A52
    129a:	81 11       	cpse	r24, r1
    129c:	08 c0       	rjmp	.+16     	; 0x12ae <receiveStatus+0x18>
    129e:	81 e2       	ldi	r24, 0x21	; 33
    12a0:	8a 95       	dec	r24
    12a2:	f1 f7       	brne	.-4      	; 0x12a0 <receiveStatus+0xa>
    12a4:	00 00       	nop
    12a6:	80 91 52 0a 	lds	r24, 0x0A52
    12aa:	88 23       	and	r24, r24
    12ac:	c1 f3       	breq	.-16     	; 0x129e <receiveStatus+0x8>
    12ae:	81 e0       	ldi	r24, 0x01	; 1
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	08 95       	ret

000012b4 <buildTransmissionLength>:
    12b4:	0f 93       	push	r16
    12b6:	1f 93       	push	r17
    12b8:	cf 93       	push	r28
    12ba:	df 93       	push	r29
    12bc:	80 91 44 0a 	lds	r24, 0x0A44
    12c0:	90 91 45 0a 	lds	r25, 0x0A45
    12c4:	89 2b       	or	r24, r25
    12c6:	f1 f0       	breq	.+60     	; 0x1304 <buildTransmissionLength+0x50>
    12c8:	c0 e0       	ldi	r28, 0x00	; 0
    12ca:	d0 e0       	ldi	r29, 0x00	; 0
    12cc:	09 ee       	ldi	r16, 0xE9	; 233
    12ce:	16 e0       	ldi	r17, 0x06	; 6
    12d0:	fe 01       	movw	r30, r28
    12d2:	e7 5c       	subi	r30, 0xC7	; 199
    12d4:	f5 4f       	sbci	r31, 0xF5	; 245
    12d6:	80 81       	ld	r24, Z
    12d8:	ff 93       	push	r31
    12da:	ef 93       	push	r30
    12dc:	1f 92       	push	r1
    12de:	8f 93       	push	r24
    12e0:	1f 93       	push	r17
    12e2:	0f 93       	push	r16
    12e4:	0e 94 da 11 	call	0x23b4	; 0x23b4 <printf>
    12e8:	21 96       	adiw	r28, 0x01	; 1
    12ea:	0f 90       	pop	r0
    12ec:	0f 90       	pop	r0
    12ee:	0f 90       	pop	r0
    12f0:	0f 90       	pop	r0
    12f2:	0f 90       	pop	r0
    12f4:	0f 90       	pop	r0
    12f6:	c9 30       	cpi	r28, 0x09	; 9
    12f8:	d1 05       	cpc	r29, r1
    12fa:	51 f7       	brne	.-44     	; 0x12d0 <buildTransmissionLength+0x1c>
    12fc:	8a e0       	ldi	r24, 0x0A	; 10
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <putchar>
    1304:	10 92 4b 0a 	sts	0x0A4B, r1
    1308:	10 92 4a 0a 	sts	0x0A4A, r1
    130c:	20 91 3f 0a 	lds	r18, 0x0A3F
    1310:	80 91 4a 0a 	lds	r24, 0x0A4A
    1314:	90 91 4b 0a 	lds	r25, 0x0A4B
    1318:	2f 70       	andi	r18, 0x0F	; 15
    131a:	82 0f       	add	r24, r18
    131c:	91 1d       	adc	r25, r1
    131e:	90 93 4b 0a 	sts	0x0A4B, r25
    1322:	80 93 4a 0a 	sts	0x0A4A, r24
    1326:	80 91 3e 0a 	lds	r24, 0x0A3E
    132a:	20 91 4a 0a 	lds	r18, 0x0A4A
    132e:	30 91 4b 0a 	lds	r19, 0x0A4B
    1332:	8f 70       	andi	r24, 0x0F	; 15
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	ac 01       	movw	r20, r24
    1338:	44 0f       	add	r20, r20
    133a:	55 1f       	adc	r21, r21
    133c:	88 0f       	add	r24, r24
    133e:	99 1f       	adc	r25, r25
    1340:	88 0f       	add	r24, r24
    1342:	99 1f       	adc	r25, r25
    1344:	88 0f       	add	r24, r24
    1346:	99 1f       	adc	r25, r25
    1348:	84 0f       	add	r24, r20
    134a:	95 1f       	adc	r25, r21
    134c:	82 0f       	add	r24, r18
    134e:	93 1f       	adc	r25, r19
    1350:	90 93 4b 0a 	sts	0x0A4B, r25
    1354:	80 93 4a 0a 	sts	0x0A4A, r24
    1358:	20 91 3d 0a 	lds	r18, 0x0A3D
    135c:	80 91 4a 0a 	lds	r24, 0x0A4A
    1360:	90 91 4b 0a 	lds	r25, 0x0A4B
    1364:	2f 70       	andi	r18, 0x0F	; 15
    1366:	34 e6       	ldi	r19, 0x64	; 100
    1368:	23 9f       	mul	r18, r19
    136a:	80 0d       	add	r24, r0
    136c:	91 1d       	adc	r25, r1
    136e:	11 24       	eor	r1, r1
    1370:	90 93 4b 0a 	sts	0x0A4B, r25
    1374:	80 93 4a 0a 	sts	0x0A4A, r24
    1378:	60 91 3c 0a 	lds	r22, 0x0A3C
    137c:	80 91 4a 0a 	lds	r24, 0x0A4A
    1380:	90 91 4b 0a 	lds	r25, 0x0A4B
    1384:	6f 70       	andi	r22, 0x0F	; 15
    1386:	48 ee       	ldi	r20, 0xE8	; 232
    1388:	53 e0       	ldi	r21, 0x03	; 3
    138a:	64 9f       	mul	r22, r20
    138c:	90 01       	movw	r18, r0
    138e:	65 9f       	mul	r22, r21
    1390:	30 0d       	add	r19, r0
    1392:	11 24       	eor	r1, r1
    1394:	82 0f       	add	r24, r18
    1396:	93 1f       	adc	r25, r19
    1398:	90 93 4b 0a 	sts	0x0A4B, r25
    139c:	80 93 4a 0a 	sts	0x0A4A, r24
    13a0:	60 91 3b 0a 	lds	r22, 0x0A3B
    13a4:	80 91 4a 0a 	lds	r24, 0x0A4A
    13a8:	90 91 4b 0a 	lds	r25, 0x0A4B
    13ac:	6f 70       	andi	r22, 0x0F	; 15
    13ae:	40 e1       	ldi	r20, 0x10	; 16
    13b0:	57 e2       	ldi	r21, 0x27	; 39
    13b2:	64 9f       	mul	r22, r20
    13b4:	90 01       	movw	r18, r0
    13b6:	65 9f       	mul	r22, r21
    13b8:	30 0d       	add	r19, r0
    13ba:	11 24       	eor	r1, r1
    13bc:	82 0f       	add	r24, r18
    13be:	93 1f       	adc	r25, r19
    13c0:	90 93 4b 0a 	sts	0x0A4B, r25
    13c4:	80 93 4a 0a 	sts	0x0A4A, r24
    13c8:	80 91 4a 0a 	lds	r24, 0x0A4A
    13cc:	90 91 4b 0a 	lds	r25, 0x0A4B
    13d0:	df 91       	pop	r29
    13d2:	cf 91       	pop	r28
    13d4:	1f 91       	pop	r17
    13d6:	0f 91       	pop	r16
    13d8:	08 95       	ret

000013da <getTransmissionLength>:
    13da:	80 91 4a 0a 	lds	r24, 0x0A4A
    13de:	90 91 4b 0a 	lds	r25, 0x0A4B
    13e2:	08 95       	ret

000013e4 <getMessageHeader>:
    13e4:	89 e3       	ldi	r24, 0x39	; 57
    13e6:	9a e0       	ldi	r25, 0x0A	; 10
    13e8:	08 95       	ret

000013ea <updateRAMAddress>:

void updateRAMAddress(uint32_t address)
{
	RAMAddress = address; 
    13ea:	60 93 4c 0a 	sts	0x0A4C, r22
    13ee:	70 93 4d 0a 	sts	0x0A4D, r23
    13f2:	80 93 4e 0a 	sts	0x0A4E, r24
    13f6:	90 93 4f 0a 	sts	0x0A4F, r25
    13fa:	08 95       	ret

000013fc <sendCommand>:
}

unsigned int sendCommand(int8_t prefix, char* command, char* value)
{
    13fc:	0f 93       	push	r16
    13fe:	1f 93       	push	r17
    1400:	cf 93       	push	r28
    1402:	df 93       	push	r29
    1404:	ea 01       	movw	r28, r20
	//char* fullCommand = (char *)malloc(MaxSendSize);
	switch(prefix)
    1406:	81 30       	cpi	r24, 0x01	; 1
    1408:	31 f0       	breq	.+12     	; 0x1416 <sendCommand+0x1a>
    140a:	82 30       	cpi	r24, 0x02	; 2
    140c:	71 f0       	breq	.+28     	; 0x142a <sendCommand+0x2e>
    140e:	8f 3f       	cpi	r24, 0xFF	; 255
    1410:	09 f0       	breq	.+2      	; 0x1414 <sendCommand+0x18>
    1412:	66 c0       	rjmp	.+204    	; 0x14e0 <sendCommand+0xe4>
    1414:	17 c0       	rjmp	.+46     	; 0x1444 <sendCommand+0x48>
	{
		case NOPREFIX: 
			break; 
		case GET:
			strcpy(fullCommand, "get "); 
    1416:	85 e0       	ldi	r24, 0x05	; 5
    1418:	eb e8       	ldi	r30, 0x8B	; 139
    141a:	f2 e0       	ldi	r31, 0x02	; 2
    141c:	a3 e5       	ldi	r26, 0x53	; 83
    141e:	ba e0       	ldi	r27, 0x0A	; 10
    1420:	01 90       	ld	r0, Z+
    1422:	0d 92       	st	X+, r0
    1424:	8a 95       	dec	r24
    1426:	e1 f7       	brne	.-8      	; 0x1420 <sendCommand+0x24>
			//strcat(fullCommand, "get ");
			break; 
    1428:	0d c0       	rjmp	.+26     	; 0x1444 <sendCommand+0x48>
		case SET: 
			strcat(fullCommand, "set ");
    142a:	a3 e5       	ldi	r26, 0x53	; 83
    142c:	ba e0       	ldi	r27, 0x0A	; 10
    142e:	0d 90       	ld	r0, X+
    1430:	00 20       	and	r0, r0
    1432:	e9 f7       	brne	.-6      	; 0x142e <sendCommand+0x32>
    1434:	11 97       	sbiw	r26, 0x01	; 1
    1436:	85 e0       	ldi	r24, 0x05	; 5
    1438:	e5 e0       	ldi	r30, 0x05	; 5
    143a:	f7 e0       	ldi	r31, 0x07	; 7
    143c:	01 90       	ld	r0, Z+
    143e:	0d 92       	st	X+, r0
    1440:	8a 95       	dec	r24
    1442:	e1 f7       	brne	.-8      	; 0x143c <sendCommand+0x40>
			return 0; 
			break; 
	}
	//printf("Command: %s Length: %d, Address: %p\n", fullCommand, strlen(fullCommand), fullCommand);
	//printf("Command: %s Length: %d, Address: %p\n", command, strlen(command),  command);
	strcat(fullCommand, command);
    1444:	83 e5       	ldi	r24, 0x53	; 83
    1446:	9a e0       	ldi	r25, 0x0A	; 10
    1448:	71 d7       	rcall	.+3810   	; 0x232c <strcat>
	//printf("Full Command: %s", fullCommand);	
	if(value != NOVAL)
    144a:	83 e0       	ldi	r24, 0x03	; 3
    144c:	c1 3b       	cpi	r28, 0xB1	; 177
    144e:	d8 07       	cpc	r29, r24
    1450:	71 f0       	breq	.+28     	; 0x146e <sendCommand+0x72>
	{
		strcat(fullCommand, " ");
    1452:	e3 e5       	ldi	r30, 0x53	; 83
    1454:	fa e0       	ldi	r31, 0x0A	; 10
    1456:	01 90       	ld	r0, Z+
    1458:	00 20       	and	r0, r0
    145a:	e9 f7       	brne	.-6      	; 0x1456 <sendCommand+0x5a>
    145c:	31 97       	sbiw	r30, 0x01	; 1
    145e:	80 e2       	ldi	r24, 0x20	; 32
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	91 83       	std	Z+1, r25	; 0x01
    1464:	80 83       	st	Z, r24
		strcat(fullCommand, value);
    1466:	be 01       	movw	r22, r28
    1468:	83 e5       	ldi	r24, 0x53	; 83
    146a:	9a e0       	ldi	r25, 0x0A	; 10
    146c:	5f d7       	rcall	.+3774   	; 0x232c <strcat>
	}
	
	//printf("fullCommand: %s\n", fullCommand);
	strcat(fullCommand, ENDCOMMAND);
    146e:	c3 e5       	ldi	r28, 0x53	; 83
    1470:	da e0       	ldi	r29, 0x0A	; 10
    1472:	fe 01       	movw	r30, r28
    1474:	01 90       	ld	r0, Z+
    1476:	00 20       	and	r0, r0
    1478:	e9 f7       	brne	.-6      	; 0x1474 <sendCommand+0x78>
    147a:	31 97       	sbiw	r30, 0x01	; 1
    147c:	8d e0       	ldi	r24, 0x0D	; 13
    147e:	9a e0       	ldi	r25, 0x0A	; 10
    1480:	a0 e0       	ldi	r26, 0x00	; 0
    1482:	80 83       	st	Z, r24
    1484:	91 83       	std	Z+1, r25	; 0x01
    1486:	a2 83       	std	Z+2, r26	; 0x02
	uint16_t length = strlen(fullCommand);
    1488:	fe 01       	movw	r30, r28
    148a:	01 90       	ld	r0, Z+
    148c:	00 20       	and	r0, r0
    148e:	e9 f7       	brne	.-6      	; 0x148a <sendCommand+0x8e>
    1490:	31 97       	sbiw	r30, 0x01	; 1
    1492:	8f 01       	movw	r16, r30
    1494:	03 55       	subi	r16, 0x53	; 83
    1496:	1a 40       	sbci	r17, 0x0A	; 10
	printf("Command: %s Length: %d, Address: %p\n", fullCommand, length, fullCommand);
    1498:	df 93       	push	r29
    149a:	cf 93       	push	r28
    149c:	1f 93       	push	r17
    149e:	0f 93       	push	r16
    14a0:	df 93       	push	r29
    14a2:	cf 93       	push	r28
    14a4:	8a e0       	ldi	r24, 0x0A	; 10
    14a6:	97 e0       	ldi	r25, 0x07	; 7
    14a8:	9f 93       	push	r25
    14aa:	8f 93       	push	r24
    14ac:	83 d7       	rcall	.+3846   	; 0x23b4 <printf>
	uart_send(fullCommand, length);
    14ae:	b8 01       	movw	r22, r16
    14b0:	ce 01       	movw	r24, r28
    14b2:	ac de       	rcall	.-680    	; 0x120c <uart_send>
	memset(fullCommand, 0x00, 100);
    14b4:	84 e6       	ldi	r24, 0x64	; 100
    14b6:	fe 01       	movw	r30, r28
    14b8:	11 92       	st	Z+, r1
    14ba:	8a 95       	dec	r24
    14bc:	e9 f7       	brne	.-6      	; 0x14b8 <sendCommand+0xbc>
	//PORTD |= (1<<RTS);
	printf("Freed!\n");
    14be:	8f e2       	ldi	r24, 0x2F	; 47
    14c0:	97 e0       	ldi	r25, 0x07	; 7
    14c2:	8e d7       	rcall	.+3868   	; 0x23e0 <puts>
	printf("Returning!\n");
    14c4:	86 e3       	ldi	r24, 0x36	; 54
    14c6:	97 e0       	ldi	r25, 0x07	; 7
    14c8:	8b d7       	rcall	.+3862   	; 0x23e0 <puts>
	return 1; 
    14ca:	8d b7       	in	r24, 0x3d	; 61
    14cc:	9e b7       	in	r25, 0x3e	; 62
    14ce:	08 96       	adiw	r24, 0x08	; 8
    14d0:	0f b6       	in	r0, 0x3f	; 63
    14d2:	f8 94       	cli
    14d4:	9e bf       	out	0x3e, r25	; 62
    14d6:	0f be       	out	0x3f, r0	; 63
    14d8:	8d bf       	out	0x3d, r24	; 61
    14da:	81 e0       	ldi	r24, 0x01	; 1
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	02 c0       	rjmp	.+4      	; 0x14e4 <sendCommand+0xe8>
			break; 
		case SET: 
			strcat(fullCommand, "set ");
			break; 
		default:
			return 0; 
    14e0:	80 e0       	ldi	r24, 0x00	; 0
    14e2:	90 e0       	ldi	r25, 0x00	; 0
	memset(fullCommand, 0x00, 100);
	//PORTD |= (1<<RTS);
	printf("Freed!\n");
	printf("Returning!\n");
	return 1; 
}
    14e4:	df 91       	pop	r29
    14e6:	cf 91       	pop	r28
    14e8:	1f 91       	pop	r17
    14ea:	0f 91       	pop	r16
    14ec:	08 95       	ret

000014ee <__vector_25>:
	//PORTD |= (1<<CTS);
	//sei();
//}

ISR(USART0_RX_vect)
{
    14ee:	1f 92       	push	r1
    14f0:	0f 92       	push	r0
    14f2:	0f b6       	in	r0, 0x3f	; 63
    14f4:	0f 92       	push	r0
    14f6:	11 24       	eor	r1, r1
    14f8:	0b b6       	in	r0, 0x3b	; 59
    14fa:	0f 92       	push	r0
    14fc:	2f 93       	push	r18
    14fe:	3f 93       	push	r19
    1500:	4f 93       	push	r20
    1502:	5f 93       	push	r21
    1504:	6f 93       	push	r22
    1506:	7f 93       	push	r23
    1508:	8f 93       	push	r24
    150a:	9f 93       	push	r25
    150c:	af 93       	push	r26
    150e:	bf 93       	push	r27
    1510:	cf 93       	push	r28
    1512:	df 93       	push	r29
    1514:	ef 93       	push	r30
    1516:	ff 93       	push	r31
	cli();
    1518:	f8 94       	cli
	//if(testPrint)
		//printf("Interrupt!\n");
	if(!bufferStart)
    151a:	80 91 50 0a 	lds	r24, 0x0A50
    151e:	90 91 51 0a 	lds	r25, 0x0A51
    1522:	89 2b       	or	r24, r25
    1524:	e1 f4       	brne	.+56     	; 0x155e <__vector_25+0x70>
	{
		buff = uart_receiveChar();
    1526:	9e de       	rcall	.-708    	; 0x1264 <uart_receiveChar>
    1528:	80 93 42 0a 	sts	0x0A42, r24
		//Header always begins with letter 'R'
		if(buff == headerStartVal)
    152c:	80 91 42 0a 	lds	r24, 0x0A42
    1530:	82 35       	cpi	r24, 0x52	; 82
    1532:	09 f0       	breq	.+2      	; 0x1536 <__vector_25+0x48>
    1534:	95 c0       	rjmp	.+298    	; 0x1660 <__vector_25+0x172>
		{
			//PORTD &= ~(1<<RTS);
			//if(testPrint)
				//printf("Beginning Found @ %d\n", i); 
				
			i = 0;
    1536:	10 92 47 0a 	sts	0x0A47, r1
    153a:	10 92 46 0a 	sts	0x0A46, r1
			headerBuffer[i] = buff; 
    153e:	e0 91 46 0a 	lds	r30, 0x0A46
    1542:	f0 91 47 0a 	lds	r31, 0x0A47
    1546:	80 91 42 0a 	lds	r24, 0x0A42
    154a:	e7 5c       	subi	r30, 0xC7	; 199
    154c:	f5 4f       	sbci	r31, 0xF5	; 245
    154e:	80 83       	st	Z, r24
			
				//if(testPrint)
					//printf("Header: %c @ address %p", headerBuffer[i], headerBuffer); 
					
			bufferStart = 1;
    1550:	81 e0       	ldi	r24, 0x01	; 1
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	90 93 51 0a 	sts	0x0A51, r25
    1558:	80 93 50 0a 	sts	0x0A50, r24
    155c:	81 c0       	rjmp	.+258    	; 0x1660 <__vector_25+0x172>
	
	else
	{
		//printf("Beginning of buffer.\n");
		//Grab Receive Header
		if(i < endHeader)
    155e:	80 91 46 0a 	lds	r24, 0x0A46
    1562:	90 91 47 0a 	lds	r25, 0x0A47
    1566:	09 97       	sbiw	r24, 0x09	; 9
    1568:	48 f4       	brcc	.+18     	; 0x157c <__vector_25+0x8e>
		{
			//PORTD &= ~(1<<RTS);
			headerBuffer[i] = uart_receiveChar();
    156a:	c0 91 46 0a 	lds	r28, 0x0A46
    156e:	d0 91 47 0a 	lds	r29, 0x0A47
    1572:	78 de       	rcall	.-784    	; 0x1264 <uart_receiveChar>
    1574:	c7 5c       	subi	r28, 0xC7	; 199
    1576:	d5 4f       	sbci	r29, 0xF5	; 245
    1578:	88 83       	st	Y, r24
    157a:	72 c0       	rjmp	.+228    	; 0x1660 <__vector_25+0x172>
				//printf("Header: %c @ address %p\n", headerBuffer[i], headerBuffer + i);
			//i++; 
			//RAMWriteByte(uart_receiveChar(), i);
			//PORTD |= (1<<RTS); 
		}
		else if(i == endHeader)
    157c:	80 91 46 0a 	lds	r24, 0x0A46
    1580:	90 91 47 0a 	lds	r25, 0x0A47
    1584:	09 97       	sbiw	r24, 0x09	; 9
    1586:	21 f5       	brne	.+72     	; 0x15d0 <__vector_25+0xe2>
		{
			transLength = buildTransmissionLength();
    1588:	95 de       	rcall	.-726    	; 0x12b4 <buildTransmissionLength>
    158a:	90 93 4b 0a 	sts	0x0A4B, r25
    158e:	80 93 4a 0a 	sts	0x0A4A, r24
			//i++; 
			if(testPrint)
    1592:	80 91 44 0a 	lds	r24, 0x0A44
    1596:	90 91 45 0a 	lds	r25, 0x0A45
    159a:	89 2b       	or	r24, r25
    159c:	09 f4       	brne	.+2      	; 0x15a0 <__vector_25+0xb2>
    159e:	60 c0       	rjmp	.+192    	; 0x1660 <__vector_25+0x172>
				printf("Transmission Length: %d, i: %d\n", transLength, i);
    15a0:	20 91 46 0a 	lds	r18, 0x0A46
    15a4:	30 91 47 0a 	lds	r19, 0x0A47
    15a8:	80 91 4a 0a 	lds	r24, 0x0A4A
    15ac:	90 91 4b 0a 	lds	r25, 0x0A4B
    15b0:	3f 93       	push	r19
    15b2:	2f 93       	push	r18
    15b4:	9f 93       	push	r25
    15b6:	8f 93       	push	r24
    15b8:	81 e4       	ldi	r24, 0x41	; 65
    15ba:	97 e0       	ldi	r25, 0x07	; 7
    15bc:	9f 93       	push	r25
    15be:	8f 93       	push	r24
    15c0:	f9 d6       	rcall	.+3570   	; 0x23b4 <printf>
    15c2:	0f 90       	pop	r0
    15c4:	0f 90       	pop	r0
    15c6:	0f 90       	pop	r0
    15c8:	0f 90       	pop	r0
    15ca:	0f 90       	pop	r0
    15cc:	0f 90       	pop	r0
    15ce:	48 c0       	rjmp	.+144    	; 0x1660 <__vector_25+0x172>
		}
		else
		{
			if(i < transLength + endHeader)
    15d0:	20 91 4a 0a 	lds	r18, 0x0A4A
    15d4:	30 91 4b 0a 	lds	r19, 0x0A4B
    15d8:	80 91 46 0a 	lds	r24, 0x0A46
    15dc:	90 91 47 0a 	lds	r25, 0x0A47
    15e0:	27 5f       	subi	r18, 0xF7	; 247
    15e2:	3f 4f       	sbci	r19, 0xFF	; 255
    15e4:	82 17       	cp	r24, r18
    15e6:	93 07       	cpc	r25, r19
    15e8:	d8 f4       	brcc	.+54     	; 0x1620 <__vector_25+0x132>
			{
				
				buff = uart_receiveChar();
    15ea:	3c de       	rcall	.-904    	; 0x1264 <uart_receiveChar>
    15ec:	80 93 42 0a 	sts	0x0A42, r24
				RAMWriteByte(buff, RAMAddress + i - endHeader -1);	
    15f0:	20 91 46 0a 	lds	r18, 0x0A46
    15f4:	30 91 47 0a 	lds	r19, 0x0A47
    15f8:	40 91 4c 0a 	lds	r20, 0x0A4C
    15fc:	50 91 4d 0a 	lds	r21, 0x0A4D
    1600:	60 91 4e 0a 	lds	r22, 0x0A4E
    1604:	70 91 4f 0a 	lds	r23, 0x0A4F
    1608:	80 91 42 0a 	lds	r24, 0x0A42
    160c:	4a 50       	subi	r20, 0x0A	; 10
    160e:	51 09       	sbc	r21, r1
    1610:	61 09       	sbc	r22, r1
    1612:	71 09       	sbc	r23, r1
    1614:	42 0f       	add	r20, r18
    1616:	53 1f       	adc	r21, r19
    1618:	61 1d       	adc	r22, r1
    161a:	71 1d       	adc	r23, r1
    161c:	f1 db       	rcall	.-2078   	; 0xe00 <RAMWriteByte>
    161e:	20 c0       	rjmp	.+64     	; 0x1660 <__vector_25+0x172>
			else
			{
				//printf("End of String!\n");
				//RAMWriteByte(0x00, RAMAddress + i - endHeader -1);
				//cli();
				i = 0;
    1620:	10 92 47 0a 	sts	0x0A47, r1
    1624:	10 92 46 0a 	sts	0x0A46, r1
				bufferStart = 0;
    1628:	10 92 51 0a 	sts	0x0A51, r1
    162c:	10 92 50 0a 	sts	0x0A50, r1
				compressFlag = 0; 
    1630:	10 92 49 0a 	sts	0x0A49, r1
				secondNibble = 0; 
    1634:	10 92 48 0a 	sts	0x0A48, r1
				compressBuff = 0x00; 
    1638:	10 92 43 0a 	sts	0x0A43, r1
				//done receiving
				receiveWifiFlag = 1;
    163c:	81 e0       	ldi	r24, 0x01	; 1
    163e:	80 93 52 0a 	sts	0x0A52, r24
				printf("Transmission Length: %d\n", buildTransmissionLength());
    1642:	38 de       	rcall	.-912    	; 0x12b4 <buildTransmissionLength>
    1644:	9f 93       	push	r25
    1646:	8f 93       	push	r24
    1648:	81 e6       	ldi	r24, 0x61	; 97
    164a:	97 e0       	ldi	r25, 0x07	; 7
    164c:	9f 93       	push	r25
    164e:	8f 93       	push	r24
    1650:	b1 d6       	rcall	.+3426   	; 0x23b4 <printf>
				printf("Done Receiving!\n");
    1652:	8a e7       	ldi	r24, 0x7A	; 122
    1654:	97 e0       	ldi	r25, 0x07	; 7
    1656:	c4 d6       	rcall	.+3464   	; 0x23e0 <puts>
    1658:	0f 90       	pop	r0
    165a:	0f 90       	pop	r0
    165c:	0f 90       	pop	r0
    165e:	0f 90       	pop	r0
		}
		//printf("%d\n", i); 
		//i++; 
	}
	//if(bufferStart && !receiveWifiFlag)
	i++; 
    1660:	80 91 46 0a 	lds	r24, 0x0A46
    1664:	90 91 47 0a 	lds	r25, 0x0A47
    1668:	01 96       	adiw	r24, 0x01	; 1
    166a:	90 93 47 0a 	sts	0x0A47, r25
    166e:	80 93 46 0a 	sts	0x0A46, r24
		
	//PORTD |= (1<<CTS); 
	sei(); 
    1672:	78 94       	sei
}
    1674:	ff 91       	pop	r31
    1676:	ef 91       	pop	r30
    1678:	df 91       	pop	r29
    167a:	cf 91       	pop	r28
    167c:	bf 91       	pop	r27
    167e:	af 91       	pop	r26
    1680:	9f 91       	pop	r25
    1682:	8f 91       	pop	r24
    1684:	7f 91       	pop	r23
    1686:	6f 91       	pop	r22
    1688:	5f 91       	pop	r21
    168a:	4f 91       	pop	r20
    168c:	3f 91       	pop	r19
    168e:	2f 91       	pop	r18
    1690:	0f 90       	pop	r0
    1692:	0b be       	out	0x3b, r0	; 59
    1694:	0f 90       	pop	r0
    1696:	0f be       	out	0x3f, r0	; 63
    1698:	0f 90       	pop	r0
    169a:	1f 90       	pop	r1
    169c:	18 95       	reti

0000169e <hexInit>:
				   //':', 0x10, 0x00, 0x10, 0x00, 0x12, 0xC0, 0x11, 0xC0, 0x10, 0xC0, 0x0F, 0xC0, 0x0E, 0xC0, 0x0D, 0xC0, 0x0C, 0xC0, 0x0B, 0xC0, 0x6C,
				   //':', 0x00, 0x00, 0x00, 0x01, 0xFF};

void hexInit()
{
	RAMOffset = 0; 
    169e:	10 92 ea 0a 	sts	0x0AEA, r1
    16a2:	10 92 e9 0a 	sts	0x0AE9, r1
	memset(hexRow, 0x00, 50); 
    16a6:	82 e3       	ldi	r24, 0x32	; 50
    16a8:	e7 eb       	ldi	r30, 0xB7	; 183
    16aa:	fa e0       	ldi	r31, 0x0A	; 10
    16ac:	df 01       	movw	r26, r30
    16ae:	1d 92       	st	X+, r1
    16b0:	8a 95       	dec	r24
    16b2:	e9 f7       	brne	.-6      	; 0x16ae <hexInit+0x10>
    16b4:	08 95       	ret

000016b6 <resetRAMOffset>:
} 

void resetRAMOffset()
{
	RAMOffset = 0; 
    16b6:	10 92 ea 0a 	sts	0x0AEA, r1
    16ba:	10 92 e9 0a 	sts	0x0AE9, r1
    16be:	08 95       	ret

000016c0 <getHexRow>:
}

char* getHexRow()
{
    16c0:	0f 93       	push	r16
    16c2:	1f 93       	push	r17
    16c4:	cf 93       	push	r28
    16c6:	df 93       	push	r29
    16c8:	c7 eb       	ldi	r28, 0xB7	; 183
    16ca:	da e0       	ldi	r29, 0x0A	; 10
    16cc:	0c eb       	ldi	r16, 0xBC	; 188
    16ce:	1a e0       	ldi	r17, 0x0A	; 10
	int i=0; 
	//printf("Getting Row!\n"); 
	for(i=0; i<DATA_BEGIN; i++)
	{
		//Read the bytes from RAM and throw them into the buffer
		rowBuff = RAMReadByte(HEX_FILE_ADDRESS + RAMOffset);
    16d0:	60 91 e9 0a 	lds	r22, 0x0AE9
    16d4:	70 91 ea 0a 	lds	r23, 0x0AEA
    16d8:	80 e0       	ldi	r24, 0x00	; 0
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	ac db       	rcall	.-2216   	; 0xe36 <RAMReadByte>
		//printf("0x%02X ", rowBuff);
		hexRow[i] = rowBuff; 
    16de:	89 93       	st	Y+, r24
		RAMOffset++; 
    16e0:	80 91 e9 0a 	lds	r24, 0x0AE9
    16e4:	90 91 ea 0a 	lds	r25, 0x0AEA
    16e8:	01 96       	adiw	r24, 0x01	; 1
    16ea:	90 93 ea 0a 	sts	0x0AEA, r25
    16ee:	80 93 e9 0a 	sts	0x0AE9, r24
char* getHexRow()
{
	char rowBuff; 
	int i=0; 
	//printf("Getting Row!\n"); 
	for(i=0; i<DATA_BEGIN; i++)
    16f2:	c0 17       	cp	r28, r16
    16f4:	d1 07       	cpc	r29, r17
    16f6:	61 f7       	brne	.-40     	; 0x16d0 <getHexRow+0x10>
		//printf("0x%02X ", rowBuff);
		hexRow[i] = rowBuff; 
		RAMOffset++; 
	}
	
	uint8_t dataLength = hexRow[BYTE_COUNT];
    16f8:	00 91 b8 0a 	lds	r16, 0x0AB8
    16fc:	cc eb       	ldi	r28, 0xBC	; 188
    16fe:	da e0       	ldi	r29, 0x0A	; 10
    1700:	10 e0       	ldi	r17, 0x00	; 0
    1702:	03 54       	subi	r16, 0x43	; 67
    1704:	15 4f       	sbci	r17, 0xF5	; 245
	//printf("Data Length: %d\n", dataLength); 
	//Add 1 to dataLength to catch the checkSum 
	for(i=0;i<dataLength+1;i++)
	{
		rowBuff = RAMReadByte(HEX_FILE_ADDRESS + RAMOffset);
    1706:	60 91 e9 0a 	lds	r22, 0x0AE9
    170a:	70 91 ea 0a 	lds	r23, 0x0AEA
    170e:	80 e0       	ldi	r24, 0x00	; 0
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	91 db       	rcall	.-2270   	; 0xe36 <RAMReadByte>
		//printf("0x%02X ",rowBuff);
		hexRow[DATA_BEGIN + i] = RAMReadByte(HEX_FILE_ADDRESS + RAMOffset);
    1714:	60 91 e9 0a 	lds	r22, 0x0AE9
    1718:	70 91 ea 0a 	lds	r23, 0x0AEA
    171c:	80 e0       	ldi	r24, 0x00	; 0
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	8a db       	rcall	.-2284   	; 0xe36 <RAMReadByte>
    1722:	89 93       	st	Y+, r24
		RAMOffset++; 
    1724:	80 91 e9 0a 	lds	r24, 0x0AE9
    1728:	90 91 ea 0a 	lds	r25, 0x0AEA
    172c:	01 96       	adiw	r24, 0x01	; 1
    172e:	90 93 ea 0a 	sts	0x0AEA, r25
    1732:	80 93 e9 0a 	sts	0x0AE9, r24
	}
	
	uint8_t dataLength = hexRow[BYTE_COUNT];
	//printf("Data Length: %d\n", dataLength); 
	//Add 1 to dataLength to catch the checkSum 
	for(i=0;i<dataLength+1;i++)
    1736:	c0 17       	cp	r28, r16
    1738:	d1 07       	cpc	r29, r17
    173a:	29 f7       	brne	.-54     	; 0x1706 <getHexRow+0x46>
		hexRow[DATA_BEGIN + i] = RAMReadByte(HEX_FILE_ADDRESS + RAMOffset);
		RAMOffset++; 
	}
	
	return hexRow; 
}
    173c:	87 eb       	ldi	r24, 0xB7	; 183
    173e:	9a e0       	ldi	r25, 0x0A	; 10
    1740:	df 91       	pop	r29
    1742:	cf 91       	pop	r28
    1744:	1f 91       	pop	r17
    1746:	0f 91       	pop	r16
    1748:	08 95       	ret

0000174a <verifySignature>:
		case ATmega324PA_ID: 
			return 0x001E9511; 
		default:
			return -1; 
	}
}
    174a:	cf 92       	push	r12
    174c:	df 92       	push	r13
    174e:	ef 92       	push	r14
    1750:	ff 92       	push	r15
    1752:	0f 93       	push	r16
    1754:	1f 93       	push	r17
    1756:	cf 93       	push	r28
    1758:	df 93       	push	r29
    175a:	6b 01       	movw	r12, r22
    175c:	7c 01       	movw	r14, r24
    175e:	b6 d2       	rcall	.+1388   	; 0x1ccc <ReadSignatureBytes>
    1760:	ec 01       	movw	r28, r24
    1762:	8a 81       	ldd	r24, Y+2	; 0x02
    1764:	1f 92       	push	r1
    1766:	8f 93       	push	r24
    1768:	89 81       	ldd	r24, Y+1	; 0x01
    176a:	1f 92       	push	r1
    176c:	8f 93       	push	r24
    176e:	88 81       	ld	r24, Y
    1770:	1f 92       	push	r1
    1772:	8f 93       	push	r24
    1774:	8a e8       	ldi	r24, 0x8A	; 138
    1776:	97 e0       	ldi	r25, 0x07	; 7
    1778:	9f 93       	push	r25
    177a:	8f 93       	push	r24
    177c:	1b d6       	rcall	.+3126   	; 0x23b4 <printf>
    177e:	08 81       	ld	r16, Y
    1780:	10 e0       	ldi	r17, 0x00	; 0
    1782:	20 e0       	ldi	r18, 0x00	; 0
    1784:	30 e0       	ldi	r19, 0x00	; 0
    1786:	4e 2d       	mov	r20, r14
    1788:	50 e0       	ldi	r21, 0x00	; 0
    178a:	60 e0       	ldi	r22, 0x00	; 0
    178c:	70 e0       	ldi	r23, 0x00	; 0
    178e:	8d b7       	in	r24, 0x3d	; 61
    1790:	9e b7       	in	r25, 0x3e	; 62
    1792:	08 96       	adiw	r24, 0x08	; 8
    1794:	0f b6       	in	r0, 0x3f	; 63
    1796:	f8 94       	cli
    1798:	9e bf       	out	0x3e, r25	; 62
    179a:	0f be       	out	0x3f, r0	; 63
    179c:	8d bf       	out	0x3d, r24	; 61
    179e:	04 17       	cp	r16, r20
    17a0:	15 07       	cpc	r17, r21
    17a2:	26 07       	cpc	r18, r22
    17a4:	37 07       	cpc	r19, r23
    17a6:	e9 f4       	brne	.+58     	; 0x17e2 <verifySignature+0x98>
    17a8:	09 81       	ldd	r16, Y+1	; 0x01
    17aa:	10 e0       	ldi	r17, 0x00	; 0
    17ac:	20 e0       	ldi	r18, 0x00	; 0
    17ae:	30 e0       	ldi	r19, 0x00	; 0
    17b0:	4d 2d       	mov	r20, r13
    17b2:	50 e0       	ldi	r21, 0x00	; 0
    17b4:	60 e0       	ldi	r22, 0x00	; 0
    17b6:	70 e0       	ldi	r23, 0x00	; 0
    17b8:	04 17       	cp	r16, r20
    17ba:	15 07       	cpc	r17, r21
    17bc:	26 07       	cpc	r18, r22
    17be:	37 07       	cpc	r19, r23
    17c0:	99 f4       	brne	.+38     	; 0x17e8 <verifySignature+0x9e>
    17c2:	4a 81       	ldd	r20, Y+2	; 0x02
    17c4:	50 e0       	ldi	r21, 0x00	; 0
    17c6:	60 e0       	ldi	r22, 0x00	; 0
    17c8:	70 e0       	ldi	r23, 0x00	; 0
    17ca:	dd 24       	eor	r13, r13
    17cc:	ee 24       	eor	r14, r14
    17ce:	ff 24       	eor	r15, r15
    17d0:	81 e0       	ldi	r24, 0x01	; 1
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	4c 15       	cp	r20, r12
    17d6:	5d 05       	cpc	r21, r13
    17d8:	6e 05       	cpc	r22, r14
    17da:	7f 05       	cpc	r23, r15
    17dc:	39 f0       	breq	.+14     	; 0x17ec <verifySignature+0xa2>
    17de:	80 e0       	ldi	r24, 0x00	; 0
    17e0:	05 c0       	rjmp	.+10     	; 0x17ec <verifySignature+0xa2>
    17e2:	80 e0       	ldi	r24, 0x00	; 0
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	02 c0       	rjmp	.+4      	; 0x17ec <verifySignature+0xa2>
    17e8:	80 e0       	ldi	r24, 0x00	; 0
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	df 91       	pop	r29
    17ee:	cf 91       	pop	r28
    17f0:	1f 91       	pop	r17
    17f2:	0f 91       	pop	r16
    17f4:	ff 90       	pop	r15
    17f6:	ef 90       	pop	r14
    17f8:	df 90       	pop	r13
    17fa:	cf 90       	pop	r12
    17fc:	08 95       	ret

000017fe <Program>:
    17fe:	cf 92       	push	r12
    1800:	df 92       	push	r13
    1802:	ef 92       	push	r14
    1804:	ff 92       	push	r15
    1806:	cf 93       	push	r28
    1808:	df 93       	push	r29
    180a:	6b 01       	movw	r12, r22
    180c:	7c 01       	movw	r14, r24
    180e:	46 d1       	rcall	.+652    	; 0x1a9c <ApplyPullDowns>
    1810:	26 d1       	rcall	.+588    	; 0x1a5e <ProgInit>
    1812:	51 df       	rcall	.-350    	; 0x16b6 <resetRAMOffset>
    1814:	c7 01       	movw	r24, r14
    1816:	b6 01       	movw	r22, r12
    1818:	17 d2       	rcall	.+1070   	; 0x1c48 <EnableProgMode>
    181a:	c7 01       	movw	r24, r14
    181c:	b6 01       	movw	r22, r12
    181e:	95 df       	rcall	.-214    	; 0x174a <verifySignature>
    1820:	ec 01       	movw	r28, r24
    1822:	00 97       	sbiw	r24, 0x00	; 0
    1824:	09 f4       	brne	.+2      	; 0x1828 <Program+0x2a>
    1826:	36 c0       	rjmp	.+108    	; 0x1894 <Program+0x96>
    1828:	8c ea       	ldi	r24, 0xAC	; 172
    182a:	97 e0       	ldi	r25, 0x07	; 7
    182c:	d9 d5       	rcall	.+2994   	; 0x23e0 <puts>
    182e:	82 ec       	ldi	r24, 0xC2	; 194
    1830:	97 e0       	ldi	r25, 0x07	; 7
    1832:	d6 d5       	rcall	.+2988   	; 0x23e0 <puts>
    1834:	00 d4       	rcall	.+2048   	; 0x2036 <ChipErase>
    1836:	8d ec       	ldi	r24, 0xCD	; 205
    1838:	97 e0       	ldi	r25, 0x07	; 7
    183a:	d2 d5       	rcall	.+2980   	; 0x23e0 <puts>
    183c:	8c ed       	ldi	r24, 0xDC	; 220
    183e:	97 e0       	ldi	r25, 0x07	; 7
    1840:	cf d5       	rcall	.+2974   	; 0x23e0 <puts>
    1842:	c7 01       	movw	r24, r14
    1844:	b6 01       	movw	r22, r12
    1846:	18 d4       	rcall	.+2096   	; 0x2078 <ProgramFlash>
    1848:	8b ee       	ldi	r24, 0xEB	; 235
    184a:	97 e0       	ldi	r25, 0x07	; 7
    184c:	c9 d5       	rcall	.+2962   	; 0x23e0 <puts>
    184e:	05 d3       	rcall	.+1546   	; 0x1e5a <ReadFlash>
    1850:	8a ef       	ldi	r24, 0xFA	; 250
    1852:	97 e0       	ldi	r25, 0x07	; 7
    1854:	c5 d5       	rcall	.+2954   	; 0x23e0 <puts>
    1856:	55 d3       	rcall	.+1706   	; 0x1f02 <VerifyFlash>
    1858:	ec 01       	movw	r28, r24
    185a:	00 97       	sbiw	r24, 0x00	; 0
    185c:	49 f0       	breq	.+18     	; 0x1870 <Program+0x72>
    185e:	87 e0       	ldi	r24, 0x07	; 7
    1860:	98 e0       	ldi	r25, 0x08	; 8
    1862:	be d5       	rcall	.+2940   	; 0x23e0 <puts>
    1864:	d5 d4       	rcall	.+2474   	; 0x2210 <ExitParallelProgrammingMode>
    1866:	a1 98       	cbi	0x14, 1	; 20
    1868:	a0 9a       	sbi	0x14, 0	; 20
    186a:	c1 e0       	ldi	r28, 0x01	; 1
    186c:	d0 e0       	ldi	r29, 0x00	; 0
    186e:	23 c0       	rjmp	.+70     	; 0x18b6 <Program+0xb8>
    1870:	8e e1       	ldi	r24, 0x1E	; 30
    1872:	98 e0       	ldi	r25, 0x08	; 8
    1874:	b5 d5       	rcall	.+2922   	; 0x23e0 <puts>
    1876:	cc d4       	rcall	.+2456   	; 0x2210 <ExitParallelProgrammingMode>
    1878:	a1 98       	cbi	0x14, 1	; 20
    187a:	a2 9a       	sbi	0x14, 2	; 20
    187c:	2f e7       	ldi	r18, 0x7F	; 127
    187e:	8a e1       	ldi	r24, 0x1A	; 26
    1880:	96 e0       	ldi	r25, 0x06	; 6
    1882:	21 50       	subi	r18, 0x01	; 1
    1884:	80 40       	sbci	r24, 0x00	; 0
    1886:	90 40       	sbci	r25, 0x00	; 0
    1888:	e1 f7       	brne	.-8      	; 0x1882 <Program+0x84>
    188a:	00 c0       	rjmp	.+0      	; 0x188c <Program+0x8e>
    188c:	00 00       	nop
    188e:	a2 98       	cbi	0x14, 2	; 20
    1890:	a0 9a       	sbi	0x14, 0	; 20
    1892:	11 c0       	rjmp	.+34     	; 0x18b6 <Program+0xb8>
    1894:	82 e3       	ldi	r24, 0x32	; 50
    1896:	98 e0       	ldi	r25, 0x08	; 8
    1898:	a3 d5       	rcall	.+2886   	; 0x23e0 <puts>
    189a:	ba d4       	rcall	.+2420   	; 0x2210 <ExitParallelProgrammingMode>
    189c:	a2 9a       	sbi	0x14, 2	; 20
    189e:	2f e7       	ldi	r18, 0x7F	; 127
    18a0:	8a e1       	ldi	r24, 0x1A	; 26
    18a2:	96 e0       	ldi	r25, 0x06	; 6
    18a4:	21 50       	subi	r18, 0x01	; 1
    18a6:	80 40       	sbci	r24, 0x00	; 0
    18a8:	90 40       	sbci	r25, 0x00	; 0
    18aa:	e1 f7       	brne	.-8      	; 0x18a4 <Program+0xa6>
    18ac:	00 c0       	rjmp	.+0      	; 0x18ae <Program+0xb0>
    18ae:	00 00       	nop
    18b0:	a1 98       	cbi	0x14, 1	; 20
    18b2:	a2 98       	cbi	0x14, 2	; 20
    18b4:	a0 9a       	sbi	0x14, 0	; 20
    18b6:	ce 01       	movw	r24, r28
    18b8:	df 91       	pop	r29
    18ba:	cf 91       	pop	r28
    18bc:	ff 90       	pop	r15
    18be:	ef 90       	pop	r14
    18c0:	df 90       	pop	r13
    18c2:	cf 90       	pop	r12
    18c4:	08 95       	ret

000018c6 <checkSum>:

int checkSum()
{
    18c6:	7f 92       	push	r7
    18c8:	8f 92       	push	r8
    18ca:	9f 92       	push	r9
    18cc:	af 92       	push	r10
    18ce:	bf 92       	push	r11
    18d0:	cf 92       	push	r12
    18d2:	df 92       	push	r13
    18d4:	ef 92       	push	r14
    18d6:	ff 92       	push	r15
    18d8:	0f 93       	push	r16
    18da:	1f 93       	push	r17
    18dc:	cf 93       	push	r28
    18de:	df 93       	push	r29
	resetRAMOffset(); 
    18e0:	ea de       	rcall	.-556    	; 0x16b6 <resetRAMOffset>
	uint8_t i = 0; 
	
	while(1)
	{
		hexRow = getHexRow();
		checkSumVal = 0; 
    18e2:	81 2c       	mov	r8, r1
	
		byteCount = (hexRow[BYTE_COUNT]);
		//Adding 4 bytes to account for the record type, high and low address, and data type 
		byteCount += 4; 

		for(i=1; i<=byteCount; i++)
    18e4:	99 24       	eor	r9, r9
    18e6:	93 94       	inc	r9
    18e8:	a1 2c       	mov	r10, r1
    18ea:	bb 24       	eor	r11, r11
    18ec:	b3 94       	inc	r11
		}
		
		//Calculate checksum by performing 2's compliment 
		
		checkSumVal = ~checkSumVal + 1;
		printf("\nCalculated Checksum: 0x%02x\n", checkSumVal);
    18ee:	0f 2e       	mov	r0, r31
    18f0:	f4 e6       	ldi	r31, 0x64	; 100
    18f2:	ef 2e       	mov	r14, r31
    18f4:	f8 e0       	ldi	r31, 0x08	; 8
    18f6:	ff 2e       	mov	r15, r31
    18f8:	f0 2d       	mov	r31, r0
		printf("Actual Checksum: 0x%02x\n", hexRow[byteCount + 1]); 
    18fa:	02 e8       	ldi	r16, 0x82	; 130
    18fc:	18 e0       	ldi	r17, 0x08	; 8
	uint8_t checkSumVal; 
	uint8_t i = 0; 
	
	while(1)
	{
		hexRow = getHexRow();
    18fe:	e0 de       	rcall	.-576    	; 0x16c0 <getHexRow>
    1900:	ec 01       	movw	r28, r24
		checkSumVal = 0; 
		byteCount = 0; 
	
		//printf("We're here now\n");
	
		if(hexRow[RECORD_TYPE] == TYPE_END_OF_FILE)
    1902:	8c 81       	ldd	r24, Y+4	; 0x04
    1904:	81 30       	cpi	r24, 0x01	; 1
    1906:	49 f4       	brne	.+18     	; 0x191a <checkSum+0x54>
		{
			printf("End of File!\n");
    1908:	86 e4       	ldi	r24, 0x46	; 70
    190a:	98 e0       	ldi	r25, 0x08	; 8
    190c:	69 d5       	rcall	.+2770   	; 0x23e0 <puts>
		printf("Actual Checksum: 0x%02x\n", hexRow[byteCount + 1]); 
		if(checkSumVal != hexRow[byteCount + 1])
			return 0;  	
	}
	
	printf("Checksum Passed!\n"); 
    190e:	83 e5       	ldi	r24, 0x53	; 83
    1910:	98 e0       	ldi	r25, 0x08	; 8
    1912:	66 d5       	rcall	.+2764   	; 0x23e0 <puts>
	return 1; 
    1914:	81 e0       	ldi	r24, 0x01	; 1
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	33 c0       	rjmp	.+102    	; 0x1980 <checkSum+0xba>
		{
			printf("End of File!\n");
			break;
		}
	
		byteCount = (hexRow[BYTE_COUNT]);
    191a:	c9 80       	ldd	r12, Y+1	; 0x01
    191c:	d1 2c       	mov	r13, r1
		//Adding 4 bytes to account for the record type, high and low address, and data type 
		byteCount += 4; 

		for(i=1; i<=byteCount; i++)
    191e:	c6 01       	movw	r24, r12
    1920:	04 96       	adiw	r24, 0x04	; 4
    1922:	29 2d       	mov	r18, r9
    1924:	3a 2d       	mov	r19, r10
    1926:	4b 2d       	mov	r20, r11
	uint8_t i = 0; 
	
	while(1)
	{
		hexRow = getHexRow();
		checkSumVal = 0; 
    1928:	58 2d       	mov	r21, r8
		//Adding 4 bytes to account for the record type, high and low address, and data type 
		byteCount += 4; 

		for(i=1; i<=byteCount; i++)
		{
			checkSumVal += hexRow[i];
    192a:	fe 01       	movw	r30, r28
    192c:	e2 0f       	add	r30, r18
    192e:	f3 1f       	adc	r31, r19
    1930:	20 81       	ld	r18, Z
    1932:	52 0f       	add	r21, r18
	
		byteCount = (hexRow[BYTE_COUNT]);
		//Adding 4 bytes to account for the record type, high and low address, and data type 
		byteCount += 4; 

		for(i=1; i<=byteCount; i++)
    1934:	4f 5f       	subi	r20, 0xFF	; 255
    1936:	24 2f       	mov	r18, r20
    1938:	30 e0       	ldi	r19, 0x00	; 0
    193a:	82 17       	cp	r24, r18
    193c:	93 07       	cpc	r25, r19
    193e:	a8 f7       	brcc	.-22     	; 0x192a <checkSum+0x64>
			//printf("Total Bytes: %d, i: %d, j: %d\n", totalBytes, i, j);
		}
		
		//Calculate checksum by performing 2's compliment 
		
		checkSumVal = ~checkSumVal + 1;
    1940:	75 2e       	mov	r7, r21
    1942:	71 94       	neg	r7
		printf("\nCalculated Checksum: 0x%02x\n", checkSumVal);
    1944:	1f 92       	push	r1
    1946:	7f 92       	push	r7
    1948:	ff 92       	push	r15
    194a:	ef 92       	push	r14
    194c:	33 d5       	rcall	.+2662   	; 0x23b4 <printf>
		printf("Actual Checksum: 0x%02x\n", hexRow[byteCount + 1]); 
    194e:	85 e0       	ldi	r24, 0x05	; 5
    1950:	c8 0e       	add	r12, r24
    1952:	d1 1c       	adc	r13, r1
    1954:	cc 0d       	add	r28, r12
    1956:	dd 1d       	adc	r29, r13
    1958:	88 81       	ld	r24, Y
    195a:	1f 92       	push	r1
    195c:	8f 93       	push	r24
    195e:	1f 93       	push	r17
    1960:	0f 93       	push	r16
    1962:	28 d5       	rcall	.+2640   	; 0x23b4 <printf>
		if(checkSumVal != hexRow[byteCount + 1])
    1964:	8d b7       	in	r24, 0x3d	; 61
    1966:	9e b7       	in	r25, 0x3e	; 62
    1968:	08 96       	adiw	r24, 0x08	; 8
    196a:	0f b6       	in	r0, 0x3f	; 63
    196c:	f8 94       	cli
    196e:	9e bf       	out	0x3e, r25	; 62
    1970:	0f be       	out	0x3f, r0	; 63
    1972:	8d bf       	out	0x3d, r24	; 61
    1974:	88 81       	ld	r24, Y
    1976:	87 15       	cp	r24, r7
    1978:	09 f4       	brne	.+2      	; 0x197c <checkSum+0xb6>
    197a:	c1 cf       	rjmp	.-126    	; 0x18fe <checkSum+0x38>
			return 0;  	
    197c:	80 e0       	ldi	r24, 0x00	; 0
    197e:	90 e0       	ldi	r25, 0x00	; 0
	}
	
	printf("Checksum Passed!\n"); 
	return 1; 
}
    1980:	df 91       	pop	r29
    1982:	cf 91       	pop	r28
    1984:	1f 91       	pop	r17
    1986:	0f 91       	pop	r16
    1988:	ff 90       	pop	r15
    198a:	ef 90       	pop	r14
    198c:	df 90       	pop	r13
    198e:	cf 90       	pop	r12
    1990:	bf 90       	pop	r11
    1992:	af 90       	pop	r10
    1994:	9f 90       	pop	r9
    1996:	8f 90       	pop	r8
    1998:	7f 90       	pop	r7
    199a:	08 95       	ret

0000199c <compressFile>:

//Converts ASCII to Hex in external RAM 
//Length should be the transmission length given from the Wi-Fi module 
int compressFile(uint16_t length)
{
    199c:	af 92       	push	r10
    199e:	bf 92       	push	r11
    19a0:	df 92       	push	r13
    19a2:	ef 92       	push	r14
    19a4:	ff 92       	push	r15
    19a6:	1f 93       	push	r17
    19a8:	cf 93       	push	r28
    19aa:	df 93       	push	r29
    19ac:	7c 01       	movw	r14, r24
	uint8_t upperNibble; 
	uint8_t lowerNibble; 
	uint8_t hexVal; 
	uint16_t j = 0; 
	
	printf("Length: %d\n", length); 
    19ae:	ff 92       	push	r15
    19b0:	8f 93       	push	r24
    19b2:	85 e9       	ldi	r24, 0x95	; 149
    19b4:	92 e0       	ldi	r25, 0x02	; 2
    19b6:	9f 93       	push	r25
    19b8:	8f 93       	push	r24
    19ba:	fc d4       	rcall	.+2552   	; 0x23b4 <printf>
	
	for(int i=0; i<length; i++)
    19bc:	0f 90       	pop	r0
    19be:	0f 90       	pop	r0
    19c0:	0f 90       	pop	r0
    19c2:	0f 90       	pop	r0
    19c4:	e1 14       	cp	r14, r1
    19c6:	f1 04       	cpc	r15, r1
    19c8:	09 f4       	brne	.+2      	; 0x19cc <compressFile+0x30>
    19ca:	3e c0       	rjmp	.+124    	; 0x1a48 <compressFile+0xac>
    19cc:	c0 e0       	ldi	r28, 0x00	; 0
    19ce:	d0 e0       	ldi	r29, 0x00	; 0
{
	uint8_t buff;
	uint8_t upperNibble; 
	uint8_t lowerNibble; 
	uint8_t hexVal; 
	uint16_t j = 0; 
    19d0:	a1 2c       	mov	r10, r1
    19d2:	b1 2c       	mov	r11, r1
	
	printf("Length: %d\n", length); 
	
	for(int i=0; i<length; i++)
	{
		upperNibble = RAMReadByte(HEX_FILE_ADDRESS + i);
    19d4:	be 01       	movw	r22, r28
    19d6:	88 27       	eor	r24, r24
    19d8:	77 fd       	sbrc	r23, 7
    19da:	80 95       	com	r24
    19dc:	98 2f       	mov	r25, r24
    19de:	2b da       	rcall	.-2986   	; 0xe36 <RAMReadByte>
    19e0:	18 2f       	mov	r17, r24
		//If it's a colon, leave it alone as it is the start code 
		if(upperNibble == ':'){
    19e2:	8a 33       	cpi	r24, 0x3A	; 58
    19e4:	49 f4       	brne	.+18     	; 0x19f8 <compressFile+0x5c>
			RAMWriteByte(0x3A, HEX_FILE_ADDRESS + j);
    19e6:	a5 01       	movw	r20, r10
    19e8:	60 e0       	ldi	r22, 0x00	; 0
    19ea:	70 e0       	ldi	r23, 0x00	; 0
    19ec:	8a e3       	ldi	r24, 0x3A	; 58
    19ee:	08 da       	rcall	.-3056   	; 0xe00 <RAMWriteByte>
			j++;
    19f0:	8f ef       	ldi	r24, 0xFF	; 255
    19f2:	a8 1a       	sub	r10, r24
    19f4:	b8 0a       	sbc	r11, r24
			continue;
    19f6:	24 c0       	rjmp	.+72     	; 0x1a40 <compressFile+0xa4>
		}
		//Discard any carriage returns or line feeds 
		else if(upperNibble == '\r' || upperNibble == '\n'){
    19f8:	8d 30       	cpi	r24, 0x0D	; 13
    19fa:	11 f1       	breq	.+68     	; 0x1a40 <compressFile+0xa4>
    19fc:	8a 30       	cpi	r24, 0x0A	; 10
    19fe:	01 f1       	breq	.+64     	; 0x1a40 <compressFile+0xa4>
			//i++; 
			continue; 
		}
		
		lowerNibble = RAMReadByte(HEX_FILE_ADDRESS + 1 + i);
    1a00:	21 96       	adiw	r28, 0x01	; 1
    1a02:	be 01       	movw	r22, r28
    1a04:	88 27       	eor	r24, r24
    1a06:	77 fd       	sbrc	r23, 7
    1a08:	80 95       	com	r24
    1a0a:	98 2f       	mov	r25, r24
    1a0c:	14 da       	rcall	.-3032   	; 0xe36 <RAMReadByte>
		//if(i<600)
			//printf("%d...Upper: 0x%02x, Lower: 0x%02x\n", i, upperNibble, lowerNibble);
		
		if(upperNibble > 0x39)
    1a0e:	1a 33       	cpi	r17, 0x3A	; 58
    1a10:	18 f0       	brcs	.+6      	; 0x1a18 <compressFile+0x7c>
			upperNibble -= 0x37; 
    1a12:	99 ec       	ldi	r25, 0xC9	; 201
    1a14:	91 0f       	add	r25, r17
    1a16:	02 c0       	rjmp	.+4      	; 0x1a1c <compressFile+0x80>
		else
			upperNibble &= 0x0F;
    1a18:	91 2f       	mov	r25, r17
    1a1a:	9f 70       	andi	r25, 0x0F	; 15
			
		upperNibble <<= 4;  
    1a1c:	d9 2e       	mov	r13, r25
    1a1e:	dd 0c       	add	r13, r13
    1a20:	dd 0c       	add	r13, r13
    1a22:	dd 0c       	add	r13, r13
    1a24:	dd 0c       	add	r13, r13
		hexVal = upperNibble; 
		
		if(lowerNibble > 0x39)
    1a26:	8a 33       	cpi	r24, 0x3A	; 58
    1a28:	10 f0       	brcs	.+4      	; 0x1a2e <compressFile+0x92>
			lowerNibble -= 0x37; 
    1a2a:	87 53       	subi	r24, 0x37	; 55
    1a2c:	01 c0       	rjmp	.+2      	; 0x1a30 <compressFile+0x94>
		else
			lowerNibble &= 0x0F;
    1a2e:	8f 70       	andi	r24, 0x0F	; 15
		hexVal |= lowerNibble; 
		//if(i<600)
			//printf("%d...Hex: 0x%02x\n\n", j, hexVal);
		
		//Backfill the already converted ASCII value's addresses with the new hex value 
		RAMWriteByte(hexVal, HEX_FILE_ADDRESS + j); 
    1a30:	a5 01       	movw	r20, r10
    1a32:	60 e0       	ldi	r22, 0x00	; 0
    1a34:	70 e0       	ldi	r23, 0x00	; 0
    1a36:	8d 29       	or	r24, r13
    1a38:	e3 d9       	rcall	.-3130   	; 0xe00 <RAMWriteByte>
		j++;
    1a3a:	8f ef       	ldi	r24, 0xFF	; 255
    1a3c:	a8 1a       	sub	r10, r24
    1a3e:	b8 0a       	sbc	r11, r24
	uint8_t hexVal; 
	uint16_t j = 0; 
	
	printf("Length: %d\n", length); 
	
	for(int i=0; i<length; i++)
    1a40:	21 96       	adiw	r28, 0x01	; 1
    1a42:	ce 15       	cp	r28, r14
    1a44:	df 05       	cpc	r29, r15
    1a46:	30 f2       	brcs	.-116    	; 0x19d4 <compressFile+0x38>
		//hence why the for loop does not have i+=2 
		i++;  
	}
	
	return 1; 
    1a48:	81 e0       	ldi	r24, 0x01	; 1
    1a4a:	90 e0       	ldi	r25, 0x00	; 0
    1a4c:	df 91       	pop	r29
    1a4e:	cf 91       	pop	r28
    1a50:	1f 91       	pop	r17
    1a52:	ff 90       	pop	r15
    1a54:	ef 90       	pop	r14
    1a56:	df 90       	pop	r13
    1a58:	bf 90       	pop	r11
    1a5a:	af 90       	pop	r10
    1a5c:	08 95       	ret

00001a5e <ProgInit>:


void ProgInit(void)
{
	//SPI_Switching_Circuitry_Init(); 
	SPI_FPGA_Init();
    1a5e:	41 d9       	rcall	.-3454   	; 0xce2 <SPI_FPGA_Init>
	
	voltageControlInit();
    1a60:	ee da       	rcall	.-2596   	; 0x103e <voltageControlInit>
	setVpp(VPP_12V);
    1a62:	81 e0       	ldi	r24, 0x01	; 1
    1a64:	0c db       	rcall	.-2536   	; 0x107e <setVpp>
	setVcc(VCC_5V);
    1a66:	84 e0       	ldi	r24, 0x04	; 4
    1a68:	fc da       	rcall	.-2568   	; 0x1062 <setVcc>
	setVLogic(VL_5V);
    1a6a:	86 e0       	ldi	r24, 0x06	; 6
    1a6c:	1a db       	rcall	.-2508   	; 0x10a2 <setVLogic>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1a6e:	8f e0       	ldi	r24, 0x0F	; 15
    1a70:	97 e2       	ldi	r25, 0x27	; 39
    1a72:	01 97       	sbiw	r24, 0x01	; 1
    1a74:	f1 f7       	brne	.-4      	; 0x1a72 <ProgInit+0x14>
    1a76:	00 c0       	rjmp	.+0      	; 0x1a78 <ProgInit+0x1a>
    1a78:	00 00       	nop
	_delay_ms(5);
	enableVccRegulator();
    1a7a:	ef da       	rcall	.-2594   	; 0x105a <enableVccRegulator>
	enableVLogic();
    1a7c:	0e db       	rcall	.-2532   	; 0x109a <enableVLogic>
    1a7e:	8f e4       	ldi	r24, 0x4F	; 79
    1a80:	93 ec       	ldi	r25, 0xC3	; 195
    1a82:	01 97       	sbiw	r24, 0x01	; 1
    1a84:	f1 f7       	brne	.-4      	; 0x1a82 <ProgInit+0x24>
    1a86:	00 c0       	rjmp	.+0      	; 0x1a88 <ProgInit+0x2a>
    1a88:	00 00       	nop
	_delay_ms(25);
	//Setting up Control lines
	CONTROL_DDR |= ( (1<<XTAL1) | (1<<OE) | (1<<WR) | (1<<BS1_PAGEL) | (1<<XA0) | (1<<XA1_BS2) | (1<<PAGEL) | (1<<BS2));
    1a8a:	8a b1       	in	r24, 0x0a	; 10
    1a8c:	8f ef       	ldi	r24, 0xFF	; 255
    1a8e:	8a b9       	out	0x0a, r24	; 10
	RDY_BSY_DDR &= ~(1<<RDY_BSY);
    1a90:	38 98       	cbi	0x07, 0	; 7
	DATA_DDR = 0xFF;
    1a92:	80 93 0a 01 	sts	0x010A, r24
	
	//LED_DDR |= ((1<<LED_Green) | (1<<LED_Yellow) | (1<<LED_Red));
	LED_PORT &= ~(1<<LED_Green);
    1a96:	a0 98       	cbi	0x14, 0	; 20
	LED_PORT |= (1<<LED_Yellow);
    1a98:	a1 9a       	sbi	0x14, 1	; 20
    1a9a:	08 95       	ret

00001a9c <ApplyPullDowns>:
}

void ApplyPullDowns(void)
{
	SPI_Switching_Circuitry_Init();
    1a9c:	d1 d9       	rcall	.-3166   	; 0xe40 <SPI_Switching_Circuitry_Init>
	
	SPI_Switching_Circuitry_Write(0xFF); //Pull Downs
    1a9e:	8f ef       	ldi	r24, 0xFF	; 255
    1aa0:	dd d9       	rcall	.-3142   	; 0xe5c <SPI_Switching_Circuitry_Write>
	SPI_Switching_Circuitry_Write(0xFF);
    1aa2:	8f ef       	ldi	r24, 0xFF	; 255
    1aa4:	db d9       	rcall	.-3146   	; 0xe5c <SPI_Switching_Circuitry_Write>
	SPI_Switching_Circuitry_Write(0xFF);
    1aa6:	8f ef       	ldi	r24, 0xFF	; 255
    1aa8:	d9 d9       	rcall	.-3150   	; 0xe5c <SPI_Switching_Circuitry_Write>
	SPI_Switching_Circuitry_Write(0xFF);
    1aaa:	8f ef       	ldi	r24, 0xFF	; 255
    1aac:	d7 d9       	rcall	.-3154   	; 0xe5c <SPI_Switching_Circuitry_Write>
	SPI_Switching_Circuitry_Write(0xFF);
    1aae:	8f ef       	ldi	r24, 0xFF	; 255
    1ab0:	d5 d9       	rcall	.-3158   	; 0xe5c <SPI_Switching_Circuitry_Write>
	
	SPI_Switching_Circuitry_Write(0x00); //GND
    1ab2:	80 e0       	ldi	r24, 0x00	; 0
    1ab4:	d3 d9       	rcall	.-3162   	; 0xe5c <SPI_Switching_Circuitry_Write>
	SPI_Switching_Circuitry_Write(0x00);
    1ab6:	80 e0       	ldi	r24, 0x00	; 0
    1ab8:	d1 d9       	rcall	.-3166   	; 0xe5c <SPI_Switching_Circuitry_Write>
	SPI_Switching_Circuitry_Write(0x00);
    1aba:	80 e0       	ldi	r24, 0x00	; 0
    1abc:	cf d9       	rcall	.-3170   	; 0xe5c <SPI_Switching_Circuitry_Write>
	SPI_Switching_Circuitry_Write(0x00);
    1abe:	80 e0       	ldi	r24, 0x00	; 0
    1ac0:	cd d9       	rcall	.-3174   	; 0xe5c <SPI_Switching_Circuitry_Write>
	SPI_Switching_Circuitry_Write(0x00);
    1ac2:	80 e0       	ldi	r24, 0x00	; 0
    1ac4:	cb d9       	rcall	.-3178   	; 0xe5c <SPI_Switching_Circuitry_Write>
	
	SPI_Switching_Circuitry_Write(0x00); //Pull Ups
    1ac6:	80 e0       	ldi	r24, 0x00	; 0
    1ac8:	c9 d9       	rcall	.-3182   	; 0xe5c <SPI_Switching_Circuitry_Write>
	SPI_Switching_Circuitry_Write(0x00);
    1aca:	80 e0       	ldi	r24, 0x00	; 0
    1acc:	c7 d9       	rcall	.-3186   	; 0xe5c <SPI_Switching_Circuitry_Write>
	SPI_Switching_Circuitry_Write(0x00);
    1ace:	80 e0       	ldi	r24, 0x00	; 0
    1ad0:	c5 d9       	rcall	.-3190   	; 0xe5c <SPI_Switching_Circuitry_Write>
	SPI_Switching_Circuitry_Write(0x00);
    1ad2:	80 e0       	ldi	r24, 0x00	; 0
    1ad4:	c3 d9       	rcall	.-3194   	; 0xe5c <SPI_Switching_Circuitry_Write>
	SPI_Switching_Circuitry_Write(0x00);
    1ad6:	80 e0       	ldi	r24, 0x00	; 0
    1ad8:	c1 d9       	rcall	.-3198   	; 0xe5c <SPI_Switching_Circuitry_Write>
	
	SPI_Switching_Circuitry_Write(0x00); //VCC
    1ada:	80 e0       	ldi	r24, 0x00	; 0
    1adc:	bf d9       	rcall	.-3202   	; 0xe5c <SPI_Switching_Circuitry_Write>
	SPI_Switching_Circuitry_Write(0x00);
    1ade:	80 e0       	ldi	r24, 0x00	; 0
    1ae0:	bd d9       	rcall	.-3206   	; 0xe5c <SPI_Switching_Circuitry_Write>
	SPI_Switching_Circuitry_Write(0x00);
    1ae2:	80 e0       	ldi	r24, 0x00	; 0
    1ae4:	bb d9       	rcall	.-3210   	; 0xe5c <SPI_Switching_Circuitry_Write>
	SPI_Switching_Circuitry_Write(0x00);
    1ae6:	80 e0       	ldi	r24, 0x00	; 0
    1ae8:	b9 d9       	rcall	.-3214   	; 0xe5c <SPI_Switching_Circuitry_Write>
	SPI_Switching_Circuitry_Write(0x00);
    1aea:	80 e0       	ldi	r24, 0x00	; 0
    1aec:	b7 d9       	rcall	.-3218   	; 0xe5c <SPI_Switching_Circuitry_Write>
	
	SPI_Switching_Circuitry_Write(0x00); //VPP
    1aee:	80 e0       	ldi	r24, 0x00	; 0
    1af0:	b5 d9       	rcall	.-3222   	; 0xe5c <SPI_Switching_Circuitry_Write>
	SPI_Switching_Circuitry_Write(0x00);
    1af2:	80 e0       	ldi	r24, 0x00	; 0
    1af4:	b3 d9       	rcall	.-3226   	; 0xe5c <SPI_Switching_Circuitry_Write>
	SPI_Switching_Circuitry_Write(0x00);
    1af6:	80 e0       	ldi	r24, 0x00	; 0
    1af8:	b1 d9       	rcall	.-3230   	; 0xe5c <SPI_Switching_Circuitry_Write>
	SPI_Switching_Circuitry_Write(0x00);
    1afa:	80 e0       	ldi	r24, 0x00	; 0
    1afc:	af d9       	rcall	.-3234   	; 0xe5c <SPI_Switching_Circuitry_Write>
	SPI_Switching_Circuitry_Write(0x00);
    1afe:	80 e0       	ldi	r24, 0x00	; 0
    1b00:	ad d9       	rcall	.-3238   	; 0xe5c <SPI_Switching_Circuitry_Write>
	
	SR_CNTRL_PORT |= (1<<SRCS);
    1b02:	e5 e0       	ldi	r30, 0x05	; 5
    1b04:	f1 e0       	ldi	r31, 0x01	; 1
    1b06:	80 81       	ld	r24, Z
    1b08:	80 61       	ori	r24, 0x10	; 16
    1b0a:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1b0c:	85 e3       	ldi	r24, 0x35	; 53
    1b0e:	8a 95       	dec	r24
    1b10:	f1 f7       	brne	.-4      	; 0x1b0e <ApplyPullDowns+0x72>
    1b12:	00 00       	nop
	_delay_us(20);
	SR_CNTRL_PORT &= ~(1<<SRCS);
    1b14:	80 81       	ld	r24, Z
    1b16:	8f 7e       	andi	r24, 0xEF	; 239
    1b18:	80 83       	st	Z, r24
    1b1a:	08 95       	ret

00001b1c <LoadCommand>:
}

void LoadCommand(char command)
{
	//A: Load Command "Program Flash"
	CONTROL_PORT |= 1<<XA1_BS2;
    1b1c:	5d 9a       	sbi	0x0b, 5	; 11
	CONTROL_PORT &= ~(1<<XA0);
    1b1e:	5c 98       	cbi	0x0b, 4	; 11
	CONTROL_PORT &= ~(1<<BS1_PAGEL);
    1b20:	5b 98       	cbi	0x0b, 3	; 11
	DATA_PORT = command;
    1b22:	80 93 0b 01 	sts	0x010B, r24
    1b26:	82 e4       	ldi	r24, 0x42	; 66
    1b28:	8a 95       	dec	r24
    1b2a:	f1 f7       	brne	.-4      	; 0x1b28 <LoadCommand+0xc>
    1b2c:	00 c0       	rjmp	.+0      	; 0x1b2e <LoadCommand+0x12>
	_delay_us(25);
	CONTROL_PORT |= 1<<XTAL1;
    1b2e:	58 9a       	sbi	0x0b, 0	; 11
    1b30:	82 e4       	ldi	r24, 0x42	; 66
    1b32:	8a 95       	dec	r24
    1b34:	f1 f7       	brne	.-4      	; 0x1b32 <LoadCommand+0x16>
    1b36:	00 c0       	rjmp	.+0      	; 0x1b38 <LoadCommand+0x1c>
	_delay_us(25);
	CONTROL_PORT &= ~(1<<XTAL1);
    1b38:	58 98       	cbi	0x0b, 0	; 11
    1b3a:	82 e4       	ldi	r24, 0x42	; 66
    1b3c:	8a 95       	dec	r24
    1b3e:	f1 f7       	brne	.-4      	; 0x1b3c <LoadCommand+0x20>
    1b40:	00 c0       	rjmp	.+0      	; 0x1b42 <LoadCommand+0x26>
    1b42:	08 95       	ret

00001b44 <WriteWord>:
}

void WriteWord(uint16_t data)
{
	//C: Load Data Low Byte
	CONTROL_PORT &= ~(1<<XA1_BS2);
    1b44:	5d 98       	cbi	0x0b, 5	; 11
	CONTROL_PORT |= 1<<XA0;
    1b46:	5c 9a       	sbi	0x0b, 4	; 11
	DATA_PORT = data & 0x00FF; 
    1b48:	80 93 0b 01 	sts	0x010B, r24
    1b4c:	82 e4       	ldi	r24, 0x42	; 66
    1b4e:	8a 95       	dec	r24
    1b50:	f1 f7       	brne	.-4      	; 0x1b4e <WriteWord+0xa>
    1b52:	00 c0       	rjmp	.+0      	; 0x1b54 <WriteWord+0x10>
	_delay_us(25);
	CONTROL_PORT |= 1<<XTAL1;
    1b54:	58 9a       	sbi	0x0b, 0	; 11
    1b56:	82 e4       	ldi	r24, 0x42	; 66
    1b58:	8a 95       	dec	r24
    1b5a:	f1 f7       	brne	.-4      	; 0x1b58 <WriteWord+0x14>
    1b5c:	00 c0       	rjmp	.+0      	; 0x1b5e <WriteWord+0x1a>
	_delay_us(25);
	CONTROL_PORT &= ~(1<<XTAL1);
    1b5e:	58 98       	cbi	0x0b, 0	; 11
    1b60:	82 e4       	ldi	r24, 0x42	; 66
    1b62:	8a 95       	dec	r24
    1b64:	f1 f7       	brne	.-4      	; 0x1b62 <WriteWord+0x1e>
    1b66:	00 c0       	rjmp	.+0      	; 0x1b68 <WriteWord+0x24>
	_delay_us(25);
	
	//D: Load Data High Byte
	CONTROL_PORT |= 1<<BS1_PAGEL;
    1b68:	5b 9a       	sbi	0x0b, 3	; 11
	CONTROL_PORT &= ~(1<<XA1_BS2);
    1b6a:	5d 98       	cbi	0x0b, 5	; 11
	CONTROL_PORT |= 1<<XA0;
    1b6c:	5c 9a       	sbi	0x0b, 4	; 11
	DATA_PORT = ((data & 0xFF00) >> 8); 
    1b6e:	90 93 0b 01 	sts	0x010B, r25
    1b72:	82 e4       	ldi	r24, 0x42	; 66
    1b74:	8a 95       	dec	r24
    1b76:	f1 f7       	brne	.-4      	; 0x1b74 <WriteWord+0x30>
    1b78:	00 c0       	rjmp	.+0      	; 0x1b7a <WriteWord+0x36>
	_delay_us(25);
	CONTROL_PORT |= 1<<XTAL1;
    1b7a:	58 9a       	sbi	0x0b, 0	; 11
    1b7c:	82 e4       	ldi	r24, 0x42	; 66
    1b7e:	8a 95       	dec	r24
    1b80:	f1 f7       	brne	.-4      	; 0x1b7e <WriteWord+0x3a>
    1b82:	00 c0       	rjmp	.+0      	; 0x1b84 <WriteWord+0x40>
	_delay_us(25);
	CONTROL_PORT &= ~(1<<XTAL1);
    1b84:	58 98       	cbi	0x0b, 0	; 11
    1b86:	82 e4       	ldi	r24, 0x42	; 66
    1b88:	8a 95       	dec	r24
    1b8a:	f1 f7       	brne	.-4      	; 0x1b88 <WriteWord+0x44>
    1b8c:	00 c0       	rjmp	.+0      	; 0x1b8e <WriteWord+0x4a>
    1b8e:	08 95       	ret

00001b90 <LoadLowAddress>:
}

void LoadLowAddress(uint16_t address)
{
	//B: Load Address Low Byte
	CONTROL_PORT &= ~(1<<XA1_BS2);
    1b90:	5d 98       	cbi	0x0b, 5	; 11
	CONTROL_PORT &= ~(1<<XA0);
    1b92:	5c 98       	cbi	0x0b, 4	; 11
	CONTROL_PORT &= ~(1<<BS1_PAGEL);
    1b94:	5b 98       	cbi	0x0b, 3	; 11
	CONTROL_PORT &= ~(1<<BS2);
    1b96:	5f 98       	cbi	0x0b, 7	; 11
	DATA_PORT = (address & 0x00FF);
    1b98:	80 93 0b 01 	sts	0x010B, r24
    1b9c:	82 e4       	ldi	r24, 0x42	; 66
    1b9e:	8a 95       	dec	r24
    1ba0:	f1 f7       	brne	.-4      	; 0x1b9e <LoadLowAddress+0xe>
    1ba2:	00 c0       	rjmp	.+0      	; 0x1ba4 <LoadLowAddress+0x14>
	_delay_us(25);
	CONTROL_PORT |= 1<<XTAL1;
    1ba4:	58 9a       	sbi	0x0b, 0	; 11
    1ba6:	82 e4       	ldi	r24, 0x42	; 66
    1ba8:	8a 95       	dec	r24
    1baa:	f1 f7       	brne	.-4      	; 0x1ba8 <LoadLowAddress+0x18>
    1bac:	00 c0       	rjmp	.+0      	; 0x1bae <LoadLowAddress+0x1e>
	_delay_us(25);
	CONTROL_PORT &= ~(1<<XTAL1);
    1bae:	58 98       	cbi	0x0b, 0	; 11
    1bb0:	82 e4       	ldi	r24, 0x42	; 66
    1bb2:	8a 95       	dec	r24
    1bb4:	f1 f7       	brne	.-4      	; 0x1bb2 <LoadLowAddress+0x22>
    1bb6:	00 c0       	rjmp	.+0      	; 0x1bb8 <LoadLowAddress+0x28>
    1bb8:	08 95       	ret

00001bba <LoadHighAddress>:
}

void LoadHighAddress(uint16_t address)
{
	//F: Load Address High Byte
	CONTROL_PORT &= ~(1<<XA1_BS2);
    1bba:	5d 98       	cbi	0x0b, 5	; 11
	CONTROL_PORT &= ~(1<<XA0);
    1bbc:	5c 98       	cbi	0x0b, 4	; 11
	CONTROL_PORT &= ~(1<<BS2);
    1bbe:	5f 98       	cbi	0x0b, 7	; 11
	CONTROL_PORT |= 1<<BS1_PAGEL;
    1bc0:	5b 9a       	sbi	0x0b, 3	; 11
	DATA_PORT = ((address & 0xFF00) >> 8);
    1bc2:	90 93 0b 01 	sts	0x010B, r25
    1bc6:	82 e4       	ldi	r24, 0x42	; 66
    1bc8:	8a 95       	dec	r24
    1bca:	f1 f7       	brne	.-4      	; 0x1bc8 <LoadHighAddress+0xe>
    1bcc:	00 c0       	rjmp	.+0      	; 0x1bce <LoadHighAddress+0x14>
	_delay_us(25);
	CONTROL_PORT |= 1<<XTAL1;
    1bce:	58 9a       	sbi	0x0b, 0	; 11
    1bd0:	82 e4       	ldi	r24, 0x42	; 66
    1bd2:	8a 95       	dec	r24
    1bd4:	f1 f7       	brne	.-4      	; 0x1bd2 <LoadHighAddress+0x18>
    1bd6:	00 c0       	rjmp	.+0      	; 0x1bd8 <LoadHighAddress+0x1e>
	_delay_us(25);
	CONTROL_PORT &= ~(1<<XTAL1);
    1bd8:	58 98       	cbi	0x0b, 0	; 11
    1bda:	82 e4       	ldi	r24, 0x42	; 66
    1bdc:	8a 95       	dec	r24
    1bde:	f1 f7       	brne	.-4      	; 0x1bdc <LoadHighAddress+0x22>
    1be0:	00 c0       	rjmp	.+0      	; 0x1be2 <LoadHighAddress+0x28>
    1be2:	08 95       	ret

00001be4 <LatchData>:
	_delay_us(25);
}

void LatchData(void)
{
	CONTROL_PORT |= (1<<BS1_PAGEL);
    1be4:	5b 9a       	sbi	0x0b, 3	; 11
    1be6:	82 e4       	ldi	r24, 0x42	; 66
    1be8:	8a 95       	dec	r24
    1bea:	f1 f7       	brne	.-4      	; 0x1be8 <LatchData+0x4>
    1bec:	00 c0       	rjmp	.+0      	; 0x1bee <LatchData+0xa>
	_delay_us(25);
	CONTROL_PORT |= (1<<PAGEL);
    1bee:	5e 9a       	sbi	0x0b, 6	; 11
    1bf0:	82 e4       	ldi	r24, 0x42	; 66
    1bf2:	8a 95       	dec	r24
    1bf4:	f1 f7       	brne	.-4      	; 0x1bf2 <LatchData+0xe>
    1bf6:	00 c0       	rjmp	.+0      	; 0x1bf8 <LatchData+0x14>
	_delay_us(25);
	CONTROL_PORT &= ~(1<<PAGEL);
    1bf8:	5e 98       	cbi	0x0b, 6	; 11
    1bfa:	82 e4       	ldi	r24, 0x42	; 66
    1bfc:	8a 95       	dec	r24
    1bfe:	f1 f7       	brne	.-4      	; 0x1bfc <LatchData+0x18>
    1c00:	00 c0       	rjmp	.+0      	; 0x1c02 <LatchData+0x1e>
    1c02:	08 95       	ret

00001c04 <ProgramPage>:
}

void ProgramPage(void)
{
	//G: Program Page
	CONTROL_PORT &= ~(1<<BS2);
    1c04:	5f 98       	cbi	0x0b, 7	; 11
	CONTROL_PORT &= ~(1<<BS1_PAGEL);
    1c06:	5b 98       	cbi	0x0b, 3	; 11
	CONTROL_PORT &= ~(1<<WR);
    1c08:	5a 98       	cbi	0x0b, 2	; 11
    1c0a:	82 e4       	ldi	r24, 0x42	; 66
    1c0c:	8a 95       	dec	r24
    1c0e:	f1 f7       	brne	.-4      	; 0x1c0c <ProgramPage+0x8>
    1c10:	00 c0       	rjmp	.+0      	; 0x1c12 <ProgramPage+0xe>
	_delay_us(25);
	CONTROL_PORT |= 1<<WR;
    1c12:	5a 9a       	sbi	0x0b, 2	; 11
    1c14:	82 e4       	ldi	r24, 0x42	; 66
    1c16:	8a 95       	dec	r24
    1c18:	f1 f7       	brne	.-4      	; 0x1c16 <ProgramPage+0x12>
    1c1a:	00 c0       	rjmp	.+0      	; 0x1c1c <ProgramPage+0x18>
	_delay_us(25);
	while(!(RDY_BSY_In & (1<<RDY_BSY)));
    1c1c:	30 9b       	sbis	0x06, 0	; 6
    1c1e:	fe cf       	rjmp	.-4      	; 0x1c1c <ProgramPage+0x18>
}
    1c20:	08 95       	ret

00001c22 <EndPageProgramming>:

void EndPageProgramming(void)
{
	//I: End Page Programming
	CONTROL_PORT |= 1<<XA1_BS2;
    1c22:	5d 9a       	sbi	0x0b, 5	; 11
	CONTROL_PORT &= ~(1<<XA0);
    1c24:	5c 98       	cbi	0x0b, 4	; 11
	DATA_PORT = 0x00;
    1c26:	10 92 0b 01 	sts	0x010B, r1
    1c2a:	82 e4       	ldi	r24, 0x42	; 66
    1c2c:	8a 95       	dec	r24
    1c2e:	f1 f7       	brne	.-4      	; 0x1c2c <EndPageProgramming+0xa>
    1c30:	00 c0       	rjmp	.+0      	; 0x1c32 <EndPageProgramming+0x10>
	_delay_us(25);
	CONTROL_PORT |= 1<<XTAL1;
    1c32:	58 9a       	sbi	0x0b, 0	; 11
    1c34:	82 e4       	ldi	r24, 0x42	; 66
    1c36:	8a 95       	dec	r24
    1c38:	f1 f7       	brne	.-4      	; 0x1c36 <EndPageProgramming+0x14>
    1c3a:	00 c0       	rjmp	.+0      	; 0x1c3c <EndPageProgramming+0x1a>
	_delay_us(25);
	CONTROL_PORT &= ~(1<<XTAL1);
    1c3c:	58 98       	cbi	0x0b, 0	; 11
    1c3e:	82 e4       	ldi	r24, 0x42	; 66
    1c40:	8a 95       	dec	r24
    1c42:	f1 f7       	brne	.-4      	; 0x1c40 <EndPageProgramming+0x1e>
    1c44:	00 c0       	rjmp	.+0      	; 0x1c46 <EndPageProgramming+0x24>
    1c46:	08 95       	ret

00001c48 <EnableProgMode>:
	_delay_us(25);
}

void EnableProgMode(uint32_t TargetMicrocontroller)
{
    1c48:	cf 92       	push	r12
    1c4a:	df 92       	push	r13
    1c4c:	ef 92       	push	r14
    1c4e:	ff 92       	push	r15
    1c50:	6b 01       	movw	r12, r22
    1c52:	7c 01       	movw	r14, r24
	CONTROL_PORT &= ~(1<<XTAL1);
    1c54:	58 98       	cbi	0x0b, 0	; 11
	CONTROL_PORT &= ~(1<<XA1_BS2 | 1<<XA0 | 1<<BS1_PAGEL | 1<<WR | PAGEL);
    1c56:	8b b1       	in	r24, 0x0b	; 11
    1c58:	81 7c       	andi	r24, 0xC1	; 193
    1c5a:	8b b9       	out	0x0b, r24	; 11
	DATA_PORT = 0x00;
    1c5c:	10 92 0b 01 	sts	0x010B, r1
	CONTROL_PORT = 0x00;
    1c60:	1b b8       	out	0x0b, r1	; 11
	
	WR_PORT &= ~(1<<FPGAWR);
    1c62:	e5 e0       	ldi	r30, 0x05	; 5
    1c64:	f1 e0       	ldi	r31, 0x01	; 1
    1c66:	80 81       	ld	r24, Z
    1c68:	8b 7f       	andi	r24, 0xFB	; 251
    1c6a:	80 83       	st	Z, r24
	FPGA_Write(TargetMicrocontroller);
    1c6c:	c7 01       	movw	r24, r14
    1c6e:	b6 01       	movw	r22, r12
    1c70:	47 d8       	rcall	.-3954   	; 0xd00 <FPGA_Write>
	
	switch (TargetMicrocontroller)
    1c72:	8a e0       	ldi	r24, 0x0A	; 10
    1c74:	c8 16       	cp	r12, r24
    1c76:	81 e9       	ldi	r24, 0x91	; 145
    1c78:	d8 06       	cpc	r13, r24
    1c7a:	8e e1       	ldi	r24, 0x1E	; 30
    1c7c:	e8 06       	cpc	r14, r24
    1c7e:	f1 04       	cpc	r15, r1
    1c80:	49 f0       	breq	.+18     	; 0x1c94 <EnableProgMode+0x4c>
    1c82:	91 e1       	ldi	r25, 0x11	; 17
    1c84:	c9 16       	cp	r12, r25
    1c86:	95 e9       	ldi	r25, 0x95	; 149
    1c88:	d9 06       	cpc	r13, r25
    1c8a:	9e e1       	ldi	r25, 0x1E	; 30
    1c8c:	e9 06       	cpc	r14, r25
    1c8e:	f1 04       	cpc	r15, r1
    1c90:	19 f0       	breq	.+6      	; 0x1c98 <EnableProgMode+0x50>
    1c92:	03 c0       	rjmp	.+6      	; 0x1c9a <EnableProgMode+0x52>
	{
		case ATtiny2313 :
			setAtTiny2313();
    1c94:	40 d9       	rcall	.-3456   	; 0xf16 <setAtTiny2313>
			break;
    1c96:	01 c0       	rjmp	.+2      	; 0x1c9a <EnableProgMode+0x52>
		case ATmega324PA :
			setAtMega324PA();
    1c98:	87 d9       	rcall	.-3314   	; 0xfa8 <setAtMega324PA>
    1c9a:	87 ec       	ldi	r24, 0xC7	; 199
    1c9c:	90 e0       	ldi	r25, 0x00	; 0
    1c9e:	01 97       	sbiw	r24, 0x01	; 1
    1ca0:	f1 f7       	brne	.-4      	; 0x1c9e <EnableProgMode+0x56>
    1ca2:	00 c0       	rjmp	.+0      	; 0x1ca4 <EnableProgMode+0x5c>
    1ca4:	00 00       	nop
		default:
			break;
	}
	
	_delay_us(100);
	enableVppRegulator();
    1ca6:	d5 d9       	rcall	.-3158   	; 0x1052 <enableVppRegulator>
    1ca8:	95 e8       	ldi	r25, 0x85	; 133
    1caa:	9a 95       	dec	r25
    1cac:	f1 f7       	brne	.-4      	; 0x1caa <EnableProgMode+0x62>
    1cae:	00 00       	nop
	_delay_us(50);
	CONTROL_PORT |= (1<<WR | 1<<OE);
    1cb0:	8b b1       	in	r24, 0x0b	; 11
    1cb2:	86 60       	ori	r24, 0x06	; 6
    1cb4:	8b b9       	out	0x0b, r24	; 11
    1cb6:	87 ee       	ldi	r24, 0xE7	; 231
    1cb8:	93 e0       	ldi	r25, 0x03	; 3
    1cba:	01 97       	sbiw	r24, 0x01	; 1
    1cbc:	f1 f7       	brne	.-4      	; 0x1cba <EnableProgMode+0x72>
    1cbe:	00 c0       	rjmp	.+0      	; 0x1cc0 <EnableProgMode+0x78>
    1cc0:	00 00       	nop
	_delay_us(500);
}
    1cc2:	ff 90       	pop	r15
    1cc4:	ef 90       	pop	r14
    1cc6:	df 90       	pop	r13
    1cc8:	cf 90       	pop	r12
    1cca:	08 95       	ret

00001ccc <ReadSignatureBytes>:
char* ReadSignatureBytes(void)
{
	static char SignatureBytes[3];
	
	//A: Load Command "Read Signature Bytes"
	LoadCommand(READ_SIG_BYTE);
    1ccc:	88 e0       	ldi	r24, 0x08	; 8
    1cce:	26 df       	rcall	.-436    	; 0x1b1c <LoadCommand>
	
	//B: Load Address Low Byte
	CONTROL_PORT &= ~(1<<XA1_BS2);
    1cd0:	5d 98       	cbi	0x0b, 5	; 11
	CONTROL_PORT &= ~(1<<XA0);
    1cd2:	5c 98       	cbi	0x0b, 4	; 11
	CONTROL_PORT &= ~(1<<BS1_PAGEL);
    1cd4:	5b 98       	cbi	0x0b, 3	; 11
	DATA_PORT = 0x00;
    1cd6:	10 92 0b 01 	sts	0x010B, r1
    1cda:	87 ec       	ldi	r24, 0xC7	; 199
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	01 97       	sbiw	r24, 0x01	; 1
    1ce0:	f1 f7       	brne	.-4      	; 0x1cde <ReadSignatureBytes+0x12>
    1ce2:	00 c0       	rjmp	.+0      	; 0x1ce4 <ReadSignatureBytes+0x18>
    1ce4:	00 00       	nop
	_delay_us(100);
	CONTROL_PORT |= 1<<XTAL1;
    1ce6:	58 9a       	sbi	0x0b, 0	; 11
    1ce8:	92 e4       	ldi	r25, 0x42	; 66
    1cea:	9a 95       	dec	r25
    1cec:	f1 f7       	brne	.-4      	; 0x1cea <ReadSignatureBytes+0x1e>
    1cee:	00 c0       	rjmp	.+0      	; 0x1cf0 <ReadSignatureBytes+0x24>
	_delay_us(25);
	CONTROL_PORT &= ~(1<<XTAL1);
    1cf0:	58 98       	cbi	0x0b, 0	; 11
    1cf2:	87 ec       	ldi	r24, 0xC7	; 199
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	01 97       	sbiw	r24, 0x01	; 1
    1cf8:	f1 f7       	brne	.-4      	; 0x1cf6 <ReadSignatureBytes+0x2a>
    1cfa:	00 c0       	rjmp	.+0      	; 0x1cfc <ReadSignatureBytes+0x30>
    1cfc:	00 00       	nop
	_delay_us(100);
	
	//Read data
	DATA_DDR = 0;
    1cfe:	10 92 0a 01 	sts	0x010A, r1
	WR_PORT |= (1<<FPGAWR);
    1d02:	e5 e0       	ldi	r30, 0x05	; 5
    1d04:	f1 e0       	ldi	r31, 0x01	; 1
    1d06:	80 81       	ld	r24, Z
    1d08:	84 60       	ori	r24, 0x04	; 4
    1d0a:	80 83       	st	Z, r24
	CONTROL_PORT &= ~(1<<OE);
    1d0c:	59 98       	cbi	0x0b, 1	; 11
	CONTROL_PORT &= ~(1<<BS1_PAGEL);
    1d0e:	5b 98       	cbi	0x0b, 3	; 11
    1d10:	87 ee       	ldi	r24, 0xE7	; 231
    1d12:	93 e0       	ldi	r25, 0x03	; 3
    1d14:	01 97       	sbiw	r24, 0x01	; 1
    1d16:	f1 f7       	brne	.-4      	; 0x1d14 <ReadSignatureBytes+0x48>
    1d18:	00 c0       	rjmp	.+0      	; 0x1d1a <ReadSignatureBytes+0x4e>
    1d1a:	00 00       	nop
	_delay_us(500);
	SignatureBytes[0] = DATA_PIN;
    1d1c:	80 91 09 01 	lds	r24, 0x0109
    1d20:	80 93 0a 09 	sts	0x090A, r24
	printf("0x%02X ", SignatureBytes[0]);
    1d24:	1f 92       	push	r1
    1d26:	8f 93       	push	r24
    1d28:	8b e9       	ldi	r24, 0x9B	; 155
    1d2a:	98 e0       	ldi	r25, 0x08	; 8
    1d2c:	9f 93       	push	r25
    1d2e:	8f 93       	push	r24
    1d30:	41 d3       	rcall	.+1666   	; 0x23b4 <printf>
	CONTROL_PORT |= 1<<OE;
    1d32:	59 9a       	sbi	0x0b, 1	; 11
	WR_PORT &= ~(1<<FPGAWR);
    1d34:	e5 e0       	ldi	r30, 0x05	; 5
    1d36:	f1 e0       	ldi	r31, 0x01	; 1
    1d38:	80 81       	ld	r24, Z
    1d3a:	8b 7f       	andi	r24, 0xFB	; 251
    1d3c:	80 83       	st	Z, r24
	DATA_DDR = 0xFF;
    1d3e:	8f ef       	ldi	r24, 0xFF	; 255
    1d40:	80 93 0a 01 	sts	0x010A, r24
    1d44:	87 ec       	ldi	r24, 0xC7	; 199
    1d46:	90 e0       	ldi	r25, 0x00	; 0
    1d48:	01 97       	sbiw	r24, 0x01	; 1
    1d4a:	f1 f7       	brne	.-4      	; 0x1d48 <ReadSignatureBytes+0x7c>
    1d4c:	00 c0       	rjmp	.+0      	; 0x1d4e <ReadSignatureBytes+0x82>
    1d4e:	00 00       	nop
	_delay_us(100);
	
	//Load Address Low Byte
	CONTROL_PORT &= ~(1<<XA1_BS2);
    1d50:	5d 98       	cbi	0x0b, 5	; 11
	CONTROL_PORT &= ~(1<<XA0);
    1d52:	5c 98       	cbi	0x0b, 4	; 11
	CONTROL_PORT &= ~(1<<BS1_PAGEL);
    1d54:	5b 98       	cbi	0x0b, 3	; 11
	DATA_PORT = 0x01;
    1d56:	81 e0       	ldi	r24, 0x01	; 1
    1d58:	80 93 0b 01 	sts	0x010B, r24
    1d5c:	87 ec       	ldi	r24, 0xC7	; 199
    1d5e:	90 e0       	ldi	r25, 0x00	; 0
    1d60:	01 97       	sbiw	r24, 0x01	; 1
    1d62:	f1 f7       	brne	.-4      	; 0x1d60 <ReadSignatureBytes+0x94>
    1d64:	00 c0       	rjmp	.+0      	; 0x1d66 <ReadSignatureBytes+0x9a>
    1d66:	00 00       	nop
	_delay_us(100);
	CONTROL_PORT |= 1<<XTAL1;
    1d68:	58 9a       	sbi	0x0b, 0	; 11
    1d6a:	92 e4       	ldi	r25, 0x42	; 66
    1d6c:	9a 95       	dec	r25
    1d6e:	f1 f7       	brne	.-4      	; 0x1d6c <ReadSignatureBytes+0xa0>
    1d70:	00 c0       	rjmp	.+0      	; 0x1d72 <ReadSignatureBytes+0xa6>
	_delay_us(25);
	CONTROL_PORT &= ~(1<<XTAL1);
    1d72:	58 98       	cbi	0x0b, 0	; 11
    1d74:	87 ec       	ldi	r24, 0xC7	; 199
    1d76:	90 e0       	ldi	r25, 0x00	; 0
    1d78:	01 97       	sbiw	r24, 0x01	; 1
    1d7a:	f1 f7       	brne	.-4      	; 0x1d78 <ReadSignatureBytes+0xac>
    1d7c:	00 c0       	rjmp	.+0      	; 0x1d7e <ReadSignatureBytes+0xb2>
    1d7e:	00 00       	nop
	_delay_us(100);
	
	//Read data
	DATA_DDR = 0;
    1d80:	10 92 0a 01 	sts	0x010A, r1
	WR_PORT |= (1<<FPGAWR);
    1d84:	80 81       	ld	r24, Z
    1d86:	84 60       	ori	r24, 0x04	; 4
    1d88:	80 83       	st	Z, r24
	CONTROL_PORT &= ~(1<<OE);
    1d8a:	59 98       	cbi	0x0b, 1	; 11
	CONTROL_PORT &= ~(1<<BS1_PAGEL);
    1d8c:	5b 98       	cbi	0x0b, 3	; 11
    1d8e:	87 ee       	ldi	r24, 0xE7	; 231
    1d90:	93 e0       	ldi	r25, 0x03	; 3
    1d92:	01 97       	sbiw	r24, 0x01	; 1
    1d94:	f1 f7       	brne	.-4      	; 0x1d92 <ReadSignatureBytes+0xc6>
    1d96:	00 c0       	rjmp	.+0      	; 0x1d98 <ReadSignatureBytes+0xcc>
    1d98:	00 00       	nop
	_delay_us(500);
	SignatureBytes[1] = DATA_PIN;
    1d9a:	80 91 09 01 	lds	r24, 0x0109
    1d9e:	80 93 0b 09 	sts	0x090B, r24
	printf("0x%02X ", SignatureBytes[1]);
    1da2:	1f 92       	push	r1
    1da4:	8f 93       	push	r24
    1da6:	8b e9       	ldi	r24, 0x9B	; 155
    1da8:	98 e0       	ldi	r25, 0x08	; 8
    1daa:	9f 93       	push	r25
    1dac:	8f 93       	push	r24
    1dae:	02 d3       	rcall	.+1540   	; 0x23b4 <printf>
	CONTROL_PORT |= 1<<OE;
    1db0:	59 9a       	sbi	0x0b, 1	; 11
	WR_PORT &= ~(1<<FPGAWR);
    1db2:	e5 e0       	ldi	r30, 0x05	; 5
    1db4:	f1 e0       	ldi	r31, 0x01	; 1
    1db6:	80 81       	ld	r24, Z
    1db8:	8b 7f       	andi	r24, 0xFB	; 251
    1dba:	80 83       	st	Z, r24
	DATA_DDR = 0xFF;
    1dbc:	8f ef       	ldi	r24, 0xFF	; 255
    1dbe:	80 93 0a 01 	sts	0x010A, r24
    1dc2:	87 ec       	ldi	r24, 0xC7	; 199
    1dc4:	90 e0       	ldi	r25, 0x00	; 0
    1dc6:	01 97       	sbiw	r24, 0x01	; 1
    1dc8:	f1 f7       	brne	.-4      	; 0x1dc6 <ReadSignatureBytes+0xfa>
    1dca:	00 c0       	rjmp	.+0      	; 0x1dcc <ReadSignatureBytes+0x100>
    1dcc:	00 00       	nop
	_delay_us(100);
	
	//Load Address Low Byte
	CONTROL_PORT &= ~(1<<XA1_BS2);
    1dce:	5d 98       	cbi	0x0b, 5	; 11
	CONTROL_PORT &= ~(1<<XA0);
    1dd0:	5c 98       	cbi	0x0b, 4	; 11
	CONTROL_PORT &= ~(1<<BS1_PAGEL);
    1dd2:	5b 98       	cbi	0x0b, 3	; 11
	DATA_PORT = 0x02;
    1dd4:	82 e0       	ldi	r24, 0x02	; 2
    1dd6:	80 93 0b 01 	sts	0x010B, r24
    1dda:	87 ec       	ldi	r24, 0xC7	; 199
    1ddc:	90 e0       	ldi	r25, 0x00	; 0
    1dde:	01 97       	sbiw	r24, 0x01	; 1
    1de0:	f1 f7       	brne	.-4      	; 0x1dde <ReadSignatureBytes+0x112>
    1de2:	00 c0       	rjmp	.+0      	; 0x1de4 <ReadSignatureBytes+0x118>
    1de4:	00 00       	nop
	_delay_us(100);
	CONTROL_PORT |= 1<<XTAL1;
    1de6:	58 9a       	sbi	0x0b, 0	; 11
    1de8:	92 e4       	ldi	r25, 0x42	; 66
    1dea:	9a 95       	dec	r25
    1dec:	f1 f7       	brne	.-4      	; 0x1dea <ReadSignatureBytes+0x11e>
    1dee:	00 c0       	rjmp	.+0      	; 0x1df0 <ReadSignatureBytes+0x124>
	_delay_us(25);
	CONTROL_PORT &= ~(1<<XTAL1);
    1df0:	58 98       	cbi	0x0b, 0	; 11
    1df2:	87 ec       	ldi	r24, 0xC7	; 199
    1df4:	90 e0       	ldi	r25, 0x00	; 0
    1df6:	01 97       	sbiw	r24, 0x01	; 1
    1df8:	f1 f7       	brne	.-4      	; 0x1df6 <ReadSignatureBytes+0x12a>
    1dfa:	00 c0       	rjmp	.+0      	; 0x1dfc <ReadSignatureBytes+0x130>
    1dfc:	00 00       	nop
	_delay_us(100);
	
	//Read data
	DATA_DDR = 0;
    1dfe:	10 92 0a 01 	sts	0x010A, r1
	WR_PORT |= (1<<FPGAWR);
    1e02:	80 81       	ld	r24, Z
    1e04:	84 60       	ori	r24, 0x04	; 4
    1e06:	80 83       	st	Z, r24
	CONTROL_PORT &= ~(1<<OE);
    1e08:	59 98       	cbi	0x0b, 1	; 11
	CONTROL_PORT &= ~(1<<BS1_PAGEL);
    1e0a:	5b 98       	cbi	0x0b, 3	; 11
    1e0c:	87 ee       	ldi	r24, 0xE7	; 231
    1e0e:	93 e0       	ldi	r25, 0x03	; 3
    1e10:	01 97       	sbiw	r24, 0x01	; 1
    1e12:	f1 f7       	brne	.-4      	; 0x1e10 <ReadSignatureBytes+0x144>
    1e14:	00 c0       	rjmp	.+0      	; 0x1e16 <ReadSignatureBytes+0x14a>
    1e16:	00 00       	nop
	_delay_us(500);
	SignatureBytes[2] = DATA_PIN;
    1e18:	80 91 09 01 	lds	r24, 0x0109
    1e1c:	80 93 0c 09 	sts	0x090C, r24
	printf("0x%02X ", SignatureBytes[2]);
    1e20:	1f 92       	push	r1
    1e22:	8f 93       	push	r24
    1e24:	8b e9       	ldi	r24, 0x9B	; 155
    1e26:	98 e0       	ldi	r25, 0x08	; 8
    1e28:	9f 93       	push	r25
    1e2a:	8f 93       	push	r24
    1e2c:	c3 d2       	rcall	.+1414   	; 0x23b4 <printf>
	CONTROL_PORT |= 1<<OE;
    1e2e:	59 9a       	sbi	0x0b, 1	; 11
	WR_PORT &= ~(1<<FPGAWR);
    1e30:	e5 e0       	ldi	r30, 0x05	; 5
    1e32:	f1 e0       	ldi	r31, 0x01	; 1
    1e34:	80 81       	ld	r24, Z
    1e36:	8b 7f       	andi	r24, 0xFB	; 251
    1e38:	80 83       	st	Z, r24
	DATA_DDR = 0xFF;
    1e3a:	8f ef       	ldi	r24, 0xFF	; 255
    1e3c:	80 93 0a 01 	sts	0x010A, r24
	DATA_PORT = 0x00;
    1e40:	10 92 0b 01 	sts	0x010B, r1
	
	return SignatureBytes;
    1e44:	8d b7       	in	r24, 0x3d	; 61
    1e46:	9e b7       	in	r25, 0x3e	; 62
    1e48:	0c 96       	adiw	r24, 0x0c	; 12
    1e4a:	0f b6       	in	r0, 0x3f	; 63
    1e4c:	f8 94       	cli
    1e4e:	9e bf       	out	0x3e, r25	; 62
    1e50:	0f be       	out	0x3f, r0	; 63
    1e52:	8d bf       	out	0x3d, r24	; 61
}
    1e54:	8a e0       	ldi	r24, 0x0A	; 10
    1e56:	99 e0       	ldi	r25, 0x09	; 9
    1e58:	08 95       	ret

00001e5a <ReadFlash>:

void ReadFlash(void)
{
    1e5a:	bf 92       	push	r11
    1e5c:	cf 92       	push	r12
    1e5e:	df 92       	push	r13
    1e60:	ef 92       	push	r14
    1e62:	ff 92       	push	r15
    1e64:	0f 93       	push	r16
    1e66:	1f 93       	push	r17
    1e68:	cf 93       	push	r28
    1e6a:	df 93       	push	r29
	char DataValueIn = 0;
	
	//A: Load Command "Read Flash"
	LoadCommand(READ_FLASH);
    1e6c:	82 e0       	ldi	r24, 0x02	; 2
    1e6e:	56 de       	rcall	.-852    	; 0x1b1c <LoadCommand>
	
	for (unsigned int LowAddressByte = 0; LowAddressByte < 16; LowAddressByte++)
    1e70:	c0 e0       	ldi	r28, 0x00	; 0
    1e72:	d0 e0       	ldi	r29, 0x00	; 0
		
		//B: Load Address Low Byte
		LoadLowAddress(LowAddressByte);
		
		//Read data
		DATA_DDR = 0;
    1e74:	0f 2e       	mov	r0, r31
    1e76:	fa e0       	ldi	r31, 0x0A	; 10
    1e78:	cf 2e       	mov	r12, r31
    1e7a:	dd 24       	eor	r13, r13
    1e7c:	d3 94       	inc	r13
    1e7e:	f0 2d       	mov	r31, r0
		WR_PORT |= (1<<FPGAWR);
    1e80:	05 e0       	ldi	r16, 0x05	; 5
    1e82:	11 e0       	ldi	r17, 0x01	; 1
		CONTROL_PORT &= ~(1<<OE);
		CONTROL_PORT &= ~(1<<BS1_PAGEL); //Reading flash word low byte
		_delay_us(500);
		DataValueIn = DATA_PIN;
    1e84:	0f 2e       	mov	r0, r31
    1e86:	f9 e0       	ldi	r31, 0x09	; 9
    1e88:	ef 2e       	mov	r14, r31
    1e8a:	ff 24       	eor	r15, r15
    1e8c:	f3 94       	inc	r15
    1e8e:	f0 2d       	mov	r31, r0
		_delay_us(500);
		DataValueIn = DATA_PIN;
		//printf("0x%02X ", DataValueIn);
		CONTROL_PORT |= 1<<OE;
		WR_PORT &= ~(1<<FPGAWR);
		DATA_DDR = 0xFF;
    1e90:	bb 24       	eor	r11, r11
    1e92:	ba 94       	dec	r11
	LoadCommand(READ_FLASH);
	
	for (unsigned int LowAddressByte = 0; LowAddressByte < 16; LowAddressByte++)
	{
		//F: Load Address High Byte
		LoadHighAddress(0x00);
    1e94:	80 e0       	ldi	r24, 0x00	; 0
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	90 de       	rcall	.-736    	; 0x1bba <LoadHighAddress>
		
		//B: Load Address Low Byte
		LoadLowAddress(LowAddressByte);
    1e9a:	ce 01       	movw	r24, r28
    1e9c:	79 de       	rcall	.-782    	; 0x1b90 <LoadLowAddress>
		
		//Read data
		DATA_DDR = 0;
    1e9e:	f6 01       	movw	r30, r12
    1ea0:	10 82       	st	Z, r1
		WR_PORT |= (1<<FPGAWR);
    1ea2:	f8 01       	movw	r30, r16
    1ea4:	80 81       	ld	r24, Z
    1ea6:	84 60       	ori	r24, 0x04	; 4
    1ea8:	80 83       	st	Z, r24
		CONTROL_PORT &= ~(1<<OE);
    1eaa:	59 98       	cbi	0x0b, 1	; 11
		CONTROL_PORT &= ~(1<<BS1_PAGEL); //Reading flash word low byte
    1eac:	5b 98       	cbi	0x0b, 3	; 11
    1eae:	87 ee       	ldi	r24, 0xE7	; 231
    1eb0:	93 e0       	ldi	r25, 0x03	; 3
    1eb2:	01 97       	sbiw	r24, 0x01	; 1
    1eb4:	f1 f7       	brne	.-4      	; 0x1eb2 <ReadFlash+0x58>
    1eb6:	00 c0       	rjmp	.+0      	; 0x1eb8 <ReadFlash+0x5e>
    1eb8:	00 00       	nop
		_delay_us(500);
		DataValueIn = DATA_PIN;
    1eba:	f7 01       	movw	r30, r14
    1ebc:	80 81       	ld	r24, Z
		//printf("0x%02X ", DataValueIn);
		CONTROL_PORT |= 1<<BS1_PAGEL; //Reading flash word high byte
    1ebe:	5b 9a       	sbi	0x0b, 3	; 11
    1ec0:	87 ee       	ldi	r24, 0xE7	; 231
    1ec2:	93 e0       	ldi	r25, 0x03	; 3
    1ec4:	01 97       	sbiw	r24, 0x01	; 1
    1ec6:	f1 f7       	brne	.-4      	; 0x1ec4 <ReadFlash+0x6a>
    1ec8:	00 c0       	rjmp	.+0      	; 0x1eca <ReadFlash+0x70>
    1eca:	00 00       	nop
		_delay_us(500);
		DataValueIn = DATA_PIN;
    1ecc:	f7 01       	movw	r30, r14
    1ece:	80 81       	ld	r24, Z
		//printf("0x%02X ", DataValueIn);
		CONTROL_PORT |= 1<<OE;
    1ed0:	59 9a       	sbi	0x0b, 1	; 11
		WR_PORT &= ~(1<<FPGAWR);
    1ed2:	f8 01       	movw	r30, r16
    1ed4:	80 81       	ld	r24, Z
    1ed6:	8b 7f       	andi	r24, 0xFB	; 251
    1ed8:	80 83       	st	Z, r24
		DATA_DDR = 0xFF;
    1eda:	f6 01       	movw	r30, r12
    1edc:	b0 82       	st	Z, r11
    1ede:	f2 e4       	ldi	r31, 0x42	; 66
    1ee0:	fa 95       	dec	r31
    1ee2:	f1 f7       	brne	.-4      	; 0x1ee0 <ReadFlash+0x86>
    1ee4:	00 c0       	rjmp	.+0      	; 0x1ee6 <ReadFlash+0x8c>
	char DataValueIn = 0;
	
	//A: Load Command "Read Flash"
	LoadCommand(READ_FLASH);
	
	for (unsigned int LowAddressByte = 0; LowAddressByte < 16; LowAddressByte++)
    1ee6:	21 96       	adiw	r28, 0x01	; 1
    1ee8:	c0 31       	cpi	r28, 0x10	; 16
    1eea:	d1 05       	cpc	r29, r1
    1eec:	99 f6       	brne	.-90     	; 0x1e94 <ReadFlash+0x3a>
		CONTROL_PORT |= 1<<OE;
		WR_PORT &= ~(1<<FPGAWR);
		DATA_DDR = 0xFF;
		_delay_us(25);
	}
}
    1eee:	df 91       	pop	r29
    1ef0:	cf 91       	pop	r28
    1ef2:	1f 91       	pop	r17
    1ef4:	0f 91       	pop	r16
    1ef6:	ff 90       	pop	r15
    1ef8:	ef 90       	pop	r14
    1efa:	df 90       	pop	r13
    1efc:	cf 90       	pop	r12
    1efe:	bf 90       	pop	r11
    1f00:	08 95       	ret

00001f02 <VerifyFlash>:

int VerifyFlash(void)
{
    1f02:	2f 92       	push	r2
    1f04:	3f 92       	push	r3
    1f06:	4f 92       	push	r4
    1f08:	5f 92       	push	r5
    1f0a:	6f 92       	push	r6
    1f0c:	7f 92       	push	r7
    1f0e:	8f 92       	push	r8
    1f10:	9f 92       	push	r9
    1f12:	af 92       	push	r10
    1f14:	bf 92       	push	r11
    1f16:	cf 92       	push	r12
    1f18:	df 92       	push	r13
    1f1a:	ef 92       	push	r14
    1f1c:	ff 92       	push	r15
    1f1e:	0f 93       	push	r16
    1f20:	1f 93       	push	r17
    1f22:	cf 93       	push	r28
    1f24:	df 93       	push	r29
	resetRAMOffset(); 
    1f26:	c7 db       	rcall	.-2162   	; 0x16b6 <resetRAMOffset>
	uint16_t byteCount;
	uint16_t address;
	uint16_t data;
	//Keep looping until the hexRow is the end of file or we hit the end of a page
	
	LoadCommand(READ_FLASH);
    1f28:	82 e0       	ldi	r24, 0x02	; 2
    1f2a:	f8 dd       	rcall	.-1040   	; 0x1b1c <LoadCommand>
			//printf("\nAddress: 0x%04X\n",(address + j));
			j++;
			
			//Read data
			DATA_DDR = 0;
			WR_PORT |= (1<<FPGAWR);
    1f2c:	05 e0       	ldi	r16, 0x05	; 5
    1f2e:	11 e0       	ldi	r17, 0x01	; 1
			CONTROL_PORT &= ~(1<<OE);
			CONTROL_PORT &= ~(1<<BS1_PAGEL); //Reading flash word low byte
			_delay_us(500);
			DataValueIn = DATA_PIN;
    1f30:	0f 2e       	mov	r0, r31
    1f32:	f9 e0       	ldi	r31, 0x09	; 9
    1f34:	af 2e       	mov	r10, r31
    1f36:	bb 24       	eor	r11, r11
    1f38:	b3 94       	inc	r11
    1f3a:	f0 2d       	mov	r31, r0
	
	LoadCommand(READ_FLASH);
	
	while(1)
	{
		hexRow = getHexRow();
    1f3c:	c1 db       	rcall	.-2174   	; 0x16c0 <getHexRow>
    1f3e:	4c 01       	movw	r8, r24
		
		//printf("We're here now\n");
		
		if(hexRow[RECORD_TYPE] == TYPE_END_OF_FILE)
    1f40:	fc 01       	movw	r30, r24
    1f42:	84 81       	ldd	r24, Z+4	; 0x04
    1f44:	81 30       	cpi	r24, 0x01	; 1
    1f46:	09 f4       	brne	.+2      	; 0x1f4a <VerifyFlash+0x48>
    1f48:	5b c0       	rjmp	.+182    	; 0x2000 <VerifyFlash+0xfe>
		{
			return 1;
		}
		
		byteCount = (hexRow[BYTE_COUNT]);
    1f4a:	81 81       	ldd	r24, Z+1	; 0x01
    1f4c:	68 2e       	mov	r6, r24
    1f4e:	71 2c       	mov	r7, r1
		address = hexRow[ADDRESS_H];
    1f50:	22 80       	ldd	r2, Z+2	; 0x02
    1f52:	31 2c       	mov	r3, r1
		address <<= 8;
    1f54:	32 2c       	mov	r3, r2
    1f56:	22 24       	eor	r2, r2
		address |= (hexRow[ADDRESS_L]);
    1f58:	83 81       	ldd	r24, Z+3	; 0x03
    1f5a:	28 2a       	or	r2, r24
		address /= 2;
    1f5c:	36 94       	lsr	r3
    1f5e:	27 94       	ror	r2
		
		int j =0;
		for(int i=0; i<byteCount; i+=2)
    1f60:	61 14       	cp	r6, r1
    1f62:	71 04       	cpc	r7, r1
    1f64:	59 f3       	breq	.-42     	; 0x1f3c <VerifyFlash+0x3a>
    1f66:	64 01       	movw	r12, r8
    1f68:	f5 e0       	ldi	r31, 0x05	; 5
    1f6a:	cf 0e       	add	r12, r31
    1f6c:	d1 1c       	adc	r13, r1
    1f6e:	71 01       	movw	r14, r2
    1f70:	41 2c       	mov	r4, r1
    1f72:	51 2c       	mov	r5, r1
    1f74:	80 e0       	ldi	r24, 0x00	; 0
    1f76:	c8 2f       	mov	r28, r24
    1f78:	90 e0       	ldi	r25, 0x00	; 0
    1f7a:	d9 2f       	mov	r29, r25
		{
			LoadHighAddress(address);
    1f7c:	c1 01       	movw	r24, r2
    1f7e:	1d de       	rcall	.-966    	; 0x1bba <LoadHighAddress>
			LoadLowAddress(address + j);
    1f80:	c7 01       	movw	r24, r14
    1f82:	06 de       	rcall	.-1012   	; 0x1b90 <LoadLowAddress>
			//printf("\nAddress: 0x%04X\n",(address + j));
			j++;
			
			//Read data
			DATA_DDR = 0;
    1f84:	ea e0       	ldi	r30, 0x0A	; 10
    1f86:	f1 e0       	ldi	r31, 0x01	; 1
    1f88:	10 82       	st	Z, r1
			WR_PORT |= (1<<FPGAWR);
    1f8a:	f8 01       	movw	r30, r16
    1f8c:	80 81       	ld	r24, Z
    1f8e:	84 60       	ori	r24, 0x04	; 4
    1f90:	80 83       	st	Z, r24
			CONTROL_PORT &= ~(1<<OE);
    1f92:	59 98       	cbi	0x0b, 1	; 11
			CONTROL_PORT &= ~(1<<BS1_PAGEL); //Reading flash word low byte
    1f94:	5b 98       	cbi	0x0b, 3	; 11
    1f96:	87 ee       	ldi	r24, 0xE7	; 231
    1f98:	93 e0       	ldi	r25, 0x03	; 3
    1f9a:	01 97       	sbiw	r24, 0x01	; 1
    1f9c:	f1 f7       	brne	.-4      	; 0x1f9a <VerifyFlash+0x98>
    1f9e:	00 c0       	rjmp	.+0      	; 0x1fa0 <VerifyFlash+0x9e>
    1fa0:	00 00       	nop
			_delay_us(500);
			DataValueIn = DATA_PIN;
    1fa2:	f5 01       	movw	r30, r10
    1fa4:	80 81       	ld	r24, Z
			//printf("0x%02X ", DataValueIn);
			if (DataValueIn != hexRow[DATA_BEGIN + i])
    1fa6:	f6 01       	movw	r30, r12
    1fa8:	90 81       	ld	r25, Z
    1faa:	98 13       	cpse	r25, r24
    1fac:	2c c0       	rjmp	.+88     	; 0x2006 <VerifyFlash+0x104>
			{
				return 0;
			}
			CONTROL_PORT |= 1<<BS1_PAGEL; //Reading flash word high byte
    1fae:	5b 9a       	sbi	0x0b, 3	; 11
    1fb0:	87 ee       	ldi	r24, 0xE7	; 231
    1fb2:	93 e0       	ldi	r25, 0x03	; 3
    1fb4:	01 97       	sbiw	r24, 0x01	; 1
    1fb6:	f1 f7       	brne	.-4      	; 0x1fb4 <VerifyFlash+0xb2>
    1fb8:	00 c0       	rjmp	.+0      	; 0x1fba <VerifyFlash+0xb8>
    1fba:	00 00       	nop
			_delay_us(500);
			DataValueIn = DATA_PIN;
    1fbc:	f5 01       	movw	r30, r10
    1fbe:	80 81       	ld	r24, Z
			//printf("0x%02X ", DataValueIn);
			if (DataValueIn != hexRow[DATA_BEGIN + i + 1])
    1fc0:	f4 01       	movw	r30, r8
    1fc2:	e4 0d       	add	r30, r4
    1fc4:	f5 1d       	adc	r31, r5
    1fc6:	96 81       	ldd	r25, Z+6	; 0x06
    1fc8:	98 13       	cpse	r25, r24
    1fca:	20 c0       	rjmp	.+64     	; 0x200c <VerifyFlash+0x10a>
			{
				return 0;
			}
			CONTROL_PORT |= 1<<OE;
    1fcc:	59 9a       	sbi	0x0b, 1	; 11
			WR_PORT &= ~(1<<FPGAWR);
    1fce:	f8 01       	movw	r30, r16
    1fd0:	80 81       	ld	r24, Z
    1fd2:	8b 7f       	andi	r24, 0xFB	; 251
    1fd4:	80 83       	st	Z, r24
			DATA_DDR = 0xFF;
    1fd6:	8f ef       	ldi	r24, 0xFF	; 255
    1fd8:	ea e0       	ldi	r30, 0x0A	; 10
    1fda:	f1 e0       	ldi	r31, 0x01	; 1
    1fdc:	80 83       	st	Z, r24
    1fde:	92 e4       	ldi	r25, 0x42	; 66
    1fe0:	9a 95       	dec	r25
    1fe2:	f1 f7       	brne	.-4      	; 0x1fe0 <VerifyFlash+0xde>
    1fe4:	00 c0       	rjmp	.+0      	; 0x1fe6 <VerifyFlash+0xe4>
		address <<= 8;
		address |= (hexRow[ADDRESS_L]);
		address /= 2;
		
		int j =0;
		for(int i=0; i<byteCount; i+=2)
    1fe6:	22 96       	adiw	r28, 0x02	; 2
    1fe8:	2e 01       	movw	r4, r28
    1fea:	ef ef       	ldi	r30, 0xFF	; 255
    1fec:	ee 1a       	sub	r14, r30
    1fee:	fe 0a       	sbc	r15, r30
    1ff0:	f2 e0       	ldi	r31, 0x02	; 2
    1ff2:	cf 0e       	add	r12, r31
    1ff4:	d1 1c       	adc	r13, r1
    1ff6:	c6 15       	cp	r28, r6
    1ff8:	d7 05       	cpc	r29, r7
    1ffa:	08 f4       	brcc	.+2      	; 0x1ffe <VerifyFlash+0xfc>
    1ffc:	bf cf       	rjmp	.-130    	; 0x1f7c <VerifyFlash+0x7a>
    1ffe:	9e cf       	rjmp	.-196    	; 0x1f3c <VerifyFlash+0x3a>
		
		//printf("We're here now\n");
		
		if(hexRow[RECORD_TYPE] == TYPE_END_OF_FILE)
		{
			return 1;
    2000:	81 e0       	ldi	r24, 0x01	; 1
    2002:	90 e0       	ldi	r25, 0x00	; 0
    2004:	05 c0       	rjmp	.+10     	; 0x2010 <VerifyFlash+0x10e>
			_delay_us(500);
			DataValueIn = DATA_PIN;
			//printf("0x%02X ", DataValueIn);
			if (DataValueIn != hexRow[DATA_BEGIN + i])
			{
				return 0;
    2006:	80 e0       	ldi	r24, 0x00	; 0
    2008:	90 e0       	ldi	r25, 0x00	; 0
    200a:	02 c0       	rjmp	.+4      	; 0x2010 <VerifyFlash+0x10e>
			_delay_us(500);
			DataValueIn = DATA_PIN;
			//printf("0x%02X ", DataValueIn);
			if (DataValueIn != hexRow[DATA_BEGIN + i + 1])
			{
				return 0;
    200c:	80 e0       	ldi	r24, 0x00	; 0
    200e:	90 e0       	ldi	r25, 0x00	; 0
			WR_PORT &= ~(1<<FPGAWR);
			DATA_DDR = 0xFF;
			_delay_us(25);
		}
	}
}
    2010:	df 91       	pop	r29
    2012:	cf 91       	pop	r28
    2014:	1f 91       	pop	r17
    2016:	0f 91       	pop	r16
    2018:	ff 90       	pop	r15
    201a:	ef 90       	pop	r14
    201c:	df 90       	pop	r13
    201e:	cf 90       	pop	r12
    2020:	bf 90       	pop	r11
    2022:	af 90       	pop	r10
    2024:	9f 90       	pop	r9
    2026:	8f 90       	pop	r8
    2028:	7f 90       	pop	r7
    202a:	6f 90       	pop	r6
    202c:	5f 90       	pop	r5
    202e:	4f 90       	pop	r4
    2030:	3f 90       	pop	r3
    2032:	2f 90       	pop	r2
    2034:	08 95       	ret

00002036 <ChipErase>:

void ChipErase(void)
{
	CONTROL_PORT |= 1<<XA1_BS2;
    2036:	5d 9a       	sbi	0x0b, 5	; 11
	CONTROL_PORT &= ~(1<<XA0);
    2038:	5c 98       	cbi	0x0b, 4	; 11
	CONTROL_PORT &= ~(1<<BS1_PAGEL);
    203a:	5b 98       	cbi	0x0b, 3	; 11
	DATA_PORT = 0x80;
    203c:	80 e8       	ldi	r24, 0x80	; 128
    203e:	80 93 0b 01 	sts	0x010B, r24
    2042:	82 e4       	ldi	r24, 0x42	; 66
    2044:	8a 95       	dec	r24
    2046:	f1 f7       	brne	.-4      	; 0x2044 <ChipErase+0xe>
    2048:	00 c0       	rjmp	.+0      	; 0x204a <ChipErase+0x14>
	_delay_us(25);
	CONTROL_PORT |= 1<<XTAL1;
    204a:	58 9a       	sbi	0x0b, 0	; 11
    204c:	82 e4       	ldi	r24, 0x42	; 66
    204e:	8a 95       	dec	r24
    2050:	f1 f7       	brne	.-4      	; 0x204e <ChipErase+0x18>
    2052:	00 c0       	rjmp	.+0      	; 0x2054 <ChipErase+0x1e>
	_delay_us(25);
	CONTROL_PORT &= ~(1<<XTAL1);
    2054:	58 98       	cbi	0x0b, 0	; 11
    2056:	82 e4       	ldi	r24, 0x42	; 66
    2058:	8a 95       	dec	r24
    205a:	f1 f7       	brne	.-4      	; 0x2058 <ChipErase+0x22>
    205c:	00 c0       	rjmp	.+0      	; 0x205e <ChipErase+0x28>
	_delay_us(25);
	CONTROL_PORT &= ~(1<<WR);
    205e:	5a 98       	cbi	0x0b, 2	; 11
    2060:	82 e4       	ldi	r24, 0x42	; 66
    2062:	8a 95       	dec	r24
    2064:	f1 f7       	brne	.-4      	; 0x2062 <ChipErase+0x2c>
    2066:	00 c0       	rjmp	.+0      	; 0x2068 <ChipErase+0x32>
	_delay_us(25);
	CONTROL_PORT |= 1<<WR;
    2068:	5a 9a       	sbi	0x0b, 2	; 11
    206a:	82 e4       	ldi	r24, 0x42	; 66
    206c:	8a 95       	dec	r24
    206e:	f1 f7       	brne	.-4      	; 0x206c <ChipErase+0x36>
    2070:	00 c0       	rjmp	.+0      	; 0x2072 <ChipErase+0x3c>
	_delay_us(25);
	while(!(RDY_BSY_In & (1<<RDY_BSY)));
    2072:	30 9b       	sbis	0x06, 0	; 6
    2074:	fe cf       	rjmp	.-4      	; 0x2072 <ChipErase+0x3c>
}
    2076:	08 95       	ret

00002078 <ProgramFlash>:

void ProgramFlash(uint32_t sigBytes)
{
    2078:	2f 92       	push	r2
    207a:	3f 92       	push	r3
    207c:	4f 92       	push	r4
    207e:	5f 92       	push	r5
    2080:	6f 92       	push	r6
    2082:	7f 92       	push	r7
    2084:	8f 92       	push	r8
    2086:	9f 92       	push	r9
    2088:	af 92       	push	r10
    208a:	bf 92       	push	r11
    208c:	cf 92       	push	r12
    208e:	df 92       	push	r13
    2090:	ef 92       	push	r14
    2092:	ff 92       	push	r15
    2094:	0f 93       	push	r16
    2096:	1f 93       	push	r17
    2098:	cf 93       	push	r28
    209a:	df 93       	push	r29
    209c:	cd b7       	in	r28, 0x3d	; 61
    209e:	de b7       	in	r29, 0x3e	; 62
    20a0:	28 97       	sbiw	r28, 0x08	; 8
    20a2:	0f b6       	in	r0, 0x3f	; 63
    20a4:	f8 94       	cli
    20a6:	de bf       	out	0x3e, r29	; 62
    20a8:	0f be       	out	0x3f, r0	; 63
    20aa:	cd bf       	out	0x3d, r28	; 61
	uint32_t totalBytes = 0; 
	uint16_t pageSize;
	int j;
	int i; 
	//Keep looping until the hexRow is the end of file or we hit the end of a page 
	if(sigBytes == ATtiny2313)
    20ac:	6a 30       	cpi	r22, 0x0A	; 10
    20ae:	21 e9       	ldi	r18, 0x91	; 145
    20b0:	72 07       	cpc	r23, r18
    20b2:	2e e1       	ldi	r18, 0x1E	; 30
    20b4:	82 07       	cpc	r24, r18
    20b6:	91 05       	cpc	r25, r1
    20b8:	41 f4       	brne	.+16     	; 0x20ca <ProgramFlash+0x52>
	{
		printf("Page size is 16\n");
    20ba:	83 ea       	ldi	r24, 0xA3	; 163
    20bc:	98 e0       	ldi	r25, 0x08	; 8
    20be:	90 d1       	rcall	.+800    	; 0x23e0 <puts>
		pageSize = 16; 
    20c0:	80 e1       	ldi	r24, 0x10	; 16
    20c2:	90 e0       	ldi	r25, 0x00	; 0
    20c4:	9e 83       	std	Y+6, r25	; 0x06
    20c6:	8d 83       	std	Y+5, r24	; 0x05
    20c8:	0c c0       	rjmp	.+24     	; 0x20e2 <ProgramFlash+0x6a>
	}
	else if(sigBytes == ATmega324PA)
    20ca:	61 31       	cpi	r22, 0x11	; 17
    20cc:	75 49       	sbci	r23, 0x95	; 149
    20ce:	8e 41       	sbci	r24, 0x1E	; 30
    20d0:	91 05       	cpc	r25, r1
    20d2:	39 f4       	brne	.+14     	; 0x20e2 <ProgramFlash+0x6a>
	{
		pageSize = 64; 
		printf("Page size is 64\n");
    20d4:	83 eb       	ldi	r24, 0xB3	; 179
    20d6:	98 e0       	ldi	r25, 0x08	; 8
    20d8:	83 d1       	rcall	.+774    	; 0x23e0 <puts>
		printf("Page size is 16\n");
		pageSize = 16; 
	}
	else if(sigBytes == ATmega324PA)
	{
		pageSize = 64; 
    20da:	e0 e4       	ldi	r30, 0x40	; 64
    20dc:	f0 e0       	ldi	r31, 0x00	; 0
    20de:	fe 83       	std	Y+6, r31	; 0x06
    20e0:	ed 83       	std	Y+5, r30	; 0x05
		printf("Page size is 64\n");
	}
	
	LoadCommand(WRITE_FLASH);
    20e2:	80 e1       	ldi	r24, 0x10	; 16
    20e4:	1b dd       	rcall	.-1482   	; 0x1b1c <LoadCommand>
{
	char* hexRow;
	uint16_t byteCount;
	uint16_t address;
	uint16_t data;
	uint32_t totalBytes = 0; 
    20e6:	41 2c       	mov	r4, r1
    20e8:	51 2c       	mov	r5, r1
    20ea:	32 01       	movw	r6, r4
			//printf("Total Bytes: %d, i: %d, j: %d\n", totalBytes, i, j);
			LatchData();
		}
		
		//Check to see if we hit the end of a page 
		if(totalBytes%pageSize == 0)
    20ec:	ad 81       	ldd	r26, Y+5	; 0x05
    20ee:	be 81       	ldd	r27, Y+6	; 0x06
    20f0:	cd 01       	movw	r24, r26
    20f2:	a0 e0       	ldi	r26, 0x00	; 0
    20f4:	b0 e0       	ldi	r27, 0x00	; 0
    20f6:	89 83       	std	Y+1, r24	; 0x01
    20f8:	9a 83       	std	Y+2, r25	; 0x02
    20fa:	ab 83       	std	Y+3, r26	; 0x03
    20fc:	bc 83       	std	Y+4, r27	; 0x04
	
	LoadCommand(WRITE_FLASH);
	
	while(1)
	{
		hexRow = getHexRow();
    20fe:	e0 da       	rcall	.-2624   	; 0x16c0 <getHexRow>
    2100:	5c 01       	movw	r10, r24
		
		//printf("We're here now\n");
		
		if(hexRow[RECORD_TYPE] == TYPE_END_OF_FILE)
    2102:	fc 01       	movw	r30, r24
    2104:	84 81       	ldd	r24, Z+4	; 0x04
    2106:	81 30       	cpi	r24, 0x01	; 1
    2108:	89 f4       	brne	.+34     	; 0x212c <ProgramFlash+0xb4>
		{
			printf("End of File!\n"); 
    210a:	86 e4       	ldi	r24, 0x46	; 70
    210c:	98 e0       	ldi	r25, 0x08	; 8
    210e:	68 d1       	rcall	.+720    	; 0x23e0 <puts>
			ProgramPage();
		}
	}
	
	//After reaching end of file, do a final page write in case we did not fill an entire page
	if(totalBytes%pageSize != 0)
    2110:	8d 81       	ldd	r24, Y+5	; 0x05
    2112:	9e 81       	ldd	r25, Y+6	; 0x06
    2114:	9c 01       	movw	r18, r24
    2116:	40 e0       	ldi	r20, 0x00	; 0
    2118:	50 e0       	ldi	r21, 0x00	; 0
    211a:	c3 01       	movw	r24, r6
    211c:	b2 01       	movw	r22, r4
    211e:	d5 d0       	rcall	.+426    	; 0x22ca <__udivmodsi4>
    2120:	67 2b       	or	r22, r23
    2122:	68 2b       	or	r22, r24
    2124:	69 2b       	or	r22, r25
    2126:	09 f4       	brne	.+2      	; 0x212a <ProgramFlash+0xb2>
    2128:	56 c0       	rjmp	.+172    	; 0x21d6 <ProgramFlash+0x15e>
    212a:	4f c0       	rjmp	.+158    	; 0x21ca <ProgramFlash+0x152>
		{
			printf("End of File!\n"); 
			break;
		}
					
		byteCount = (hexRow[BYTE_COUNT]);
    212c:	81 80       	ldd	r8, Z+1	; 0x01
    212e:	91 2c       	mov	r9, r1
		address = hexRow[ADDRESS_H];
    2130:	22 80       	ldd	r2, Z+2	; 0x02
    2132:	31 2c       	mov	r3, r1
		address <<= 8;
    2134:	32 2c       	mov	r3, r2
    2136:	22 24       	eor	r2, r2
		address |= (hexRow[ADDRESS_L]);
    2138:	83 81       	ldd	r24, Z+3	; 0x03
    213a:	28 2a       	or	r2, r24
		address /= 2; 
    213c:	36 94       	lsr	r3
    213e:	27 94       	ror	r2
		//printf("\nByteCount: %d, Address: 0x%04x\n", byteCount, address); 
		j =0;
		for(i=0; i<byteCount; i+=2)
    2140:	81 14       	cp	r8, r1
    2142:	91 04       	cpc	r9, r1
    2144:	79 f1       	breq	.+94     	; 0x21a4 <ProgramFlash+0x12c>
    2146:	85 01       	movw	r16, r10
    2148:	0b 5f       	subi	r16, 0xFB	; 251
    214a:	1f 4f       	sbci	r17, 0xFF	; 255
    214c:	71 01       	movw	r14, r2
    214e:	c1 2c       	mov	r12, r1
    2150:	d1 2c       	mov	r13, r1
    2152:	1f 82       	std	Y+7, r1	; 0x07
    2154:	18 86       	std	Y+8, r1	; 0x08
		{
			LoadLowAddress(address + j);
    2156:	c7 01       	movw	r24, r14
    2158:	1b dd       	rcall	.-1482   	; 0x1b90 <LoadLowAddress>
			//printf("Address: 0x%04X\n",(address + j));
			data = hexRow[DATA_BEGIN + i + 1];
    215a:	f5 01       	movw	r30, r10
    215c:	ec 0d       	add	r30, r12
    215e:	fd 1d       	adc	r31, r13
    2160:	86 81       	ldd	r24, Z+6	; 0x06
    2162:	90 e0       	ldi	r25, 0x00	; 0
			data <<= 8;
    2164:	98 2f       	mov	r25, r24
    2166:	88 27       	eor	r24, r24
			data |= hexRow[DATA_BEGIN + i];
    2168:	f8 01       	movw	r30, r16
    216a:	20 81       	ld	r18, Z
			WriteWord(data);
    216c:	82 2b       	or	r24, r18
    216e:	ea dc       	rcall	.-1580   	; 0x1b44 <WriteWord>
			//printf("Word: 0x%04X\n",(data));
			totalBytes+=i; 
    2170:	2f 81       	ldd	r18, Y+7	; 0x07
    2172:	38 85       	ldd	r19, Y+8	; 0x08
    2174:	c9 01       	movw	r24, r18
    2176:	aa 27       	eor	r26, r26
    2178:	97 fd       	sbrc	r25, 7
    217a:	a0 95       	com	r26
    217c:	ba 2f       	mov	r27, r26
    217e:	48 0e       	add	r4, r24
    2180:	59 1e       	adc	r5, r25
    2182:	6a 1e       	adc	r6, r26
    2184:	7b 1e       	adc	r7, r27
			j++;
			//printf("Total Bytes: %d, i: %d, j: %d\n", totalBytes, i, j);
			LatchData();
    2186:	2e dd       	rcall	.-1444   	; 0x1be4 <LatchData>
		address <<= 8;
		address |= (hexRow[ADDRESS_L]);
		address /= 2; 
		//printf("\nByteCount: %d, Address: 0x%04x\n", byteCount, address); 
		j =0;
		for(i=0; i<byteCount; i+=2)
    2188:	8f 81       	ldd	r24, Y+7	; 0x07
    218a:	98 85       	ldd	r25, Y+8	; 0x08
    218c:	02 96       	adiw	r24, 0x02	; 2
    218e:	98 87       	std	Y+8, r25	; 0x08
    2190:	8f 83       	std	Y+7, r24	; 0x07
    2192:	6c 01       	movw	r12, r24
    2194:	9f ef       	ldi	r25, 0xFF	; 255
    2196:	e9 1a       	sub	r14, r25
    2198:	f9 0a       	sbc	r15, r25
    219a:	0e 5f       	subi	r16, 0xFE	; 254
    219c:	1f 4f       	sbci	r17, 0xFF	; 255
    219e:	c8 14       	cp	r12, r8
    21a0:	d9 04       	cpc	r13, r9
    21a2:	c8 f2       	brcs	.-78     	; 0x2156 <ProgramFlash+0xde>
			//printf("Total Bytes: %d, i: %d, j: %d\n", totalBytes, i, j);
			LatchData();
		}
		
		//Check to see if we hit the end of a page 
		if(totalBytes%pageSize == 0)
    21a4:	c3 01       	movw	r24, r6
    21a6:	b2 01       	movw	r22, r4
    21a8:	29 81       	ldd	r18, Y+1	; 0x01
    21aa:	3a 81       	ldd	r19, Y+2	; 0x02
    21ac:	4b 81       	ldd	r20, Y+3	; 0x03
    21ae:	5c 81       	ldd	r21, Y+4	; 0x04
    21b0:	8c d0       	rcall	.+280    	; 0x22ca <__udivmodsi4>
    21b2:	67 2b       	or	r22, r23
    21b4:	68 2b       	or	r22, r24
    21b6:	69 2b       	or	r22, r25
    21b8:	09 f0       	breq	.+2      	; 0x21bc <ProgramFlash+0x144>
    21ba:	a1 cf       	rjmp	.-190    	; 0x20fe <ProgramFlash+0x86>
		{
			printf("Full Page Written\n");
    21bc:	83 ec       	ldi	r24, 0xC3	; 195
    21be:	98 e0       	ldi	r25, 0x08	; 8
    21c0:	0f d1       	rcall	.+542    	; 0x23e0 <puts>
			LoadHighAddress(address);
    21c2:	c1 01       	movw	r24, r2
    21c4:	fa dc       	rcall	.-1548   	; 0x1bba <LoadHighAddress>
			ProgramPage();
    21c6:	1e dd       	rcall	.-1476   	; 0x1c04 <ProgramPage>
    21c8:	9a cf       	rjmp	.-204    	; 0x20fe <ProgramFlash+0x86>
	}
	
	//After reaching end of file, do a final page write in case we did not fill an entire page
	if(totalBytes%pageSize != 0)
	{
		printf("Partial Page Written\n");
    21ca:	85 ed       	ldi	r24, 0xD5	; 213
    21cc:	98 e0       	ldi	r25, 0x08	; 8
    21ce:	08 d1       	rcall	.+528    	; 0x23e0 <puts>
		LoadHighAddress(address);
    21d0:	c1 01       	movw	r24, r2
    21d2:	f3 dc       	rcall	.-1562   	; 0x1bba <LoadHighAddress>
		ProgramPage();
    21d4:	17 dd       	rcall	.-1490   	; 0x1c04 <ProgramPage>
	} 
	printf("Ending Page Programming!\n");
    21d6:	8a ee       	ldi	r24, 0xEA	; 234
    21d8:	98 e0       	ldi	r25, 0x08	; 8
    21da:	02 d1       	rcall	.+516    	; 0x23e0 <puts>
	EndPageProgramming();
    21dc:	22 dd       	rcall	.-1468   	; 0x1c22 <EndPageProgramming>
}
    21de:	28 96       	adiw	r28, 0x08	; 8
    21e0:	0f b6       	in	r0, 0x3f	; 63
    21e2:	f8 94       	cli
    21e4:	de bf       	out	0x3e, r29	; 62
    21e6:	0f be       	out	0x3f, r0	; 63
    21e8:	cd bf       	out	0x3d, r28	; 61
    21ea:	df 91       	pop	r29
    21ec:	cf 91       	pop	r28
    21ee:	1f 91       	pop	r17
    21f0:	0f 91       	pop	r16
    21f2:	ff 90       	pop	r15
    21f4:	ef 90       	pop	r14
    21f6:	df 90       	pop	r13
    21f8:	cf 90       	pop	r12
    21fa:	bf 90       	pop	r11
    21fc:	af 90       	pop	r10
    21fe:	9f 90       	pop	r9
    2200:	8f 90       	pop	r8
    2202:	7f 90       	pop	r7
    2204:	6f 90       	pop	r6
    2206:	5f 90       	pop	r5
    2208:	4f 90       	pop	r4
    220a:	3f 90       	pop	r3
    220c:	2f 90       	pop	r2
    220e:	08 95       	ret

00002210 <ExitParallelProgrammingMode>:

void ExitParallelProgrammingMode(void)
{
	disableVppRegulator();
    2210:	0e 94 2b 08 	call	0x1056	; 0x1056 <disableVppRegulator>
	disableVccRegulator();
    2214:	0e 94 2f 08 	call	0x105e	; 0x105e <disableVccRegulator>
	disableVLogic();
    2218:	0e 94 4f 08 	call	0x109e	; 0x109e <disableVLogic>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    221c:	8f e0       	ldi	r24, 0x0F	; 15
    221e:	97 e2       	ldi	r25, 0x27	; 39
    2220:	01 97       	sbiw	r24, 0x01	; 1
    2222:	f1 f7       	brne	.-4      	; 0x2220 <ExitParallelProgrammingMode+0x10>
    2224:	00 c0       	rjmp	.+0      	; 0x2226 <ExitParallelProgrammingMode+0x16>
    2226:	00 00       	nop
	
	_delay_ms(5);
	DATA_PORT = 0x00;
    2228:	10 92 0b 01 	sts	0x010B, r1
	CONTROL_PORT = 0x00;
    222c:	1b b8       	out	0x0b, r1	; 11
    222e:	8f ec       	ldi	r24, 0xCF	; 207
    2230:	97 e0       	ldi	r25, 0x07	; 7
    2232:	01 97       	sbiw	r24, 0x01	; 1
    2234:	f1 f7       	brne	.-4      	; 0x2232 <ExitParallelProgrammingMode+0x22>
    2236:	00 c0       	rjmp	.+0      	; 0x2238 <ExitParallelProgrammingMode+0x28>
    2238:	00 00       	nop
	_delay_ms(1);
	SPI_FPGA_Write(FPGA_Disable);
    223a:	80 e0       	ldi	r24, 0x00	; 0
    223c:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <SPI_FPGA_Write>
	
	SR_CNTRL_PORT &= ~(1<<SR_RESET); //Clearing Max395s and Shift Registers
    2240:	e5 e0       	ldi	r30, 0x05	; 5
    2242:	f1 e0       	ldi	r31, 0x01	; 1
    2244:	80 81       	ld	r24, Z
    2246:	8f 7d       	andi	r24, 0xDF	; 223
    2248:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    224a:	95 e3       	ldi	r25, 0x35	; 53
    224c:	9a 95       	dec	r25
    224e:	f1 f7       	brne	.-4      	; 0x224c <ExitParallelProgrammingMode+0x3c>
    2250:	00 00       	nop
	_delay_us(20);
	SR_CNTRL_PORT |= (1<<SR_RESET);
    2252:	80 81       	ld	r24, Z
    2254:	80 62       	ori	r24, 0x20	; 32
    2256:	80 83       	st	Z, r24
    2258:	2d e0       	ldi	r18, 0x0D	; 13
    225a:	2a 95       	dec	r18
    225c:	f1 f7       	brne	.-4      	; 0x225a <ExitParallelProgrammingMode+0x4a>
    225e:	00 00       	nop
	_delay_us(5);
	SR_CNTRL_PORT |= (1<<SRCS);
    2260:	80 81       	ld	r24, Z
    2262:	80 61       	ori	r24, 0x10	; 16
    2264:	80 83       	st	Z, r24
    2266:	85 e3       	ldi	r24, 0x35	; 53
    2268:	8a 95       	dec	r24
    226a:	f1 f7       	brne	.-4      	; 0x2268 <ExitParallelProgrammingMode+0x58>
    226c:	00 00       	nop
	_delay_us(20);
	SR_CNTRL_PORT &= ~(1<<SRCS);
    226e:	80 81       	ld	r24, Z
    2270:	8f 7e       	andi	r24, 0xEF	; 239
    2272:	80 83       	st	Z, r24
	
	SR_CNTRL_PORT |= (1<<SROE);
    2274:	80 81       	ld	r24, Z
    2276:	88 60       	ori	r24, 0x08	; 8
    2278:	80 83       	st	Z, r24
	
	LED_PORT |= ((1<<LED_Green) | (1<<LED_Yellow) | (1<<LED_Red));
    227a:	84 b3       	in	r24, 0x14	; 20
    227c:	87 60       	ori	r24, 0x07	; 7
    227e:	84 bb       	out	0x14, r24	; 20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2280:	9f ef       	ldi	r25, 0xFF	; 255
    2282:	29 e6       	ldi	r18, 0x69	; 105
    2284:	88 e1       	ldi	r24, 0x18	; 24
    2286:	91 50       	subi	r25, 0x01	; 1
    2288:	20 40       	sbci	r18, 0x00	; 0
    228a:	80 40       	sbci	r24, 0x00	; 0
    228c:	e1 f7       	brne	.-8      	; 0x2286 <ExitParallelProgrammingMode+0x76>
    228e:	00 c0       	rjmp	.+0      	; 0x2290 <ExitParallelProgrammingMode+0x80>
    2290:	00 00       	nop
	_delay_ms(1000);
	LED_PORT |= (1<<LED_Green);
    2292:	a0 9a       	sbi	0x14, 0	; 20
	LED_PORT &= ~((1<<LED_Yellow) | (1<<LED_Red));
    2294:	84 b3       	in	r24, 0x14	; 20
    2296:	89 7f       	andi	r24, 0xF9	; 249
    2298:	84 bb       	out	0x14, r24	; 20
    229a:	08 95       	ret

0000229c <main>:
    229c:	2f ef       	ldi	r18, 0xFF	; 255
    229e:	89 e6       	ldi	r24, 0x69	; 105
    22a0:	98 e1       	ldi	r25, 0x18	; 24
    22a2:	21 50       	subi	r18, 0x01	; 1
    22a4:	80 40       	sbci	r24, 0x00	; 0
    22a6:	90 40       	sbci	r25, 0x00	; 0
    22a8:	e1 f7       	brne	.-8      	; 0x22a2 <main+0x6>
    22aa:	00 c0       	rjmp	.+0      	; 0x22ac <main+0x10>
    22ac:	00 00       	nop
#include "Program/AVR.h"

int main(void)
{
	_delay_ms(1000);
	LED_DDR |= ((1<<LED_Green) | (1<<LED_Yellow) | (1<<LED_Red));
    22ae:	83 b3       	in	r24, 0x13	; 19
    22b0:	87 60       	ori	r24, 0x07	; 7
    22b2:	83 bb       	out	0x13, r24	; 19
	LED_PORT |= (1<<LED_Green);
    22b4:	a0 9a       	sbi	0x14, 0	; 20
	connectionInit(); 
    22b6:	0e 94 bc 00 	call	0x178	; 0x178 <connectionInit>
	hexInit();
    22ba:	f1 d9       	rcall	.-3102   	; 0x169e <hexInit>
	//ethernetInit(); 
	sei(); 
    22bc:	78 94       	sei
	//Collecting garbage transmission on wi-fi module bootup 
	//receiveStatus();
	//networkConnect("Wi-Pro", "brightshoe902"); 
	//_delay_ms(100);
	//networkTest();  
	pollingInit(); 
    22be:	0e 94 a9 00 	call	0x152	; 0x152 <pollingInit>
	//Write test file to external RAM
	//Test switching circuitry code
	
	//Program(ATmega324PA);
	
	printf("Done!\n"); 
    22c2:	83 e0       	ldi	r24, 0x03	; 3
    22c4:	99 e0       	ldi	r25, 0x09	; 9
    22c6:	8c d0       	rcall	.+280    	; 0x23e0 <puts>
    22c8:	ff cf       	rjmp	.-2      	; 0x22c8 <main+0x2c>

000022ca <__udivmodsi4>:
    22ca:	a1 e2       	ldi	r26, 0x21	; 33
    22cc:	1a 2e       	mov	r1, r26
    22ce:	aa 1b       	sub	r26, r26
    22d0:	bb 1b       	sub	r27, r27
    22d2:	fd 01       	movw	r30, r26
    22d4:	0d c0       	rjmp	.+26     	; 0x22f0 <__udivmodsi4_ep>

000022d6 <__udivmodsi4_loop>:
    22d6:	aa 1f       	adc	r26, r26
    22d8:	bb 1f       	adc	r27, r27
    22da:	ee 1f       	adc	r30, r30
    22dc:	ff 1f       	adc	r31, r31
    22de:	a2 17       	cp	r26, r18
    22e0:	b3 07       	cpc	r27, r19
    22e2:	e4 07       	cpc	r30, r20
    22e4:	f5 07       	cpc	r31, r21
    22e6:	20 f0       	brcs	.+8      	; 0x22f0 <__udivmodsi4_ep>
    22e8:	a2 1b       	sub	r26, r18
    22ea:	b3 0b       	sbc	r27, r19
    22ec:	e4 0b       	sbc	r30, r20
    22ee:	f5 0b       	sbc	r31, r21

000022f0 <__udivmodsi4_ep>:
    22f0:	66 1f       	adc	r22, r22
    22f2:	77 1f       	adc	r23, r23
    22f4:	88 1f       	adc	r24, r24
    22f6:	99 1f       	adc	r25, r25
    22f8:	1a 94       	dec	r1
    22fa:	69 f7       	brne	.-38     	; 0x22d6 <__udivmodsi4_loop>
    22fc:	60 95       	com	r22
    22fe:	70 95       	com	r23
    2300:	80 95       	com	r24
    2302:	90 95       	com	r25
    2304:	9b 01       	movw	r18, r22
    2306:	ac 01       	movw	r20, r24
    2308:	bd 01       	movw	r22, r26
    230a:	cf 01       	movw	r24, r30
    230c:	08 95       	ret

0000230e <__umulhisi3>:
    230e:	a2 9f       	mul	r26, r18
    2310:	b0 01       	movw	r22, r0
    2312:	b3 9f       	mul	r27, r19
    2314:	c0 01       	movw	r24, r0
    2316:	a3 9f       	mul	r26, r19
    2318:	70 0d       	add	r23, r0
    231a:	81 1d       	adc	r24, r1
    231c:	11 24       	eor	r1, r1
    231e:	91 1d       	adc	r25, r1
    2320:	b2 9f       	mul	r27, r18
    2322:	70 0d       	add	r23, r0
    2324:	81 1d       	adc	r24, r1
    2326:	11 24       	eor	r1, r1
    2328:	91 1d       	adc	r25, r1
    232a:	08 95       	ret

0000232c <strcat>:
    232c:	fb 01       	movw	r30, r22
    232e:	dc 01       	movw	r26, r24
    2330:	0d 90       	ld	r0, X+
    2332:	00 20       	and	r0, r0
    2334:	e9 f7       	brne	.-6      	; 0x2330 <strcat+0x4>
    2336:	11 97       	sbiw	r26, 0x01	; 1
    2338:	01 90       	ld	r0, Z+
    233a:	0d 92       	st	X+, r0
    233c:	00 20       	and	r0, r0
    233e:	e1 f7       	brne	.-8      	; 0x2338 <strcat+0xc>
    2340:	08 95       	ret

00002342 <strcpy>:
    2342:	fb 01       	movw	r30, r22
    2344:	dc 01       	movw	r26, r24
    2346:	01 90       	ld	r0, Z+
    2348:	0d 92       	st	X+, r0
    234a:	00 20       	and	r0, r0
    234c:	e1 f7       	brne	.-8      	; 0x2346 <strcpy+0x4>
    234e:	08 95       	ret

00002350 <fputc>:
    2350:	0f 93       	push	r16
    2352:	1f 93       	push	r17
    2354:	cf 93       	push	r28
    2356:	df 93       	push	r29
    2358:	18 2f       	mov	r17, r24
    235a:	09 2f       	mov	r16, r25
    235c:	eb 01       	movw	r28, r22
    235e:	8b 81       	ldd	r24, Y+3	; 0x03
    2360:	81 fd       	sbrc	r24, 1
    2362:	03 c0       	rjmp	.+6      	; 0x236a <fputc+0x1a>
    2364:	8f ef       	ldi	r24, 0xFF	; 255
    2366:	9f ef       	ldi	r25, 0xFF	; 255
    2368:	20 c0       	rjmp	.+64     	; 0x23aa <fputc+0x5a>
    236a:	82 ff       	sbrs	r24, 2
    236c:	10 c0       	rjmp	.+32     	; 0x238e <fputc+0x3e>
    236e:	4e 81       	ldd	r20, Y+6	; 0x06
    2370:	5f 81       	ldd	r21, Y+7	; 0x07
    2372:	2c 81       	ldd	r18, Y+4	; 0x04
    2374:	3d 81       	ldd	r19, Y+5	; 0x05
    2376:	42 17       	cp	r20, r18
    2378:	53 07       	cpc	r21, r19
    237a:	7c f4       	brge	.+30     	; 0x239a <fputc+0x4a>
    237c:	e8 81       	ld	r30, Y
    237e:	f9 81       	ldd	r31, Y+1	; 0x01
    2380:	9f 01       	movw	r18, r30
    2382:	2f 5f       	subi	r18, 0xFF	; 255
    2384:	3f 4f       	sbci	r19, 0xFF	; 255
    2386:	39 83       	std	Y+1, r19	; 0x01
    2388:	28 83       	st	Y, r18
    238a:	10 83       	st	Z, r17
    238c:	06 c0       	rjmp	.+12     	; 0x239a <fputc+0x4a>
    238e:	e8 85       	ldd	r30, Y+8	; 0x08
    2390:	f9 85       	ldd	r31, Y+9	; 0x09
    2392:	81 2f       	mov	r24, r17
    2394:	09 95       	icall
    2396:	89 2b       	or	r24, r25
    2398:	29 f7       	brne	.-54     	; 0x2364 <fputc+0x14>
    239a:	2e 81       	ldd	r18, Y+6	; 0x06
    239c:	3f 81       	ldd	r19, Y+7	; 0x07
    239e:	2f 5f       	subi	r18, 0xFF	; 255
    23a0:	3f 4f       	sbci	r19, 0xFF	; 255
    23a2:	3f 83       	std	Y+7, r19	; 0x07
    23a4:	2e 83       	std	Y+6, r18	; 0x06
    23a6:	81 2f       	mov	r24, r17
    23a8:	90 2f       	mov	r25, r16
    23aa:	df 91       	pop	r29
    23ac:	cf 91       	pop	r28
    23ae:	1f 91       	pop	r17
    23b0:	0f 91       	pop	r16
    23b2:	08 95       	ret

000023b4 <printf>:
    23b4:	cf 93       	push	r28
    23b6:	df 93       	push	r29
    23b8:	cd b7       	in	r28, 0x3d	; 61
    23ba:	de b7       	in	r29, 0x3e	; 62
    23bc:	fe 01       	movw	r30, r28
    23be:	35 96       	adiw	r30, 0x05	; 5
    23c0:	61 91       	ld	r22, Z+
    23c2:	71 91       	ld	r23, Z+
    23c4:	af 01       	movw	r20, r30
    23c6:	80 91 ed 0a 	lds	r24, 0x0AED
    23ca:	90 91 ee 0a 	lds	r25, 0x0AEE
    23ce:	35 d0       	rcall	.+106    	; 0x243a <vfprintf>
    23d0:	df 91       	pop	r29
    23d2:	cf 91       	pop	r28
    23d4:	08 95       	ret

000023d6 <putchar>:
    23d6:	60 91 ed 0a 	lds	r22, 0x0AED
    23da:	70 91 ee 0a 	lds	r23, 0x0AEE
    23de:	b8 cf       	rjmp	.-144    	; 0x2350 <fputc>

000023e0 <puts>:
    23e0:	0f 93       	push	r16
    23e2:	1f 93       	push	r17
    23e4:	cf 93       	push	r28
    23e6:	df 93       	push	r29
    23e8:	e0 91 ed 0a 	lds	r30, 0x0AED
    23ec:	f0 91 ee 0a 	lds	r31, 0x0AEE
    23f0:	23 81       	ldd	r18, Z+3	; 0x03
    23f2:	21 ff       	sbrs	r18, 1
    23f4:	1b c0       	rjmp	.+54     	; 0x242c <puts+0x4c>
    23f6:	ec 01       	movw	r28, r24
    23f8:	00 e0       	ldi	r16, 0x00	; 0
    23fa:	10 e0       	ldi	r17, 0x00	; 0
    23fc:	89 91       	ld	r24, Y+
    23fe:	60 91 ed 0a 	lds	r22, 0x0AED
    2402:	70 91 ee 0a 	lds	r23, 0x0AEE
    2406:	db 01       	movw	r26, r22
    2408:	18 96       	adiw	r26, 0x08	; 8
    240a:	ed 91       	ld	r30, X+
    240c:	fc 91       	ld	r31, X
    240e:	19 97       	sbiw	r26, 0x09	; 9
    2410:	88 23       	and	r24, r24
    2412:	31 f0       	breq	.+12     	; 0x2420 <puts+0x40>
    2414:	09 95       	icall
    2416:	89 2b       	or	r24, r25
    2418:	89 f3       	breq	.-30     	; 0x23fc <puts+0x1c>
    241a:	0f ef       	ldi	r16, 0xFF	; 255
    241c:	1f ef       	ldi	r17, 0xFF	; 255
    241e:	ee cf       	rjmp	.-36     	; 0x23fc <puts+0x1c>
    2420:	8a e0       	ldi	r24, 0x0A	; 10
    2422:	09 95       	icall
    2424:	89 2b       	or	r24, r25
    2426:	11 f4       	brne	.+4      	; 0x242c <puts+0x4c>
    2428:	c8 01       	movw	r24, r16
    242a:	02 c0       	rjmp	.+4      	; 0x2430 <puts+0x50>
    242c:	8f ef       	ldi	r24, 0xFF	; 255
    242e:	9f ef       	ldi	r25, 0xFF	; 255
    2430:	df 91       	pop	r29
    2432:	cf 91       	pop	r28
    2434:	1f 91       	pop	r17
    2436:	0f 91       	pop	r16
    2438:	08 95       	ret

0000243a <vfprintf>:
    243a:	2f 92       	push	r2
    243c:	3f 92       	push	r3
    243e:	4f 92       	push	r4
    2440:	5f 92       	push	r5
    2442:	6f 92       	push	r6
    2444:	7f 92       	push	r7
    2446:	8f 92       	push	r8
    2448:	9f 92       	push	r9
    244a:	af 92       	push	r10
    244c:	bf 92       	push	r11
    244e:	cf 92       	push	r12
    2450:	df 92       	push	r13
    2452:	ef 92       	push	r14
    2454:	ff 92       	push	r15
    2456:	0f 93       	push	r16
    2458:	1f 93       	push	r17
    245a:	cf 93       	push	r28
    245c:	df 93       	push	r29
    245e:	cd b7       	in	r28, 0x3d	; 61
    2460:	de b7       	in	r29, 0x3e	; 62
    2462:	2c 97       	sbiw	r28, 0x0c	; 12
    2464:	0f b6       	in	r0, 0x3f	; 63
    2466:	f8 94       	cli
    2468:	de bf       	out	0x3e, r29	; 62
    246a:	0f be       	out	0x3f, r0	; 63
    246c:	cd bf       	out	0x3d, r28	; 61
    246e:	7c 01       	movw	r14, r24
    2470:	6b 01       	movw	r12, r22
    2472:	8a 01       	movw	r16, r20
    2474:	fc 01       	movw	r30, r24
    2476:	17 82       	std	Z+7, r1	; 0x07
    2478:	16 82       	std	Z+6, r1	; 0x06
    247a:	83 81       	ldd	r24, Z+3	; 0x03
    247c:	81 ff       	sbrs	r24, 1
    247e:	b0 c1       	rjmp	.+864    	; 0x27e0 <vfprintf+0x3a6>
    2480:	ce 01       	movw	r24, r28
    2482:	01 96       	adiw	r24, 0x01	; 1
    2484:	4c 01       	movw	r8, r24
    2486:	f7 01       	movw	r30, r14
    2488:	93 81       	ldd	r25, Z+3	; 0x03
    248a:	f6 01       	movw	r30, r12
    248c:	93 fd       	sbrc	r25, 3
    248e:	85 91       	lpm	r24, Z+
    2490:	93 ff       	sbrs	r25, 3
    2492:	81 91       	ld	r24, Z+
    2494:	6f 01       	movw	r12, r30
    2496:	88 23       	and	r24, r24
    2498:	09 f4       	brne	.+2      	; 0x249c <vfprintf+0x62>
    249a:	9e c1       	rjmp	.+828    	; 0x27d8 <vfprintf+0x39e>
    249c:	85 32       	cpi	r24, 0x25	; 37
    249e:	39 f4       	brne	.+14     	; 0x24ae <vfprintf+0x74>
    24a0:	93 fd       	sbrc	r25, 3
    24a2:	85 91       	lpm	r24, Z+
    24a4:	93 ff       	sbrs	r25, 3
    24a6:	81 91       	ld	r24, Z+
    24a8:	6f 01       	movw	r12, r30
    24aa:	85 32       	cpi	r24, 0x25	; 37
    24ac:	21 f4       	brne	.+8      	; 0x24b6 <vfprintf+0x7c>
    24ae:	b7 01       	movw	r22, r14
    24b0:	90 e0       	ldi	r25, 0x00	; 0
    24b2:	4e df       	rcall	.-356    	; 0x2350 <fputc>
    24b4:	e8 cf       	rjmp	.-48     	; 0x2486 <vfprintf+0x4c>
    24b6:	51 2c       	mov	r5, r1
    24b8:	31 2c       	mov	r3, r1
    24ba:	20 e0       	ldi	r18, 0x00	; 0
    24bc:	20 32       	cpi	r18, 0x20	; 32
    24be:	a0 f4       	brcc	.+40     	; 0x24e8 <vfprintf+0xae>
    24c0:	8b 32       	cpi	r24, 0x2B	; 43
    24c2:	69 f0       	breq	.+26     	; 0x24de <vfprintf+0xa4>
    24c4:	30 f4       	brcc	.+12     	; 0x24d2 <vfprintf+0x98>
    24c6:	80 32       	cpi	r24, 0x20	; 32
    24c8:	59 f0       	breq	.+22     	; 0x24e0 <vfprintf+0xa6>
    24ca:	83 32       	cpi	r24, 0x23	; 35
    24cc:	69 f4       	brne	.+26     	; 0x24e8 <vfprintf+0xae>
    24ce:	20 61       	ori	r18, 0x10	; 16
    24d0:	2c c0       	rjmp	.+88     	; 0x252a <vfprintf+0xf0>
    24d2:	8d 32       	cpi	r24, 0x2D	; 45
    24d4:	39 f0       	breq	.+14     	; 0x24e4 <vfprintf+0xaa>
    24d6:	80 33       	cpi	r24, 0x30	; 48
    24d8:	39 f4       	brne	.+14     	; 0x24e8 <vfprintf+0xae>
    24da:	21 60       	ori	r18, 0x01	; 1
    24dc:	26 c0       	rjmp	.+76     	; 0x252a <vfprintf+0xf0>
    24de:	22 60       	ori	r18, 0x02	; 2
    24e0:	24 60       	ori	r18, 0x04	; 4
    24e2:	23 c0       	rjmp	.+70     	; 0x252a <vfprintf+0xf0>
    24e4:	28 60       	ori	r18, 0x08	; 8
    24e6:	21 c0       	rjmp	.+66     	; 0x252a <vfprintf+0xf0>
    24e8:	27 fd       	sbrc	r18, 7
    24ea:	27 c0       	rjmp	.+78     	; 0x253a <vfprintf+0x100>
    24ec:	30 ed       	ldi	r19, 0xD0	; 208
    24ee:	38 0f       	add	r19, r24
    24f0:	3a 30       	cpi	r19, 0x0A	; 10
    24f2:	78 f4       	brcc	.+30     	; 0x2512 <vfprintf+0xd8>
    24f4:	26 ff       	sbrs	r18, 6
    24f6:	06 c0       	rjmp	.+12     	; 0x2504 <vfprintf+0xca>
    24f8:	fa e0       	ldi	r31, 0x0A	; 10
    24fa:	5f 9e       	mul	r5, r31
    24fc:	30 0d       	add	r19, r0
    24fe:	11 24       	eor	r1, r1
    2500:	53 2e       	mov	r5, r19
    2502:	13 c0       	rjmp	.+38     	; 0x252a <vfprintf+0xf0>
    2504:	8a e0       	ldi	r24, 0x0A	; 10
    2506:	38 9e       	mul	r3, r24
    2508:	30 0d       	add	r19, r0
    250a:	11 24       	eor	r1, r1
    250c:	33 2e       	mov	r3, r19
    250e:	20 62       	ori	r18, 0x20	; 32
    2510:	0c c0       	rjmp	.+24     	; 0x252a <vfprintf+0xf0>
    2512:	8e 32       	cpi	r24, 0x2E	; 46
    2514:	21 f4       	brne	.+8      	; 0x251e <vfprintf+0xe4>
    2516:	26 fd       	sbrc	r18, 6
    2518:	5f c1       	rjmp	.+702    	; 0x27d8 <vfprintf+0x39e>
    251a:	20 64       	ori	r18, 0x40	; 64
    251c:	06 c0       	rjmp	.+12     	; 0x252a <vfprintf+0xf0>
    251e:	8c 36       	cpi	r24, 0x6C	; 108
    2520:	11 f4       	brne	.+4      	; 0x2526 <vfprintf+0xec>
    2522:	20 68       	ori	r18, 0x80	; 128
    2524:	02 c0       	rjmp	.+4      	; 0x252a <vfprintf+0xf0>
    2526:	88 36       	cpi	r24, 0x68	; 104
    2528:	41 f4       	brne	.+16     	; 0x253a <vfprintf+0x100>
    252a:	f6 01       	movw	r30, r12
    252c:	93 fd       	sbrc	r25, 3
    252e:	85 91       	lpm	r24, Z+
    2530:	93 ff       	sbrs	r25, 3
    2532:	81 91       	ld	r24, Z+
    2534:	6f 01       	movw	r12, r30
    2536:	81 11       	cpse	r24, r1
    2538:	c1 cf       	rjmp	.-126    	; 0x24bc <vfprintf+0x82>
    253a:	98 2f       	mov	r25, r24
    253c:	9f 7d       	andi	r25, 0xDF	; 223
    253e:	95 54       	subi	r25, 0x45	; 69
    2540:	93 30       	cpi	r25, 0x03	; 3
    2542:	28 f4       	brcc	.+10     	; 0x254e <vfprintf+0x114>
    2544:	0c 5f       	subi	r16, 0xFC	; 252
    2546:	1f 4f       	sbci	r17, 0xFF	; 255
    2548:	ff e3       	ldi	r31, 0x3F	; 63
    254a:	f9 83       	std	Y+1, r31	; 0x01
    254c:	0d c0       	rjmp	.+26     	; 0x2568 <vfprintf+0x12e>
    254e:	83 36       	cpi	r24, 0x63	; 99
    2550:	31 f0       	breq	.+12     	; 0x255e <vfprintf+0x124>
    2552:	83 37       	cpi	r24, 0x73	; 115
    2554:	71 f0       	breq	.+28     	; 0x2572 <vfprintf+0x138>
    2556:	83 35       	cpi	r24, 0x53	; 83
    2558:	09 f0       	breq	.+2      	; 0x255c <vfprintf+0x122>
    255a:	57 c0       	rjmp	.+174    	; 0x260a <vfprintf+0x1d0>
    255c:	21 c0       	rjmp	.+66     	; 0x25a0 <vfprintf+0x166>
    255e:	f8 01       	movw	r30, r16
    2560:	80 81       	ld	r24, Z
    2562:	89 83       	std	Y+1, r24	; 0x01
    2564:	0e 5f       	subi	r16, 0xFE	; 254
    2566:	1f 4f       	sbci	r17, 0xFF	; 255
    2568:	44 24       	eor	r4, r4
    256a:	43 94       	inc	r4
    256c:	51 2c       	mov	r5, r1
    256e:	54 01       	movw	r10, r8
    2570:	14 c0       	rjmp	.+40     	; 0x259a <vfprintf+0x160>
    2572:	38 01       	movw	r6, r16
    2574:	f2 e0       	ldi	r31, 0x02	; 2
    2576:	6f 0e       	add	r6, r31
    2578:	71 1c       	adc	r7, r1
    257a:	f8 01       	movw	r30, r16
    257c:	a0 80       	ld	r10, Z
    257e:	b1 80       	ldd	r11, Z+1	; 0x01
    2580:	26 ff       	sbrs	r18, 6
    2582:	03 c0       	rjmp	.+6      	; 0x258a <vfprintf+0x150>
    2584:	65 2d       	mov	r22, r5
    2586:	70 e0       	ldi	r23, 0x00	; 0
    2588:	02 c0       	rjmp	.+4      	; 0x258e <vfprintf+0x154>
    258a:	6f ef       	ldi	r22, 0xFF	; 255
    258c:	7f ef       	ldi	r23, 0xFF	; 255
    258e:	c5 01       	movw	r24, r10
    2590:	2c 87       	std	Y+12, r18	; 0x0c
    2592:	4c d1       	rcall	.+664    	; 0x282c <strnlen>
    2594:	2c 01       	movw	r4, r24
    2596:	83 01       	movw	r16, r6
    2598:	2c 85       	ldd	r18, Y+12	; 0x0c
    259a:	2f 77       	andi	r18, 0x7F	; 127
    259c:	22 2e       	mov	r2, r18
    259e:	16 c0       	rjmp	.+44     	; 0x25cc <vfprintf+0x192>
    25a0:	38 01       	movw	r6, r16
    25a2:	f2 e0       	ldi	r31, 0x02	; 2
    25a4:	6f 0e       	add	r6, r31
    25a6:	71 1c       	adc	r7, r1
    25a8:	f8 01       	movw	r30, r16
    25aa:	a0 80       	ld	r10, Z
    25ac:	b1 80       	ldd	r11, Z+1	; 0x01
    25ae:	26 ff       	sbrs	r18, 6
    25b0:	03 c0       	rjmp	.+6      	; 0x25b8 <vfprintf+0x17e>
    25b2:	65 2d       	mov	r22, r5
    25b4:	70 e0       	ldi	r23, 0x00	; 0
    25b6:	02 c0       	rjmp	.+4      	; 0x25bc <vfprintf+0x182>
    25b8:	6f ef       	ldi	r22, 0xFF	; 255
    25ba:	7f ef       	ldi	r23, 0xFF	; 255
    25bc:	c5 01       	movw	r24, r10
    25be:	2c 87       	std	Y+12, r18	; 0x0c
    25c0:	2a d1       	rcall	.+596    	; 0x2816 <strnlen_P>
    25c2:	2c 01       	movw	r4, r24
    25c4:	2c 85       	ldd	r18, Y+12	; 0x0c
    25c6:	20 68       	ori	r18, 0x80	; 128
    25c8:	22 2e       	mov	r2, r18
    25ca:	83 01       	movw	r16, r6
    25cc:	23 fc       	sbrc	r2, 3
    25ce:	19 c0       	rjmp	.+50     	; 0x2602 <vfprintf+0x1c8>
    25d0:	83 2d       	mov	r24, r3
    25d2:	90 e0       	ldi	r25, 0x00	; 0
    25d4:	48 16       	cp	r4, r24
    25d6:	59 06       	cpc	r5, r25
    25d8:	a0 f4       	brcc	.+40     	; 0x2602 <vfprintf+0x1c8>
    25da:	b7 01       	movw	r22, r14
    25dc:	80 e2       	ldi	r24, 0x20	; 32
    25de:	90 e0       	ldi	r25, 0x00	; 0
    25e0:	b7 de       	rcall	.-658    	; 0x2350 <fputc>
    25e2:	3a 94       	dec	r3
    25e4:	f5 cf       	rjmp	.-22     	; 0x25d0 <vfprintf+0x196>
    25e6:	f5 01       	movw	r30, r10
    25e8:	27 fc       	sbrc	r2, 7
    25ea:	85 91       	lpm	r24, Z+
    25ec:	27 fe       	sbrs	r2, 7
    25ee:	81 91       	ld	r24, Z+
    25f0:	5f 01       	movw	r10, r30
    25f2:	b7 01       	movw	r22, r14
    25f4:	90 e0       	ldi	r25, 0x00	; 0
    25f6:	ac de       	rcall	.-680    	; 0x2350 <fputc>
    25f8:	31 10       	cpse	r3, r1
    25fa:	3a 94       	dec	r3
    25fc:	f1 e0       	ldi	r31, 0x01	; 1
    25fe:	4f 1a       	sub	r4, r31
    2600:	51 08       	sbc	r5, r1
    2602:	41 14       	cp	r4, r1
    2604:	51 04       	cpc	r5, r1
    2606:	79 f7       	brne	.-34     	; 0x25e6 <vfprintf+0x1ac>
    2608:	de c0       	rjmp	.+444    	; 0x27c6 <vfprintf+0x38c>
    260a:	84 36       	cpi	r24, 0x64	; 100
    260c:	11 f0       	breq	.+4      	; 0x2612 <vfprintf+0x1d8>
    260e:	89 36       	cpi	r24, 0x69	; 105
    2610:	31 f5       	brne	.+76     	; 0x265e <vfprintf+0x224>
    2612:	f8 01       	movw	r30, r16
    2614:	27 ff       	sbrs	r18, 7
    2616:	07 c0       	rjmp	.+14     	; 0x2626 <vfprintf+0x1ec>
    2618:	60 81       	ld	r22, Z
    261a:	71 81       	ldd	r23, Z+1	; 0x01
    261c:	82 81       	ldd	r24, Z+2	; 0x02
    261e:	93 81       	ldd	r25, Z+3	; 0x03
    2620:	0c 5f       	subi	r16, 0xFC	; 252
    2622:	1f 4f       	sbci	r17, 0xFF	; 255
    2624:	08 c0       	rjmp	.+16     	; 0x2636 <vfprintf+0x1fc>
    2626:	60 81       	ld	r22, Z
    2628:	71 81       	ldd	r23, Z+1	; 0x01
    262a:	88 27       	eor	r24, r24
    262c:	77 fd       	sbrc	r23, 7
    262e:	80 95       	com	r24
    2630:	98 2f       	mov	r25, r24
    2632:	0e 5f       	subi	r16, 0xFE	; 254
    2634:	1f 4f       	sbci	r17, 0xFF	; 255
    2636:	2f 76       	andi	r18, 0x6F	; 111
    2638:	b2 2e       	mov	r11, r18
    263a:	97 ff       	sbrs	r25, 7
    263c:	09 c0       	rjmp	.+18     	; 0x2650 <vfprintf+0x216>
    263e:	90 95       	com	r25
    2640:	80 95       	com	r24
    2642:	70 95       	com	r23
    2644:	61 95       	neg	r22
    2646:	7f 4f       	sbci	r23, 0xFF	; 255
    2648:	8f 4f       	sbci	r24, 0xFF	; 255
    264a:	9f 4f       	sbci	r25, 0xFF	; 255
    264c:	20 68       	ori	r18, 0x80	; 128
    264e:	b2 2e       	mov	r11, r18
    2650:	2a e0       	ldi	r18, 0x0A	; 10
    2652:	30 e0       	ldi	r19, 0x00	; 0
    2654:	a4 01       	movw	r20, r8
    2656:	f5 d0       	rcall	.+490    	; 0x2842 <__ultoa_invert>
    2658:	a8 2e       	mov	r10, r24
    265a:	a8 18       	sub	r10, r8
    265c:	43 c0       	rjmp	.+134    	; 0x26e4 <vfprintf+0x2aa>
    265e:	85 37       	cpi	r24, 0x75	; 117
    2660:	29 f4       	brne	.+10     	; 0x266c <vfprintf+0x232>
    2662:	2f 7e       	andi	r18, 0xEF	; 239
    2664:	b2 2e       	mov	r11, r18
    2666:	2a e0       	ldi	r18, 0x0A	; 10
    2668:	30 e0       	ldi	r19, 0x00	; 0
    266a:	25 c0       	rjmp	.+74     	; 0x26b6 <vfprintf+0x27c>
    266c:	f2 2f       	mov	r31, r18
    266e:	f9 7f       	andi	r31, 0xF9	; 249
    2670:	bf 2e       	mov	r11, r31
    2672:	8f 36       	cpi	r24, 0x6F	; 111
    2674:	c1 f0       	breq	.+48     	; 0x26a6 <vfprintf+0x26c>
    2676:	18 f4       	brcc	.+6      	; 0x267e <vfprintf+0x244>
    2678:	88 35       	cpi	r24, 0x58	; 88
    267a:	79 f0       	breq	.+30     	; 0x269a <vfprintf+0x260>
    267c:	ad c0       	rjmp	.+346    	; 0x27d8 <vfprintf+0x39e>
    267e:	80 37       	cpi	r24, 0x70	; 112
    2680:	19 f0       	breq	.+6      	; 0x2688 <vfprintf+0x24e>
    2682:	88 37       	cpi	r24, 0x78	; 120
    2684:	21 f0       	breq	.+8      	; 0x268e <vfprintf+0x254>
    2686:	a8 c0       	rjmp	.+336    	; 0x27d8 <vfprintf+0x39e>
    2688:	2f 2f       	mov	r18, r31
    268a:	20 61       	ori	r18, 0x10	; 16
    268c:	b2 2e       	mov	r11, r18
    268e:	b4 fe       	sbrs	r11, 4
    2690:	0d c0       	rjmp	.+26     	; 0x26ac <vfprintf+0x272>
    2692:	8b 2d       	mov	r24, r11
    2694:	84 60       	ori	r24, 0x04	; 4
    2696:	b8 2e       	mov	r11, r24
    2698:	09 c0       	rjmp	.+18     	; 0x26ac <vfprintf+0x272>
    269a:	24 ff       	sbrs	r18, 4
    269c:	0a c0       	rjmp	.+20     	; 0x26b2 <vfprintf+0x278>
    269e:	9f 2f       	mov	r25, r31
    26a0:	96 60       	ori	r25, 0x06	; 6
    26a2:	b9 2e       	mov	r11, r25
    26a4:	06 c0       	rjmp	.+12     	; 0x26b2 <vfprintf+0x278>
    26a6:	28 e0       	ldi	r18, 0x08	; 8
    26a8:	30 e0       	ldi	r19, 0x00	; 0
    26aa:	05 c0       	rjmp	.+10     	; 0x26b6 <vfprintf+0x27c>
    26ac:	20 e1       	ldi	r18, 0x10	; 16
    26ae:	30 e0       	ldi	r19, 0x00	; 0
    26b0:	02 c0       	rjmp	.+4      	; 0x26b6 <vfprintf+0x27c>
    26b2:	20 e1       	ldi	r18, 0x10	; 16
    26b4:	32 e0       	ldi	r19, 0x02	; 2
    26b6:	f8 01       	movw	r30, r16
    26b8:	b7 fe       	sbrs	r11, 7
    26ba:	07 c0       	rjmp	.+14     	; 0x26ca <vfprintf+0x290>
    26bc:	60 81       	ld	r22, Z
    26be:	71 81       	ldd	r23, Z+1	; 0x01
    26c0:	82 81       	ldd	r24, Z+2	; 0x02
    26c2:	93 81       	ldd	r25, Z+3	; 0x03
    26c4:	0c 5f       	subi	r16, 0xFC	; 252
    26c6:	1f 4f       	sbci	r17, 0xFF	; 255
    26c8:	06 c0       	rjmp	.+12     	; 0x26d6 <vfprintf+0x29c>
    26ca:	60 81       	ld	r22, Z
    26cc:	71 81       	ldd	r23, Z+1	; 0x01
    26ce:	80 e0       	ldi	r24, 0x00	; 0
    26d0:	90 e0       	ldi	r25, 0x00	; 0
    26d2:	0e 5f       	subi	r16, 0xFE	; 254
    26d4:	1f 4f       	sbci	r17, 0xFF	; 255
    26d6:	a4 01       	movw	r20, r8
    26d8:	b4 d0       	rcall	.+360    	; 0x2842 <__ultoa_invert>
    26da:	a8 2e       	mov	r10, r24
    26dc:	a8 18       	sub	r10, r8
    26de:	fb 2d       	mov	r31, r11
    26e0:	ff 77       	andi	r31, 0x7F	; 127
    26e2:	bf 2e       	mov	r11, r31
    26e4:	b6 fe       	sbrs	r11, 6
    26e6:	0b c0       	rjmp	.+22     	; 0x26fe <vfprintf+0x2c4>
    26e8:	2b 2d       	mov	r18, r11
    26ea:	2e 7f       	andi	r18, 0xFE	; 254
    26ec:	a5 14       	cp	r10, r5
    26ee:	50 f4       	brcc	.+20     	; 0x2704 <vfprintf+0x2ca>
    26f0:	b4 fe       	sbrs	r11, 4
    26f2:	0a c0       	rjmp	.+20     	; 0x2708 <vfprintf+0x2ce>
    26f4:	b2 fc       	sbrc	r11, 2
    26f6:	08 c0       	rjmp	.+16     	; 0x2708 <vfprintf+0x2ce>
    26f8:	2b 2d       	mov	r18, r11
    26fa:	2e 7e       	andi	r18, 0xEE	; 238
    26fc:	05 c0       	rjmp	.+10     	; 0x2708 <vfprintf+0x2ce>
    26fe:	7a 2c       	mov	r7, r10
    2700:	2b 2d       	mov	r18, r11
    2702:	03 c0       	rjmp	.+6      	; 0x270a <vfprintf+0x2d0>
    2704:	7a 2c       	mov	r7, r10
    2706:	01 c0       	rjmp	.+2      	; 0x270a <vfprintf+0x2d0>
    2708:	75 2c       	mov	r7, r5
    270a:	24 ff       	sbrs	r18, 4
    270c:	0d c0       	rjmp	.+26     	; 0x2728 <vfprintf+0x2ee>
    270e:	fe 01       	movw	r30, r28
    2710:	ea 0d       	add	r30, r10
    2712:	f1 1d       	adc	r31, r1
    2714:	80 81       	ld	r24, Z
    2716:	80 33       	cpi	r24, 0x30	; 48
    2718:	11 f4       	brne	.+4      	; 0x271e <vfprintf+0x2e4>
    271a:	29 7e       	andi	r18, 0xE9	; 233
    271c:	09 c0       	rjmp	.+18     	; 0x2730 <vfprintf+0x2f6>
    271e:	22 ff       	sbrs	r18, 2
    2720:	06 c0       	rjmp	.+12     	; 0x272e <vfprintf+0x2f4>
    2722:	73 94       	inc	r7
    2724:	73 94       	inc	r7
    2726:	04 c0       	rjmp	.+8      	; 0x2730 <vfprintf+0x2f6>
    2728:	82 2f       	mov	r24, r18
    272a:	86 78       	andi	r24, 0x86	; 134
    272c:	09 f0       	breq	.+2      	; 0x2730 <vfprintf+0x2f6>
    272e:	73 94       	inc	r7
    2730:	23 fd       	sbrc	r18, 3
    2732:	12 c0       	rjmp	.+36     	; 0x2758 <vfprintf+0x31e>
    2734:	20 ff       	sbrs	r18, 0
    2736:	06 c0       	rjmp	.+12     	; 0x2744 <vfprintf+0x30a>
    2738:	5a 2c       	mov	r5, r10
    273a:	73 14       	cp	r7, r3
    273c:	18 f4       	brcc	.+6      	; 0x2744 <vfprintf+0x30a>
    273e:	53 0c       	add	r5, r3
    2740:	57 18       	sub	r5, r7
    2742:	73 2c       	mov	r7, r3
    2744:	73 14       	cp	r7, r3
    2746:	60 f4       	brcc	.+24     	; 0x2760 <vfprintf+0x326>
    2748:	b7 01       	movw	r22, r14
    274a:	80 e2       	ldi	r24, 0x20	; 32
    274c:	90 e0       	ldi	r25, 0x00	; 0
    274e:	2c 87       	std	Y+12, r18	; 0x0c
    2750:	ff dd       	rcall	.-1026   	; 0x2350 <fputc>
    2752:	73 94       	inc	r7
    2754:	2c 85       	ldd	r18, Y+12	; 0x0c
    2756:	f6 cf       	rjmp	.-20     	; 0x2744 <vfprintf+0x30a>
    2758:	73 14       	cp	r7, r3
    275a:	10 f4       	brcc	.+4      	; 0x2760 <vfprintf+0x326>
    275c:	37 18       	sub	r3, r7
    275e:	01 c0       	rjmp	.+2      	; 0x2762 <vfprintf+0x328>
    2760:	31 2c       	mov	r3, r1
    2762:	24 ff       	sbrs	r18, 4
    2764:	11 c0       	rjmp	.+34     	; 0x2788 <vfprintf+0x34e>
    2766:	b7 01       	movw	r22, r14
    2768:	80 e3       	ldi	r24, 0x30	; 48
    276a:	90 e0       	ldi	r25, 0x00	; 0
    276c:	2c 87       	std	Y+12, r18	; 0x0c
    276e:	f0 dd       	rcall	.-1056   	; 0x2350 <fputc>
    2770:	2c 85       	ldd	r18, Y+12	; 0x0c
    2772:	22 ff       	sbrs	r18, 2
    2774:	16 c0       	rjmp	.+44     	; 0x27a2 <vfprintf+0x368>
    2776:	21 ff       	sbrs	r18, 1
    2778:	03 c0       	rjmp	.+6      	; 0x2780 <vfprintf+0x346>
    277a:	88 e5       	ldi	r24, 0x58	; 88
    277c:	90 e0       	ldi	r25, 0x00	; 0
    277e:	02 c0       	rjmp	.+4      	; 0x2784 <vfprintf+0x34a>
    2780:	88 e7       	ldi	r24, 0x78	; 120
    2782:	90 e0       	ldi	r25, 0x00	; 0
    2784:	b7 01       	movw	r22, r14
    2786:	0c c0       	rjmp	.+24     	; 0x27a0 <vfprintf+0x366>
    2788:	82 2f       	mov	r24, r18
    278a:	86 78       	andi	r24, 0x86	; 134
    278c:	51 f0       	breq	.+20     	; 0x27a2 <vfprintf+0x368>
    278e:	21 fd       	sbrc	r18, 1
    2790:	02 c0       	rjmp	.+4      	; 0x2796 <vfprintf+0x35c>
    2792:	80 e2       	ldi	r24, 0x20	; 32
    2794:	01 c0       	rjmp	.+2      	; 0x2798 <vfprintf+0x35e>
    2796:	8b e2       	ldi	r24, 0x2B	; 43
    2798:	27 fd       	sbrc	r18, 7
    279a:	8d e2       	ldi	r24, 0x2D	; 45
    279c:	b7 01       	movw	r22, r14
    279e:	90 e0       	ldi	r25, 0x00	; 0
    27a0:	d7 dd       	rcall	.-1106   	; 0x2350 <fputc>
    27a2:	a5 14       	cp	r10, r5
    27a4:	30 f4       	brcc	.+12     	; 0x27b2 <vfprintf+0x378>
    27a6:	b7 01       	movw	r22, r14
    27a8:	80 e3       	ldi	r24, 0x30	; 48
    27aa:	90 e0       	ldi	r25, 0x00	; 0
    27ac:	d1 dd       	rcall	.-1118   	; 0x2350 <fputc>
    27ae:	5a 94       	dec	r5
    27b0:	f8 cf       	rjmp	.-16     	; 0x27a2 <vfprintf+0x368>
    27b2:	aa 94       	dec	r10
    27b4:	f4 01       	movw	r30, r8
    27b6:	ea 0d       	add	r30, r10
    27b8:	f1 1d       	adc	r31, r1
    27ba:	80 81       	ld	r24, Z
    27bc:	b7 01       	movw	r22, r14
    27be:	90 e0       	ldi	r25, 0x00	; 0
    27c0:	c7 dd       	rcall	.-1138   	; 0x2350 <fputc>
    27c2:	a1 10       	cpse	r10, r1
    27c4:	f6 cf       	rjmp	.-20     	; 0x27b2 <vfprintf+0x378>
    27c6:	33 20       	and	r3, r3
    27c8:	09 f4       	brne	.+2      	; 0x27cc <vfprintf+0x392>
    27ca:	5d ce       	rjmp	.-838    	; 0x2486 <vfprintf+0x4c>
    27cc:	b7 01       	movw	r22, r14
    27ce:	80 e2       	ldi	r24, 0x20	; 32
    27d0:	90 e0       	ldi	r25, 0x00	; 0
    27d2:	be dd       	rcall	.-1156   	; 0x2350 <fputc>
    27d4:	3a 94       	dec	r3
    27d6:	f7 cf       	rjmp	.-18     	; 0x27c6 <vfprintf+0x38c>
    27d8:	f7 01       	movw	r30, r14
    27da:	86 81       	ldd	r24, Z+6	; 0x06
    27dc:	97 81       	ldd	r25, Z+7	; 0x07
    27de:	02 c0       	rjmp	.+4      	; 0x27e4 <vfprintf+0x3aa>
    27e0:	8f ef       	ldi	r24, 0xFF	; 255
    27e2:	9f ef       	ldi	r25, 0xFF	; 255
    27e4:	2c 96       	adiw	r28, 0x0c	; 12
    27e6:	0f b6       	in	r0, 0x3f	; 63
    27e8:	f8 94       	cli
    27ea:	de bf       	out	0x3e, r29	; 62
    27ec:	0f be       	out	0x3f, r0	; 63
    27ee:	cd bf       	out	0x3d, r28	; 61
    27f0:	df 91       	pop	r29
    27f2:	cf 91       	pop	r28
    27f4:	1f 91       	pop	r17
    27f6:	0f 91       	pop	r16
    27f8:	ff 90       	pop	r15
    27fa:	ef 90       	pop	r14
    27fc:	df 90       	pop	r13
    27fe:	cf 90       	pop	r12
    2800:	bf 90       	pop	r11
    2802:	af 90       	pop	r10
    2804:	9f 90       	pop	r9
    2806:	8f 90       	pop	r8
    2808:	7f 90       	pop	r7
    280a:	6f 90       	pop	r6
    280c:	5f 90       	pop	r5
    280e:	4f 90       	pop	r4
    2810:	3f 90       	pop	r3
    2812:	2f 90       	pop	r2
    2814:	08 95       	ret

00002816 <strnlen_P>:
    2816:	fc 01       	movw	r30, r24
    2818:	05 90       	lpm	r0, Z+
    281a:	61 50       	subi	r22, 0x01	; 1
    281c:	70 40       	sbci	r23, 0x00	; 0
    281e:	01 10       	cpse	r0, r1
    2820:	d8 f7       	brcc	.-10     	; 0x2818 <strnlen_P+0x2>
    2822:	80 95       	com	r24
    2824:	90 95       	com	r25
    2826:	8e 0f       	add	r24, r30
    2828:	9f 1f       	adc	r25, r31
    282a:	08 95       	ret

0000282c <strnlen>:
    282c:	fc 01       	movw	r30, r24
    282e:	61 50       	subi	r22, 0x01	; 1
    2830:	70 40       	sbci	r23, 0x00	; 0
    2832:	01 90       	ld	r0, Z+
    2834:	01 10       	cpse	r0, r1
    2836:	d8 f7       	brcc	.-10     	; 0x282e <strnlen+0x2>
    2838:	80 95       	com	r24
    283a:	90 95       	com	r25
    283c:	8e 0f       	add	r24, r30
    283e:	9f 1f       	adc	r25, r31
    2840:	08 95       	ret

00002842 <__ultoa_invert>:
    2842:	fa 01       	movw	r30, r20
    2844:	aa 27       	eor	r26, r26
    2846:	28 30       	cpi	r18, 0x08	; 8
    2848:	51 f1       	breq	.+84     	; 0x289e <__ultoa_invert+0x5c>
    284a:	20 31       	cpi	r18, 0x10	; 16
    284c:	81 f1       	breq	.+96     	; 0x28ae <__ultoa_invert+0x6c>
    284e:	e8 94       	clt
    2850:	6f 93       	push	r22
    2852:	6e 7f       	andi	r22, 0xFE	; 254
    2854:	6e 5f       	subi	r22, 0xFE	; 254
    2856:	7f 4f       	sbci	r23, 0xFF	; 255
    2858:	8f 4f       	sbci	r24, 0xFF	; 255
    285a:	9f 4f       	sbci	r25, 0xFF	; 255
    285c:	af 4f       	sbci	r26, 0xFF	; 255
    285e:	b1 e0       	ldi	r27, 0x01	; 1
    2860:	3e d0       	rcall	.+124    	; 0x28de <__ultoa_invert+0x9c>
    2862:	b4 e0       	ldi	r27, 0x04	; 4
    2864:	3c d0       	rcall	.+120    	; 0x28de <__ultoa_invert+0x9c>
    2866:	67 0f       	add	r22, r23
    2868:	78 1f       	adc	r23, r24
    286a:	89 1f       	adc	r24, r25
    286c:	9a 1f       	adc	r25, r26
    286e:	a1 1d       	adc	r26, r1
    2870:	68 0f       	add	r22, r24
    2872:	79 1f       	adc	r23, r25
    2874:	8a 1f       	adc	r24, r26
    2876:	91 1d       	adc	r25, r1
    2878:	a1 1d       	adc	r26, r1
    287a:	6a 0f       	add	r22, r26
    287c:	71 1d       	adc	r23, r1
    287e:	81 1d       	adc	r24, r1
    2880:	91 1d       	adc	r25, r1
    2882:	a1 1d       	adc	r26, r1
    2884:	20 d0       	rcall	.+64     	; 0x28c6 <__ultoa_invert+0x84>
    2886:	09 f4       	brne	.+2      	; 0x288a <__ultoa_invert+0x48>
    2888:	68 94       	set
    288a:	3f 91       	pop	r19
    288c:	2a e0       	ldi	r18, 0x0A	; 10
    288e:	26 9f       	mul	r18, r22
    2890:	11 24       	eor	r1, r1
    2892:	30 19       	sub	r19, r0
    2894:	30 5d       	subi	r19, 0xD0	; 208
    2896:	31 93       	st	Z+, r19
    2898:	de f6       	brtc	.-74     	; 0x2850 <__ultoa_invert+0xe>
    289a:	cf 01       	movw	r24, r30
    289c:	08 95       	ret
    289e:	46 2f       	mov	r20, r22
    28a0:	47 70       	andi	r20, 0x07	; 7
    28a2:	40 5d       	subi	r20, 0xD0	; 208
    28a4:	41 93       	st	Z+, r20
    28a6:	b3 e0       	ldi	r27, 0x03	; 3
    28a8:	0f d0       	rcall	.+30     	; 0x28c8 <__ultoa_invert+0x86>
    28aa:	c9 f7       	brne	.-14     	; 0x289e <__ultoa_invert+0x5c>
    28ac:	f6 cf       	rjmp	.-20     	; 0x289a <__ultoa_invert+0x58>
    28ae:	46 2f       	mov	r20, r22
    28b0:	4f 70       	andi	r20, 0x0F	; 15
    28b2:	40 5d       	subi	r20, 0xD0	; 208
    28b4:	4a 33       	cpi	r20, 0x3A	; 58
    28b6:	18 f0       	brcs	.+6      	; 0x28be <__ultoa_invert+0x7c>
    28b8:	49 5d       	subi	r20, 0xD9	; 217
    28ba:	31 fd       	sbrc	r19, 1
    28bc:	40 52       	subi	r20, 0x20	; 32
    28be:	41 93       	st	Z+, r20
    28c0:	02 d0       	rcall	.+4      	; 0x28c6 <__ultoa_invert+0x84>
    28c2:	a9 f7       	brne	.-22     	; 0x28ae <__ultoa_invert+0x6c>
    28c4:	ea cf       	rjmp	.-44     	; 0x289a <__ultoa_invert+0x58>
    28c6:	b4 e0       	ldi	r27, 0x04	; 4
    28c8:	a6 95       	lsr	r26
    28ca:	97 95       	ror	r25
    28cc:	87 95       	ror	r24
    28ce:	77 95       	ror	r23
    28d0:	67 95       	ror	r22
    28d2:	ba 95       	dec	r27
    28d4:	c9 f7       	brne	.-14     	; 0x28c8 <__ultoa_invert+0x86>
    28d6:	00 97       	sbiw	r24, 0x00	; 0
    28d8:	61 05       	cpc	r22, r1
    28da:	71 05       	cpc	r23, r1
    28dc:	08 95       	ret
    28de:	9b 01       	movw	r18, r22
    28e0:	ac 01       	movw	r20, r24
    28e2:	0a 2e       	mov	r0, r26
    28e4:	06 94       	lsr	r0
    28e6:	57 95       	ror	r21
    28e8:	47 95       	ror	r20
    28ea:	37 95       	ror	r19
    28ec:	27 95       	ror	r18
    28ee:	ba 95       	dec	r27
    28f0:	c9 f7       	brne	.-14     	; 0x28e4 <__ultoa_invert+0xa2>
    28f2:	62 0f       	add	r22, r18
    28f4:	73 1f       	adc	r23, r19
    28f6:	84 1f       	adc	r24, r20
    28f8:	95 1f       	adc	r25, r21
    28fa:	a0 1d       	adc	r26, r0
    28fc:	08 95       	ret

000028fe <_exit>:
    28fe:	f8 94       	cli

00002900 <__stop_program>:
    2900:	ff cf       	rjmp	.-2      	; 0x2900 <__stop_program>
