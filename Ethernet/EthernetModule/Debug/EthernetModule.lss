
EthernetModule.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000190  00800100  00000b84  00000c18  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b84  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800290  00800290  00000da8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000da8  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  00000e04  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c23  00000000  00000000  00000e8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000304  00000000  00000000  00001aaf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002eb  00000000  00000000  00001db3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000238  00000000  00000000  000020a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002af  00000000  00000000  000022d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000695  00000000  00000000  00002587  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  00002c1c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	12 e0       	ldi	r17, 0x02	; 2
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e4 e8       	ldi	r30, 0x84	; 132
  90:	fb e0       	ldi	r31, 0x0B	; 11
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a0 39       	cpi	r26, 0x90	; 144
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	22 e0       	ldi	r18, 0x02	; 2
  a0:	a0 e9       	ldi	r26, 0x90	; 144
  a2:	b2 e0       	ldi	r27, 0x02	; 2
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	a6 39       	cpi	r26, 0x96	; 150
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 cd 02 	call	0x59a	; 0x59a <main>
  b2:	0c 94 c0 05 	jmp	0xb80	; 0xb80 <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <uart_putch>:
	unsigned char dummy;
	while (UCSR0A & (1<<RXC0)) dummy = UDR0;
}

int uart_putch(char ch,FILE *stream)
{
  ba:	cf 93       	push	r28
  bc:	c8 2f       	mov	r28, r24
	if (ch == '\n')
  be:	8a 30       	cpi	r24, 0x0A	; 10
  c0:	19 f4       	brne	.+6      	; 0xc8 <uart_putch+0xe>
	uart_putch('\r', stream);
  c2:	8d e0       	ldi	r24, 0x0D	; 13
  c4:	0e 94 5d 00 	call	0xba	; 0xba <uart_putch>
	while (!(UCSR0A & (1<<UDRE0)));
  c8:	e0 ec       	ldi	r30, 0xC0	; 192
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	90 81       	ld	r25, Z
  ce:	95 ff       	sbrs	r25, 5
  d0:	fd cf       	rjmp	.-6      	; 0xcc <uart_putch+0x12>
	UDR0=ch;
  d2:	c0 93 c6 00 	sts	0x00C6, r28
	return 0;
}
  d6:	80 e0       	ldi	r24, 0x00	; 0
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	cf 91       	pop	r28
  dc:	08 95       	ret

000000de <uart_getch>:

int uart_getch(FILE *stream)
{
  de:	cf 93       	push	r28
  e0:	bc 01       	movw	r22, r24
	unsigned char ch;
	while (!(UCSR0A & (1<<RXC0)));
  e2:	e0 ec       	ldi	r30, 0xC0	; 192
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	80 81       	ld	r24, Z
  e8:	88 23       	and	r24, r24
  ea:	ec f7       	brge	.-6      	; 0xe6 <uart_getch+0x8>
	ch=UDR0;
  ec:	c0 91 c6 00 	lds	r28, 0x00C6

	/* Echo the Output Back to terminal */
	uart_putch(ch,stream);
  f0:	8c 2f       	mov	r24, r28
  f2:	0e 94 5d 00 	call	0xba	; 0xba <uart_putch>

	return ch;
}
  f6:	8c 2f       	mov	r24, r28
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	cf 91       	pop	r28
  fc:	08 95       	ret

000000fe <uart_init>:
#include <util/delay.h>
#include "EthernetLibrary.h"

void uart_init(void)
{
	UBRR0H = (((F_CPU/BAUD_RATE)/16)-1)>>8;	// set baud rate
  fe:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (((F_CPU/BAUD_RATE)/16)-1);
 102:	89 e1       	ldi	r24, 0x19	; 25
 104:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0B = (1<<RXEN0)|(1<<TXEN0); 		// enable Rx & Tx
 108:	88 e1       	ldi	r24, 0x18	; 24
 10a:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C=  (1<<UCSZ01)|(1<<UCSZ00);  	       // config USART; 8N1
 10e:	86 e0       	ldi	r24, 0x06	; 6
 110:	80 93 c2 00 	sts	0x00C2, r24
 114:	08 95       	ret

00000116 <uart_flush>:
}

void uart_flush(void)
{
	unsigned char dummy;
	while (UCSR0A & (1<<RXC0)) dummy = UDR0;
 116:	80 91 c0 00 	lds	r24, 0x00C0
 11a:	88 23       	and	r24, r24
 11c:	44 f4       	brge	.+16     	; 0x12e <uart_flush+0x18>
 11e:	a6 ec       	ldi	r26, 0xC6	; 198
 120:	b0 e0       	ldi	r27, 0x00	; 0
 122:	e0 ec       	ldi	r30, 0xC0	; 192
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	8c 91       	ld	r24, X
 128:	80 81       	ld	r24, Z
 12a:	88 23       	and	r24, r24
 12c:	e4 f3       	brlt	.-8      	; 0x126 <uart_flush+0x10>
 12e:	08 95       	ret

00000130 <ansi_cl>:

	return ch;
}

void ansi_cl(void)
{
 130:	cf 93       	push	r28
 132:	df 93       	push	r29
	// ANSI clear screen: cl=\E[H\E[J
	putchar(27);
 134:	c2 e9       	ldi	r28, 0x92	; 146
 136:	d2 e0       	ldi	r29, 0x02	; 2
 138:	68 81       	ld	r22, Y
 13a:	79 81       	ldd	r23, Y+1	; 0x01
 13c:	8b e1       	ldi	r24, 0x1B	; 27
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <fputc>
	putchar('[');
 144:	68 81       	ld	r22, Y
 146:	79 81       	ldd	r23, Y+1	; 0x01
 148:	8b e5       	ldi	r24, 0x5B	; 91
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <fputc>
	putchar('H');
 150:	68 81       	ld	r22, Y
 152:	79 81       	ldd	r23, Y+1	; 0x01
 154:	88 e4       	ldi	r24, 0x48	; 72
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <fputc>
	putchar(27);
 15c:	68 81       	ld	r22, Y
 15e:	79 81       	ldd	r23, Y+1	; 0x01
 160:	8b e1       	ldi	r24, 0x1B	; 27
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <fputc>
	putchar('[');
 168:	68 81       	ld	r22, Y
 16a:	79 81       	ldd	r23, Y+1	; 0x01
 16c:	8b e5       	ldi	r24, 0x5B	; 91
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <fputc>
	putchar('J');
 174:	68 81       	ld	r22, Y
 176:	79 81       	ldd	r23, Y+1	; 0x01
 178:	8a e4       	ldi	r24, 0x4A	; 74
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <fputc>
}
 180:	df 91       	pop	r29
 182:	cf 91       	pop	r28
 184:	08 95       	ret

00000186 <ansi_me>:

void ansi_me(void)
{
 186:	cf 93       	push	r28
 188:	df 93       	push	r29
	// ANSI turn off all attribute: me=\E[0m
	putchar(27);
 18a:	c2 e9       	ldi	r28, 0x92	; 146
 18c:	d2 e0       	ldi	r29, 0x02	; 2
 18e:	68 81       	ld	r22, Y
 190:	79 81       	ldd	r23, Y+1	; 0x01
 192:	8b e1       	ldi	r24, 0x1B	; 27
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <fputc>
	putchar('[');
 19a:	68 81       	ld	r22, Y
 19c:	79 81       	ldd	r23, Y+1	; 0x01
 19e:	8b e5       	ldi	r24, 0x5B	; 91
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <fputc>
	putchar('0');
 1a6:	68 81       	ld	r22, Y
 1a8:	79 81       	ldd	r23, Y+1	; 0x01
 1aa:	80 e3       	ldi	r24, 0x30	; 48
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <fputc>
	putchar('m');
 1b2:	68 81       	ld	r22, Y
 1b4:	79 81       	ldd	r23, Y+1	; 0x01
 1b6:	8d e6       	ldi	r24, 0x6D	; 109
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <fputc>
}
 1be:	df 91       	pop	r29
 1c0:	cf 91       	pop	r28
 1c2:	08 95       	ret

000001c4 <SPI_Write>:

void SPI_Write(unsigned int addr,unsigned char data)
{
	// Activate the CS pin
	SPI_PORT &= ~(1<<SPI_CS);
 1c4:	2a 98       	cbi	0x05, 2	; 5
	// Start Wiznet W5100 Write OpCode transmission
	SPDR0 = WIZNET_WRITE_OPCODE;
 1c6:	20 ef       	ldi	r18, 0xF0	; 240
 1c8:	2e bd       	out	0x2e, r18	; 46
	// Wait for transmission complete
	while(!(SPSR0 & (1<<SPIF0)));
 1ca:	0d b4       	in	r0, 0x2d	; 45
 1cc:	07 fe       	sbrs	r0, 7
 1ce:	fd cf       	rjmp	.-6      	; 0x1ca <SPI_Write+0x6>
	// Start Wiznet W5100 Address High Bytes transmission
	SPDR0 = (addr & 0xFF00) >> 8;
 1d0:	9e bd       	out	0x2e, r25	; 46
	// Wait for transmission complete
	while(!(SPSR0 & (1<<SPIF0)));
 1d2:	0d b4       	in	r0, 0x2d	; 45
 1d4:	07 fe       	sbrs	r0, 7
 1d6:	fd cf       	rjmp	.-6      	; 0x1d2 <SPI_Write+0xe>
	// Start Wiznet W5100 Address Low Bytes transmission
	SPDR0 = addr & 0x00FF;
 1d8:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR0 & (1<<SPIF0)));
 1da:	0d b4       	in	r0, 0x2d	; 45
 1dc:	07 fe       	sbrs	r0, 7
 1de:	fd cf       	rjmp	.-6      	; 0x1da <SPI_Write+0x16>

	// Start Data transmission
	SPDR0 = data;
 1e0:	6e bd       	out	0x2e, r22	; 46
	// Wait for transmission complete
	while(!(SPSR0 & (1<<SPIF0)));
 1e2:	0d b4       	in	r0, 0x2d	; 45
 1e4:	07 fe       	sbrs	r0, 7
 1e6:	fd cf       	rjmp	.-6      	; 0x1e2 <SPI_Write+0x1e>
	// CS pin is not active
	SPI_PORT |= (1<<SPI_CS);
 1e8:	2a 9a       	sbi	0x05, 2	; 5
 1ea:	08 95       	ret

000001ec <SPI_Read>:
}

unsigned char SPI_Read(unsigned int addr)
{
	// Activate the CS pin
	SPI_PORT &= ~(1<<SPI_CS);
 1ec:	2a 98       	cbi	0x05, 2	; 5
	// Start Wiznet W5100 Read OpCode transmission
	SPDR0 = WIZNET_READ_OPCODE;
 1ee:	2f e0       	ldi	r18, 0x0F	; 15
 1f0:	2e bd       	out	0x2e, r18	; 46
	// Wait for transmission complete
	while(!(SPSR0 & (1<<SPIF0)));
 1f2:	0d b4       	in	r0, 0x2d	; 45
 1f4:	07 fe       	sbrs	r0, 7
 1f6:	fd cf       	rjmp	.-6      	; 0x1f2 <SPI_Read+0x6>
	// Start Wiznet W5100 Address High Bytes transmission
	SPDR0 = (addr & 0xFF00) >> 8;
 1f8:	9e bd       	out	0x2e, r25	; 46
	// Wait for transmission complete
	while(!(SPSR0 & (1<<SPIF0)));
 1fa:	0d b4       	in	r0, 0x2d	; 45
 1fc:	07 fe       	sbrs	r0, 7
 1fe:	fd cf       	rjmp	.-6      	; 0x1fa <SPI_Read+0xe>
	// Start Wiznet W5100 Address Low Bytes transmission
	SPDR0 = addr & 0x00FF;
 200:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR0 & (1<<SPIF0)));
 202:	0d b4       	in	r0, 0x2d	; 45
 204:	07 fe       	sbrs	r0, 7
 206:	fd cf       	rjmp	.-6      	; 0x202 <SPI_Read+0x16>

	// Send Dummy transmission for reading the data
	SPDR0 = 0x00;
 208:	1e bc       	out	0x2e, r1	; 46
	// Wait for transmission complete
	while(!(SPSR0 & (1<<SPIF0)));
 20a:	0d b4       	in	r0, 0x2d	; 45
 20c:	07 fe       	sbrs	r0, 7
 20e:	fd cf       	rjmp	.-6      	; 0x20a <SPI_Read+0x1e>

	// CS pin is not active
	SPI_PORT |= (1<<SPI_CS);
 210:	2a 9a       	sbi	0x05, 2	; 5
	return(SPDR0);
 212:	8e b5       	in	r24, 0x2e	; 46
}
 214:	08 95       	ret

00000216 <W5100_Init>:

void W5100_Init(void)
{
 216:	ff 92       	push	r15
 218:	0f 93       	push	r16
 21a:	1f 93       	push	r17
 21c:	cf 93       	push	r28
 21e:	df 93       	push	r29
	unsigned char mac_addr[] = {0x00,0x16,0x36,0xDE,0x58,0xF6};
	unsigned char ip_addr[] = {192,168,2,10};
	unsigned char sub_mask[] = {255,255,255,0};
	unsigned char gtw_addr[] = {192,168,2,1};
	// Setting the Wiznet W5100 Mode Register: 0x0000
	SPI_Write(MR,0x80);            // MR = 0b10000000;
 220:	60 e8       	ldi	r22, 0x80	; 128
 222:	80 e0       	ldi	r24, 0x00	; 0
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <SPI_Write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 22a:	89 ef       	ldi	r24, 0xF9	; 249
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	01 97       	sbiw	r24, 0x01	; 1
 230:	f1 f7       	brne	.-4      	; 0x22e <W5100_Init+0x18>
 232:	00 c0       	rjmp	.+0      	; 0x234 <W5100_Init+0x1e>
 234:	00 00       	nop
	_delay_ms(1);
	printf("Reading MR: %d\n\n",SPI_Read(MR));
 236:	80 e0       	ldi	r24, 0x00	; 0
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	0e 94 f6 00 	call	0x1ec	; 0x1ec <SPI_Read>
 23e:	1f 92       	push	r1
 240:	8f 93       	push	r24
 242:	8e e0       	ldi	r24, 0x0E	; 14
 244:	91 e0       	ldi	r25, 0x01	; 1
 246:	9f 93       	push	r25
 248:	8f 93       	push	r24
 24a:	0e 94 02 03 	call	0x604	; 0x604 <printf>
	// Setting the Wiznet W5100 Gateway Address (GAR): 0x0001 to 0x0004
	printf("Setting Gateway Address %d.%d.%d.%d\n",gtw_addr[0],gtw_addr[1],\
 24e:	1f 92       	push	r1
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	8f 93       	push	r24
 254:	1f 92       	push	r1
 256:	82 e0       	ldi	r24, 0x02	; 2
 258:	8f 93       	push	r24
 25a:	1f 92       	push	r1
 25c:	88 ea       	ldi	r24, 0xA8	; 168
 25e:	8f 93       	push	r24
 260:	1f 92       	push	r1
 262:	80 ec       	ldi	r24, 0xC0	; 192
 264:	8f 93       	push	r24
 266:	8f e1       	ldi	r24, 0x1F	; 31
 268:	91 e0       	ldi	r25, 0x01	; 1
 26a:	9f 93       	push	r25
 26c:	8f 93       	push	r24
 26e:	0e 94 02 03 	call	0x604	; 0x604 <printf>
	gtw_addr[2],gtw_addr[3]);
	SPI_Write(GAR + 0,gtw_addr[0]);
 272:	60 ec       	ldi	r22, 0xC0	; 192
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <SPI_Write>
	SPI_Write(GAR + 1,gtw_addr[1]);
 27c:	68 ea       	ldi	r22, 0xA8	; 168
 27e:	82 e0       	ldi	r24, 0x02	; 2
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <SPI_Write>
	SPI_Write(GAR + 2,gtw_addr[2]);
 286:	62 e0       	ldi	r22, 0x02	; 2
 288:	83 e0       	ldi	r24, 0x03	; 3
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <SPI_Write>
	SPI_Write(GAR + 3,gtw_addr[3]);
 290:	61 e0       	ldi	r22, 0x01	; 1
 292:	84 e0       	ldi	r24, 0x04	; 4
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <SPI_Write>
 29a:	89 ef       	ldi	r24, 0xF9	; 249
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	01 97       	sbiw	r24, 0x01	; 1
 2a0:	f1 f7       	brne	.-4      	; 0x29e <W5100_Init+0x88>
 2a2:	00 c0       	rjmp	.+0      	; 0x2a4 <W5100_Init+0x8e>
 2a4:	00 00       	nop
	_delay_ms(1);
	printf("Reading GAR: %d.%d.%d.%d\n\n",SPI_Read(GAR + 0),SPI_Read(GAR + 1),\
	SPI_Read(GAR + 2),SPI_Read(GAR + 3));
 2a6:	84 e0       	ldi	r24, 0x04	; 4
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	0e 94 f6 00 	call	0x1ec	; 0x1ec <SPI_Read>
 2ae:	18 2f       	mov	r17, r24
 2b0:	83 e0       	ldi	r24, 0x03	; 3
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	0e 94 f6 00 	call	0x1ec	; 0x1ec <SPI_Read>
 2b8:	d8 2f       	mov	r29, r24
	SPI_Write(GAR + 0,gtw_addr[0]);
	SPI_Write(GAR + 1,gtw_addr[1]);
	SPI_Write(GAR + 2,gtw_addr[2]);
	SPI_Write(GAR + 3,gtw_addr[3]);
	_delay_ms(1);
	printf("Reading GAR: %d.%d.%d.%d\n\n",SPI_Read(GAR + 0),SPI_Read(GAR + 1),\
 2ba:	82 e0       	ldi	r24, 0x02	; 2
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	0e 94 f6 00 	call	0x1ec	; 0x1ec <SPI_Read>
 2c2:	c8 2f       	mov	r28, r24
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	0e 94 f6 00 	call	0x1ec	; 0x1ec <SPI_Read>
 2cc:	1f 92       	push	r1
 2ce:	1f 93       	push	r17
 2d0:	1f 92       	push	r1
 2d2:	df 93       	push	r29
 2d4:	1f 92       	push	r1
 2d6:	cf 93       	push	r28
 2d8:	1f 92       	push	r1
 2da:	8f 93       	push	r24
 2dc:	84 e4       	ldi	r24, 0x44	; 68
 2de:	91 e0       	ldi	r25, 0x01	; 1
 2e0:	9f 93       	push	r25
 2e2:	8f 93       	push	r24
 2e4:	0e 94 02 03 	call	0x604	; 0x604 <printf>
	SPI_Read(GAR + 2),SPI_Read(GAR + 3));
	// Setting the Wiznet W5100 Source Address Register (SAR): 0x0009 to 0x000E
	printf("Setting Source Address %.2x:%.2x:%.2x:%.2x:%.2x:%.2x\n",mac_addr[0],mac_addr[1],\
 2e8:	1f 92       	push	r1
 2ea:	86 ef       	ldi	r24, 0xF6	; 246
 2ec:	8f 93       	push	r24
 2ee:	1f 92       	push	r1
 2f0:	88 e5       	ldi	r24, 0x58	; 88
 2f2:	8f 93       	push	r24
 2f4:	1f 92       	push	r1
 2f6:	8e ed       	ldi	r24, 0xDE	; 222
 2f8:	8f 93       	push	r24
 2fa:	1f 92       	push	r1
 2fc:	86 e3       	ldi	r24, 0x36	; 54
 2fe:	8f 93       	push	r24
 300:	1f 92       	push	r1
 302:	86 e1       	ldi	r24, 0x16	; 22
 304:	8f 93       	push	r24
 306:	1f 92       	push	r1
 308:	1f 92       	push	r1
 30a:	8f e5       	ldi	r24, 0x5F	; 95
 30c:	91 e0       	ldi	r25, 0x01	; 1
 30e:	9f 93       	push	r25
 310:	8f 93       	push	r24
 312:	0e 94 02 03 	call	0x604	; 0x604 <printf>
	mac_addr[2],mac_addr[3],mac_addr[4],mac_addr[5]);
	SPI_Write(SAR + 0,mac_addr[0]);
 316:	8d b7       	in	r24, 0x3d	; 61
 318:	9e b7       	in	r25, 0x3e	; 62
 31a:	86 96       	adiw	r24, 0x26	; 38
 31c:	0f b6       	in	r0, 0x3f	; 63
 31e:	f8 94       	cli
 320:	9e bf       	out	0x3e, r25	; 62
 322:	0f be       	out	0x3f, r0	; 63
 324:	8d bf       	out	0x3d, r24	; 61
 326:	60 e0       	ldi	r22, 0x00	; 0
 328:	89 e0       	ldi	r24, 0x09	; 9
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <SPI_Write>
	SPI_Write(SAR + 1,mac_addr[1]);
 330:	66 e1       	ldi	r22, 0x16	; 22
 332:	8a e0       	ldi	r24, 0x0A	; 10
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <SPI_Write>
	SPI_Write(SAR + 2,mac_addr[2]);
 33a:	66 e3       	ldi	r22, 0x36	; 54
 33c:	8b e0       	ldi	r24, 0x0B	; 11
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <SPI_Write>
	SPI_Write(SAR + 3,mac_addr[3]);
 344:	6e ed       	ldi	r22, 0xDE	; 222
 346:	8c e0       	ldi	r24, 0x0C	; 12
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <SPI_Write>
	SPI_Write(SAR + 4,mac_addr[4]);
 34e:	68 e5       	ldi	r22, 0x58	; 88
 350:	8d e0       	ldi	r24, 0x0D	; 13
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <SPI_Write>
	SPI_Write(SAR + 5,mac_addr[5]);
 358:	66 ef       	ldi	r22, 0xF6	; 246
 35a:	8e e0       	ldi	r24, 0x0E	; 14
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <SPI_Write>
 362:	89 ef       	ldi	r24, 0xF9	; 249
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	01 97       	sbiw	r24, 0x01	; 1
 368:	f1 f7       	brne	.-4      	; 0x366 <W5100_Init+0x150>
 36a:	00 c0       	rjmp	.+0      	; 0x36c <W5100_Init+0x156>
 36c:	00 00       	nop
	_delay_ms(1);
	printf("Reading SAR: %.2x:%.2x:%.2x:%.2x:%.2x:%.2x\n\n",SPI_Read(SAR + 0),SPI_Read(SAR + 1),\
	SPI_Read(SAR + 2),SPI_Read(SAR + 3),SPI_Read(SAR + 4),SPI_Read(SAR + 5));
 36e:	8e e0       	ldi	r24, 0x0E	; 14
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	0e 94 f6 00 	call	0x1ec	; 0x1ec <SPI_Read>
 376:	f8 2e       	mov	r15, r24
 378:	8d e0       	ldi	r24, 0x0D	; 13
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	0e 94 f6 00 	call	0x1ec	; 0x1ec <SPI_Read>
 380:	08 2f       	mov	r16, r24
 382:	8c e0       	ldi	r24, 0x0C	; 12
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	0e 94 f6 00 	call	0x1ec	; 0x1ec <SPI_Read>
 38a:	18 2f       	mov	r17, r24
 38c:	8b e0       	ldi	r24, 0x0B	; 11
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	0e 94 f6 00 	call	0x1ec	; 0x1ec <SPI_Read>
 394:	d8 2f       	mov	r29, r24
	SPI_Write(SAR + 2,mac_addr[2]);
	SPI_Write(SAR + 3,mac_addr[3]);
	SPI_Write(SAR + 4,mac_addr[4]);
	SPI_Write(SAR + 5,mac_addr[5]);
	_delay_ms(1);
	printf("Reading SAR: %.2x:%.2x:%.2x:%.2x:%.2x:%.2x\n\n",SPI_Read(SAR + 0),SPI_Read(SAR + 1),\
 396:	8a e0       	ldi	r24, 0x0A	; 10
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	0e 94 f6 00 	call	0x1ec	; 0x1ec <SPI_Read>
 39e:	c8 2f       	mov	r28, r24
 3a0:	89 e0       	ldi	r24, 0x09	; 9
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	0e 94 f6 00 	call	0x1ec	; 0x1ec <SPI_Read>
 3a8:	1f 92       	push	r1
 3aa:	ff 92       	push	r15
 3ac:	1f 92       	push	r1
 3ae:	0f 93       	push	r16
 3b0:	1f 92       	push	r1
 3b2:	1f 93       	push	r17
 3b4:	1f 92       	push	r1
 3b6:	df 93       	push	r29
 3b8:	1f 92       	push	r1
 3ba:	cf 93       	push	r28
 3bc:	1f 92       	push	r1
 3be:	8f 93       	push	r24
 3c0:	85 e9       	ldi	r24, 0x95	; 149
 3c2:	91 e0       	ldi	r25, 0x01	; 1
 3c4:	9f 93       	push	r25
 3c6:	8f 93       	push	r24
 3c8:	0e 94 02 03 	call	0x604	; 0x604 <printf>
	SPI_Read(SAR + 2),SPI_Read(SAR + 3),SPI_Read(SAR + 4),SPI_Read(SAR + 5));
	// Setting the Wiznet W5100 Sub Mask Address (SUBR): 0x0005 to 0x0008
	printf("Setting Sub Mask Address %d.%d.%d.%d\n",sub_mask[0],sub_mask[1],\
 3cc:	1f 92       	push	r1
 3ce:	1f 92       	push	r1
 3d0:	1f 92       	push	r1
 3d2:	8f ef       	ldi	r24, 0xFF	; 255
 3d4:	8f 93       	push	r24
 3d6:	1f 92       	push	r1
 3d8:	8f 93       	push	r24
 3da:	1f 92       	push	r1
 3dc:	8f 93       	push	r24
 3de:	82 ec       	ldi	r24, 0xC2	; 194
 3e0:	91 e0       	ldi	r25, 0x01	; 1
 3e2:	9f 93       	push	r25
 3e4:	8f 93       	push	r24
 3e6:	0e 94 02 03 	call	0x604	; 0x604 <printf>
	sub_mask[2],sub_mask[3]);
	SPI_Write(SUBR + 0,sub_mask[0]);
 3ea:	6f ef       	ldi	r22, 0xFF	; 255
 3ec:	85 e0       	ldi	r24, 0x05	; 5
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <SPI_Write>
	SPI_Write(SUBR + 1,sub_mask[1]);
 3f4:	6f ef       	ldi	r22, 0xFF	; 255
 3f6:	86 e0       	ldi	r24, 0x06	; 6
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <SPI_Write>
	SPI_Write(SUBR + 2,sub_mask[2]);
 3fe:	6f ef       	ldi	r22, 0xFF	; 255
 400:	87 e0       	ldi	r24, 0x07	; 7
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <SPI_Write>
	SPI_Write(SUBR + 3,sub_mask[3]);
 408:	60 e0       	ldi	r22, 0x00	; 0
 40a:	88 e0       	ldi	r24, 0x08	; 8
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <SPI_Write>
 412:	89 ef       	ldi	r24, 0xF9	; 249
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	01 97       	sbiw	r24, 0x01	; 1
 418:	f1 f7       	brne	.-4      	; 0x416 <W5100_Init+0x200>
 41a:	00 c0       	rjmp	.+0      	; 0x41c <W5100_Init+0x206>
 41c:	00 00       	nop
	_delay_ms(1);
	printf("Reading SUBR: %d.%d.%d.%d\n\n",SPI_Read(SUBR + 0),SPI_Read(SUBR + 1),\
	SPI_Read(SUBR + 2),SPI_Read(SUBR + 3));
 41e:	88 e0       	ldi	r24, 0x08	; 8
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	0e 94 f6 00 	call	0x1ec	; 0x1ec <SPI_Read>
 426:	18 2f       	mov	r17, r24
 428:	87 e0       	ldi	r24, 0x07	; 7
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	0e 94 f6 00 	call	0x1ec	; 0x1ec <SPI_Read>
 430:	d8 2f       	mov	r29, r24
	SPI_Write(SUBR + 0,sub_mask[0]);
	SPI_Write(SUBR + 1,sub_mask[1]);
	SPI_Write(SUBR + 2,sub_mask[2]);
	SPI_Write(SUBR + 3,sub_mask[3]);
	_delay_ms(1);
	printf("Reading SUBR: %d.%d.%d.%d\n\n",SPI_Read(SUBR + 0),SPI_Read(SUBR + 1),\
 432:	86 e0       	ldi	r24, 0x06	; 6
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	0e 94 f6 00 	call	0x1ec	; 0x1ec <SPI_Read>
 43a:	c8 2f       	mov	r28, r24
 43c:	85 e0       	ldi	r24, 0x05	; 5
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	0e 94 f6 00 	call	0x1ec	; 0x1ec <SPI_Read>
 444:	1f 92       	push	r1
 446:	1f 93       	push	r17
 448:	1f 92       	push	r1
 44a:	df 93       	push	r29
 44c:	1f 92       	push	r1
 44e:	cf 93       	push	r28
 450:	1f 92       	push	r1
 452:	8f 93       	push	r24
 454:	88 ee       	ldi	r24, 0xE8	; 232
 456:	91 e0       	ldi	r25, 0x01	; 1
 458:	9f 93       	push	r25
 45a:	8f 93       	push	r24
 45c:	0e 94 02 03 	call	0x604	; 0x604 <printf>
	SPI_Read(SUBR + 2),SPI_Read(SUBR + 3));
	// Setting the Wiznet W5100 IP Address (SIPR): 0x000F to 0x0012
	printf("Setting IP Address %d.%d.%d.%d\n",ip_addr[0],ip_addr[1],\
 460:	8d b7       	in	r24, 0x3d	; 61
 462:	9e b7       	in	r25, 0x3e	; 62
 464:	82 96       	adiw	r24, 0x22	; 34
 466:	0f b6       	in	r0, 0x3f	; 63
 468:	f8 94       	cli
 46a:	9e bf       	out	0x3e, r25	; 62
 46c:	0f be       	out	0x3f, r0	; 63
 46e:	8d bf       	out	0x3d, r24	; 61
 470:	1f 92       	push	r1
 472:	8a e0       	ldi	r24, 0x0A	; 10
 474:	8f 93       	push	r24
 476:	1f 92       	push	r1
 478:	82 e0       	ldi	r24, 0x02	; 2
 47a:	8f 93       	push	r24
 47c:	1f 92       	push	r1
 47e:	88 ea       	ldi	r24, 0xA8	; 168
 480:	8f 93       	push	r24
 482:	1f 92       	push	r1
 484:	80 ec       	ldi	r24, 0xC0	; 192
 486:	8f 93       	push	r24
 488:	84 e0       	ldi	r24, 0x04	; 4
 48a:	92 e0       	ldi	r25, 0x02	; 2
 48c:	9f 93       	push	r25
 48e:	8f 93       	push	r24
 490:	0e 94 02 03 	call	0x604	; 0x604 <printf>
	ip_addr[2],ip_addr[3]);
	SPI_Write(SIPR + 0,ip_addr[0]);
 494:	60 ec       	ldi	r22, 0xC0	; 192
 496:	8f e0       	ldi	r24, 0x0F	; 15
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <SPI_Write>
	SPI_Write(SIPR + 1,ip_addr[1]);
 49e:	68 ea       	ldi	r22, 0xA8	; 168
 4a0:	80 e1       	ldi	r24, 0x10	; 16
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <SPI_Write>
	SPI_Write(SIPR + 2,ip_addr[2]);
 4a8:	62 e0       	ldi	r22, 0x02	; 2
 4aa:	81 e1       	ldi	r24, 0x11	; 17
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <SPI_Write>
	SPI_Write(SIPR + 3,ip_addr[3]);
 4b2:	6a e0       	ldi	r22, 0x0A	; 10
 4b4:	82 e1       	ldi	r24, 0x12	; 18
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <SPI_Write>
 4bc:	89 ef       	ldi	r24, 0xF9	; 249
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	01 97       	sbiw	r24, 0x01	; 1
 4c2:	f1 f7       	brne	.-4      	; 0x4c0 <W5100_Init+0x2aa>
 4c4:	00 c0       	rjmp	.+0      	; 0x4c6 <W5100_Init+0x2b0>
 4c6:	00 00       	nop
	_delay_ms(1);
	printf("Reading SIPR: %d.%d.%d.%d\n\n",SPI_Read(SIPR + 0),SPI_Read(SIPR + 1),\
	SPI_Read(SIPR + 2),SPI_Read(SIPR + 3));
 4c8:	82 e1       	ldi	r24, 0x12	; 18
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	0e 94 f6 00 	call	0x1ec	; 0x1ec <SPI_Read>
 4d0:	18 2f       	mov	r17, r24
 4d2:	81 e1       	ldi	r24, 0x11	; 17
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	0e 94 f6 00 	call	0x1ec	; 0x1ec <SPI_Read>
 4da:	d8 2f       	mov	r29, r24
	SPI_Write(SIPR + 0,ip_addr[0]);
	SPI_Write(SIPR + 1,ip_addr[1]);
	SPI_Write(SIPR + 2,ip_addr[2]);
	SPI_Write(SIPR + 3,ip_addr[3]);
	_delay_ms(1);
	printf("Reading SIPR: %d.%d.%d.%d\n\n",SPI_Read(SIPR + 0),SPI_Read(SIPR + 1),\
 4dc:	80 e1       	ldi	r24, 0x10	; 16
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	0e 94 f6 00 	call	0x1ec	; 0x1ec <SPI_Read>
 4e4:	c8 2f       	mov	r28, r24
 4e6:	8f e0       	ldi	r24, 0x0F	; 15
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	0e 94 f6 00 	call	0x1ec	; 0x1ec <SPI_Read>
 4ee:	1f 92       	push	r1
 4f0:	1f 93       	push	r17
 4f2:	1f 92       	push	r1
 4f4:	df 93       	push	r29
 4f6:	1f 92       	push	r1
 4f8:	cf 93       	push	r28
 4fa:	1f 92       	push	r1
 4fc:	8f 93       	push	r24
 4fe:	84 e2       	ldi	r24, 0x24	; 36
 500:	92 e0       	ldi	r25, 0x02	; 2
 502:	9f 93       	push	r25
 504:	8f 93       	push	r24
 506:	0e 94 02 03 	call	0x604	; 0x604 <printf>
	SPI_Read(SIPR + 2),SPI_Read(SIPR + 3));

	// Setting the Wiznet W5100 RX and TX Memory Size, we use 2KB for Rx/Tx 4 channels
	printf("Setting Wiznet RMSR and TMSR\n\n");
 50a:	80 e4       	ldi	r24, 0x40	; 64
 50c:	92 e0       	ldi	r25, 0x02	; 2
 50e:	0e 94 16 03 	call	0x62c	; 0x62c <puts>
	SPI_Write(RMSR,0x55);
 512:	65 e5       	ldi	r22, 0x55	; 85
 514:	8a e1       	ldi	r24, 0x1A	; 26
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <SPI_Write>
	SPI_Write(TMSR,0x55);
 51c:	65 e5       	ldi	r22, 0x55	; 85
 51e:	8b e1       	ldi	r24, 0x1B	; 27
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <SPI_Write>
	printf("Done Wiznet W5100 Initialized!\n");
 526:	8e e5       	ldi	r24, 0x5E	; 94
 528:	92 e0       	ldi	r25, 0x02	; 2
 52a:	0e 94 16 03 	call	0x62c	; 0x62c <puts>
 52e:	8d b7       	in	r24, 0x3d	; 61
 530:	9e b7       	in	r25, 0x3e	; 62
 532:	44 96       	adiw	r24, 0x14	; 20
 534:	0f b6       	in	r0, 0x3f	; 63
 536:	f8 94       	cli
 538:	9e bf       	out	0x3e, r25	; 62
 53a:	0f be       	out	0x3f, r0	; 63
 53c:	8d bf       	out	0x3d, r24	; 61
}
 53e:	df 91       	pop	r29
 540:	cf 91       	pop	r28
 542:	1f 91       	pop	r17
 544:	0f 91       	pop	r16
 546:	ff 90       	pop	r15
 548:	08 95       	ret

0000054a <Ethernet_Init>:
FILE uart_str = FDEV_SETUP_STREAM(uart_putch, uart_getch, _FDEV_SETUP_RW);

void Ethernet_Init()
{
		// Set the PORTD as Output:
		DDRD=0xFF;
 54a:	8f ef       	ldi	r24, 0xFF	; 255
 54c:	8a b9       	out	0x0a, r24	; 10
		PORTD=0x00;
 54e:	1b b8       	out	0x0b, r1	; 11
		// Define Output/Input Stream
		stdout = stdin = &uart_str;
 550:	80 e0       	ldi	r24, 0x00	; 0
 552:	91 e0       	ldi	r25, 0x01	; 1
 554:	90 93 91 02 	sts	0x0291, r25
 558:	80 93 90 02 	sts	0x0290, r24
 55c:	90 93 93 02 	sts	0x0293, r25
 560:	80 93 92 02 	sts	0x0292, r24
		// Initial UART Peripheral
		uart_init();
 564:	0e 94 7f 00 	call	0xfe	; 0xfe <uart_init>
		// Clear Screen
		ansi_me();
 568:	0e 94 c3 00 	call	0x186	; 0x186 <ansi_me>
		ansi_cl();
 56c:	0e 94 98 00 	call	0x130	; 0x130 <ansi_cl>
		ansi_me();
 570:	0e 94 c3 00 	call	0x186	; 0x186 <ansi_me>
		ansi_cl();
 574:	0e 94 98 00 	call	0x130	; 0x130 <ansi_cl>
		uart_flush();
 578:	0e 94 8b 00 	call	0x116	; 0x116 <uart_flush>
		// Initial the AVR ATMega168/328 SPI Peripheral
		// Set MOSI (PORTB3),SCK (PORTB5) and PORTB2 (SS) as output, others as input
		SPI_DDR = (1<<PORTB3)|(1<<PORTB5)|(1<<PORTB2);
 57c:	8c e2       	ldi	r24, 0x2C	; 44
 57e:	84 b9       	out	0x04, r24	; 4
		// CS pin is not active
		SPI_PORT |= (1<<SPI_CS);
 580:	2a 9a       	sbi	0x05, 2	; 5
		// Enable SPI, Master Mode 0, set the clock rate fck/2
		SPCR0 = (1<<SPE0)|(1<<MSTR0);
 582:	80 e5       	ldi	r24, 0x50	; 80
 584:	8c bd       	out	0x2c, r24	; 44
		SPSR0 |= (1<<SPI2X0);
 586:	8d b5       	in	r24, 0x2d	; 45
 588:	81 60       	ori	r24, 0x01	; 1
 58a:	8d bd       	out	0x2d, r24	; 45
		// Initial the Wiznet W5100
		printf("Wiznet W5100 Init\n\n");
 58c:	8d e7       	ldi	r24, 0x7D	; 125
 58e:	92 e0       	ldi	r25, 0x02	; 2
 590:	0e 94 16 03 	call	0x62c	; 0x62c <puts>
		W5100_Init();
 594:	0e 94 0b 01 	call	0x216	; 0x216 <W5100_Init>
 598:	08 95       	ret

0000059a <main>:
#include <avr/io.h>
#include <stdio.h>
#include "EthernetLibrary.h"

int main(void){
	Ethernet_Init(); 
 59a:	0e 94 a5 02 	call	0x54a	; 0x54a <Ethernet_Init>
 59e:	ff cf       	rjmp	.-2      	; 0x59e <main+0x4>

000005a0 <fputc>:
 5a0:	0f 93       	push	r16
 5a2:	1f 93       	push	r17
 5a4:	cf 93       	push	r28
 5a6:	df 93       	push	r29
 5a8:	18 2f       	mov	r17, r24
 5aa:	09 2f       	mov	r16, r25
 5ac:	eb 01       	movw	r28, r22
 5ae:	8b 81       	ldd	r24, Y+3	; 0x03
 5b0:	81 fd       	sbrc	r24, 1
 5b2:	03 c0       	rjmp	.+6      	; 0x5ba <fputc+0x1a>
 5b4:	8f ef       	ldi	r24, 0xFF	; 255
 5b6:	9f ef       	ldi	r25, 0xFF	; 255
 5b8:	20 c0       	rjmp	.+64     	; 0x5fa <fputc+0x5a>
 5ba:	82 ff       	sbrs	r24, 2
 5bc:	10 c0       	rjmp	.+32     	; 0x5de <fputc+0x3e>
 5be:	4e 81       	ldd	r20, Y+6	; 0x06
 5c0:	5f 81       	ldd	r21, Y+7	; 0x07
 5c2:	2c 81       	ldd	r18, Y+4	; 0x04
 5c4:	3d 81       	ldd	r19, Y+5	; 0x05
 5c6:	42 17       	cp	r20, r18
 5c8:	53 07       	cpc	r21, r19
 5ca:	7c f4       	brge	.+30     	; 0x5ea <fputc+0x4a>
 5cc:	e8 81       	ld	r30, Y
 5ce:	f9 81       	ldd	r31, Y+1	; 0x01
 5d0:	9f 01       	movw	r18, r30
 5d2:	2f 5f       	subi	r18, 0xFF	; 255
 5d4:	3f 4f       	sbci	r19, 0xFF	; 255
 5d6:	39 83       	std	Y+1, r19	; 0x01
 5d8:	28 83       	st	Y, r18
 5da:	10 83       	st	Z, r17
 5dc:	06 c0       	rjmp	.+12     	; 0x5ea <fputc+0x4a>
 5de:	e8 85       	ldd	r30, Y+8	; 0x08
 5e0:	f9 85       	ldd	r31, Y+9	; 0x09
 5e2:	81 2f       	mov	r24, r17
 5e4:	09 95       	icall
 5e6:	89 2b       	or	r24, r25
 5e8:	29 f7       	brne	.-54     	; 0x5b4 <fputc+0x14>
 5ea:	2e 81       	ldd	r18, Y+6	; 0x06
 5ec:	3f 81       	ldd	r19, Y+7	; 0x07
 5ee:	2f 5f       	subi	r18, 0xFF	; 255
 5f0:	3f 4f       	sbci	r19, 0xFF	; 255
 5f2:	3f 83       	std	Y+7, r19	; 0x07
 5f4:	2e 83       	std	Y+6, r18	; 0x06
 5f6:	81 2f       	mov	r24, r17
 5f8:	90 2f       	mov	r25, r16
 5fa:	df 91       	pop	r29
 5fc:	cf 91       	pop	r28
 5fe:	1f 91       	pop	r17
 600:	0f 91       	pop	r16
 602:	08 95       	ret

00000604 <printf>:
 604:	a0 e0       	ldi	r26, 0x00	; 0
 606:	b0 e0       	ldi	r27, 0x00	; 0
 608:	e8 e0       	ldi	r30, 0x08	; 8
 60a:	f3 e0       	ldi	r31, 0x03	; 3
 60c:	0c 94 99 05 	jmp	0xb32	; 0xb32 <__prologue_saves__+0x20>
 610:	fe 01       	movw	r30, r28
 612:	35 96       	adiw	r30, 0x05	; 5
 614:	61 91       	ld	r22, Z+
 616:	71 91       	ld	r23, Z+
 618:	af 01       	movw	r20, r30
 61a:	80 91 92 02 	lds	r24, 0x0292
 61e:	90 91 93 02 	lds	r25, 0x0293
 622:	0e 94 43 03 	call	0x686	; 0x686 <vfprintf>
 626:	e2 e0       	ldi	r30, 0x02	; 2
 628:	0c 94 b5 05 	jmp	0xb6a	; 0xb6a <__epilogue_restores__+0x20>

0000062c <puts>:
 62c:	0f 93       	push	r16
 62e:	1f 93       	push	r17
 630:	cf 93       	push	r28
 632:	df 93       	push	r29
 634:	e0 91 92 02 	lds	r30, 0x0292
 638:	f0 91 93 02 	lds	r31, 0x0293
 63c:	23 81       	ldd	r18, Z+3	; 0x03
 63e:	21 ff       	sbrs	r18, 1
 640:	1b c0       	rjmp	.+54     	; 0x678 <puts+0x4c>
 642:	ec 01       	movw	r28, r24
 644:	00 e0       	ldi	r16, 0x00	; 0
 646:	10 e0       	ldi	r17, 0x00	; 0
 648:	89 91       	ld	r24, Y+
 64a:	60 91 92 02 	lds	r22, 0x0292
 64e:	70 91 93 02 	lds	r23, 0x0293
 652:	db 01       	movw	r26, r22
 654:	18 96       	adiw	r26, 0x08	; 8
 656:	ed 91       	ld	r30, X+
 658:	fc 91       	ld	r31, X
 65a:	19 97       	sbiw	r26, 0x09	; 9
 65c:	88 23       	and	r24, r24
 65e:	31 f0       	breq	.+12     	; 0x66c <puts+0x40>
 660:	09 95       	icall
 662:	89 2b       	or	r24, r25
 664:	89 f3       	breq	.-30     	; 0x648 <puts+0x1c>
 666:	0f ef       	ldi	r16, 0xFF	; 255
 668:	1f ef       	ldi	r17, 0xFF	; 255
 66a:	ee cf       	rjmp	.-36     	; 0x648 <puts+0x1c>
 66c:	8a e0       	ldi	r24, 0x0A	; 10
 66e:	09 95       	icall
 670:	89 2b       	or	r24, r25
 672:	11 f4       	brne	.+4      	; 0x678 <puts+0x4c>
 674:	c8 01       	movw	r24, r16
 676:	02 c0       	rjmp	.+4      	; 0x67c <puts+0x50>
 678:	8f ef       	ldi	r24, 0xFF	; 255
 67a:	9f ef       	ldi	r25, 0xFF	; 255
 67c:	df 91       	pop	r29
 67e:	cf 91       	pop	r28
 680:	1f 91       	pop	r17
 682:	0f 91       	pop	r16
 684:	08 95       	ret

00000686 <vfprintf>:
 686:	ac e0       	ldi	r26, 0x0C	; 12
 688:	b0 e0       	ldi	r27, 0x00	; 0
 68a:	e9 e4       	ldi	r30, 0x49	; 73
 68c:	f3 e0       	ldi	r31, 0x03	; 3
 68e:	0c 94 89 05 	jmp	0xb12	; 0xb12 <__prologue_saves__>
 692:	7c 01       	movw	r14, r24
 694:	6b 01       	movw	r12, r22
 696:	8a 01       	movw	r16, r20
 698:	fc 01       	movw	r30, r24
 69a:	17 82       	std	Z+7, r1	; 0x07
 69c:	16 82       	std	Z+6, r1	; 0x06
 69e:	83 81       	ldd	r24, Z+3	; 0x03
 6a0:	81 ff       	sbrs	r24, 1
 6a2:	bd c1       	rjmp	.+890    	; 0xa1e <__stack+0x11f>
 6a4:	ce 01       	movw	r24, r28
 6a6:	01 96       	adiw	r24, 0x01	; 1
 6a8:	4c 01       	movw	r8, r24
 6aa:	f7 01       	movw	r30, r14
 6ac:	93 81       	ldd	r25, Z+3	; 0x03
 6ae:	f6 01       	movw	r30, r12
 6b0:	93 fd       	sbrc	r25, 3
 6b2:	85 91       	lpm	r24, Z+
 6b4:	93 ff       	sbrs	r25, 3
 6b6:	81 91       	ld	r24, Z+
 6b8:	6f 01       	movw	r12, r30
 6ba:	88 23       	and	r24, r24
 6bc:	09 f4       	brne	.+2      	; 0x6c0 <vfprintf+0x3a>
 6be:	ab c1       	rjmp	.+854    	; 0xa16 <__stack+0x117>
 6c0:	85 32       	cpi	r24, 0x25	; 37
 6c2:	39 f4       	brne	.+14     	; 0x6d2 <vfprintf+0x4c>
 6c4:	93 fd       	sbrc	r25, 3
 6c6:	85 91       	lpm	r24, Z+
 6c8:	93 ff       	sbrs	r25, 3
 6ca:	81 91       	ld	r24, Z+
 6cc:	6f 01       	movw	r12, r30
 6ce:	85 32       	cpi	r24, 0x25	; 37
 6d0:	29 f4       	brne	.+10     	; 0x6dc <vfprintf+0x56>
 6d2:	b7 01       	movw	r22, r14
 6d4:	90 e0       	ldi	r25, 0x00	; 0
 6d6:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <fputc>
 6da:	e7 cf       	rjmp	.-50     	; 0x6aa <vfprintf+0x24>
 6dc:	51 2c       	mov	r5, r1
 6de:	31 2c       	mov	r3, r1
 6e0:	20 e0       	ldi	r18, 0x00	; 0
 6e2:	20 32       	cpi	r18, 0x20	; 32
 6e4:	a0 f4       	brcc	.+40     	; 0x70e <vfprintf+0x88>
 6e6:	8b 32       	cpi	r24, 0x2B	; 43
 6e8:	69 f0       	breq	.+26     	; 0x704 <vfprintf+0x7e>
 6ea:	30 f4       	brcc	.+12     	; 0x6f8 <vfprintf+0x72>
 6ec:	80 32       	cpi	r24, 0x20	; 32
 6ee:	59 f0       	breq	.+22     	; 0x706 <vfprintf+0x80>
 6f0:	83 32       	cpi	r24, 0x23	; 35
 6f2:	69 f4       	brne	.+26     	; 0x70e <vfprintf+0x88>
 6f4:	20 61       	ori	r18, 0x10	; 16
 6f6:	2c c0       	rjmp	.+88     	; 0x750 <vfprintf+0xca>
 6f8:	8d 32       	cpi	r24, 0x2D	; 45
 6fa:	39 f0       	breq	.+14     	; 0x70a <vfprintf+0x84>
 6fc:	80 33       	cpi	r24, 0x30	; 48
 6fe:	39 f4       	brne	.+14     	; 0x70e <vfprintf+0x88>
 700:	21 60       	ori	r18, 0x01	; 1
 702:	26 c0       	rjmp	.+76     	; 0x750 <vfprintf+0xca>
 704:	22 60       	ori	r18, 0x02	; 2
 706:	24 60       	ori	r18, 0x04	; 4
 708:	23 c0       	rjmp	.+70     	; 0x750 <vfprintf+0xca>
 70a:	28 60       	ori	r18, 0x08	; 8
 70c:	21 c0       	rjmp	.+66     	; 0x750 <vfprintf+0xca>
 70e:	27 fd       	sbrc	r18, 7
 710:	27 c0       	rjmp	.+78     	; 0x760 <vfprintf+0xda>
 712:	30 ed       	ldi	r19, 0xD0	; 208
 714:	38 0f       	add	r19, r24
 716:	3a 30       	cpi	r19, 0x0A	; 10
 718:	78 f4       	brcc	.+30     	; 0x738 <vfprintf+0xb2>
 71a:	26 ff       	sbrs	r18, 6
 71c:	06 c0       	rjmp	.+12     	; 0x72a <vfprintf+0xa4>
 71e:	fa e0       	ldi	r31, 0x0A	; 10
 720:	5f 9e       	mul	r5, r31
 722:	30 0d       	add	r19, r0
 724:	11 24       	eor	r1, r1
 726:	53 2e       	mov	r5, r19
 728:	13 c0       	rjmp	.+38     	; 0x750 <vfprintf+0xca>
 72a:	8a e0       	ldi	r24, 0x0A	; 10
 72c:	38 9e       	mul	r3, r24
 72e:	30 0d       	add	r19, r0
 730:	11 24       	eor	r1, r1
 732:	33 2e       	mov	r3, r19
 734:	20 62       	ori	r18, 0x20	; 32
 736:	0c c0       	rjmp	.+24     	; 0x750 <vfprintf+0xca>
 738:	8e 32       	cpi	r24, 0x2E	; 46
 73a:	21 f4       	brne	.+8      	; 0x744 <vfprintf+0xbe>
 73c:	26 fd       	sbrc	r18, 6
 73e:	6b c1       	rjmp	.+726    	; 0xa16 <__stack+0x117>
 740:	20 64       	ori	r18, 0x40	; 64
 742:	06 c0       	rjmp	.+12     	; 0x750 <vfprintf+0xca>
 744:	8c 36       	cpi	r24, 0x6C	; 108
 746:	11 f4       	brne	.+4      	; 0x74c <vfprintf+0xc6>
 748:	20 68       	ori	r18, 0x80	; 128
 74a:	02 c0       	rjmp	.+4      	; 0x750 <vfprintf+0xca>
 74c:	88 36       	cpi	r24, 0x68	; 104
 74e:	41 f4       	brne	.+16     	; 0x760 <vfprintf+0xda>
 750:	f6 01       	movw	r30, r12
 752:	93 fd       	sbrc	r25, 3
 754:	85 91       	lpm	r24, Z+
 756:	93 ff       	sbrs	r25, 3
 758:	81 91       	ld	r24, Z+
 75a:	6f 01       	movw	r12, r30
 75c:	81 11       	cpse	r24, r1
 75e:	c1 cf       	rjmp	.-126    	; 0x6e2 <vfprintf+0x5c>
 760:	98 2f       	mov	r25, r24
 762:	9f 7d       	andi	r25, 0xDF	; 223
 764:	95 54       	subi	r25, 0x45	; 69
 766:	93 30       	cpi	r25, 0x03	; 3
 768:	28 f4       	brcc	.+10     	; 0x774 <vfprintf+0xee>
 76a:	0c 5f       	subi	r16, 0xFC	; 252
 76c:	1f 4f       	sbci	r17, 0xFF	; 255
 76e:	ff e3       	ldi	r31, 0x3F	; 63
 770:	f9 83       	std	Y+1, r31	; 0x01
 772:	0d c0       	rjmp	.+26     	; 0x78e <vfprintf+0x108>
 774:	83 36       	cpi	r24, 0x63	; 99
 776:	31 f0       	breq	.+12     	; 0x784 <vfprintf+0xfe>
 778:	83 37       	cpi	r24, 0x73	; 115
 77a:	71 f0       	breq	.+28     	; 0x798 <vfprintf+0x112>
 77c:	83 35       	cpi	r24, 0x53	; 83
 77e:	09 f0       	breq	.+2      	; 0x782 <vfprintf+0xfc>
 780:	5b c0       	rjmp	.+182    	; 0x838 <vfprintf+0x1b2>
 782:	22 c0       	rjmp	.+68     	; 0x7c8 <vfprintf+0x142>
 784:	f8 01       	movw	r30, r16
 786:	80 81       	ld	r24, Z
 788:	89 83       	std	Y+1, r24	; 0x01
 78a:	0e 5f       	subi	r16, 0xFE	; 254
 78c:	1f 4f       	sbci	r17, 0xFF	; 255
 78e:	44 24       	eor	r4, r4
 790:	43 94       	inc	r4
 792:	51 2c       	mov	r5, r1
 794:	54 01       	movw	r10, r8
 796:	15 c0       	rjmp	.+42     	; 0x7c2 <vfprintf+0x13c>
 798:	38 01       	movw	r6, r16
 79a:	f2 e0       	ldi	r31, 0x02	; 2
 79c:	6f 0e       	add	r6, r31
 79e:	71 1c       	adc	r7, r1
 7a0:	f8 01       	movw	r30, r16
 7a2:	a0 80       	ld	r10, Z
 7a4:	b1 80       	ldd	r11, Z+1	; 0x01
 7a6:	26 ff       	sbrs	r18, 6
 7a8:	03 c0       	rjmp	.+6      	; 0x7b0 <vfprintf+0x12a>
 7aa:	65 2d       	mov	r22, r5
 7ac:	70 e0       	ldi	r23, 0x00	; 0
 7ae:	02 c0       	rjmp	.+4      	; 0x7b4 <vfprintf+0x12e>
 7b0:	6f ef       	ldi	r22, 0xFF	; 255
 7b2:	7f ef       	ldi	r23, 0xFF	; 255
 7b4:	c5 01       	movw	r24, r10
 7b6:	2c 87       	std	Y+12, r18	; 0x0c
 7b8:	0e 94 20 05 	call	0xa40	; 0xa40 <strnlen>
 7bc:	2c 01       	movw	r4, r24
 7be:	83 01       	movw	r16, r6
 7c0:	2c 85       	ldd	r18, Y+12	; 0x0c
 7c2:	2f 77       	andi	r18, 0x7F	; 127
 7c4:	22 2e       	mov	r2, r18
 7c6:	17 c0       	rjmp	.+46     	; 0x7f6 <vfprintf+0x170>
 7c8:	38 01       	movw	r6, r16
 7ca:	f2 e0       	ldi	r31, 0x02	; 2
 7cc:	6f 0e       	add	r6, r31
 7ce:	71 1c       	adc	r7, r1
 7d0:	f8 01       	movw	r30, r16
 7d2:	a0 80       	ld	r10, Z
 7d4:	b1 80       	ldd	r11, Z+1	; 0x01
 7d6:	26 ff       	sbrs	r18, 6
 7d8:	03 c0       	rjmp	.+6      	; 0x7e0 <vfprintf+0x15a>
 7da:	65 2d       	mov	r22, r5
 7dc:	70 e0       	ldi	r23, 0x00	; 0
 7de:	02 c0       	rjmp	.+4      	; 0x7e4 <vfprintf+0x15e>
 7e0:	6f ef       	ldi	r22, 0xFF	; 255
 7e2:	7f ef       	ldi	r23, 0xFF	; 255
 7e4:	c5 01       	movw	r24, r10
 7e6:	2c 87       	std	Y+12, r18	; 0x0c
 7e8:	0e 94 15 05 	call	0xa2a	; 0xa2a <strnlen_P>
 7ec:	2c 01       	movw	r4, r24
 7ee:	2c 85       	ldd	r18, Y+12	; 0x0c
 7f0:	20 68       	ori	r18, 0x80	; 128
 7f2:	22 2e       	mov	r2, r18
 7f4:	83 01       	movw	r16, r6
 7f6:	23 fc       	sbrc	r2, 3
 7f8:	1b c0       	rjmp	.+54     	; 0x830 <vfprintf+0x1aa>
 7fa:	83 2d       	mov	r24, r3
 7fc:	90 e0       	ldi	r25, 0x00	; 0
 7fe:	48 16       	cp	r4, r24
 800:	59 06       	cpc	r5, r25
 802:	b0 f4       	brcc	.+44     	; 0x830 <vfprintf+0x1aa>
 804:	b7 01       	movw	r22, r14
 806:	80 e2       	ldi	r24, 0x20	; 32
 808:	90 e0       	ldi	r25, 0x00	; 0
 80a:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <fputc>
 80e:	3a 94       	dec	r3
 810:	f4 cf       	rjmp	.-24     	; 0x7fa <vfprintf+0x174>
 812:	f5 01       	movw	r30, r10
 814:	27 fc       	sbrc	r2, 7
 816:	85 91       	lpm	r24, Z+
 818:	27 fe       	sbrs	r2, 7
 81a:	81 91       	ld	r24, Z+
 81c:	5f 01       	movw	r10, r30
 81e:	b7 01       	movw	r22, r14
 820:	90 e0       	ldi	r25, 0x00	; 0
 822:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <fputc>
 826:	31 10       	cpse	r3, r1
 828:	3a 94       	dec	r3
 82a:	f1 e0       	ldi	r31, 0x01	; 1
 82c:	4f 1a       	sub	r4, r31
 82e:	51 08       	sbc	r5, r1
 830:	41 14       	cp	r4, r1
 832:	51 04       	cpc	r5, r1
 834:	71 f7       	brne	.-36     	; 0x812 <vfprintf+0x18c>
 836:	e5 c0       	rjmp	.+458    	; 0xa02 <__stack+0x103>
 838:	84 36       	cpi	r24, 0x64	; 100
 83a:	11 f0       	breq	.+4      	; 0x840 <vfprintf+0x1ba>
 83c:	89 36       	cpi	r24, 0x69	; 105
 83e:	39 f5       	brne	.+78     	; 0x88e <vfprintf+0x208>
 840:	f8 01       	movw	r30, r16
 842:	27 ff       	sbrs	r18, 7
 844:	07 c0       	rjmp	.+14     	; 0x854 <vfprintf+0x1ce>
 846:	60 81       	ld	r22, Z
 848:	71 81       	ldd	r23, Z+1	; 0x01
 84a:	82 81       	ldd	r24, Z+2	; 0x02
 84c:	93 81       	ldd	r25, Z+3	; 0x03
 84e:	0c 5f       	subi	r16, 0xFC	; 252
 850:	1f 4f       	sbci	r17, 0xFF	; 255
 852:	08 c0       	rjmp	.+16     	; 0x864 <vfprintf+0x1de>
 854:	60 81       	ld	r22, Z
 856:	71 81       	ldd	r23, Z+1	; 0x01
 858:	88 27       	eor	r24, r24
 85a:	77 fd       	sbrc	r23, 7
 85c:	80 95       	com	r24
 85e:	98 2f       	mov	r25, r24
 860:	0e 5f       	subi	r16, 0xFE	; 254
 862:	1f 4f       	sbci	r17, 0xFF	; 255
 864:	2f 76       	andi	r18, 0x6F	; 111
 866:	b2 2e       	mov	r11, r18
 868:	97 ff       	sbrs	r25, 7
 86a:	09 c0       	rjmp	.+18     	; 0x87e <vfprintf+0x1f8>
 86c:	90 95       	com	r25
 86e:	80 95       	com	r24
 870:	70 95       	com	r23
 872:	61 95       	neg	r22
 874:	7f 4f       	sbci	r23, 0xFF	; 255
 876:	8f 4f       	sbci	r24, 0xFF	; 255
 878:	9f 4f       	sbci	r25, 0xFF	; 255
 87a:	20 68       	ori	r18, 0x80	; 128
 87c:	b2 2e       	mov	r11, r18
 87e:	2a e0       	ldi	r18, 0x0A	; 10
 880:	30 e0       	ldi	r19, 0x00	; 0
 882:	a4 01       	movw	r20, r8
 884:	0e 94 2b 05 	call	0xa56	; 0xa56 <__ultoa_invert>
 888:	a8 2e       	mov	r10, r24
 88a:	a8 18       	sub	r10, r8
 88c:	44 c0       	rjmp	.+136    	; 0x916 <__stack+0x17>
 88e:	85 37       	cpi	r24, 0x75	; 117
 890:	29 f4       	brne	.+10     	; 0x89c <vfprintf+0x216>
 892:	2f 7e       	andi	r18, 0xEF	; 239
 894:	b2 2e       	mov	r11, r18
 896:	2a e0       	ldi	r18, 0x0A	; 10
 898:	30 e0       	ldi	r19, 0x00	; 0
 89a:	25 c0       	rjmp	.+74     	; 0x8e6 <vfprintf+0x260>
 89c:	f2 2f       	mov	r31, r18
 89e:	f9 7f       	andi	r31, 0xF9	; 249
 8a0:	bf 2e       	mov	r11, r31
 8a2:	8f 36       	cpi	r24, 0x6F	; 111
 8a4:	c1 f0       	breq	.+48     	; 0x8d6 <vfprintf+0x250>
 8a6:	18 f4       	brcc	.+6      	; 0x8ae <vfprintf+0x228>
 8a8:	88 35       	cpi	r24, 0x58	; 88
 8aa:	79 f0       	breq	.+30     	; 0x8ca <vfprintf+0x244>
 8ac:	b4 c0       	rjmp	.+360    	; 0xa16 <__stack+0x117>
 8ae:	80 37       	cpi	r24, 0x70	; 112
 8b0:	19 f0       	breq	.+6      	; 0x8b8 <vfprintf+0x232>
 8b2:	88 37       	cpi	r24, 0x78	; 120
 8b4:	21 f0       	breq	.+8      	; 0x8be <vfprintf+0x238>
 8b6:	af c0       	rjmp	.+350    	; 0xa16 <__stack+0x117>
 8b8:	2f 2f       	mov	r18, r31
 8ba:	20 61       	ori	r18, 0x10	; 16
 8bc:	b2 2e       	mov	r11, r18
 8be:	b4 fe       	sbrs	r11, 4
 8c0:	0d c0       	rjmp	.+26     	; 0x8dc <vfprintf+0x256>
 8c2:	8b 2d       	mov	r24, r11
 8c4:	84 60       	ori	r24, 0x04	; 4
 8c6:	b8 2e       	mov	r11, r24
 8c8:	09 c0       	rjmp	.+18     	; 0x8dc <vfprintf+0x256>
 8ca:	24 ff       	sbrs	r18, 4
 8cc:	0a c0       	rjmp	.+20     	; 0x8e2 <vfprintf+0x25c>
 8ce:	9f 2f       	mov	r25, r31
 8d0:	96 60       	ori	r25, 0x06	; 6
 8d2:	b9 2e       	mov	r11, r25
 8d4:	06 c0       	rjmp	.+12     	; 0x8e2 <vfprintf+0x25c>
 8d6:	28 e0       	ldi	r18, 0x08	; 8
 8d8:	30 e0       	ldi	r19, 0x00	; 0
 8da:	05 c0       	rjmp	.+10     	; 0x8e6 <vfprintf+0x260>
 8dc:	20 e1       	ldi	r18, 0x10	; 16
 8de:	30 e0       	ldi	r19, 0x00	; 0
 8e0:	02 c0       	rjmp	.+4      	; 0x8e6 <vfprintf+0x260>
 8e2:	20 e1       	ldi	r18, 0x10	; 16
 8e4:	32 e0       	ldi	r19, 0x02	; 2
 8e6:	f8 01       	movw	r30, r16
 8e8:	b7 fe       	sbrs	r11, 7
 8ea:	07 c0       	rjmp	.+14     	; 0x8fa <vfprintf+0x274>
 8ec:	60 81       	ld	r22, Z
 8ee:	71 81       	ldd	r23, Z+1	; 0x01
 8f0:	82 81       	ldd	r24, Z+2	; 0x02
 8f2:	93 81       	ldd	r25, Z+3	; 0x03
 8f4:	0c 5f       	subi	r16, 0xFC	; 252
 8f6:	1f 4f       	sbci	r17, 0xFF	; 255
 8f8:	06 c0       	rjmp	.+12     	; 0x906 <__stack+0x7>
 8fa:	60 81       	ld	r22, Z
 8fc:	71 81       	ldd	r23, Z+1	; 0x01
 8fe:	80 e0       	ldi	r24, 0x00	; 0
 900:	90 e0       	ldi	r25, 0x00	; 0
 902:	0e 5f       	subi	r16, 0xFE	; 254
 904:	1f 4f       	sbci	r17, 0xFF	; 255
 906:	a4 01       	movw	r20, r8
 908:	0e 94 2b 05 	call	0xa56	; 0xa56 <__ultoa_invert>
 90c:	a8 2e       	mov	r10, r24
 90e:	a8 18       	sub	r10, r8
 910:	fb 2d       	mov	r31, r11
 912:	ff 77       	andi	r31, 0x7F	; 127
 914:	bf 2e       	mov	r11, r31
 916:	b6 fe       	sbrs	r11, 6
 918:	0b c0       	rjmp	.+22     	; 0x930 <__stack+0x31>
 91a:	2b 2d       	mov	r18, r11
 91c:	2e 7f       	andi	r18, 0xFE	; 254
 91e:	a5 14       	cp	r10, r5
 920:	50 f4       	brcc	.+20     	; 0x936 <__stack+0x37>
 922:	b4 fe       	sbrs	r11, 4
 924:	0a c0       	rjmp	.+20     	; 0x93a <__stack+0x3b>
 926:	b2 fc       	sbrc	r11, 2
 928:	08 c0       	rjmp	.+16     	; 0x93a <__stack+0x3b>
 92a:	2b 2d       	mov	r18, r11
 92c:	2e 7e       	andi	r18, 0xEE	; 238
 92e:	05 c0       	rjmp	.+10     	; 0x93a <__stack+0x3b>
 930:	7a 2c       	mov	r7, r10
 932:	2b 2d       	mov	r18, r11
 934:	03 c0       	rjmp	.+6      	; 0x93c <__stack+0x3d>
 936:	7a 2c       	mov	r7, r10
 938:	01 c0       	rjmp	.+2      	; 0x93c <__stack+0x3d>
 93a:	75 2c       	mov	r7, r5
 93c:	24 ff       	sbrs	r18, 4
 93e:	0d c0       	rjmp	.+26     	; 0x95a <__stack+0x5b>
 940:	fe 01       	movw	r30, r28
 942:	ea 0d       	add	r30, r10
 944:	f1 1d       	adc	r31, r1
 946:	80 81       	ld	r24, Z
 948:	80 33       	cpi	r24, 0x30	; 48
 94a:	11 f4       	brne	.+4      	; 0x950 <__stack+0x51>
 94c:	29 7e       	andi	r18, 0xE9	; 233
 94e:	09 c0       	rjmp	.+18     	; 0x962 <__stack+0x63>
 950:	22 ff       	sbrs	r18, 2
 952:	06 c0       	rjmp	.+12     	; 0x960 <__stack+0x61>
 954:	73 94       	inc	r7
 956:	73 94       	inc	r7
 958:	04 c0       	rjmp	.+8      	; 0x962 <__stack+0x63>
 95a:	82 2f       	mov	r24, r18
 95c:	86 78       	andi	r24, 0x86	; 134
 95e:	09 f0       	breq	.+2      	; 0x962 <__stack+0x63>
 960:	73 94       	inc	r7
 962:	23 fd       	sbrc	r18, 3
 964:	13 c0       	rjmp	.+38     	; 0x98c <__stack+0x8d>
 966:	20 ff       	sbrs	r18, 0
 968:	06 c0       	rjmp	.+12     	; 0x976 <__stack+0x77>
 96a:	5a 2c       	mov	r5, r10
 96c:	73 14       	cp	r7, r3
 96e:	18 f4       	brcc	.+6      	; 0x976 <__stack+0x77>
 970:	53 0c       	add	r5, r3
 972:	57 18       	sub	r5, r7
 974:	73 2c       	mov	r7, r3
 976:	73 14       	cp	r7, r3
 978:	68 f4       	brcc	.+26     	; 0x994 <__stack+0x95>
 97a:	b7 01       	movw	r22, r14
 97c:	80 e2       	ldi	r24, 0x20	; 32
 97e:	90 e0       	ldi	r25, 0x00	; 0
 980:	2c 87       	std	Y+12, r18	; 0x0c
 982:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <fputc>
 986:	73 94       	inc	r7
 988:	2c 85       	ldd	r18, Y+12	; 0x0c
 98a:	f5 cf       	rjmp	.-22     	; 0x976 <__stack+0x77>
 98c:	73 14       	cp	r7, r3
 98e:	10 f4       	brcc	.+4      	; 0x994 <__stack+0x95>
 990:	37 18       	sub	r3, r7
 992:	01 c0       	rjmp	.+2      	; 0x996 <__stack+0x97>
 994:	31 2c       	mov	r3, r1
 996:	24 ff       	sbrs	r18, 4
 998:	12 c0       	rjmp	.+36     	; 0x9be <__stack+0xbf>
 99a:	b7 01       	movw	r22, r14
 99c:	80 e3       	ldi	r24, 0x30	; 48
 99e:	90 e0       	ldi	r25, 0x00	; 0
 9a0:	2c 87       	std	Y+12, r18	; 0x0c
 9a2:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <fputc>
 9a6:	2c 85       	ldd	r18, Y+12	; 0x0c
 9a8:	22 ff       	sbrs	r18, 2
 9aa:	17 c0       	rjmp	.+46     	; 0x9da <__stack+0xdb>
 9ac:	21 ff       	sbrs	r18, 1
 9ae:	03 c0       	rjmp	.+6      	; 0x9b6 <__stack+0xb7>
 9b0:	88 e5       	ldi	r24, 0x58	; 88
 9b2:	90 e0       	ldi	r25, 0x00	; 0
 9b4:	02 c0       	rjmp	.+4      	; 0x9ba <__stack+0xbb>
 9b6:	88 e7       	ldi	r24, 0x78	; 120
 9b8:	90 e0       	ldi	r25, 0x00	; 0
 9ba:	b7 01       	movw	r22, r14
 9bc:	0c c0       	rjmp	.+24     	; 0x9d6 <__stack+0xd7>
 9be:	82 2f       	mov	r24, r18
 9c0:	86 78       	andi	r24, 0x86	; 134
 9c2:	59 f0       	breq	.+22     	; 0x9da <__stack+0xdb>
 9c4:	21 fd       	sbrc	r18, 1
 9c6:	02 c0       	rjmp	.+4      	; 0x9cc <__stack+0xcd>
 9c8:	80 e2       	ldi	r24, 0x20	; 32
 9ca:	01 c0       	rjmp	.+2      	; 0x9ce <__stack+0xcf>
 9cc:	8b e2       	ldi	r24, 0x2B	; 43
 9ce:	27 fd       	sbrc	r18, 7
 9d0:	8d e2       	ldi	r24, 0x2D	; 45
 9d2:	b7 01       	movw	r22, r14
 9d4:	90 e0       	ldi	r25, 0x00	; 0
 9d6:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <fputc>
 9da:	a5 14       	cp	r10, r5
 9dc:	38 f4       	brcc	.+14     	; 0x9ec <__stack+0xed>
 9de:	b7 01       	movw	r22, r14
 9e0:	80 e3       	ldi	r24, 0x30	; 48
 9e2:	90 e0       	ldi	r25, 0x00	; 0
 9e4:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <fputc>
 9e8:	5a 94       	dec	r5
 9ea:	f7 cf       	rjmp	.-18     	; 0x9da <__stack+0xdb>
 9ec:	aa 94       	dec	r10
 9ee:	f4 01       	movw	r30, r8
 9f0:	ea 0d       	add	r30, r10
 9f2:	f1 1d       	adc	r31, r1
 9f4:	80 81       	ld	r24, Z
 9f6:	b7 01       	movw	r22, r14
 9f8:	90 e0       	ldi	r25, 0x00	; 0
 9fa:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <fputc>
 9fe:	a1 10       	cpse	r10, r1
 a00:	f5 cf       	rjmp	.-22     	; 0x9ec <__stack+0xed>
 a02:	33 20       	and	r3, r3
 a04:	09 f4       	brne	.+2      	; 0xa08 <__stack+0x109>
 a06:	51 ce       	rjmp	.-862    	; 0x6aa <vfprintf+0x24>
 a08:	b7 01       	movw	r22, r14
 a0a:	80 e2       	ldi	r24, 0x20	; 32
 a0c:	90 e0       	ldi	r25, 0x00	; 0
 a0e:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <fputc>
 a12:	3a 94       	dec	r3
 a14:	f6 cf       	rjmp	.-20     	; 0xa02 <__stack+0x103>
 a16:	f7 01       	movw	r30, r14
 a18:	86 81       	ldd	r24, Z+6	; 0x06
 a1a:	97 81       	ldd	r25, Z+7	; 0x07
 a1c:	02 c0       	rjmp	.+4      	; 0xa22 <__stack+0x123>
 a1e:	8f ef       	ldi	r24, 0xFF	; 255
 a20:	9f ef       	ldi	r25, 0xFF	; 255
 a22:	2c 96       	adiw	r28, 0x0c	; 12
 a24:	e2 e1       	ldi	r30, 0x12	; 18
 a26:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__epilogue_restores__>

00000a2a <strnlen_P>:
 a2a:	fc 01       	movw	r30, r24
 a2c:	05 90       	lpm	r0, Z+
 a2e:	61 50       	subi	r22, 0x01	; 1
 a30:	70 40       	sbci	r23, 0x00	; 0
 a32:	01 10       	cpse	r0, r1
 a34:	d8 f7       	brcc	.-10     	; 0xa2c <strnlen_P+0x2>
 a36:	80 95       	com	r24
 a38:	90 95       	com	r25
 a3a:	8e 0f       	add	r24, r30
 a3c:	9f 1f       	adc	r25, r31
 a3e:	08 95       	ret

00000a40 <strnlen>:
 a40:	fc 01       	movw	r30, r24
 a42:	61 50       	subi	r22, 0x01	; 1
 a44:	70 40       	sbci	r23, 0x00	; 0
 a46:	01 90       	ld	r0, Z+
 a48:	01 10       	cpse	r0, r1
 a4a:	d8 f7       	brcc	.-10     	; 0xa42 <strnlen+0x2>
 a4c:	80 95       	com	r24
 a4e:	90 95       	com	r25
 a50:	8e 0f       	add	r24, r30
 a52:	9f 1f       	adc	r25, r31
 a54:	08 95       	ret

00000a56 <__ultoa_invert>:
 a56:	fa 01       	movw	r30, r20
 a58:	aa 27       	eor	r26, r26
 a5a:	28 30       	cpi	r18, 0x08	; 8
 a5c:	51 f1       	breq	.+84     	; 0xab2 <__ultoa_invert+0x5c>
 a5e:	20 31       	cpi	r18, 0x10	; 16
 a60:	81 f1       	breq	.+96     	; 0xac2 <__ultoa_invert+0x6c>
 a62:	e8 94       	clt
 a64:	6f 93       	push	r22
 a66:	6e 7f       	andi	r22, 0xFE	; 254
 a68:	6e 5f       	subi	r22, 0xFE	; 254
 a6a:	7f 4f       	sbci	r23, 0xFF	; 255
 a6c:	8f 4f       	sbci	r24, 0xFF	; 255
 a6e:	9f 4f       	sbci	r25, 0xFF	; 255
 a70:	af 4f       	sbci	r26, 0xFF	; 255
 a72:	b1 e0       	ldi	r27, 0x01	; 1
 a74:	3e d0       	rcall	.+124    	; 0xaf2 <__ultoa_invert+0x9c>
 a76:	b4 e0       	ldi	r27, 0x04	; 4
 a78:	3c d0       	rcall	.+120    	; 0xaf2 <__ultoa_invert+0x9c>
 a7a:	67 0f       	add	r22, r23
 a7c:	78 1f       	adc	r23, r24
 a7e:	89 1f       	adc	r24, r25
 a80:	9a 1f       	adc	r25, r26
 a82:	a1 1d       	adc	r26, r1
 a84:	68 0f       	add	r22, r24
 a86:	79 1f       	adc	r23, r25
 a88:	8a 1f       	adc	r24, r26
 a8a:	91 1d       	adc	r25, r1
 a8c:	a1 1d       	adc	r26, r1
 a8e:	6a 0f       	add	r22, r26
 a90:	71 1d       	adc	r23, r1
 a92:	81 1d       	adc	r24, r1
 a94:	91 1d       	adc	r25, r1
 a96:	a1 1d       	adc	r26, r1
 a98:	20 d0       	rcall	.+64     	; 0xada <__ultoa_invert+0x84>
 a9a:	09 f4       	brne	.+2      	; 0xa9e <__ultoa_invert+0x48>
 a9c:	68 94       	set
 a9e:	3f 91       	pop	r19
 aa0:	2a e0       	ldi	r18, 0x0A	; 10
 aa2:	26 9f       	mul	r18, r22
 aa4:	11 24       	eor	r1, r1
 aa6:	30 19       	sub	r19, r0
 aa8:	30 5d       	subi	r19, 0xD0	; 208
 aaa:	31 93       	st	Z+, r19
 aac:	de f6       	brtc	.-74     	; 0xa64 <__ultoa_invert+0xe>
 aae:	cf 01       	movw	r24, r30
 ab0:	08 95       	ret
 ab2:	46 2f       	mov	r20, r22
 ab4:	47 70       	andi	r20, 0x07	; 7
 ab6:	40 5d       	subi	r20, 0xD0	; 208
 ab8:	41 93       	st	Z+, r20
 aba:	b3 e0       	ldi	r27, 0x03	; 3
 abc:	0f d0       	rcall	.+30     	; 0xadc <__ultoa_invert+0x86>
 abe:	c9 f7       	brne	.-14     	; 0xab2 <__ultoa_invert+0x5c>
 ac0:	f6 cf       	rjmp	.-20     	; 0xaae <__ultoa_invert+0x58>
 ac2:	46 2f       	mov	r20, r22
 ac4:	4f 70       	andi	r20, 0x0F	; 15
 ac6:	40 5d       	subi	r20, 0xD0	; 208
 ac8:	4a 33       	cpi	r20, 0x3A	; 58
 aca:	18 f0       	brcs	.+6      	; 0xad2 <__ultoa_invert+0x7c>
 acc:	49 5d       	subi	r20, 0xD9	; 217
 ace:	31 fd       	sbrc	r19, 1
 ad0:	40 52       	subi	r20, 0x20	; 32
 ad2:	41 93       	st	Z+, r20
 ad4:	02 d0       	rcall	.+4      	; 0xada <__ultoa_invert+0x84>
 ad6:	a9 f7       	brne	.-22     	; 0xac2 <__ultoa_invert+0x6c>
 ad8:	ea cf       	rjmp	.-44     	; 0xaae <__ultoa_invert+0x58>
 ada:	b4 e0       	ldi	r27, 0x04	; 4
 adc:	a6 95       	lsr	r26
 ade:	97 95       	ror	r25
 ae0:	87 95       	ror	r24
 ae2:	77 95       	ror	r23
 ae4:	67 95       	ror	r22
 ae6:	ba 95       	dec	r27
 ae8:	c9 f7       	brne	.-14     	; 0xadc <__ultoa_invert+0x86>
 aea:	00 97       	sbiw	r24, 0x00	; 0
 aec:	61 05       	cpc	r22, r1
 aee:	71 05       	cpc	r23, r1
 af0:	08 95       	ret
 af2:	9b 01       	movw	r18, r22
 af4:	ac 01       	movw	r20, r24
 af6:	0a 2e       	mov	r0, r26
 af8:	06 94       	lsr	r0
 afa:	57 95       	ror	r21
 afc:	47 95       	ror	r20
 afe:	37 95       	ror	r19
 b00:	27 95       	ror	r18
 b02:	ba 95       	dec	r27
 b04:	c9 f7       	brne	.-14     	; 0xaf8 <__ultoa_invert+0xa2>
 b06:	62 0f       	add	r22, r18
 b08:	73 1f       	adc	r23, r19
 b0a:	84 1f       	adc	r24, r20
 b0c:	95 1f       	adc	r25, r21
 b0e:	a0 1d       	adc	r26, r0
 b10:	08 95       	ret

00000b12 <__prologue_saves__>:
 b12:	2f 92       	push	r2
 b14:	3f 92       	push	r3
 b16:	4f 92       	push	r4
 b18:	5f 92       	push	r5
 b1a:	6f 92       	push	r6
 b1c:	7f 92       	push	r7
 b1e:	8f 92       	push	r8
 b20:	9f 92       	push	r9
 b22:	af 92       	push	r10
 b24:	bf 92       	push	r11
 b26:	cf 92       	push	r12
 b28:	df 92       	push	r13
 b2a:	ef 92       	push	r14
 b2c:	ff 92       	push	r15
 b2e:	0f 93       	push	r16
 b30:	1f 93       	push	r17
 b32:	cf 93       	push	r28
 b34:	df 93       	push	r29
 b36:	cd b7       	in	r28, 0x3d	; 61
 b38:	de b7       	in	r29, 0x3e	; 62
 b3a:	ca 1b       	sub	r28, r26
 b3c:	db 0b       	sbc	r29, r27
 b3e:	0f b6       	in	r0, 0x3f	; 63
 b40:	f8 94       	cli
 b42:	de bf       	out	0x3e, r29	; 62
 b44:	0f be       	out	0x3f, r0	; 63
 b46:	cd bf       	out	0x3d, r28	; 61
 b48:	09 94       	ijmp

00000b4a <__epilogue_restores__>:
 b4a:	2a 88       	ldd	r2, Y+18	; 0x12
 b4c:	39 88       	ldd	r3, Y+17	; 0x11
 b4e:	48 88       	ldd	r4, Y+16	; 0x10
 b50:	5f 84       	ldd	r5, Y+15	; 0x0f
 b52:	6e 84       	ldd	r6, Y+14	; 0x0e
 b54:	7d 84       	ldd	r7, Y+13	; 0x0d
 b56:	8c 84       	ldd	r8, Y+12	; 0x0c
 b58:	9b 84       	ldd	r9, Y+11	; 0x0b
 b5a:	aa 84       	ldd	r10, Y+10	; 0x0a
 b5c:	b9 84       	ldd	r11, Y+9	; 0x09
 b5e:	c8 84       	ldd	r12, Y+8	; 0x08
 b60:	df 80       	ldd	r13, Y+7	; 0x07
 b62:	ee 80       	ldd	r14, Y+6	; 0x06
 b64:	fd 80       	ldd	r15, Y+5	; 0x05
 b66:	0c 81       	ldd	r16, Y+4	; 0x04
 b68:	1b 81       	ldd	r17, Y+3	; 0x03
 b6a:	aa 81       	ldd	r26, Y+2	; 0x02
 b6c:	b9 81       	ldd	r27, Y+1	; 0x01
 b6e:	ce 0f       	add	r28, r30
 b70:	d1 1d       	adc	r29, r1
 b72:	0f b6       	in	r0, 0x3f	; 63
 b74:	f8 94       	cli
 b76:	de bf       	out	0x3e, r29	; 62
 b78:	0f be       	out	0x3f, r0	; 63
 b7a:	cd bf       	out	0x3d, r28	; 61
 b7c:	ed 01       	movw	r28, r26
 b7e:	08 95       	ret

00000b80 <_exit>:
 b80:	f8 94       	cli

00000b82 <__stop_program>:
 b82:	ff cf       	rjmp	.-2      	; 0xb82 <__stop_program>
